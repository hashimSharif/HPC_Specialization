runtime/doc/doxygen/generated/html/group__DEPRECATED.html:85:<tr class="memitem:ga27292e41af4c26e0bdf45b12b1f76d5a"><td class="memItemLeft" align="right" valign="top">kmp_int32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a">__kmpc_ok_to_fork</a> (<a class="el" href="group__BASIC__TYPES.html#ga690fda6b92f039a72db263c6b4394ddb">ident_t</a> *loc)</td></tr>
runtime/doc/doxygen/generated/html/group__DEPRECATED.html:96:          <td class="memname">kmp_int32 __kmpc_ok_to_fork </td>
runtime/doc/doxygen/generated/html/group__PARALLEL.html:7:<title>LLVM OpenMP* Runtime Library: Parallel (fork/join)</title>
runtime/doc/doxygen/generated/html/group__PARALLEL.html:80:<div class="title">Parallel (fork/join)</div>  </div>
runtime/doc/doxygen/generated/html/group__PARALLEL.html:93:<tr class="memitem:gac2b7cc2fa78dde5381bcf00cfc48d124"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PARALLEL.html#gac2b7cc2fa78dde5381bcf00cfc48d124">__kmpc_fork_call</a> (<a class="el" href="group__BASIC__TYPES.html#ga690fda6b92f039a72db263c6b4394ddb">ident_t</a> *loc, kmp_int32 argc, <a class="el" href="group__PARALLEL.html#gab49014fb4572e7d0f308fd9b1824daf7">kmpc_micro</a> microtask,...)</td></tr>
runtime/doc/doxygen/generated/html/group__PARALLEL.html:97:<tr class="memitem:ga1cab712d076ba1d2758b0c3bf5ffe38a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__PARALLEL.html#ga1cab712d076ba1d2758b0c3bf5ffe38a">__kmpc_fork_teams</a> (<a class="el" href="group__BASIC__TYPES.html#ga690fda6b92f039a72db263c6b4394ddb">ident_t</a> *loc, kmp_int32 argc, <a class="el" href="group__PARALLEL.html#gab49014fb4572e7d0f308fd9b1824daf7">kmpc_micro</a> microtask,...)</td></tr>
runtime/doc/doxygen/generated/html/group__PARALLEL.html:116:<p>The type for a microtask which gets passed to <a class="el" href="group__PARALLEL.html#gac2b7cc2fa78dde5381bcf00cfc48d124">__kmpc_fork_call()</a>. The arguments to the outlined function are </p>
runtime/doc/doxygen/generated/html/group__PARALLEL.html:172:          <td class="memname">void __kmpc_fork_call </td>
runtime/doc/doxygen/generated/html/group__PARALLEL.html:211:<p>Do the actual fork and call the microtask in the relevant number of threads. </p>
runtime/doc/doxygen/generated/html/group__PARALLEL.html:222:          <td class="memname">void __kmpc_fork_teams </td>
runtime/doc/doxygen/generated/html/group__PARALLEL.html:261:<p>Do the actual fork and call the microtask in the relevant number of threads. </p>
runtime/doc/doxygen/generated/html/group__PARALLEL.html:354:<p>Set the number of threads to be used by the next fork spawned by this thread. This call is only required if the parallel construct has a <code>num_threads</code> clause. </p>
runtime/doc/doxygen/generated/html/group__STATS__GATHERING.html:163:<p>Referenced by <a class="el" href="kmp__csupport_8c_source.html#l00697">__kmpc_barrier()</a>, <a class="el" href="kmp__csupport_8c_source.html#l01111">__kmpc_critical()</a>, <a class="el" href="kmp__csupport_8c_source.html#l00281">__kmpc_fork_call()</a>, <a class="el" href="kmp__csupport_8c_source.html#l00385">__kmpc_fork_teams()</a>, <a class="el" href="kmp__csupport_8c_source.html#l00733">__kmpc_master()</a>, <a class="el" href="kmp__csupport_8c_source.html#l02860">__kmpc_reduce()</a>, <a class="el" href="kmp__csupport_8c_source.html#l02663">__kmpc_reduce_nowait()</a>, and <a class="el" href="kmp__csupport_8c_source.html#l01479">__kmpc_single()</a>.</p>
runtime/doc/doxygen/generated/html/group__STATS__GATHERING.html:382:<p>Referenced by <a class="el" href="kmp__csupport_8c_source.html#l01111">__kmpc_critical()</a>, <a class="el" href="kmp__csupport_8c_source.html#l00281">__kmpc_fork_call()</a>, <a class="el" href="kmp__csupport_8c_source.html#l00733">__kmpc_master()</a>, and <a class="el" href="kmp__csupport_8c_source.html#l01479">__kmpc_single()</a>.</p>
runtime/doc/doxygen/generated/html/group__STATS__GATHERING.html:411:<p>Referenced by <a class="el" href="kmp__csupport_8c_source.html#l01287">__kmpc_end_critical()</a>, <a class="el" href="kmp__csupport_8c_source.html#l00789">__kmpc_end_master()</a>, <a class="el" href="kmp__csupport_8c_source.html#l01526">__kmpc_end_single()</a>, and <a class="el" href="kmp__csupport_8c_source.html#l00281">__kmpc_fork_call()</a>.</p>
runtime/doc/doxygen/generated/html/group__THREAD__STATES.html:226:<p>Referenced by <a class="el" href="kmp__csupport_8c_source.html#l00281">__kmpc_fork_call()</a>.</p>
runtime/doc/doxygen/generated/html/kmp__dispatch_8cpp_source.html:724:<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <span class="keywordtype">int</span> itt_need_metadata_reporting = __itt_metadata_add_ptr &amp;&amp; __kmp_forkjoin_frames_mode == 3 &amp;&amp;</div>
runtime/doc/doxygen/generated/html/kmp__global_8c_source.html:188:<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                            { <span class="stringliteral">&quot;plain&quot;</span>, <span class="stringliteral">&quot;forkjoin&quot;</span></div>
runtime/doc/doxygen/generated/html/kmp__global_8c_source.html:366:<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="preprocessor"></span><span class="keywordtype">int</span>     __kmp_forkjoin_frames = 1;</div>
runtime/doc/doxygen/generated/html/kmp__global_8c_source.html:367:<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keywordtype">int</span>     __kmp_forkjoin_frames_mode = 3;</div>
runtime/doc/doxygen/generated/html/kmp__global_8c_source.html:406:<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">/* Initialize the library data structures when we fork a child process, defaults to TRUE */</span></div>
runtime/doc/doxygen/generated/html/kmp__global_8c_source.html:407:<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="keywordtype">int</span>     __kmp_need_register_atfork = TRUE; <span class="comment">/* At initialization, call pthread_atfork to install fork handler */</span></div>
runtime/doc/doxygen/generated/html/kmp__global_8c_source.html:408:<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="keywordtype">int</span>     __kmp_need_register_atfork_specified = TRUE;</div>
runtime/doc/doxygen/generated/html/kmp__global_8c_source.html:473:<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;kmp_bootstrap_lock_t __kmp_forkjoin_lock; <span class="comment">/* control fork/join access */</span></div>
runtime/doc/doxygen/generated/html/kmp__global_8c_source.html:491:<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;kmp_bootstrap_lock_t __kmp_forkjoin_lock; <span class="comment">/* control fork/join access */</span></div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:422:<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;__kmp_GOMP_fork_call(<a class="code" href="structident.html">ident_t</a> *loc, <span class="keywordtype">int</span> gtid, <span class="keywordtype">void</span> (*unwrapped_task)(<span class="keywordtype">void</span> *), microtask_t wrapper, <span class="keywordtype">int</span> argc,...)</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:432:<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    rc = __kmp_fork_call(loc, gtid, fork_context_gnu, argc,</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:484:<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                OMPT_INVOKER(fork_context_gnu));</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:535:<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a">__kmpc_ok_to_fork</a>(&amp;loc) &amp;&amp; (num_threads != 1)) {</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:539:<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        __kmp_GOMP_fork_call(&amp;loc, gtid, task,</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:622:<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            , fork_context_gnu</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:644:<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                    OMPT_INVOKER(fork_context_gnu));</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:666:<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;<span class="comment">// argument to __kmp_GOMP_fork_call).</span></div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:951:<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        if (<a class="code" href="group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a">__kmpc_ok_to_fork</a>(&amp;loc) &amp;&amp; (num_threads != 1)) {                 \</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:955:<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;            __kmp_GOMP_fork_call(&amp;loc, gtid, task,                           \</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:1191:<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a">__kmpc_ok_to_fork</a>(&amp;loc) &amp;&amp; (num_threads != 1)) {</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:1195:<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;        __kmp_GOMP_fork_call(&amp;loc, gtid, task,</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:1251:<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a">__kmpc_ok_to_fork</a>(&amp;loc) &amp;&amp; (num_threads != 1)) {</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:1258:<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;        __kmp_GOMP_fork_call(&amp;loc, gtid, task,</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:1276:<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a">__kmpc_ok_to_fork</a>(&amp;loc) &amp;&amp; (num_threads != 1)) {</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:1283:<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;        __kmp_GOMP_fork_call(&amp;loc, gtid, task,</div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:1308:<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;<span class="preprocessor">        if (__kmpc_ok_to_fork(&amp;loc) &amp;&amp; (num_threads != 1)) {                 \</span></div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:1315:<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;<span class="preprocessor">            __kmp_GOMP_fork_call(&amp;loc, gtid, task,                           \</span></div>
runtime/doc/doxygen/generated/html/kmp__gsupport_8c_source.html:1699:<div class="ttc" id="group__DEPRECATED_html_ga27292e41af4c26e0bdf45b12b1f76d5a"><div class="ttname"><a href="group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a">__kmpc_ok_to_fork</a></div><div class="ttdeci">KMP_EXPORT kmp_int32 __kmpc_ok_to_fork(ident_t *)</div><div class="ttdef"><b>Definition:</b> <a href="kmp__csupport_8c_source.html#l00161">kmp_csupport.c:161</a></div></div>
runtime/doc/doxygen/generated/html/kmp__itt_8h_source.html:139:<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;__kmp_inline <span class="keywordtype">void</span> __kmp_itt_region_forking(  <span class="keywordtype">int</span> gtid, <span class="keywordtype">int</span> team_size, <span class="keywordtype">int</span> barriers, <span class="keywordtype">int</span> serialized = 0 ); <span class="comment">// Master only, before forking threads.</span></div>
runtime/doc/doxygen/generated/html/kmp__itt_8h_source.html:255:<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="comment">// FORKING      : Before the master thread forks.</span></div>
runtime/doc/doxygen/generated/html/kmp__omp_8h_source.html:170:<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    addr_and_size_t  func_fork;</div>
runtime/doc/doxygen/generated/html/kmp__omp_8h_source.html:171:<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    addr_and_size_t  func_fork_teams;</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:160:<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keywordtype">void</span> __kmp_fork_barrier( <span class="keywordtype">int</span> gtid, <span class="keywordtype">int</span> tid );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:331:<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="comment">/* caller must hold forkjoin_lock */</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:557:<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    __kmp_print_storage_map_gtid( gtid, &amp;thr-&gt;th.th_bar[bs_forkjoin_barrier],</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:558:<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                             &amp;thr-&gt;th.th_bar[bs_forkjoin_barrier+1],</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:559:<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                             <span class="keyword">sizeof</span>(kmp_balign_t), <span class="stringliteral">&quot;th_%d.th_bar[forkjoin]&quot;</span>, gtid);</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:587:<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    __kmp_print_storage_map_gtid( -1, &amp;team-&gt;t.t_bar[bs_forkjoin_barrier], &amp;team-&gt;t.t_bar[bs_forkjoin_barrier+1],</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:588:<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                             <span class="keyword">sizeof</span>(kmp_balign_team_t), <span class="stringliteral">&quot;%s_%d.t_bar[forkjoin]&quot;</span>, header, team_id );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:662:<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="comment">// So, it might be safe to access the __kmp_threads[] without taking the forkjoin_lock.</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:691:<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="comment">// __kmp_forkjoin_lock and __kmp_stdio_lock are expected to be reset.</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:692:<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;    __kmp_reset_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:719:<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                <span class="comment">// So they will release the forkjoin lock by themselves.</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:721:<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                <span class="comment">// the problem of unreleased forkjoin lock as described below.</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:723:<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                <span class="comment">// A worker thread can take the forkjoin lock.</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:725:<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                <span class="comment">// before it releases the forkjoin lock.</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:726:<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                <span class="comment">// The forkjoin lock remains taken, while the thread</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:728:<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                <span class="comment">// will try to take the forkjoin lock and will always fail,</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:897:<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> ( __itt_metadata_add_ptr &amp;&amp; __kmp_forkjoin_frames_mode == 3 &amp;&amp; KMP_MASTER_GTID(gtid) &amp;&amp;</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:940:<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;<span class="comment"> * The forkjoin lock is held by the caller.</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1114:<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;<span class="comment"> * checked on that earlier within critical section forkjoin */</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1117:<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;__kmp_fork_team_threads( kmp_root_t *root, kmp_team_t *team,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1123:<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    KA_TRACE( 10, (<span class="stringliteral">&quot;__kmp_fork_team_threads: new_nprocs = %d\n&quot;</span>, team-&gt;t.t_nproc ) );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1176:<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;            <span class="comment">/* fork or reallocate a new thread and install it in team */</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1182:<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;            KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_fork_team_threads: T#%d(%d:%d) init arrived T#%d(%d:%d) join =%llu, plain=%llu\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1185:<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;                            team-&gt;t.t_bar[ bs_forkjoin_barrier ].b_arrived,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1352:<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;            __kmp_acquire_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1367:<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;            __kmp_release_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1500:<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;            ( __kmp_forkjoin_frames_mode == 3 || __kmp_forkjoin_frames_mode == 1 ) )</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1503:<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;        } <span class="keywordflow">else</span> <span class="comment">// only one notification scheme (either &quot;submit&quot; or &quot;forking/joined&quot;, not both)</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1506:<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;             __kmp_forkjoin_frames &amp;&amp; ! __kmp_forkjoin_frames_mode )</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1510:<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;            __kmp_itt_region_forking( global_tid, this_thr-&gt;th.th_team_nproc, 0, 1 );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1516:<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;<span class="comment">/* most of the work for a fork */</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1519:<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;__kmp_fork_call(</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1522:<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;    <span class="keyword">enum</span> fork_context_e  call_context, <span class="comment">// Intel, GNU, ...</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1557:<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;    KMP_TIME_DEVELOPER_BLOCK(KMP_fork_call);</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1560:<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;    KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_fork_call: enter T#%d\n&quot;</span>, gtid ));</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1631:<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;        <span class="comment">//     The team is actual (hot), all workers are ready at the fork barrier.</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1749:<div class="line"><a name="l01666"></a><span class="lineno"> 1666</span>&#160;        KF_TRACE( 10, ( <span class="stringliteral">&quot;__kmp_fork_call: before internal fork: root=%p, team=%p, master_th=%p, gtid=%d\n&quot;</span>, root, parent_team, master_th, gtid ) );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1750:<div class="line"><a name="l01667"></a><span class="lineno"> 1667</span>&#160;        __kmp_internal_fork( loc, gtid, parent_team );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1751:<div class="line"><a name="l01668"></a><span class="lineno"> 1668</span>&#160;        KF_TRACE( 10, ( <span class="stringliteral">&quot;__kmp_fork_call: after internal fork: root=%p, team=%p, master_th=%p, gtid=%d\n&quot;</span>, root, parent_team, master_th, gtid ) );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1754:<div class="line"><a name="l01671"></a><span class="lineno"> 1671</span>&#160;        KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_fork_call: T#%d(%d:0) invoke microtask = %p\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1763:<div class="line"><a name="l01680"></a><span class="lineno"> 1680</span>&#160;        KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_fork_call: T#%d(%d:0) done microtask = %p\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1767:<div class="line"><a name="l01684"></a><span class="lineno"> 1684</span>&#160;        KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_fork_call: parallel exit T#%d\n&quot;</span>, gtid ));</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1788:<div class="line"><a name="l01705"></a><span class="lineno"> 1705</span>&#160;        <span class="comment">// Check if we need to take forkjoin lock? (no need for serialized parallel out of teams construct).</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1796:<div class="line"><a name="l01713"></a><span class="lineno"> 1713</span>&#160;                KC_TRACE( 10, ( <span class="stringliteral">&quot;__kmp_fork_call: T#%d serializing team; requested %d threads\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1803:<div class="line"><a name="l01720"></a><span class="lineno"> 1720</span>&#160;            __kmp_acquire_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1817:<div class="line"><a name="l01734"></a><span class="lineno"> 1734</span>&#160;                __kmp_release_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1835:<div class="line"><a name="l01752"></a><span class="lineno"> 1752</span>&#160;        KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_fork_call: T#%d serializing parallel region\n&quot;</span>, gtid ));</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:1839:<div class="line"><a name="l01756"></a><span class="lineno"> 1756</span>&#160;        <span class="keywordflow">if</span> ( call_context == fork_context_intel ) {</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2017:<div class="line"><a name="l01934"></a><span class="lineno"> 1934</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( call_context == fork_context_gnu ) {</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2030:<div class="line"><a name="l01947"></a><span class="lineno"> 1947</span>&#160;            KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_fork_call: T#%d serial exit\n&quot;</span>, gtid ));</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2034:<div class="line"><a name="l01951"></a><span class="lineno"> 1951</span>&#160;            KMP_ASSERT2( call_context &lt; fork_context_last, <span class="stringliteral">&quot;__kmp_fork_call: unknown fork_context parameter&quot;</span> );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2038:<div class="line"><a name="l01955"></a><span class="lineno"> 1955</span>&#160;        KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_fork_call: T#%d serial exit\n&quot;</span>, gtid ));</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2045:<div class="line"><a name="l01962"></a><span class="lineno"> 1962</span>&#160;    KF_TRACE( 10, ( <span class="stringliteral">&quot;__kmp_fork_call: parent_team_aclevel=%d, master_th=%p, curtask=%p, curtask_max_aclevel=%d\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2113:<div class="line"><a name="l02030"></a><span class="lineno"> 2030</span>&#160;        KF_TRACE( 10, ( <span class="stringliteral">&quot;__kmp_fork_call: before __kmp_allocate_team\n&quot;</span> ) );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2124:<div class="line"><a name="l02041"></a><span class="lineno"> 2041</span>&#160;        KF_TRACE( 10, ( <span class="stringliteral">&quot;__kmp_fork_call: before __kmp_allocate_team\n&quot;</span> ) );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2135:<div class="line"><a name="l02052"></a><span class="lineno"> 2052</span>&#160;    KF_TRACE( 10, ( <span class="stringliteral">&quot;__kmp_fork_call: after __kmp_allocate_team - team = %p\n&quot;</span>, team ) );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2176:<div class="line"><a name="l02093"></a><span class="lineno"> 2093</span>&#160;<span class="preprocessor"></span>        KA_TRACE( 20, ( <span class="stringliteral">&quot;__kmp_fork_call: Master T#%d pushing task_team %p / team %p, new task_team %p / team %p\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2218:<div class="line"><a name="l02135"></a><span class="lineno"> 2135</span>&#160;    KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_fork_call: T#%d(%d:%d)-&gt;(%d:0) created a team of %d threads\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2245:<div class="line"><a name="l02162"></a><span class="lineno"> 2162</span>&#160;    <span class="comment">/* now actually fork the threads */</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2250:<div class="line"><a name="l02167"></a><span class="lineno"> 2167</span>&#160;    __kmp_fork_team_threads( root, team, master_th, gtid );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2257:<div class="line"><a name="l02174"></a><span class="lineno"> 2174</span>&#160;    __kmp_release_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2267:<div class="line"><a name="l02184"></a><span class="lineno"> 2184</span>&#160;             ( __kmp_forkjoin_frames_mode == 3 || __kmp_forkjoin_frames_mode == 1 ) )</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2272:<div class="line"><a name="l02189"></a><span class="lineno"> 2189</span>&#160;            <span class="comment">// Internal fork - report frame begin</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2274:<div class="line"><a name="l02191"></a><span class="lineno"> 2191</span>&#160;            <span class="keywordflow">if</span> ( __kmp_forkjoin_frames_mode == 3 )</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2276:<div class="line"><a name="l02193"></a><span class="lineno"> 2193</span>&#160;        } <span class="keywordflow">else</span> <span class="comment">// only one notification scheme (either &quot;submit&quot; or &quot;forking/joined&quot;, not both)</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2279:<div class="line"><a name="l02196"></a><span class="lineno"> 2196</span>&#160;             __kmp_forkjoin_frames &amp;&amp; !__kmp_forkjoin_frames_mode )</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2281:<div class="line"><a name="l02198"></a><span class="lineno"> 2198</span>&#160;            __kmp_itt_region_forking(gtid, team-&gt;t.t_nproc, 0);</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2289:<div class="line"><a name="l02206"></a><span class="lineno"> 2206</span>&#160;    KF_TRACE(10, (<span class="stringliteral">&quot;__kmp_internal_fork : root=%p, team=%p, master_th=%p, gtid=%d\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2294:<div class="line"><a name="l02211"></a><span class="lineno"> 2211</span>&#160;        team-&gt;t.t_stack_id = __kmp_itt_stack_caller_create(); <span class="comment">// create new stack stitching id before entering fork barrier</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2299:<div class="line"><a name="l02216"></a><span class="lineno"> 2216</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> ( ap )   <span class="comment">// AC: skip __kmp_internal_fork at teams construct, let only master threads execute</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2302:<div class="line"><a name="l02219"></a><span class="lineno"> 2219</span>&#160;        __kmp_internal_fork( loc, gtid, team );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2303:<div class="line"><a name="l02220"></a><span class="lineno"> 2220</span>&#160;        KF_TRACE(10, (<span class="stringliteral">&quot;__kmp_internal_fork : after : root=%p, team=%p, master_th=%p, gtid=%d\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2307:<div class="line"><a name="l02224"></a><span class="lineno"> 2224</span>&#160;    <span class="keywordflow">if</span> (call_context == fork_context_gnu) {</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2308:<div class="line"><a name="l02225"></a><span class="lineno"> 2225</span>&#160;        KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_fork_call: parallel exit T#%d\n&quot;</span>, gtid ));</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2313:<div class="line"><a name="l02230"></a><span class="lineno"> 2230</span>&#160;    KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_fork_call: T#%d(%d:0) invoke microtask = %p\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2315:<div class="line"><a name="l02232"></a><span class="lineno"> 2232</span>&#160;    }  <span class="comment">// END of timer KMP_fork_call block</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2324:<div class="line"><a name="l02241"></a><span class="lineno"> 2241</span>&#160;    KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_fork_call: T#%d(%d:0) done microtask = %p\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2328:<div class="line"><a name="l02245"></a><span class="lineno"> 2245</span>&#160;    KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_fork_call: parallel exit T#%d\n&quot;</span>, gtid ));</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2355:<div class="line"><a name="l02272"></a><span class="lineno"> 2272</span>&#160;    fork_context_e fork_context)</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2360:<div class="line"><a name="l02277"></a><span class="lineno"> 2277</span>&#160;            parallel_id, task_info-&gt;task_id, OMPT_INVOKER(fork_context));</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2370:<div class="line"><a name="l02287"></a><span class="lineno"> 2287</span>&#160;               , <span class="keyword">enum</span> fork_context_e fork_context</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2472:<div class="line"><a name="l02389"></a><span class="lineno"> 2389</span>&#160;        <span class="comment">// only one notification scheme (either &quot;submit&quot; or &quot;forking/joined&quot;, not both)</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2473:<div class="line"><a name="l02390"></a><span class="lineno"> 2390</span>&#160;        <span class="keywordflow">if</span> ( ( __itt_frame_submit_v3_ptr || KMP_ITT_DEBUG ) &amp;&amp; __kmp_forkjoin_frames_mode == 3 )</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2477:<div class="line"><a name="l02394"></a><span class="lineno"> 2394</span>&#160;            ! __kmp_forkjoin_frames_mode &amp;&amp; __kmp_forkjoin_frames )</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2526:<div class="line"><a name="l02443"></a><span class="lineno"> 2443</span>&#160;            __kmp_join_ompt(master_th, parent_team, parallel_id, fork_context);</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2545:<div class="line"><a name="l02462"></a><span class="lineno"> 2462</span>&#160;    __kmp_acquire_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2625:<div class="line"><a name="l02542"></a><span class="lineno"> 2542</span>&#160;    __kmp_release_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2629:<div class="line"><a name="l02546"></a><span class="lineno"> 2546</span>&#160;        __kmp_join_ompt(master_th, parent_team, parallel_id, fork_context);</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2710:<div class="line"><a name="l02627"></a><span class="lineno"> 2627</span>&#160;        __kmp_acquire_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:2730:<div class="line"><a name="l02647"></a><span class="lineno"> 2647</span>&#160;        __kmp_release_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:3748:<div class="line"><a name="l03665"></a><span class="lineno"> 3665</span>&#160;    __kmp_acquire_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:3921:<div class="line"><a name="l03838"></a><span class="lineno"> 3838</span>&#160;    KMP_DEBUG_ASSERT( root-&gt;r.r_hot_team-&gt;t.t_bar[ bs_forkjoin_barrier ].b_arrived == KMP_INIT_BARRIER_STATE );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:3939:<div class="line"><a name="l03856"></a><span class="lineno"> 3856</span>&#160;    __kmp_release_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:4045:<div class="line"><a name="l03962"></a><span class="lineno"> 3962</span>&#160;<span class="comment">     * forkjoin lock, you should never try to get the initz lock */</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:4047:<div class="line"><a name="l03964"></a><span class="lineno"> 3964</span>&#160;    __kmp_acquire_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:4050:<div class="line"><a name="l03967"></a><span class="lineno"> 3967</span>&#160;        __kmp_release_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:4089:<div class="line"><a name="l04006"></a><span class="lineno"> 4006</span>&#160;    __kmp_release_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:4093:<div class="line"><a name="l04010"></a><span class="lineno"> 4010</span>&#160;<span class="preprocessor"></span><span class="comment">/* __kmp_forkjoin_lock must be already held</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:4254:<div class="line"><a name="l04171"></a><span class="lineno"> 4171</span>&#160;<span class="comment"> * forkjoin critical section.  we will first try to get an available thread from the</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:4255:<div class="line"><a name="l04172"></a><span class="lineno"> 4172</span>&#160;<span class="comment"> * thread pool.  if none is available, we will fork a new one assuming we are able</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:4330:<div class="line"><a name="l04247"></a><span class="lineno"> 4247</span>&#160;    <span class="comment">/* no, well fork a new one */</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:4413:<div class="line"><a name="l04330"></a><span class="lineno"> 4330</span>&#160;    KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_allocate_thread: T#%d init go fork=%u, plain=%u\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:4471:<div class="line"><a name="l04388"></a><span class="lineno"> 4388</span>&#160;    <span class="comment">/* actually fork it and create the new worker thread */</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:4476:<div class="line"><a name="l04393"></a><span class="lineno"> 4393</span>&#160;    KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_allocate_thread: T#%d forked T#%d\n&quot;</span>, __kmp_get_gtid(), new_gtid ));</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:4484:<div class="line"><a name="l04401"></a><span class="lineno"> 4401</span>&#160;<span class="comment"> * The hot team code calls this case at every fork barrier, so EPCC barrier</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:4911:<div class="line"><a name="l04828"></a><span class="lineno"> 4828</span>&#160;                team-&gt;t.t_pkfn == (microtask_t)__kmp_teams_master || <span class="comment">// inner fork of the teams</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:4913:<div class="line"><a name="l04830"></a><span class="lineno"> 4830</span>&#160;                ++level; <span class="comment">// not increment if #teams==1, or for outer fork of the teams; increment otherwise</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:5098:<div class="line"><a name="l05015"></a><span class="lineno"> 5015</span>&#160;                                team-&gt;t.t_bar[bs_forkjoin_barrier].b_arrived,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:5135:<div class="line"><a name="l05052"></a><span class="lineno"> 5052</span>&#160;                <span class="comment">// after this in __kmp_fork_call(), so we look to the master&#39;s memo_stack to get the correct value.</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:5590:<div class="line"><a name="l05507"></a><span class="lineno"> 5507</span>&#160;        __kmp_fork_barrier( gtid, KMP_GTID_DNE );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:5778:<div class="line"><a name="l05695"></a><span class="lineno"> 5695</span>&#160;    <span class="comment">// It is assumed __kmp_forkjoin_lock is acquired.</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:5789:<div class="line"><a name="l05706"></a><span class="lineno"> 5706</span>&#160;            <span class="comment">/* Assume the threads are at the fork barrier here */</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:5790:<div class="line"><a name="l05707"></a><span class="lineno"> 5707</span>&#160;            KA_TRACE( 20, (<span class="stringliteral">&quot;__kmp_reap_thread: releasing T#%d from fork barrier for reap\n&quot;</span>, gtid ) );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:5791:<div class="line"><a name="l05708"></a><span class="lineno"> 5708</span>&#160;            <span class="comment">/* Need release fence here to prevent seg faults for tree forkjoin barrier (GEH) */</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:5792:<div class="line"><a name="l05709"></a><span class="lineno"> 5709</span>&#160;            kmp_flag_64 flag(&amp;thread-&gt;th.th_bar[ bs_forkjoin_barrier ].bb.b_go, thread);</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:5917:<div class="line"><a name="l05834"></a><span class="lineno"> 5834</span>&#160;        <span class="comment">// If we are called form __kmp_atfork_child (which sets</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6087:<div class="line"><a name="l06004"></a><span class="lineno"> 6004</span>&#160;    __kmp_acquire_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6092:<div class="line"><a name="l06009"></a><span class="lineno"> 6009</span>&#160;    __kmp_release_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6174:<div class="line"><a name="l06091"></a><span class="lineno"> 6091</span>&#160;    <span class="comment">//     in a loop forks and joins many openmp threads. We can save a lot of time</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6204:<div class="line"><a name="l06121"></a><span class="lineno"> 6121</span>&#160;    __kmp_acquire_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6209:<div class="line"><a name="l06126"></a><span class="lineno"> 6126</span>&#160;            __kmp_release_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6219:<div class="line"><a name="l06136"></a><span class="lineno"> 6136</span>&#160;    __kmp_release_bootstrap_lock( &amp;__kmp_forkjoin_lock );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6466:<div class="line"><a name="l06383"></a><span class="lineno"> 6383</span>&#160;    __kmp_init_bootstrap_lock( &amp; __kmp_forkjoin_lock  );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6537:<div class="line"><a name="l06454"></a><span class="lineno"> 6454</span>&#160;        <span class="comment">// AC: plane=3,2, forkjoin=2,1 are optimal for 240 threads on KNC</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6539:<div class="line"><a name="l06456"></a><span class="lineno"> 6456</span>&#160;        __kmp_barrier_release_branch_bits[ bs_forkjoin_barrier ] = 1;  <span class="comment">// forkjoin release</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6540:<div class="line"><a name="l06457"></a><span class="lineno"> 6457</span>&#160;        __kmp_barrier_gather_pattern [ bs_forkjoin_barrier ] = bp_hierarchical_bar;</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6541:<div class="line"><a name="l06458"></a><span class="lineno"> 6458</span>&#160;        __kmp_barrier_release_pattern[ bs_forkjoin_barrier ] = bp_hierarchical_bar;</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6616:<div class="line"><a name="l06533"></a><span class="lineno"> 6533</span>&#160;<span class="preprocessor"></span>        <span class="comment">/* invoke the child fork handler */</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6617:<div class="line"><a name="l06534"></a><span class="lineno"> 6534</span>&#160;        __kmp_register_atfork();</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6897:<div class="line"><a name="l06814"></a><span class="lineno"> 6814</span>&#160;<span class="preprocessor"></span>    KMP_CACHE_PREFETCH( &amp;this_thr-&gt;th.th_bar[ bs_forkjoin_barrier ].bb.b_arrived );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:6998:<div class="line"><a name="l06915"></a><span class="lineno"> 6915</span>&#160;    <span class="comment">// (they hang on fork barrier until next parallel)</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:7002:<div class="line"><a name="l06919"></a><span class="lineno"> 6919</span>&#160;<span class="preprocessor"></span>    __kmp_fork_call( loc, gtid, fork_context_intel,</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:7015:<div class="line"><a name="l06932"></a><span class="lineno"> 6932</span>&#160;    <span class="comment">// worker threads are in a fork barrier waiting for more parallel regions</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:7018:<div class="line"><a name="l06935"></a><span class="lineno"> 6935</span>&#160;        , fork_context_intel</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:7041:<div class="line"><a name="l06958"></a><span class="lineno"> 6958</span>&#160;<span class="comment">/* since this should be enclosed in the forkjoin critical section it</span></div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:7124:<div class="line"><a name="l07041"></a><span class="lineno"> 7041</span>&#160;__kmp_internal_fork( <a class="code" href="structident.html">ident_t</a> *<span class="keywordtype">id</span>, <span class="keywordtype">int</span> gtid, kmp_team_t *team )</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:7168:<div class="line"><a name="l07085"></a><span class="lineno"> 7085</span>&#160;    __kmp_fork_barrier( gtid, 0 );</div>
runtime/doc/doxygen/generated/html/kmp__runtime_8c_source.html:7182:<div class="line"><a name="l07099"></a><span class="lineno"> 7099</span>&#160;    <span class="comment">/* Join barrier after fork */</span></div>
runtime/doc/doxygen/generated/html/kmp__sched_8cpp_source.html:418:<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordflow">if</span> ( KMP_MASTER_TID(tid) &amp;&amp; __itt_metadata_add_ptr &amp;&amp; __kmp_forkjoin_frames_mode == 3 &amp;&amp;</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:3485:<div class="line"><a name="l03402"></a><span class="lineno"> 3402</span>&#160;__kmp_stg_parse_init_at_fork( <span class="keywordtype">char</span> <span class="keyword">const</span> * name, <span class="keywordtype">char</span> <span class="keyword">const</span> * value, <span class="keywordtype">void</span> * data ) {</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:3486:<div class="line"><a name="l03403"></a><span class="lineno"> 3403</span>&#160;    __kmp_stg_parse_bool( name, value, &amp; __kmp_need_register_atfork );</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:3487:<div class="line"><a name="l03404"></a><span class="lineno"> 3404</span>&#160;    <span class="keywordflow">if</span> ( __kmp_need_register_atfork ) {</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:3488:<div class="line"><a name="l03405"></a><span class="lineno"> 3405</span>&#160;        __kmp_need_register_atfork_specified = TRUE;</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:3490:<div class="line"><a name="l03407"></a><span class="lineno"> 3407</span>&#160;} <span class="comment">// __kmp_stg_parse_init_at_fork</span></div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:3493:<div class="line"><a name="l03410"></a><span class="lineno"> 3410</span>&#160;__kmp_stg_print_init_at_fork( kmp_str_buf_t * buffer, <span class="keywordtype">char</span> <span class="keyword">const</span> * name, <span class="keywordtype">void</span> * data ) {</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:3494:<div class="line"><a name="l03411"></a><span class="lineno"> 3411</span>&#160;    __kmp_stg_print_bool( buffer, name, __kmp_need_register_atfork_specified );</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:3495:<div class="line"><a name="l03412"></a><span class="lineno"> 3412</span>&#160;} <span class="comment">// __kmp_stg_print_init_at_fork</span></div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4524:<div class="line"><a name="l04441"></a><span class="lineno"> 4441</span>&#160;__kmp_stg_parse_forkjoin_frames( <span class="keywordtype">char</span> <span class="keyword">const</span> * name, <span class="keywordtype">char</span> <span class="keyword">const</span> * value, <span class="keywordtype">void</span> * data ) {</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4525:<div class="line"><a name="l04442"></a><span class="lineno"> 4442</span>&#160;    __kmp_stg_parse_bool( name, value, &amp; __kmp_forkjoin_frames );</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4526:<div class="line"><a name="l04443"></a><span class="lineno"> 4443</span>&#160;} <span class="comment">// __kmp_stg_parse_forkjoin_frames</span></div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4529:<div class="line"><a name="l04446"></a><span class="lineno"> 4446</span>&#160;__kmp_stg_print_forkjoin_frames( kmp_str_buf_t * buffer, <span class="keywordtype">char</span> <span class="keyword">const</span> * name, <span class="keywordtype">void</span> * data ) {</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4530:<div class="line"><a name="l04447"></a><span class="lineno"> 4447</span>&#160;    __kmp_stg_print_bool( buffer, name, __kmp_forkjoin_frames );</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4531:<div class="line"><a name="l04448"></a><span class="lineno"> 4448</span>&#160;} <span class="comment">// __kmp_stg_print_forkjoin_frames</span></div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4538:<div class="line"><a name="l04455"></a><span class="lineno"> 4455</span>&#160;__kmp_stg_parse_forkjoin_frames_mode( <span class="keywordtype">char</span> <span class="keyword">const</span> * name, <span class="keywordtype">char</span> <span class="keyword">const</span> * value, <span class="keywordtype">void</span> * data ) {</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4539:<div class="line"><a name="l04456"></a><span class="lineno"> 4456</span>&#160;    __kmp_stg_parse_int( name, value, 0, 3, &amp; __kmp_forkjoin_frames_mode );</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4540:<div class="line"><a name="l04457"></a><span class="lineno"> 4457</span>&#160;} <span class="comment">// __kmp_stg_parse_forkjoin_frames</span></div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4543:<div class="line"><a name="l04460"></a><span class="lineno"> 4460</span>&#160;__kmp_stg_print_forkjoin_frames_mode( kmp_str_buf_t * buffer, <span class="keywordtype">char</span> <span class="keyword">const</span> * name, <span class="keywordtype">void</span> * data ) {</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4544:<div class="line"><a name="l04461"></a><span class="lineno"> 4461</span>&#160;    __kmp_stg_print_int( buffer, name, __kmp_forkjoin_frames_mode );</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4545:<div class="line"><a name="l04462"></a><span class="lineno"> 4462</span>&#160;} <span class="comment">// __kmp_stg_print_forkjoin_frames</span></div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4707:<div class="line"><a name="l04624"></a><span class="lineno"> 4624</span>&#160;    { <span class="stringliteral">&quot;KMP_INIT_AT_FORK&quot;</span>,                  __kmp_stg_parse_init_at_fork,       __kmp_stg_print_init_at_fork,       NULL, 0, 0 },</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4737:<div class="line"><a name="l04654"></a><span class="lineno"> 4654</span>&#160;<span class="preprocessor"></span>    { <span class="stringliteral">&quot;KMP_FORKJOIN_FRAMES&quot;</span>,               __kmp_stg_parse_forkjoin_frames,    __kmp_stg_print_forkjoin_frames,    NULL, 0, 0 },</div>
runtime/doc/doxygen/generated/html/kmp__settings_8c_source.html:4738:<div class="line"><a name="l04655"></a><span class="lineno"> 4655</span>&#160;    { <span class="stringliteral">&quot;KMP_FORKJOIN_FRAMES_MODE&quot;</span>,          __kmp_stg_parse_forkjoin_frames_mode,__kmp_stg_print_forkjoin_frames_mode,  NULL, 0, 0 },</div>
runtime/doc/doxygen/generated/html/kmp__stats_8h_source.html:170:<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">// OMP_work               -- Elapsed time in code dispatched by a fork (measured in the thread)</span></div>
runtime/doc/doxygen/generated/html/kmp__stats_8h_source.html:187:<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">// KMP_fork_barrier       -- time in __kmp_fork_barrier</span></div>
runtime/doc/doxygen/generated/html/kmp__stats_8h_source.html:200:<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="preprocessor">    macro (KMP_fork_call, 0, arg)                                       \</span></div>
runtime/doc/doxygen/generated/html/kmp__stats_8h_source.html:202:<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor">    macro (KMP_fork_barrier, stats_flags_e::logEvent, arg)              \</span></div>
runtime/doc/doxygen/generated/html/group__WAIT__RELEASE.html:88:<p>The definitions and functions here implement the lowest level thread synchronizations of suspending a thread and awaking it. They are used to build higher level operations such as barriers and fork/join. </p>
runtime/doc/doxygen/generated/html/kmp__tasking_8c_source.html:1869:<div class="line"><a name="l01786"></a><span class="lineno"> 1786</span>&#160;                <span class="comment">// we are at fork barrier where we could not get the object reliably</span></div>
runtime/doc/doxygen/generated/html/kmp__tasking_8c_source.html:1870:<div class="line"><a name="l01787"></a><span class="lineno"> 1787</span>&#160;                itt_sync_obj  = __kmp_itt_barrier_object( gtid, bs_forkjoin_barrier );</div>
runtime/doc/doxygen/generated/html/kmp__tasking_8c_source.html:1946:<div class="line"><a name="l01863"></a><span class="lineno"> 1863</span>&#160;                    <span class="comment">// we are at fork barrier where we could not get the object reliably</span></div>
runtime/doc/doxygen/generated/html/kmp__tasking_8c_source.html:1947:<div class="line"><a name="l01864"></a><span class="lineno"> 1864</span>&#160;                    itt_sync_obj  = __kmp_itt_barrier_object( gtid, bs_forkjoin_barrier );</div>
runtime/doc/doxygen/generated/html/kmp__tasking_8c_source.html:2057:<div class="line"><a name="l01974"></a><span class="lineno"> 1974</span>&#160;                    <span class="comment">// we are at fork barrier where we could not get the object reliably</span></div>
runtime/doc/doxygen/generated/html/kmp__tasking_8c_source.html:2058:<div class="line"><a name="l01975"></a><span class="lineno"> 1975</span>&#160;                    itt_sync_obj  = __kmp_itt_barrier_object( gtid, bs_forkjoin_barrier );</div>
runtime/doc/doxygen/generated/html/kmp__tasking_8c_source.html:2573:<div class="line"><a name="l02490"></a><span class="lineno"> 2490</span>&#160;<span class="comment">// Some threads could still be in the fork barrier release code, possibly</span></div>
runtime/doc/doxygen/generated/html/kmp__wait__release_8h_source.html:227:<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">           1) A newly-created thread is first being released by __kmp_fork_barrier(), and</span></div>
runtime/doc/doxygen/generated/html/kmp__wait__release_8h_source.html:272:<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">                   __kmp_thread_pool_nth is inc/dec&#39;d by the master thread while the fork/join</span></div>
runtime/doc/doxygen/generated/html/modules.html:87:<tr id="row_5_"><td class="entry"><img src="ftv2node.png" alt="o" width="16" height="22" /><a class="el" href="group__PARALLEL.html" target="_self">Parallel (fork/join)</a></td><td class="desc"></td></tr>
runtime/doc/doxygen/generated/html/ompt-internal_8h_source.html:95:<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">  ((x == fork_context_gnu) ? ompt_invoker_program : ompt_invoker_runtime)</span></div>
runtime/doc/doxygen/generated/html/search/all_0.js:43:  ['_5f_5fkmpc_5ffork_5fcall',['__kmpc_fork_call',['../group__PARALLEL.html#gac2b7cc2fa78dde5381bcf00cfc48d124',1,'__kmpc_fork_call(ident_t *, kmp_int32 nargs, kmpc_micro microtask,...):&#160;kmp_csupport.c'],['../group__PARALLEL.html#gac2b7cc2fa78dde5381bcf00cfc48d124',1,'__kmpc_fork_call(ident_t *loc, kmp_int32 argc, kmpc_micro microtask,...):&#160;kmp_csupport.c']]],
runtime/doc/doxygen/generated/html/search/all_0.js:44:  ['_5f_5fkmpc_5ffork_5fteams',['__kmpc_fork_teams',['../group__PARALLEL.html#ga1cab712d076ba1d2758b0c3bf5ffe38a',1,'__kmpc_fork_teams(ident_t *loc, kmp_int32 argc, kmpc_micro microtask,...):&#160;kmp_csupport.c'],['../group__PARALLEL.html#ga1cab712d076ba1d2758b0c3bf5ffe38a',1,'__kmpc_fork_teams(ident_t *loc, kmp_int32 argc, kmpc_micro microtask,...):&#160;kmp_csupport.c']]],
runtime/doc/doxygen/generated/html/search/all_0.js:49:  ['_5f_5fkmpc_5fok_5fto_5ffork',['__kmpc_ok_to_fork',['../group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a',1,'__kmpc_ok_to_fork(ident_t *):&#160;kmp_csupport.c'],['../group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a',1,'__kmpc_ok_to_fork(ident_t *loc):&#160;kmp_csupport.c']]],
runtime/doc/doxygen/generated/html/search/all_d.js:3:  ['parallel_20_28fork_2fjoin_29',['Parallel (fork/join)',['../group__PARALLEL.html',1,'']]],
runtime/doc/doxygen/generated/html/search/functions_0.js:43:  ['_5f_5fkmpc_5ffork_5fcall',['__kmpc_fork_call',['../group__PARALLEL.html#gac2b7cc2fa78dde5381bcf00cfc48d124',1,'__kmpc_fork_call(ident_t *, kmp_int32 nargs, kmpc_micro microtask,...):&#160;kmp_csupport.c'],['../group__PARALLEL.html#gac2b7cc2fa78dde5381bcf00cfc48d124',1,'__kmpc_fork_call(ident_t *loc, kmp_int32 argc, kmpc_micro microtask,...):&#160;kmp_csupport.c']]],
runtime/doc/doxygen/generated/html/search/functions_0.js:44:  ['_5f_5fkmpc_5ffork_5fteams',['__kmpc_fork_teams',['../group__PARALLEL.html#ga1cab712d076ba1d2758b0c3bf5ffe38a',1,'__kmpc_fork_teams(ident_t *loc, kmp_int32 argc, kmpc_micro microtask,...):&#160;kmp_csupport.c'],['../group__PARALLEL.html#ga1cab712d076ba1d2758b0c3bf5ffe38a',1,'__kmpc_fork_teams(ident_t *loc, kmp_int32 argc, kmpc_micro microtask,...):&#160;kmp_csupport.c']]],
runtime/doc/doxygen/generated/html/search/functions_0.js:49:  ['_5f_5fkmpc_5fok_5fto_5ffork',['__kmpc_ok_to_fork',['../group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a',1,'__kmpc_ok_to_fork(ident_t *):&#160;kmp_csupport.c'],['../group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a',1,'__kmpc_ok_to_fork(ident_t *loc):&#160;kmp_csupport.c']]],
runtime/doc/doxygen/generated/html/search/groups_3.js:3:  ['parallel_20_28fork_2fjoin_29',['Parallel (fork/join)',['../group__PARALLEL.html',1,'']]]
runtime/doc/doxygen/generated/html/structident.html:142:<p>Referenced by <a class="el" href="kmp__csupport_8c_source.html#l00161">__kmpc_ok_to_fork()</a>.</p>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:164:<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> __kmp_fork_count = 0;</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1594:<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;__kmp_atfork_prepare (<span class="keywordtype">void</span>)</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1600:<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;__kmp_atfork_parent (<span class="keywordtype">void</span>)</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1611:<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;__kmp_atfork_child (<span class="keywordtype">void</span>)</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1617:<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;    ++__kmp_fork_count;</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1640:<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;    KA_TRACE( 10, ( <span class="stringliteral">&quot;__kmp_atfork_child: checking cache address list %p\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1646:<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;            KC_TRACE( 50, ( <span class="stringliteral">&quot;__kmp_atfork_child: zeroing cache at address %p\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1662:<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;    <span class="comment">/* AC: customers complain that we use unsafe routines in the atfork</span></div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1674:<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;__kmp_register_atfork(<span class="keywordtype">void</span>) {</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1675:<div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;    <span class="keywordflow">if</span> ( __kmp_need_register_atfork ) {</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1676:<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;        <span class="keywordtype">int</span> status = pthread_atfork( __kmp_atfork_prepare, __kmp_atfork_parent, __kmp_atfork_child );</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1677:<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;        KMP_CHECK_SYSFAIL( <span class="stringliteral">&quot;pthread_atfork&quot;</span>, status );</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1678:<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;        __kmp_need_register_atfork = FALSE;</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1695:<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;    <span class="keywordflow">if</span> ( th-&gt;th.th_suspend_init_count &lt;= __kmp_fork_count ) {</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1703:<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;        *(<span class="keyword">volatile</span> <span class="keywordtype">int</span>*)&amp;th-&gt;th.th_suspend_init_count = __kmp_fork_count + 1;</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1710:<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;    <span class="keywordflow">if</span>(th-&gt;th.th_suspend_init_count &gt; __kmp_fork_count) {</div>
runtime/doc/doxygen/generated/html/z__Linux__util_8c_source.html:1724:<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;        KMP_DEBUG_ASSERT(th-&gt;th.th_suspend_init_count == __kmp_fork_count);</div>
runtime/doc/doxygen/generated/html/index.html:162:<div class="line">    __OMP_runtime_fork(outlinedFooBody, (<span class="keywordtype">void</span>*)0);   <span class="comment">// Not the real function name!</span></div>
runtime/doc/doxygen/generated/html/index.html:174:<p>The main benefit of this technique is that there is no code required at the fork point to marshal the arguments to the outlined function. Since the runtime knows statically how many arguments must be passed to the outlined function, it can easily copy them to the thread's stack frame. Therefore the performance of the fork code is independent of the number of shared variables that are accessed by the outlined function.</p>
runtime/doc/doxygen/generated/html/index.html:184:<li><a class="el" href="group__PARALLEL.html">Parallel (fork/join)</a> functions for implementing <code>omp parallel</code></li>
runtime/doc/doxygen/generated/html/index.html:220:<div class="line">    __kmpc_fork call( &amp; loc7, 1, main_7_parallel_3, &amp; r ); </div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:1747:<div class="line"><a name="l01738"></a><span class="lineno"> 1738</span>&#160;    bs_plain_barrier = 0,       <span class="comment">/* 0, All non-fork/join barriers (except reduction barriers if enabled) */</span></div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:1748:<div class="line"><a name="l01739"></a><span class="lineno"> 1739</span>&#160;    bs_forkjoin_barrier,        <span class="comment">/* 1, All fork/join (parallel region) barriers */</span></div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:2331:<div class="line"><a name="l02334"></a><span class="lineno"> 2334</span>&#160;    KMP_ALIGN_CACHE <span class="keywordtype">int</span>     th_set_nproc;  <span class="comment">/* if &gt; 0, then only use this request for the next fork */</span></div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:2336:<div class="line"><a name="l02339"></a><span class="lineno"> 2339</span>&#160;<span class="preprocessor"></span>    kmp_proc_bind_t         th_set_proc_bind; <span class="comment">/* if != proc_bind_default, use request for next fork */</span></div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:2541:<div class="line"><a name="l02544"></a><span class="lineno"> 2544</span>&#160;<span class="preprocessor"></span>    <span class="keywordtype">int</span>                      t_master_active;  <span class="comment">// save on fork, restore on join</span></div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:2618:<div class="line"><a name="l02621"></a><span class="lineno"> 2621</span>&#160;<span class="preprocessor"></span><span class="keyword">extern</span> <span class="keywordtype">int</span>      __kmp_forkjoin_frames;</div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:2619:<div class="line"><a name="l02622"></a><span class="lineno"> 2622</span>&#160;<span class="keyword">extern</span> <span class="keywordtype">int</span>      __kmp_forkjoin_frames_mode;</div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:2698:<div class="line"><a name="l02701"></a><span class="lineno"> 2701</span>&#160;<span class="keyword">extern</span> kmp_bootstrap_lock_t __kmp_forkjoin_lock;  <span class="comment">/* control fork/join access */</span></div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:2774:<div class="line"><a name="l02777"></a><span class="lineno"> 2777</span>&#160;<span class="keyword">extern</span> <span class="keywordtype">int</span>        __kmp_need_register_atfork_specified;</div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:2775:<div class="line"><a name="l02778"></a><span class="lineno"> 2778</span>&#160;<span class="keyword">extern</span> <span class="keywordtype">int</span>        __kmp_need_register_atfork;<span class="comment">/* At initialization, call pthread_atfork to install fork handler */</span></div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:2793:<div class="line"><a name="l02796"></a><span class="lineno"> 2796</span>&#160;<span class="preprocessor"></span><span class="keyword">extern</span> <span class="keywordtype">int</span>        __kmp_inherit_fp_control; <span class="comment">/* copy fp creg(s) parent-&gt;workers at fork */</span></div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:2853:<div class="line"><a name="l02856"></a><span class="lineno"> 2856</span>&#160;<span class="comment">/* the following are protected by the fork/join lock */</span></div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:2869:<div class="line"><a name="l02872"></a><span class="lineno"> 2872</span>&#160;<span class="comment">/* end data protected by fork/join lock */</span></div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:3178:<div class="line"><a name="l03181"></a><span class="lineno"> 3181</span>&#160;<span class="preprocessor"></span><span class="keyword">extern</span> <span class="keywordtype">void</span> __kmp_register_atfork( <span class="keywordtype">void</span> );</div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:3222:<div class="line"><a name="l03228"></a><span class="lineno"> 3228</span>&#160;<span class="keyword">enum</span> fork_context_e</div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:3224:<div class="line"><a name="l03230"></a><span class="lineno"> 3230</span>&#160;    fork_context_gnu,                           </div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:3225:<div class="line"><a name="l03231"></a><span class="lineno"> 3231</span>&#160;    fork_context_intel,                         </div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:3226:<div class="line"><a name="l03232"></a><span class="lineno"> 3232</span>&#160;    fork_context_last</div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:3228:<div class="line"><a name="l03234"></a><span class="lineno"> 3234</span>&#160;<span class="keyword">extern</span> <span class="keywordtype">int</span> __kmp_fork_call( <a class="code" href="structident.html">ident_t</a> *loc, <span class="keywordtype">int</span> gtid, <span class="keyword">enum</span> fork_context_e fork_context,</div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:3244:<div class="line"><a name="l03250"></a><span class="lineno"> 3250</span>&#160;                           , <span class="keyword">enum</span> fork_context_e fork_context</div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:3252:<div class="line"><a name="l03258"></a><span class="lineno"> 3258</span>&#160;<span class="keyword">extern</span> <span class="keywordtype">void</span> __kmp_internal_fork( <a class="code" href="structident.html">ident_t</a> *<span class="keywordtype">id</span>, <span class="keywordtype">int</span> gtid, kmp_team_t *team );</div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:3366:<div class="line"><a name="l03372"></a><span class="lineno"> 3372</span>&#160;KMP_EXPORT kmp_int32  <a class="code" href="group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a">__kmpc_ok_to_fork</a>     ( <a class="code" href="structident.html">ident_t</a> * );</div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:3367:<div class="line"><a name="l03373"></a><span class="lineno"> 3373</span>&#160;KMP_EXPORT <span class="keywordtype">void</span>   <a class="code" href="group__PARALLEL.html#gac2b7cc2fa78dde5381bcf00cfc48d124">__kmpc_fork_call</a>          ( <a class="code" href="structident.html">ident_t</a> *, kmp_int32 nargs, <a class="code" href="group__PARALLEL.html#gab49014fb4572e7d0f308fd9b1824daf7">kmpc_micro</a> microtask, ... );</div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:3548:<div class="line"><a name="l03554"></a><span class="lineno"> 3554</span>&#160;KMP_EXPORT <span class="keywordtype">void</span> <a class="code" href="group__PARALLEL.html#ga1cab712d076ba1d2758b0c3bf5ffe38a">__kmpc_fork_teams</a>(<a class="code" href="structident.html">ident_t</a> *loc, kmp_int32 argc, <a class="code" href="group__PARALLEL.html#gab49014fb4572e7d0f308fd9b1824daf7">kmpc_micro</a> microtask, ...);</div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:3676:<div class="ttc" id="group__PARALLEL_html_ga1cab712d076ba1d2758b0c3bf5ffe38a"><div class="ttname"><a href="group__PARALLEL.html#ga1cab712d076ba1d2758b0c3bf5ffe38a">__kmpc_fork_teams</a></div><div class="ttdeci">KMP_EXPORT void __kmpc_fork_teams(ident_t *loc, kmp_int32 argc, kmpc_micro microtask,...)</div><div class="ttdef"><b>Definition:</b> <a href="kmp__csupport_8c_source.html#l00385">kmp_csupport.c:385</a></div></div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:3680:<div class="ttc" id="group__DEPRECATED_html_ga27292e41af4c26e0bdf45b12b1f76d5a"><div class="ttname"><a href="group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a">__kmpc_ok_to_fork</a></div><div class="ttdeci">KMP_EXPORT kmp_int32 __kmpc_ok_to_fork(ident_t *)</div><div class="ttdef"><b>Definition:</b> <a href="kmp__csupport_8c_source.html#l00161">kmp_csupport.c:161</a></div></div>
runtime/doc/doxygen/generated/html/kmp_8h_source.html:3696:<div class="ttc" id="group__PARALLEL_html_gac2b7cc2fa78dde5381bcf00cfc48d124"><div class="ttname"><a href="group__PARALLEL.html#gac2b7cc2fa78dde5381bcf00cfc48d124">__kmpc_fork_call</a></div><div class="ttdeci">KMP_EXPORT void __kmpc_fork_call(ident_t *, kmp_int32 nargs, kmpc_micro microtask,...)</div><div class="ttdef"><b>Definition:</b> <a href="kmp__csupport_8c_source.html#l00281">kmp_csupport.c:281</a></div></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:145:<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">if</span>(__kmp_forkjoin_frames_mode == 3 || __kmp_forkjoin_frames_mode == 2) {</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:185:<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            <span class="keywordflow">if</span> (__kmp_forkjoin_frames_mode == 2) {</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:268:<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="comment">// In a fork barrier; cannot get the object reliably (or ITTNOTIFY is disabled)</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:269:<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier, 0, -1);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:273:<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            <span class="keywordflow">if</span> (bt == bs_forkjoin_barrier &amp;&amp; TCR_4(__kmp_global.g.g_done))</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:276:<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;            itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:282:<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="preprocessor"></span>        <span class="comment">// Early exit for reaping threads releasing forkjoin barrier</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:283:<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">if</span> ( bt == bs_forkjoin_barrier &amp;&amp; TCR_4(__kmp_global.g.g_done) )</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:323:<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keywordflow">if</span>(__kmp_forkjoin_frames_mode == 3 || __kmp_forkjoin_frames_mode == 2) {</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:351:<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            <span class="keywordflow">if</span> (__kmp_forkjoin_frames_mode == 2) {</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:411:<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">if</span> (!KMP_MASTER_TID(tid)) { <span class="comment">// Handle fork barrier workers who aren&#39;t part of a team yet</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:420:<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            <span class="comment">// In fork barrier where we could not get the object reliably (or ITTNOTIFY is disabled)</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:421:<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier, 0, -1);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:425:<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <span class="keywordflow">if</span> (bt == bs_forkjoin_barrier &amp;&amp; TCR_4(__kmp_global.g.g_done))</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:428:<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:434:<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="preprocessor"></span>        <span class="comment">// Early exit for reaping threads releasing forkjoin barrier</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:435:<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordflow">if</span> (bt == bs_forkjoin_barrier &amp;&amp; TCR_4(__kmp_global.g.g_done))</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:522:<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordflow">if</span>(__kmp_forkjoin_frames_mode == 3 || __kmp_forkjoin_frames_mode == 2) {</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:575:<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            <span class="keywordflow">if</span> (__kmp_forkjoin_frames_mode == 2) {</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:636:<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="keywordflow">else</span>  { <span class="comment">// Handle fork barrier workers who aren&#39;t part of a team yet</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:645:<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;            <span class="comment">// In fork barrier where we could not get the object reliably</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:646:<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;            itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier, 0, -1);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:650:<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            <span class="keywordflow">if</span> (bt == bs_forkjoin_barrier &amp;&amp; TCR_4(__kmp_global.g.g_done))</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:653:<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;            itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:659:<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="preprocessor"></span>        <span class="comment">// Early exit for reaping threads releasing forkjoin barrier</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:660:<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <span class="keywordflow">if</span> (bt == bs_forkjoin_barrier &amp;&amp; TCR_4(__kmp_global.g.g_done))</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:839:<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    <span class="keywordflow">if</span>(__kmp_forkjoin_frames_mode == 3 || __kmp_forkjoin_frames_mode == 2) {</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:987:<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;        <span class="comment">// Early exit for reaping threads releasing forkjoin barrier</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:988:<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;        <span class="keywordflow">if</span> (bt == bs_forkjoin_barrier &amp;&amp; TCR_4(__kmp_global.g.g_done))</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1262:<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;            <span class="keywordflow">if</span> ((__itt_frame_submit_v3_ptr || KMP_ITT_DEBUG) &amp;&amp; __kmp_forkjoin_frames_mode &amp;&amp;</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1272:<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;                <span class="keywordflow">switch</span>(__kmp_forkjoin_frames_mode) {</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1444:<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;        <span class="comment">// Get object created at fork_barrier</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1445:<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;        itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1513:<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;    <span class="keywordflow">switch</span> (__kmp_barrier_gather_pattern[bs_forkjoin_barrier]) {</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1515:<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;        KMP_ASSERT(__kmp_barrier_gather_branch_bits[bs_forkjoin_barrier]);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1516:<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;        __kmp_hyper_barrier_gather(bs_forkjoin_barrier, this_thr, gtid, tid, NULL</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1521:<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;        __kmp_hierarchical_barrier_gather(bs_forkjoin_barrier, this_thr, gtid, tid, NULL</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1526:<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;        KMP_ASSERT(__kmp_barrier_gather_branch_bits[bs_forkjoin_barrier]);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1527:<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;        __kmp_tree_barrier_gather(bs_forkjoin_barrier, this_thr, gtid, tid, NULL</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1532:<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;        __kmp_linear_barrier_gather(bs_forkjoin_barrier, this_thr, gtid, tid, NULL</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1553:<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;        <span class="keywordflow">if</span> ((__itt_frame_submit_v3_ptr || KMP_ITT_DEBUG) &amp;&amp; __kmp_forkjoin_frames_mode &amp;&amp;</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1564:<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;            <span class="keywordflow">switch</span>(__kmp_forkjoin_frames_mode) {</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1622:<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;<span class="comment">// TODO release worker threads&#39; fork barriers as we are ready instead of all at once</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1624:<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;__kmp_fork_barrier(<span class="keywordtype">int</span> gtid, <span class="keywordtype">int</span> tid)</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1626:<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;    KMP_TIME_DEVELOPER_BLOCK(KMP_fork_barrier);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1633:<div class="line"><a name="l01550"></a><span class="lineno"> 1550</span>&#160;    KA_TRACE(10, (<span class="stringliteral">&quot;__kmp_fork_barrier: T#%d(%d:%d) has arrived\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1641:<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;            itt_sync_obj  = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier, 1);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1654:<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;            KA_TRACE(500, (<span class="stringliteral">&quot;__kmp_fork_barrier: T#%d(%d:0) checking T#%d(%d:%d) fork go == %u.\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1657:<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;                           other_threads[i]-&gt;th.th_bar[bs_forkjoin_barrier].bb.b_go));</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1658:<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;            KMP_DEBUG_ASSERT((TCR_4(other_threads[i]-&gt;th.th_bar[bs_forkjoin_barrier].bb.b_go)</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1670:<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;<span class="comment">           fork barrier. Copy the blocktime info to the thread, where __kmp_wait_template() can</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1679:<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;    <span class="keywordflow">switch</span> (__kmp_barrier_release_pattern[bs_forkjoin_barrier]) {</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1681:<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;        KMP_ASSERT(__kmp_barrier_release_branch_bits[bs_forkjoin_barrier]);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1682:<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;        __kmp_hyper_barrier_release(bs_forkjoin_barrier, this_thr, gtid, tid, TRUE</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1687:<div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;        __kmp_hierarchical_barrier_release(bs_forkjoin_barrier, this_thr, gtid, tid, TRUE</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1692:<div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;        KMP_ASSERT(__kmp_barrier_release_branch_bits[bs_forkjoin_barrier]);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1693:<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;        __kmp_tree_barrier_release(bs_forkjoin_barrier, this_thr, gtid, tid, TRUE</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1698:<div class="line"><a name="l01615"></a><span class="lineno"> 1615</span>&#160;        __kmp_linear_barrier_release(bs_forkjoin_barrier, this_thr, gtid, tid, TRUE</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1703:<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;    <span class="comment">// Early exit for reaping threads releasing forkjoin barrier</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1710:<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;                itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1716:<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;<span class="preprocessor"></span>        KA_TRACE(10, (<span class="stringliteral">&quot;__kmp_fork_barrier: T#%d is leaving early\n&quot;</span>, gtid));</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1730:<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;<span class="comment">       __kmp_reinitialize_team. __kmp_fork_call() assumes the master thread&#39;s implicit task has</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1731:<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;<span class="comment">       this data before this function is called. We cannot modify __kmp_fork_call() to look at</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1733:<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;<span class="comment">       threads arrays have been allocated when __kmp_fork_call() is executed. */</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1738:<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;            KA_TRACE(10, (<span class="stringliteral">&quot;__kmp_fork_barrier: T#%d(%d) is PULLing ICVs\n&quot;</span>, gtid, tid));</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1741:<div class="line"><a name="l01658"></a><span class="lineno"> 1658</span>&#160;                      &amp;team-&gt;t.t_threads[0]-&gt;th.th_bar[bs_forkjoin_barrier].bb.th_fixed_icvs);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1764:<div class="line"><a name="l01681"></a><span class="lineno"> 1681</span>&#160;            KA_TRACE(100, (<span class="stringliteral">&quot;__kmp_fork_barrier: T#%d already in correct place %d\n&quot;</span>,</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1777:<div class="line"><a name="l01694"></a><span class="lineno"> 1694</span>&#160;            itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1782:<div class="line"><a name="l01699"></a><span class="lineno"> 1699</span>&#160;<span class="preprocessor"></span>    KA_TRACE(10, (<span class="stringliteral">&quot;__kmp_fork_barrier: T#%d(%d:%d) is leaving\n&quot;</span>, gtid, team-&gt;t.t_id, tid));</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1795:<div class="line"><a name="l01712"></a><span class="lineno"> 1712</span>&#160;<span class="comment">       __kmp_reinitialize_team. __kmp_fork_call() assumes the master thread&#39;s implicit task has</span></div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1801:<div class="line"><a name="l01718"></a><span class="lineno"> 1718</span>&#160;    copy_icvs(&amp;team-&gt;t.t_threads[0]-&gt;th.th_bar[bs_forkjoin_barrier].bb.th_fixed_icvs, new_icvs);</div>
runtime/doc/doxygen/generated/html/kmp__barrier_8cpp_source.html:1805:<div class="line"><a name="l01722"></a><span class="lineno"> 1722</span>&#160;<span class="preprocessor"></span>    <span class="comment">// The ICVs will be propagated in the fork barrier, so nothing needs to be done here.</span></div>
runtime/doc/doxygen/generated/html/kmp__cancel_8cpp_source.html:259:<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="comment">// the next barrier is the fork/join barrier, which</span></div>
runtime/doc/doxygen/generated/html/kmp__csupport_8c_source.html:179:<div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a">  161</a></span>&#160;<a class="code" href="group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a">__kmpc_ok_to_fork</a>(<a class="code" href="structident.html">ident_t</a> *loc)</div>
runtime/doc/doxygen/generated/html/kmp__csupport_8c_source.html:276:<div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="group__PARALLEL.html#gac2b7cc2fa78dde5381bcf00cfc48d124">  281</a></span>&#160;<a class="code" href="group__PARALLEL.html#gac2b7cc2fa78dde5381bcf00cfc48d124">__kmpc_fork_call</a>(<a class="code" href="structident.html">ident_t</a> *loc, kmp_int32 argc, <a class="code" href="group__PARALLEL.html#gab49014fb4572e7d0f308fd9b1824daf7">kmpc_micro</a> microtask, ...)</div>
runtime/doc/doxygen/generated/html/kmp__csupport_8c_source.html:311:<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="preprocessor"></span>    __kmp_fork_call( loc, gtid, fork_context_intel,</div>
runtime/doc/doxygen/generated/html/kmp__csupport_8c_source.html:330:<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        , fork_context_intel</div>
runtime/doc/doxygen/generated/html/kmp__csupport_8c_source.html:361:<div class="line"><a name="l00385"></a><span class="lineno"><a class="line" href="group__PARALLEL.html#ga1cab712d076ba1d2758b0c3bf5ffe38a">  385</a></span>&#160;<a class="code" href="group__PARALLEL.html#ga1cab712d076ba1d2758b0c3bf5ffe38a">__kmpc_fork_teams</a>(<a class="code" href="structident.html">ident_t</a> *loc, kmp_int32 argc, <a class="code" href="group__PARALLEL.html#gab49014fb4572e7d0f308fd9b1824daf7">kmpc_micro</a> microtask, ...)</div>
runtime/doc/doxygen/generated/html/kmp__csupport_8c_source.html:391:<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    __kmp_fork_call( loc, gtid, fork_context_intel,</div>
runtime/doc/doxygen/generated/html/kmp__csupport_8c_source.html:406:<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        , fork_context_intel</div>
runtime/doc/doxygen/generated/html/kmp__csupport_8c_source.html:441:<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;<span class="comment">                                                 * kmp_fork_call since the tasks to be done are similar in each case.</span></div>
runtime/doc/doxygen/generated/html/kmp__csupport_8c_source.html:560:<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            ( __kmp_forkjoin_frames_mode == 3 || __kmp_forkjoin_frames_mode == 1 ) )</div>
runtime/doc/doxygen/generated/html/kmp__csupport_8c_source.html:564:<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            <span class="keywordflow">if</span> ( __kmp_forkjoin_frames_mode == 3 )</div>
runtime/doc/doxygen/generated/html/kmp__csupport_8c_source.html:569:<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;            ! __kmp_forkjoin_frames_mode &amp;&amp; __kmp_forkjoin_frames )</div>
runtime/doc/doxygen/generated/html/kmp__csupport_8c_source.html:3110:<div class="ttc" id="group__PARALLEL_html_ga1cab712d076ba1d2758b0c3bf5ffe38a"><div class="ttname"><a href="group__PARALLEL.html#ga1cab712d076ba1d2758b0c3bf5ffe38a">__kmpc_fork_teams</a></div><div class="ttdeci">void __kmpc_fork_teams(ident_t *loc, kmp_int32 argc, kmpc_micro microtask,...)</div><div class="ttdef"><b>Definition:</b> <a href="kmp__csupport_8c_source.html#l00385">kmp_csupport.c:385</a></div></div>
runtime/doc/doxygen/generated/html/kmp__csupport_8c_source.html:3112:<div class="ttc" id="group__DEPRECATED_html_ga27292e41af4c26e0bdf45b12b1f76d5a"><div class="ttname"><a href="group__DEPRECATED.html#ga27292e41af4c26e0bdf45b12b1f76d5a">__kmpc_ok_to_fork</a></div><div class="ttdeci">kmp_int32 __kmpc_ok_to_fork(ident_t *loc)</div><div class="ttdef"><b>Definition:</b> <a href="kmp__csupport_8c_source.html#l00161">kmp_csupport.c:161</a></div></div>
runtime/doc/doxygen/generated/html/kmp__csupport_8c_source.html:3122:<div class="ttc" id="group__PARALLEL_html_gac2b7cc2fa78dde5381bcf00cfc48d124"><div class="ttname"><a href="group__PARALLEL.html#gac2b7cc2fa78dde5381bcf00cfc48d124">__kmpc_fork_call</a></div><div class="ttdeci">void __kmpc_fork_call(ident_t *loc, kmp_int32 argc, kmpc_micro microtask,...)</div><div class="ttdef"><b>Definition:</b> <a href="kmp__csupport_8c_source.html#l00281">kmp_csupport.c:281</a></div></div>
runtime/doc/doxygen/generated/html/kmp__debugger_8c_source.html:139:<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">static</span> <span class="keywordtype">char</span> func_fork[]         = <span class="stringliteral">&quot;__kmpc_fork_call&quot;</span>;</div>
runtime/doc/doxygen/generated/html/kmp__debugger_8c_source.html:140:<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">static</span> <span class="keywordtype">char</span> func_fork_teams[]   = <span class="stringliteral">&quot;__kmpc_fork_teams&quot;</span>;</div>
runtime/doc/doxygen/generated/html/kmp__debugger_8c_source.html:171:<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    addr_and_size_of( func_fork ),</div>
runtime/doc/doxygen/generated/html/kmp__debugger_8c_source.html:172:<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    addr_and_size_of( func_fork_teams ),</div>
runtime/doc/doxygen/generated/latex/group__DEPRECATED.tex:7:kmp\-\_\-int32 \hyperlink{group__DEPRECATED_ga27292e41af4c26e0bdf45b12b1f76d5a}{\-\_\-\-\_\-kmpc\-\_\-ok\-\_\-to\-\_\-fork} (\hyperlink{group__BASIC__TYPES_ga690fda6b92f039a72db263c6b4394ddb}{ident\-\_\-t} $\ast$loc)
runtime/doc/doxygen/generated/latex/group__DEPRECATED.tex:15:\hypertarget{group__DEPRECATED_ga27292e41af4c26e0bdf45b12b1f76d5a}{\index{Deprecated Functions@{Deprecated Functions}!\-\_\-\-\_\-kmpc\-\_\-ok\-\_\-to\-\_\-fork@{\-\_\-\-\_\-kmpc\-\_\-ok\-\_\-to\-\_\-fork}}
runtime/doc/doxygen/generated/latex/group__DEPRECATED.tex:16:\index{\-\_\-\-\_\-kmpc\-\_\-ok\-\_\-to\-\_\-fork@{\-\_\-\-\_\-kmpc\-\_\-ok\-\_\-to\-\_\-fork}!Deprecated Functions@{Deprecated Functions}}
runtime/doc/doxygen/generated/latex/group__DEPRECATED.tex:17:\subsubsection[{\-\_\-\-\_\-kmpc\-\_\-ok\-\_\-to\-\_\-fork}]{\setlength{\rightskip}{0pt plus 5cm}kmp\-\_\-int32 \-\_\-\-\_\-kmpc\-\_\-ok\-\_\-to\-\_\-fork (
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:1:\hypertarget{group__PARALLEL}{\section{Parallel (fork/join)}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:2:\label{group__PARALLEL}\index{Parallel (fork/join)@{Parallel (fork/join)}}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:14:void \hyperlink{group__PARALLEL_gac2b7cc2fa78dde5381bcf00cfc48d124}{\-\_\-\-\_\-kmpc\-\_\-fork\-\_\-call} (\hyperlink{group__BASIC__TYPES_ga690fda6b92f039a72db263c6b4394ddb}{ident\-\_\-t} $\ast$loc, kmp\-\_\-int32 argc, \hyperlink{group__PARALLEL_gab49014fb4572e7d0f308fd9b1824daf7}{kmpc\-\_\-micro} microtask,...)
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:18:void \hyperlink{group__PARALLEL_ga1cab712d076ba1d2758b0c3bf5ffe38a}{\-\_\-\-\_\-kmpc\-\_\-fork\-\_\-teams} (\hyperlink{group__BASIC__TYPES_ga690fda6b92f039a72db263c6b4394ddb}{ident\-\_\-t} $\ast$loc, kmp\-\_\-int32 argc, \hyperlink{group__PARALLEL_gab49014fb4572e7d0f308fd9b1824daf7}{kmpc\-\_\-micro} microtask,...)
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:30:\hypertarget{group__PARALLEL_gab49014fb4572e7d0f308fd9b1824daf7}{\index{Parallel (fork/join)@{Parallel (fork/join)}!kmpc\-\_\-micro@{kmpc\-\_\-micro}}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:31:\index{kmpc\-\_\-micro@{kmpc\-\_\-micro}!Parallel (fork/join)@{Parallel (fork/join)}}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:33:The type for a microtask which gets passed to \hyperlink{group__PARALLEL_gac2b7cc2fa78dde5381bcf00cfc48d124}{\-\_\-\-\_\-kmpc\-\_\-fork\-\_\-call()}. The arguments to the outlined function are 
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:49:\hypertarget{group__PARALLEL_gac341818e68b06d910111e4cf08bb54dd}{\index{Parallel (fork/join)@{Parallel (fork/join)}!\-\_\-\-\_\-kmpc\-\_\-end\-\_\-serialized\-\_\-parallel@{\-\_\-\-\_\-kmpc\-\_\-end\-\_\-serialized\-\_\-parallel}}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:50:\index{\-\_\-\-\_\-kmpc\-\_\-end\-\_\-serialized\-\_\-parallel@{\-\_\-\-\_\-kmpc\-\_\-end\-\_\-serialized\-\_\-parallel}!Parallel (fork/join)@{Parallel (fork/join)}}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:68:\hypertarget{group__PARALLEL_gac2b7cc2fa78dde5381bcf00cfc48d124}{\index{Parallel (fork/join)@{Parallel (fork/join)}!\-\_\-\-\_\-kmpc\-\_\-fork\-\_\-call@{\-\_\-\-\_\-kmpc\-\_\-fork\-\_\-call}}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:69:\index{\-\_\-\-\_\-kmpc\-\_\-fork\-\_\-call@{\-\_\-\-\_\-kmpc\-\_\-fork\-\_\-call}!Parallel (fork/join)@{Parallel (fork/join)}}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:70:\subsubsection[{\-\_\-\-\_\-kmpc\-\_\-fork\-\_\-call}]{\setlength{\rightskip}{0pt plus 5cm}void \-\_\-\-\_\-kmpc\-\_\-fork\-\_\-call (
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:89:Do the actual fork and call the microtask in the relevant number of threads. 
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:93:\hypertarget{group__PARALLEL_ga1cab712d076ba1d2758b0c3bf5ffe38a}{\index{Parallel (fork/join)@{Parallel (fork/join)}!\-\_\-\-\_\-kmpc\-\_\-fork\-\_\-teams@{\-\_\-\-\_\-kmpc\-\_\-fork\-\_\-teams}}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:94:\index{\-\_\-\-\_\-kmpc\-\_\-fork\-\_\-teams@{\-\_\-\-\_\-kmpc\-\_\-fork\-\_\-teams}!Parallel (fork/join)@{Parallel (fork/join)}}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:95:\subsubsection[{\-\_\-\-\_\-kmpc\-\_\-fork\-\_\-teams}]{\setlength{\rightskip}{0pt plus 5cm}void \-\_\-\-\_\-kmpc\-\_\-fork\-\_\-teams (
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:114:Do the actual fork and call the microtask in the relevant number of threads. 
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:118:\hypertarget{group__PARALLEL_gaae9462b03457d809faeb3e767a5b2283}{\index{Parallel (fork/join)@{Parallel (fork/join)}!\-\_\-\-\_\-kmpc\-\_\-push\-\_\-num\-\_\-teams@{\-\_\-\-\_\-kmpc\-\_\-push\-\_\-num\-\_\-teams}}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:119:\index{\-\_\-\-\_\-kmpc\-\_\-push\-\_\-num\-\_\-teams@{\-\_\-\-\_\-kmpc\-\_\-push\-\_\-num\-\_\-teams}!Parallel (fork/join)@{Parallel (fork/join)}}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:143:\hypertarget{group__PARALLEL_ga345b3a5866deefefc91ae1e8958f49f4}{\index{Parallel (fork/join)@{Parallel (fork/join)}!\-\_\-\-\_\-kmpc\-\_\-push\-\_\-num\-\_\-threads@{\-\_\-\-\_\-kmpc\-\_\-push\-\_\-num\-\_\-threads}}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:144:\index{\-\_\-\-\_\-kmpc\-\_\-push\-\_\-num\-\_\-threads@{\-\_\-\-\_\-kmpc\-\_\-push\-\_\-num\-\_\-threads}!Parallel (fork/join)@{Parallel (fork/join)}}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:161:Set the number of threads to be used by the next fork spawned by this thread. This call is only required if the parallel construct has a {\ttfamily num\-\_\-threads} clause. 
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:165:\hypertarget{group__PARALLEL_ga7b1ba1cc8d9d2fea8654bbb1e59f079e}{\index{Parallel (fork/join)@{Parallel (fork/join)}!\-\_\-\-\_\-kmpc\-\_\-serialized\-\_\-parallel@{\-\_\-\-\_\-kmpc\-\_\-serialized\-\_\-parallel}}
runtime/doc/doxygen/generated/latex/group__PARALLEL.tex:166:\index{\-\_\-\-\_\-kmpc\-\_\-serialized\-\_\-parallel@{\-\_\-\-\_\-kmpc\-\_\-serialized\-\_\-parallel}!Parallel (fork/join)@{Parallel (fork/join)}}
runtime/doc/doxygen/generated/latex/group__STATS__GATHERING.tex:78:Referenced by \-\_\-\-\_\-kmpc\-\_\-barrier(), \-\_\-\-\_\-kmpc\-\_\-critical(), \-\_\-\-\_\-kmpc\-\_\-fork\-\_\-call(), \-\_\-\-\_\-kmpc\-\_\-fork\-\_\-teams(), \-\_\-\-\_\-kmpc\-\_\-master(), \-\_\-\-\_\-kmpc\-\_\-reduce(), \-\_\-\-\_\-kmpc\-\_\-reduce\-\_\-nowait(), and \-\_\-\-\_\-kmpc\-\_\-single().
runtime/doc/doxygen/generated/latex/group__STATS__GATHERING.tex:242:Referenced by \-\_\-\-\_\-kmpc\-\_\-critical(), \-\_\-\-\_\-kmpc\-\_\-fork\-\_\-call(), \-\_\-\-\_\-kmpc\-\_\-master(), and \-\_\-\-\_\-kmpc\-\_\-single().
runtime/doc/doxygen/generated/latex/group__STATS__GATHERING.tex:266:Referenced by \-\_\-\-\_\-kmpc\-\_\-end\-\_\-critical(), \-\_\-\-\_\-kmpc\-\_\-end\-\_\-master(), \-\_\-\-\_\-kmpc\-\_\-end\-\_\-single(), and \-\_\-\-\_\-kmpc\-\_\-fork\-\_\-call().
runtime/doc/doxygen/generated/latex/group__THREAD__STATES.tex:124:Referenced by \-\_\-\-\_\-kmpc\-\_\-fork\-\_\-call().
runtime/doc/doxygen/generated/latex/group__WAIT__RELEASE.tex:14:The definitions and functions here implement the lowest level thread synchronizations of suspending a thread and awaking it. They are used to build higher level operations such as barriers and fork/join. 
runtime/doc/doxygen/generated/latex/index.tex:88:    \_\_OMP\_runtime\_fork(outlinedFooBody, (\textcolor{keywordtype}{void}*)0);   \textcolor{comment}{// Not the real function name!}
runtime/doc/doxygen/generated/latex/index.tex:98:The main benefit of this technique is that there is no code required at the fork point to marshal the arguments to the outlined function. Since the runtime knows statically how many arguments must be passed to the outlined function, it can easily copy them to the thread's stack frame. Therefore the performance of the fork code is independent of the number of shared variables that are accessed by the outlined function.
runtime/doc/doxygen/generated/latex/index.tex:110:\item \hyperlink{group__PARALLEL}{Parallel (fork/join)} functions for implementing {\ttfamily omp parallel}
runtime/doc/doxygen/generated/latex/index.tex:150:    \_\_kmpc\_fork call( & loc7, 1, main\_7\_parallel\_3, & r ); 
runtime/doc/doxygen/generated/latex/modules.tex:8:\item \contentsline{section}{Parallel (fork/join)}{\pageref{group__PARALLEL}}{}
runtime/doc/doxygen/generated/latex/structident.tex:51:Referenced by \-\_\-\-\_\-kmpc\-\_\-ok\-\_\-to\-\_\-fork().
runtime/doc/doxygen/libomp_interface.h:130:    __OMP_runtime_fork(outlinedFooBody, (void*)0);   // Not the real function name!
runtime/doc/doxygen/libomp_interface.h:163:at the fork point to marshal the arguments to the outlined function.
runtime/doc/doxygen/libomp_interface.h:166:frame.  Therefore the performance of the fork code is independent of
runtime/doc/doxygen/libomp_interface.h:229:    __kmpc_fork call( & loc7, 1, main_7_parallel_3, & r ); 
runtime/doc/doxygen/libomp_interface.h:280:@defgroup PARALLEL Parallel (fork/join)
runtime/src/kmp_itt.h:56:__kmp_inline void __kmp_itt_region_forking(  int gtid, int team_size, int barriers, int serialized = 0 ); // Master only, before forking threads.
runtime/src/kmp_itt.h:172:    // FORKING      : Before the master thread forks.
runtime/src/dllexports:19:- __kmpc_fork_call_bound                    139
runtime/src/dllexports:36:- mpofork                                   508
runtime/src/dllexports:58:- mppfork                                   530
runtime/src/dllexports:163:        __kmp_fork_call
runtime/src/dllexports:239:    __kmpc_fork_call                        138
runtime/src/dllexports:245:    __kmpc_ok_to_fork                       145
runtime/src/dllexports:260:#    __kmpc_ssp_fork                         161
runtime/src/dllexports:366:        __kmpc_fork_teams                   241
runtime/src/exports_so.txt:83:        __kmp_fork_call;
runtime/src/kmp.h:1407:The type for a microtask which gets passed to @ref __kmpc_fork_call().
runtime/src/kmp.h:1738:    bs_plain_barrier = 0,       /* 0, All non-fork/join barriers (except reduction barriers if enabled) */
runtime/src/kmp.h:1739:    bs_forkjoin_barrier,        /* 1, All fork/join (parallel region) barriers */
runtime/src/kmp.h:2334:    KMP_ALIGN_CACHE int     th_set_nproc;  /* if > 0, then only use this request for the next fork */
runtime/src/kmp.h:2339:    kmp_proc_bind_t         th_set_proc_bind; /* if != proc_bind_default, use request for next fork */
runtime/src/kmp.h:2544:    int                      t_master_active;  // save on fork, restore on join
runtime/src/kmp.h:2621:extern int      __kmp_forkjoin_frames;
runtime/src/kmp.h:2622:extern int      __kmp_forkjoin_frames_mode;
runtime/src/kmp.h:2701:extern kmp_bootstrap_lock_t __kmp_forkjoin_lock;  /* control fork/join access */
runtime/src/kmp.h:2777:extern int        __kmp_need_register_atfork_specified;
runtime/src/kmp.h:2778:extern int        __kmp_need_register_atfork;/* At initialization, call pthread_atfork to install fork handler */
runtime/src/kmp.h:2796:extern int        __kmp_inherit_fp_control; /* copy fp creg(s) parent->workers at fork */
runtime/src/kmp.h:2856:/* the following are protected by the fork/join lock */
runtime/src/kmp.h:2872:/* end data protected by fork/join lock */
runtime/src/kmp.h:3181:extern void __kmp_register_atfork( void );
runtime/src/kmp.h:3226: * Tell the fork call which compiler generated the fork call, and therefore how to deal with the call.
runtime/src/kmp.h:3228:enum fork_context_e
runtime/src/kmp.h:3230:    fork_context_gnu,                           /**< Called from GNU generated code, so must not invoke the microtask internally. */
runtime/src/kmp.h:3231:    fork_context_intel,                         /**< Called from Intel generated code.  */
runtime/src/kmp.h:3232:    fork_context_last
runtime/src/kmp.h:3234:extern int __kmp_fork_call( ident_t *loc, int gtid, enum fork_context_e fork_context,
runtime/src/kmp.h:3250:                           , enum fork_context_e fork_context
runtime/src/kmp.h:3258:extern void __kmp_internal_fork( ident_t *id, int gtid, kmp_team_t *team );
runtime/src/kmp.h:3372:KMP_EXPORT kmp_int32  __kmpc_ok_to_fork     ( ident_t * );
runtime/src/kmp.h:3373:KMP_EXPORT void   __kmpc_fork_call          ( ident_t *, kmp_int32 nargs, kmpc_micro microtask, ... );
runtime/src/kmp.h:3554:KMP_EXPORT void __kmpc_fork_teams(ident_t *loc, kmp_int32 argc, kmpc_micro microtask, ...);
runtime/src/kmp_barrier.cpp:62:    if(__kmp_forkjoin_frames_mode == 3 || __kmp_forkjoin_frames_mode == 2) {
runtime/src/kmp_barrier.cpp:102:            if (__kmp_forkjoin_frames_mode == 2) {
runtime/src/kmp_barrier.cpp:185:            // In a fork barrier; cannot get the object reliably (or ITTNOTIFY is disabled)
runtime/src/kmp_barrier.cpp:186:            itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier, 0, -1);
runtime/src/kmp_barrier.cpp:190:            if (bt == bs_forkjoin_barrier && TCR_4(__kmp_global.g.g_done))
runtime/src/kmp_barrier.cpp:193:            itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier);
runtime/src/kmp_barrier.cpp:199:        // Early exit for reaping threads releasing forkjoin barrier
runtime/src/kmp_barrier.cpp:200:        if ( bt == bs_forkjoin_barrier && TCR_4(__kmp_global.g.g_done) )
runtime/src/kmp_barrier.cpp:240:    if(__kmp_forkjoin_frames_mode == 3 || __kmp_forkjoin_frames_mode == 2) {
runtime/src/kmp_barrier.cpp:268:            if (__kmp_forkjoin_frames_mode == 2) {
runtime/src/kmp_barrier.cpp:328:    if (!KMP_MASTER_TID(tid)) { // Handle fork barrier workers who aren't part of a team yet
runtime/src/kmp_barrier.cpp:337:            // In fork barrier where we could not get the object reliably (or ITTNOTIFY is disabled)
runtime/src/kmp_barrier.cpp:338:            itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier, 0, -1);
runtime/src/kmp_barrier.cpp:342:            if (bt == bs_forkjoin_barrier && TCR_4(__kmp_global.g.g_done))
runtime/src/kmp_barrier.cpp:345:            itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier);
runtime/src/kmp_barrier.cpp:351:        // Early exit for reaping threads releasing forkjoin barrier
runtime/src/kmp_barrier.cpp:352:        if (bt == bs_forkjoin_barrier && TCR_4(__kmp_global.g.g_done))
runtime/src/kmp_barrier.cpp:439:    if(__kmp_forkjoin_frames_mode == 3 || __kmp_forkjoin_frames_mode == 2) {
runtime/src/kmp_barrier.cpp:492:            if (__kmp_forkjoin_frames_mode == 2) {
runtime/src/kmp_barrier.cpp:553:    else  { // Handle fork barrier workers who aren't part of a team yet
runtime/src/kmp_barrier.cpp:562:            // In fork barrier where we could not get the object reliably
runtime/src/kmp_barrier.cpp:563:            itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier, 0, -1);
runtime/src/kmp_barrier.cpp:567:            if (bt == bs_forkjoin_barrier && TCR_4(__kmp_global.g.g_done))
runtime/src/kmp_barrier.cpp:570:            itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier);
runtime/src/kmp_barrier.cpp:576:        // Early exit for reaping threads releasing forkjoin barrier
runtime/src/kmp_barrier.cpp:577:        if (bt == bs_forkjoin_barrier && TCR_4(__kmp_global.g.g_done))
runtime/src/kmp_barrier.cpp:756:    if(__kmp_forkjoin_frames_mode == 3 || __kmp_forkjoin_frames_mode == 2) {
runtime/src/kmp_barrier.cpp:904:        // Early exit for reaping threads releasing forkjoin barrier
runtime/src/kmp_barrier.cpp:905:        if (bt == bs_forkjoin_barrier && TCR_4(__kmp_global.g.g_done))
runtime/src/kmp_barrier.cpp:1179:            if ((__itt_frame_submit_v3_ptr || KMP_ITT_DEBUG) && __kmp_forkjoin_frames_mode &&
runtime/src/kmp_barrier.cpp:1189:                switch(__kmp_forkjoin_frames_mode) {
runtime/src/kmp_barrier.cpp:1361:        // Get object created at fork_barrier
runtime/src/kmp_barrier.cpp:1362:        itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier);
runtime/src/kmp_barrier.cpp:1430:    switch (__kmp_barrier_gather_pattern[bs_forkjoin_barrier]) {
runtime/src/kmp_barrier.cpp:1432:        KMP_ASSERT(__kmp_barrier_gather_branch_bits[bs_forkjoin_barrier]);
runtime/src/kmp_barrier.cpp:1433:        __kmp_hyper_barrier_gather(bs_forkjoin_barrier, this_thr, gtid, tid, NULL
runtime/src/kmp_barrier.cpp:1438:        __kmp_hierarchical_barrier_gather(bs_forkjoin_barrier, this_thr, gtid, tid, NULL
runtime/src/kmp_barrier.cpp:1443:        KMP_ASSERT(__kmp_barrier_gather_branch_bits[bs_forkjoin_barrier]);
runtime/src/kmp_barrier.cpp:1444:        __kmp_tree_barrier_gather(bs_forkjoin_barrier, this_thr, gtid, tid, NULL
runtime/src/kmp_barrier.cpp:1449:        __kmp_linear_barrier_gather(bs_forkjoin_barrier, this_thr, gtid, tid, NULL
runtime/src/kmp_barrier.cpp:1470:        if ((__itt_frame_submit_v3_ptr || KMP_ITT_DEBUG) && __kmp_forkjoin_frames_mode &&
runtime/src/kmp_barrier.cpp:1481:            switch(__kmp_forkjoin_frames_mode) {
runtime/src/kmp_barrier.cpp:1539:// TODO release worker threads' fork barriers as we are ready instead of all at once
runtime/src/kmp_barrier.cpp:1541:__kmp_fork_barrier(int gtid, int tid)
runtime/src/kmp_barrier.cpp:1543:    KMP_TIME_DEVELOPER_BLOCK(KMP_fork_barrier);
runtime/src/kmp_barrier.cpp:1550:    KA_TRACE(10, ("__kmp_fork_barrier: T#%d(%d:%d) has arrived\n",
runtime/src/kmp_barrier.cpp:1558:            itt_sync_obj  = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier, 1);
runtime/src/kmp_barrier.cpp:1571:            KA_TRACE(500, ("__kmp_fork_barrier: T#%d(%d:0) checking T#%d(%d:%d) fork go == %u.\n",
runtime/src/kmp_barrier.cpp:1574:                           other_threads[i]->th.th_bar[bs_forkjoin_barrier].bb.b_go));
runtime/src/kmp_barrier.cpp:1575:            KMP_DEBUG_ASSERT((TCR_4(other_threads[i]->th.th_bar[bs_forkjoin_barrier].bb.b_go)
runtime/src/kmp_barrier.cpp:1587:           fork barrier. Copy the blocktime info to the thread, where __kmp_wait_template() can
runtime/src/kmp_barrier.cpp:1596:    switch (__kmp_barrier_release_pattern[bs_forkjoin_barrier]) {
runtime/src/kmp_barrier.cpp:1598:        KMP_ASSERT(__kmp_barrier_release_branch_bits[bs_forkjoin_barrier]);
runtime/src/kmp_barrier.cpp:1599:        __kmp_hyper_barrier_release(bs_forkjoin_barrier, this_thr, gtid, tid, TRUE
runtime/src/kmp_barrier.cpp:1604:        __kmp_hierarchical_barrier_release(bs_forkjoin_barrier, this_thr, gtid, tid, TRUE
runtime/src/kmp_barrier.cpp:1609:        KMP_ASSERT(__kmp_barrier_release_branch_bits[bs_forkjoin_barrier]);
runtime/src/kmp_barrier.cpp:1610:        __kmp_tree_barrier_release(bs_forkjoin_barrier, this_thr, gtid, tid, TRUE
runtime/src/kmp_barrier.cpp:1615:        __kmp_linear_barrier_release(bs_forkjoin_barrier, this_thr, gtid, tid, TRUE
runtime/src/kmp_barrier.cpp:1620:    // Early exit for reaping threads releasing forkjoin barrier
runtime/src/kmp_barrier.cpp:1627:                itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier);
runtime/src/kmp_barrier.cpp:1633:        KA_TRACE(10, ("__kmp_fork_barrier: T#%d is leaving early\n", gtid));
runtime/src/kmp_barrier.cpp:1647:       __kmp_reinitialize_team. __kmp_fork_call() assumes the master thread's implicit task has
runtime/src/kmp_barrier.cpp:1648:       this data before this function is called. We cannot modify __kmp_fork_call() to look at
runtime/src/kmp_barrier.cpp:1650:       threads arrays have been allocated when __kmp_fork_call() is executed. */
runtime/src/kmp_barrier.cpp:1655:            KA_TRACE(10, ("__kmp_fork_barrier: T#%d(%d) is PULLing ICVs\n", gtid, tid));
runtime/src/kmp_barrier.cpp:1658:                      &team->t.t_threads[0]->th.th_bar[bs_forkjoin_barrier].bb.th_fixed_icvs);
runtime/src/kmp_barrier.cpp:1681:            KA_TRACE(100, ("__kmp_fork_barrier: T#%d already in correct place %d\n",
runtime/src/kmp_barrier.cpp:1694:            itt_sync_obj = __kmp_itt_barrier_object(gtid, bs_forkjoin_barrier);
runtime/src/kmp_barrier.cpp:1699:    KA_TRACE(10, ("__kmp_fork_barrier: T#%d(%d:%d) is leaving\n", gtid, team->t.t_id, tid));
runtime/src/kmp_barrier.cpp:1712:       __kmp_reinitialize_team. __kmp_fork_call() assumes the master thread's implicit task has
runtime/src/kmp_barrier.cpp:1718:    copy_icvs(&team->t.t_threads[0]->th.th_bar[bs_forkjoin_barrier].bb.th_fixed_icvs, new_icvs);
runtime/src/kmp_barrier.cpp:1722:    // The ICVs will be propagated in the fork barrier, so nothing needs to be done here.
runtime/src/kmp_cancel.cpp:210:            // the next barrier is the fork/join barrier, which
runtime/src/kmp_csupport.c:161:__kmpc_ok_to_fork(ident_t *loc)
runtime/src/kmp_csupport.c:236:Set the number of threads to be used by the next fork spawned by this thread.
runtime/src/kmp_csupport.c:278:Do the actual fork and call the microtask in the relevant number of threads.
runtime/src/kmp_csupport.c:281:__kmpc_fork_call(ident_t *loc, kmp_int32 argc, kmpc_micro microtask, ...)
runtime/src/kmp_csupport.c:316:    __kmp_fork_call( loc, gtid, fork_context_intel,
runtime/src/kmp_csupport.c:335:        , fork_context_intel
runtime/src/kmp_csupport.c:382:Do the actual fork and call the microtask in the relevant number of threads.
runtime/src/kmp_csupport.c:385:__kmpc_fork_teams(ident_t *loc, kmp_int32 argc, kmpc_micro microtask, ...)
runtime/src/kmp_csupport.c:415:    __kmp_fork_call( loc, gtid, fork_context_intel,
runtime/src/kmp_csupport.c:430:        , fork_context_intel
runtime/src/kmp_csupport.c:477:                                                 * kmp_fork_call since the tasks to be done are similar in each case.
runtime/src/kmp_csupport.c:603:            ( __kmp_forkjoin_frames_mode == 3 || __kmp_forkjoin_frames_mode == 1 ) )
runtime/src/kmp_csupport.c:607:            if ( __kmp_forkjoin_frames_mode == 3 )
runtime/src/kmp_csupport.c:612:            ! __kmp_forkjoin_frames_mode && __kmp_forkjoin_frames )
runtime/src/kmp_debugger.c:56:static char func_fork[]         = "__kmpc_fork_call";
runtime/src/kmp_debugger.c:57:static char func_fork_teams[]   = "__kmpc_fork_teams";
runtime/src/kmp_debugger.c:88:    addr_and_size_of( func_fork ),
runtime/src/kmp_debugger.c:89:    addr_and_size_of( func_fork_teams ),
runtime/src/kmp_itt.inl:70:        * __kmp_itt_region_forking should be called by master thread of a team. Exact moment of
runtime/src/kmp_itt.inl:92:__kmp_itt_region_forking( int gtid, int team_size, int barriers, int serialized ) {
runtime/src/kmp_itt.inl:183:} // __kmp_itt_region_forking
runtime/src/kmp_itt.inl:478:    // If the function is called from __kmp_fork_barrier, team pointer can be NULL. This "if"
runtime/src/kmp_itt.inl:479:    // helps to avoid crash. However, this is not complete solution, and reporting fork/join
runtime/src/kmp_itt.inl:543:                case bs_forkjoin_barrier : {
runtime/src/kmp_itt.inl:544:                    // In case of fork/join barrier we can read thr->th.th_ident, because it
runtime/src/kmp_omp.h:87:    addr_and_size_t  func_fork;
runtime/src/kmp_omp.h:88:    addr_and_size_t  func_fork_teams;
runtime/src/kmp_runtime.c:77:void __kmp_fork_barrier( int gtid, int tid );
runtime/src/kmp_runtime.c:248:/* caller must hold forkjoin_lock */
runtime/src/kmp_runtime.c:474:    __kmp_print_storage_map_gtid( gtid, &thr->th.th_bar[bs_forkjoin_barrier],
runtime/src/kmp_runtime.c:475:                             &thr->th.th_bar[bs_forkjoin_barrier+1],
runtime/src/kmp_runtime.c:476:                             sizeof(kmp_balign_t), "th_%d.th_bar[forkjoin]", gtid);
runtime/src/kmp_runtime.c:504:    __kmp_print_storage_map_gtid( -1, &team->t.t_bar[bs_forkjoin_barrier], &team->t.t_bar[bs_forkjoin_barrier+1],
runtime/src/kmp_runtime.c:505:                             sizeof(kmp_balign_team_t), "%s_%d.t_bar[forkjoin]", header, team_id );
runtime/src/kmp_runtime.c:579:    // So, it might be safe to access the __kmp_threads[] without taking the forkjoin_lock.
runtime/src/kmp_runtime.c:608:    // __kmp_forkjoin_lock and __kmp_stdio_lock are expected to be reset.
runtime/src/kmp_runtime.c:609:    __kmp_reset_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:636:                // So they will release the forkjoin lock by themselves.
runtime/src/kmp_runtime.c:638:                // the problem of unreleased forkjoin lock as described below.
runtime/src/kmp_runtime.c:640:                // A worker thread can take the forkjoin lock.
runtime/src/kmp_runtime.c:642:                // before it releases the forkjoin lock.
runtime/src/kmp_runtime.c:643:                // The forkjoin lock remains taken, while the thread
runtime/src/kmp_runtime.c:645:                // will try to take the forkjoin lock and will always fail,
runtime/src/kmp_runtime.c:814:        if ( __itt_metadata_add_ptr && __kmp_forkjoin_frames_mode == 3 && KMP_MASTER_GTID(gtid) &&
runtime/src/kmp_runtime.c:857: * The forkjoin lock is held by the caller.
runtime/src/kmp_runtime.c:1031: * checked on that earlier within critical section forkjoin */
runtime/src/kmp_runtime.c:1034:__kmp_fork_team_threads( kmp_root_t *root, kmp_team_t *team,
runtime/src/kmp_runtime.c:1040:    KA_TRACE( 10, ("__kmp_fork_team_threads: new_nprocs = %d\n", team->t.t_nproc ) );
runtime/src/kmp_runtime.c:1093:            /* fork or reallocate a new thread and install it in team */
runtime/src/kmp_runtime.c:1099:            KA_TRACE( 20, ("__kmp_fork_team_threads: T#%d(%d:%d) init arrived T#%d(%d:%d) join =%llu, plain=%llu\n",
runtime/src/kmp_runtime.c:1102:                            team->t.t_bar[ bs_forkjoin_barrier ].b_arrived,
runtime/src/kmp_runtime.c:1269:            __kmp_acquire_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:1284:            __kmp_release_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:1417:            ( __kmp_forkjoin_frames_mode == 3 || __kmp_forkjoin_frames_mode == 1 ) )
runtime/src/kmp_runtime.c:1420:        } else // only one notification scheme (either "submit" or "forking/joined", not both)
runtime/src/kmp_runtime.c:1423:             __kmp_forkjoin_frames && ! __kmp_forkjoin_frames_mode )
runtime/src/kmp_runtime.c:1427:            __kmp_itt_region_forking( global_tid, this_thr->th.th_team_nproc, 0, 1 );
runtime/src/kmp_runtime.c:1433:/* most of the work for a fork */
runtime/src/kmp_runtime.c:1436:__kmp_fork_call(
runtime/src/kmp_runtime.c:1439:    enum fork_context_e  call_context, // Intel, GNU, ...
runtime/src/kmp_runtime.c:1474:    KMP_TIME_DEVELOPER_BLOCK(KMP_fork_call);
runtime/src/kmp_runtime.c:1477:    KA_TRACE( 20, ("__kmp_fork_call: enter T#%d\n", gtid ));
runtime/src/kmp_runtime.c:1548:        //     The team is actual (hot), all workers are ready at the fork barrier.
runtime/src/kmp_runtime.c:1666:        KF_TRACE( 10, ( "__kmp_fork_call: before internal fork: root=%p, team=%p, master_th=%p, gtid=%d\n", root, parent_team, master_th, gtid ) );
runtime/src/kmp_runtime.c:1667:        __kmp_internal_fork( loc, gtid, parent_team );
runtime/src/kmp_runtime.c:1668:        KF_TRACE( 10, ( "__kmp_fork_call: after internal fork: root=%p, team=%p, master_th=%p, gtid=%d\n", root, parent_team, master_th, gtid ) );
runtime/src/kmp_runtime.c:1671:        KA_TRACE( 20, ("__kmp_fork_call: T#%d(%d:0) invoke microtask = %p\n",
runtime/src/kmp_runtime.c:1680:        KA_TRACE( 20, ("__kmp_fork_call: T#%d(%d:0) done microtask = %p\n",
runtime/src/kmp_runtime.c:1684:        KA_TRACE( 20, ("__kmp_fork_call: parallel exit T#%d\n", gtid ));
runtime/src/kmp_runtime.c:1705:        // Check if we need to take forkjoin lock? (no need for serialized parallel out of teams construct).
runtime/src/kmp_runtime.c:1713:                KC_TRACE( 10, ( "__kmp_fork_call: T#%d serializing team; requested %d threads\n",
runtime/src/kmp_runtime.c:1720:            __kmp_acquire_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:1734:                __kmp_release_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:1752:        KA_TRACE( 20, ("__kmp_fork_call: T#%d serializing parallel region\n", gtid ));
runtime/src/kmp_runtime.c:1756:        if ( call_context == fork_context_intel ) {
runtime/src/kmp_runtime.c:1934:        else if ( call_context == fork_context_gnu ) {
runtime/src/kmp_runtime.c:1947:            KA_TRACE( 20, ("__kmp_fork_call: T#%d serial exit\n", gtid ));
runtime/src/kmp_runtime.c:1951:            KMP_ASSERT2( call_context < fork_context_last, "__kmp_fork_call: unknown fork_context parameter" );
runtime/src/kmp_runtime.c:1955:        KA_TRACE( 20, ("__kmp_fork_call: T#%d serial exit\n", gtid ));
runtime/src/kmp_runtime.c:1962:    KF_TRACE( 10, ( "__kmp_fork_call: parent_team_aclevel=%d, master_th=%p, curtask=%p, curtask_max_aclevel=%d\n",
runtime/src/kmp_runtime.c:2030:        KF_TRACE( 10, ( "__kmp_fork_call: before __kmp_allocate_team\n" ) );
runtime/src/kmp_runtime.c:2041:        KF_TRACE( 10, ( "__kmp_fork_call: before __kmp_allocate_team\n" ) );
runtime/src/kmp_runtime.c:2052:    KF_TRACE( 10, ( "__kmp_fork_call: after __kmp_allocate_team - team = %p\n", team ) );
runtime/src/kmp_runtime.c:2093:        KA_TRACE( 20, ( "__kmp_fork_call: Master T#%d pushing task_team %p / team %p, new task_team %p / team %p\n",
runtime/src/kmp_runtime.c:2135:    KA_TRACE( 20, ("__kmp_fork_call: T#%d(%d:%d)->(%d:0) created a team of %d threads\n",
runtime/src/kmp_runtime.c:2162:    /* now actually fork the threads */
runtime/src/kmp_runtime.c:2167:    __kmp_fork_team_threads( root, team, master_th, gtid );
runtime/src/kmp_runtime.c:2174:    __kmp_release_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:2184:             ( __kmp_forkjoin_frames_mode == 3 || __kmp_forkjoin_frames_mode == 1 ) )
runtime/src/kmp_runtime.c:2189:            // Internal fork - report frame begin
runtime/src/kmp_runtime.c:2191:            if ( __kmp_forkjoin_frames_mode == 3 )
runtime/src/kmp_runtime.c:2193:        } else // only one notification scheme (either "submit" or "forking/joined", not both)
runtime/src/kmp_runtime.c:2196:             __kmp_forkjoin_frames && !__kmp_forkjoin_frames_mode )
runtime/src/kmp_runtime.c:2198:            __kmp_itt_region_forking(gtid, team->t.t_nproc, 0);
runtime/src/kmp_runtime.c:2206:    KF_TRACE(10, ("__kmp_internal_fork : root=%p, team=%p, master_th=%p, gtid=%d\n",
runtime/src/kmp_runtime.c:2211:        team->t.t_stack_id = __kmp_itt_stack_caller_create(); // create new stack stitching id before entering fork barrier
runtime/src/kmp_runtime.c:2216:    if ( ap )   // AC: skip __kmp_internal_fork at teams construct, let only master threads execute
runtime/src/kmp_runtime.c:2219:        __kmp_internal_fork( loc, gtid, team );
runtime/src/kmp_runtime.c:2220:        KF_TRACE(10, ("__kmp_internal_fork : after : root=%p, team=%p, master_th=%p, gtid=%d\n",
runtime/src/kmp_runtime.c:2224:    if (call_context == fork_context_gnu) {
runtime/src/kmp_runtime.c:2225:        KA_TRACE( 20, ("__kmp_fork_call: parallel exit T#%d\n", gtid ));
runtime/src/kmp_runtime.c:2230:    KA_TRACE( 20, ("__kmp_fork_call: T#%d(%d:0) invoke microtask = %p\n",
runtime/src/kmp_runtime.c:2232:    }  // END of timer KMP_fork_call block
runtime/src/kmp_runtime.c:2241:    KA_TRACE( 20, ("__kmp_fork_call: T#%d(%d:0) done microtask = %p\n",
runtime/src/kmp_runtime.c:2245:    KA_TRACE( 20, ("__kmp_fork_call: parallel exit T#%d\n", gtid ));
runtime/src/kmp_runtime.c:2272:    fork_context_e fork_context)
runtime/src/kmp_runtime.c:2277:            parallel_id, task_info->task_id, OMPT_INVOKER(fork_context));
runtime/src/kmp_runtime.c:2287:               , enum fork_context_e fork_context
runtime/src/kmp_runtime.c:2389:        // only one notification scheme (either "submit" or "forking/joined", not both)
runtime/src/kmp_runtime.c:2390:        if ( ( __itt_frame_submit_v3_ptr || KMP_ITT_DEBUG ) && __kmp_forkjoin_frames_mode == 3 )
runtime/src/kmp_runtime.c:2394:            ! __kmp_forkjoin_frames_mode && __kmp_forkjoin_frames )
runtime/src/kmp_runtime.c:2443:            __kmp_join_ompt(master_th, parent_team, parallel_id, fork_context);
runtime/src/kmp_runtime.c:2462:    __kmp_acquire_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:2542:    __kmp_release_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:2546:        __kmp_join_ompt(master_th, parent_team, parallel_id, fork_context);
runtime/src/kmp_runtime.c:2627:        __kmp_acquire_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:2647:        __kmp_release_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:3665:    __kmp_acquire_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:3838:    KMP_DEBUG_ASSERT( root->r.r_hot_team->t.t_bar[ bs_forkjoin_barrier ].b_arrived == KMP_INIT_BARRIER_STATE );
runtime/src/kmp_runtime.c:3856:    __kmp_release_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:3962:     * forkjoin lock, you should never try to get the initz lock */
runtime/src/kmp_runtime.c:3964:    __kmp_acquire_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:3967:        __kmp_release_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:4006:    __kmp_release_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:4010:/* __kmp_forkjoin_lock must be already held
runtime/src/kmp_runtime.c:4171: * forkjoin critical section.  we will first try to get an available thread from the
runtime/src/kmp_runtime.c:4172: * thread pool.  if none is available, we will fork a new one assuming we are able
runtime/src/kmp_runtime.c:4247:    /* no, well fork a new one */
runtime/src/kmp_runtime.c:4330:    KA_TRACE( 20, ("__kmp_allocate_thread: T#%d init go fork=%u, plain=%u\n",
runtime/src/kmp_runtime.c:4388:    /* actually fork it and create the new worker thread */
runtime/src/kmp_runtime.c:4393:    KA_TRACE( 20, ("__kmp_allocate_thread: T#%d forked T#%d\n", __kmp_get_gtid(), new_gtid ));
runtime/src/kmp_runtime.c:4401: * The hot team code calls this case at every fork barrier, so EPCC barrier
runtime/src/kmp_runtime.c:4828:                team->t.t_pkfn == (microtask_t)__kmp_teams_master || // inner fork of the teams
runtime/src/kmp_runtime.c:4830:                ++level; // not increment if #teams==1, or for outer fork of the teams; increment otherwise
runtime/src/kmp_runtime.c:5015:                                team->t.t_bar[bs_forkjoin_barrier].b_arrived,
runtime/src/kmp_runtime.c:5052:                // after this in __kmp_fork_call(), so we look to the master's memo_stack to get the correct value.
runtime/src/kmp_runtime.c:5507:        __kmp_fork_barrier( gtid, KMP_GTID_DNE );
runtime/src/kmp_runtime.c:5695:    // It is assumed __kmp_forkjoin_lock is acquired.
runtime/src/kmp_runtime.c:5706:            /* Assume the threads are at the fork barrier here */
runtime/src/kmp_runtime.c:5707:            KA_TRACE( 20, ("__kmp_reap_thread: releasing T#%d from fork barrier for reap\n", gtid ) );
runtime/src/kmp_runtime.c:5708:            /* Need release fence here to prevent seg faults for tree forkjoin barrier (GEH) */
runtime/src/kmp_runtime.c:5709:            kmp_flag_64 flag(&thread->th.th_bar[ bs_forkjoin_barrier ].bb.b_go, thread);
runtime/src/kmp_runtime.c:5834:        // If we are called form __kmp_atfork_child (which sets
runtime/src/kmp_runtime.c:6004:    __kmp_acquire_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:6009:    __kmp_release_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:6091:    //     in a loop forks and joins many openmp threads. We can save a lot of time
runtime/src/kmp_runtime.c:6121:    __kmp_acquire_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:6126:            __kmp_release_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:6136:    __kmp_release_bootstrap_lock( &__kmp_forkjoin_lock );
runtime/src/kmp_runtime.c:6383:    __kmp_init_bootstrap_lock( & __kmp_forkjoin_lock  );
runtime/src/kmp_runtime.c:6454:        // AC: plane=3,2, forkjoin=2,1 are optimal for 240 threads on KNC
runtime/src/kmp_runtime.c:6456:        __kmp_barrier_release_branch_bits[ bs_forkjoin_barrier ] = 1;  // forkjoin release
runtime/src/kmp_runtime.c:6457:        __kmp_barrier_gather_pattern [ bs_forkjoin_barrier ] = bp_hierarchical_bar;
runtime/src/kmp_runtime.c:6458:        __kmp_barrier_release_pattern[ bs_forkjoin_barrier ] = bp_hierarchical_bar;
runtime/src/kmp_runtime.c:6533:        /* invoke the child fork handler */
runtime/src/kmp_runtime.c:6534:        __kmp_register_atfork();
runtime/src/kmp_runtime.c:6814:    KMP_CACHE_PREFETCH( &this_thr->th.th_bar[ bs_forkjoin_barrier ].bb.b_arrived );
runtime/src/kmp_runtime.c:6915:    // (they hang on fork barrier until next parallel)
runtime/src/kmp_runtime.c:6919:    __kmp_fork_call( loc, gtid, fork_context_intel,
runtime/src/kmp_runtime.c:6932:    // worker threads are in a fork barrier waiting for more parallel regions
runtime/src/kmp_runtime.c:6935:        , fork_context_intel
runtime/src/kmp_runtime.c:6958:/* since this should be enclosed in the forkjoin critical section it
runtime/src/kmp_runtime.c:7041:__kmp_internal_fork( ident_t *id, int gtid, kmp_team_t *team )
runtime/src/kmp_runtime.c:7085:    __kmp_fork_barrier( gtid, 0 );
runtime/src/kmp_runtime.c:7099:    /* Join barrier after fork */
runtime/src/kmp_sched.cpp:335:    if ( KMP_MASTER_TID(tid) && __itt_metadata_add_ptr && __kmp_forkjoin_frames_mode == 3 &&
runtime/src/kmp_settings.c:3402:__kmp_stg_parse_init_at_fork( char const * name, char const * value, void * data ) {
runtime/src/kmp_settings.c:3403:    __kmp_stg_parse_bool( name, value, & __kmp_need_register_atfork );
runtime/src/kmp_settings.c:3404:    if ( __kmp_need_register_atfork ) {
runtime/src/kmp_settings.c:3405:        __kmp_need_register_atfork_specified = TRUE;
runtime/src/kmp_settings.c:3407:} // __kmp_stg_parse_init_at_fork
runtime/src/kmp_settings.c:3410:__kmp_stg_print_init_at_fork( kmp_str_buf_t * buffer, char const * name, void * data ) {
runtime/src/kmp_settings.c:3411:    __kmp_stg_print_bool( buffer, name, __kmp_need_register_atfork_specified );
runtime/src/kmp_settings.c:3412:} // __kmp_stg_print_init_at_fork
runtime/src/kmp_settings.c:4441:__kmp_stg_parse_forkjoin_frames( char const * name, char const * value, void * data ) {
runtime/src/kmp_settings.c:4442:    __kmp_stg_parse_bool( name, value, & __kmp_forkjoin_frames );
runtime/src/kmp_settings.c:4443:} // __kmp_stg_parse_forkjoin_frames
runtime/src/kmp_settings.c:4446:__kmp_stg_print_forkjoin_frames( kmp_str_buf_t * buffer, char const * name, void * data ) {
runtime/src/kmp_settings.c:4447:    __kmp_stg_print_bool( buffer, name, __kmp_forkjoin_frames );
runtime/src/kmp_settings.c:4448:} // __kmp_stg_print_forkjoin_frames
runtime/src/kmp_settings.c:4455:__kmp_stg_parse_forkjoin_frames_mode( char const * name, char const * value, void * data ) {
runtime/src/kmp_settings.c:4456:    __kmp_stg_parse_int( name, value, 0, 3, & __kmp_forkjoin_frames_mode );
runtime/src/kmp_settings.c:4457:} // __kmp_stg_parse_forkjoin_frames
runtime/src/kmp_settings.c:4460:__kmp_stg_print_forkjoin_frames_mode( kmp_str_buf_t * buffer, char const * name, void * data ) {
runtime/src/kmp_settings.c:4461:    __kmp_stg_print_int( buffer, name, __kmp_forkjoin_frames_mode );
runtime/src/kmp_settings.c:4462:} // __kmp_stg_print_forkjoin_frames
runtime/src/kmp_settings.c:4624:    { "KMP_INIT_AT_FORK",                  __kmp_stg_parse_init_at_fork,       __kmp_stg_print_init_at_fork,       NULL, 0, 0 },
runtime/src/kmp_settings.c:4654:    { "KMP_FORKJOIN_FRAMES",               __kmp_stg_parse_forkjoin_frames,    __kmp_stg_print_forkjoin_frames,    NULL, 0, 0 },
runtime/src/kmp_settings.c:4655:    { "KMP_FORKJOIN_FRAMES_MODE",          __kmp_stg_parse_forkjoin_frames_mode,__kmp_stg_print_forkjoin_frames_mode,  NULL, 0, 0 },
runtime/src/kmp_stats.h:99: * The count is normally a time (in ticks), hence the name "timer". (But can be any value, so we use this for "number of arguments passed to fork"
runtime/src/kmp_stats.h:128:// OMP_work               -- Elapsed time in code dispatched by a fork (measured in the thread)
runtime/src/kmp_stats.h:145:// KMP_fork_barrier       -- time in __kmp_fork_barrier
runtime/src/kmp_stats.h:158:    macro (KMP_fork_call, 0, arg)                                       \
runtime/src/kmp_stats.h:160:    macro (KMP_fork_barrier, stats_flags_e::logEvent, arg)              \
runtime/src/kmp_tasking.c:1786:                // we are at fork barrier where we could not get the object reliably
runtime/src/kmp_tasking.c:1787:                itt_sync_obj  = __kmp_itt_barrier_object( gtid, bs_forkjoin_barrier );
runtime/src/kmp_tasking.c:1863:                    // we are at fork barrier where we could not get the object reliably
runtime/src/kmp_tasking.c:1864:                    itt_sync_obj  = __kmp_itt_barrier_object( gtid, bs_forkjoin_barrier );
runtime/src/kmp_tasking.c:1974:                    // we are at fork barrier where we could not get the object reliably
runtime/src/kmp_tasking.c:1975:                    itt_sync_obj  = __kmp_itt_barrier_object( gtid, bs_forkjoin_barrier );
runtime/src/kmp_tasking.c:2490:// Some threads could still be in the fork barrier release code, possibly
runtime/src/kmp_wait_release.h:27:to build higher level operations such as barriers and fork/join.
runtime/src/kmp_wait_release.h:172:           1) A newly-created thread is first being released by __kmp_fork_barrier(), and
runtime/src/kmp_wait_release.h:217:                   __kmp_thread_pool_nth is inc/dec'd by the master thread while the fork/join
runtime/src/ompt-internal.h:12:  ((x == fork_context_gnu) ? ompt_invoker_program : ompt_invoker_runtime)
runtime/src/z_Linux_util.c:81:static int __kmp_fork_count = 0;
runtime/src/z_Linux_util.c:1511:__kmp_atfork_prepare (void)
runtime/src/z_Linux_util.c:1517:__kmp_atfork_parent (void)
runtime/src/z_Linux_util.c:1528:__kmp_atfork_child (void)
runtime/src/z_Linux_util.c:1534:    ++__kmp_fork_count;
runtime/src/z_Linux_util.c:1557:    KA_TRACE( 10, ( "__kmp_atfork_child: checking cache address list %p\n",
runtime/src/z_Linux_util.c:1563:            KC_TRACE( 50, ( "__kmp_atfork_child: zeroing cache at address %p\n",
runtime/src/z_Linux_util.c:1579:    /* AC: customers complain that we use unsafe routines in the atfork
runtime/src/z_Linux_util.c:1591:__kmp_register_atfork(void) {
runtime/src/z_Linux_util.c:1592:    if ( __kmp_need_register_atfork ) {
runtime/src/z_Linux_util.c:1593:        int status = pthread_atfork( __kmp_atfork_prepare, __kmp_atfork_parent, __kmp_atfork_child );
runtime/src/z_Linux_util.c:1594:        KMP_CHECK_SYSFAIL( "pthread_atfork", status );
runtime/src/z_Linux_util.c:1595:        __kmp_need_register_atfork = FALSE;
runtime/src/z_Linux_util.c:1612:    if ( th->th.th_suspend_init_count <= __kmp_fork_count ) {
runtime/src/z_Linux_util.c:1620:        *(volatile int*)&th->th.th_suspend_init_count = __kmp_fork_count + 1;
runtime/src/z_Linux_util.c:1627:    if(th->th.th_suspend_init_count > __kmp_fork_count) {
runtime/src/z_Linux_util.c:1641:        KMP_DEBUG_ASSERT(th->th.th_suspend_init_count == __kmp_fork_count);
runtime/src/kmp_dispatch.cpp:641:    int itt_need_metadata_reporting = __itt_metadata_add_ptr && __kmp_forkjoin_frames_mode == 3 &&
runtime/src/kmp_global.c:105:                            { "plain", "forkjoin"
runtime/src/kmp_global.c:283:int     __kmp_forkjoin_frames = 1;
runtime/src/kmp_global.c:284:int     __kmp_forkjoin_frames_mode = 3;
runtime/src/kmp_global.c:323:/* Initialize the library data structures when we fork a child process, defaults to TRUE */
runtime/src/kmp_global.c:324:int     __kmp_need_register_atfork = TRUE; /* At initialization, call pthread_atfork to install fork handler */
runtime/src/kmp_global.c:325:int     __kmp_need_register_atfork_specified = TRUE;
runtime/src/kmp_global.c:390:kmp_bootstrap_lock_t __kmp_forkjoin_lock; /* control fork/join access */
runtime/src/kmp_global.c:408:kmp_bootstrap_lock_t __kmp_forkjoin_lock; /* control fork/join access */
runtime/src/kmp_gsupport.c:339:__kmp_GOMP_fork_call(ident_t *loc, int gtid, void (*unwrapped_task)(void *), microtask_t wrapper, int argc,...)
runtime/src/kmp_gsupport.c:349:    rc = __kmp_fork_call(loc, gtid, fork_context_gnu, argc,
runtime/src/kmp_gsupport.c:401:                OMPT_INVOKER(fork_context_gnu));
runtime/src/kmp_gsupport.c:452:    if (__kmpc_ok_to_fork(&loc) && (num_threads != 1)) {
runtime/src/kmp_gsupport.c:456:        __kmp_GOMP_fork_call(&loc, gtid, task,
runtime/src/kmp_gsupport.c:539:            , fork_context_gnu
runtime/src/kmp_gsupport.c:561:                    OMPT_INVOKER(fork_context_gnu));
runtime/src/kmp_gsupport.c:583:// argument to __kmp_GOMP_fork_call).
runtime/src/kmp_gsupport.c:868:        if (__kmpc_ok_to_fork(&loc) && (num_threads != 1)) {                 \
runtime/src/kmp_gsupport.c:872:            __kmp_GOMP_fork_call(&loc, gtid, task,                           \
runtime/src/kmp_gsupport.c:1108:    if (__kmpc_ok_to_fork(&loc) && (num_threads != 1)) {
runtime/src/kmp_gsupport.c:1112:        __kmp_GOMP_fork_call(&loc, gtid, task,
runtime/src/kmp_gsupport.c:1168:    if (__kmpc_ok_to_fork(&loc) && (num_threads != 1)) {
runtime/src/kmp_gsupport.c:1175:        __kmp_GOMP_fork_call(&loc, gtid, task,
runtime/src/kmp_gsupport.c:1193:    if (__kmpc_ok_to_fork(&loc) && (num_threads != 1)) {
runtime/src/kmp_gsupport.c:1200:        __kmp_GOMP_fork_call(&loc, gtid, task,
runtime/src/kmp_gsupport.c:1225:        if (__kmpc_ok_to_fork(&loc) && (num_threads != 1)) {                 \
runtime/src/kmp_gsupport.c:1232:            __kmp_GOMP_fork_call(&loc, gtid, task,                           \
