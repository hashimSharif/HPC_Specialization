/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Assembly Writer Source Fragment                                             *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void XCoreInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const uint32_t OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    628U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    621U,	// BUNDLE
    650U,	// LIFETIME_START
    608U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    2213U,	// ADD_2rus
    2213U,	// ADD_3r
    10350U,	// ADJCALLSTACKDOWN
    10370U,	// ADJCALLSTACKUP
    2361803U,	// ANDNOT_2r
    2218U,	// AND_3r
    2367U,	// ASHR_l2rus
    2367U,	// ASHR_l3r
    10732U,	// BAU_1r
    2099740U,	// BITREV_l2r
    19124U,	// BLACP_lu10
    19124U,	// BLACP_u10
    10635U,	// BLAT_lu6
    10635U,	// BLAT_u6
    10388U,	// BLA_1r
    10473U,	// BLRB_lu10
    10473U,	// BLRB_u10
    10473U,	// BLRF_lu10
    10473U,	// BLRF_u10
    2099381U,	// BRBF_lru6
    2099381U,	// BRBF_ru6
    2099601U,	// BRBT_lru6
    2099601U,	// BRBT_ru6
    10737U,	// BRBU_lu6
    10737U,	// BRBU_u6
    2099381U,	// BRFF_lru6
    2099381U,	// BRFF_ru6
    2099601U,	// BRFT_lru6
    2099601U,	// BRFT_ru6
    10737U,	// BRFU_lu6
    10737U,	// BRFU_u6
    10754U,	// BRU_1r
    553474U,	// BR_JT
    815618U,	// BR_JT32
    2099731U,	// BYTEREV_l2r
    2132778U,	// CHKCT_2r
    2132778U,	// CHKCT_rus
    1126U,	// CLRE_0R
    19264U,	// CLRPT_1R
    10577U,	// CLRSR_branch_lu6
    10577U,	// CLRSR_branch_u6
    10577U,	// CLRSR_lu6
    10577U,	// CLRSR_u6
    2099770U,	// CLZ_l2r
    5247047U,	// CRC8_l4r
    17041459U,	// CRC_l3r
    1131U,	// DCALL_0R
    1163U,	// DENTSP_0R
    10451U,	// DGETREG_1r
    2437U,	// DIVS_l3r
    2573U,	// DIVU_l3r
    1170U,	// DRESTSP_0R
    1205U,	// DRET_0R
    10438U,	// ECALLF_1r
    10686U,	// ECALLT_1r
    19305U,	// EDU_1r
    6334649U,	// EEF_2r
    6334892U,	// EET_2r
    19314U,	// EEU_1r
    6334728U,	// ENDIN_2r
    10532U,	// ENTSP_lu6
    10532U,	// ENTSP_u6
    2363U,	// EQ_2rus
    2363U,	// EQ_3r
    10517U,	// EXTDP_lu6
    10517U,	// EXTDP_u6
    10548U,	// EXTSP_lu6
    10548U,	// EXTSP_u6
    19219U,	// FREER_1r
    1199U,	// FREET_0R
    6334639U,	// GETD_l2r
    1102U,	// GETED_0R
    1187U,	// GETET_0R
    1114U,	// GETID_0R
    1137U,	// GETKEP_0R
    1150U,	// GETKSP_0R
    6334735U,	// GETN_l2r
    51633U,	// GETPS_l2r
    2099551U,	// GETR_rus
    10252U,	// GETSR_lu6
    10252U,	// GETSR_u6
    6334931U,	// GETST_2r
    6334846U,	// GETTS_2r
    6334869U,	// INCT_2r
    62401U,	// INITCP_2r
    70593U,	// INITDP_2r
    78785U,	// INITLR_l2r
    86977U,	// INITPC_2r
    95169U,	// INITSP_2r
    8432175U,	// INPW_l2rus
    6596933U,	// INSHR_2r
    6334918U,	// INT_2r
    6334731U,	// IN_2r
    638U,	// Int_MemBarrier
    10491U,	// KCALL_1r
    10491U,	// KCALL_lu6
    10491U,	// KCALL_u6
    10531U,	// KENTSP_lu6
    10531U,	// KENTSP_u6
    10539U,	// KRESTSP_lu6
    10539U,	// KRESTSP_u6
    1210U,	// KRET_0R
    45093028U,	// LADD_l5r
    12585317U,	// LD16S_3r
    12585446U,	// LD8U_3r
    14682170U,	// LDA16B_l3r
    12585018U,	// LDA16F_l3r
    10241U,	// LDAPB_lu10
    10241U,	// LDAPB_u10
    10241U,	// LDAPF_lu10
    10241U,	// LDAPF_lu10_ba
    10241U,	// LDAPF_u10
    14682660U,	// LDAWB_l2rus
    14682660U,	// LDAWB_l3r
    19097U,	// LDAWCP_lu6
    19097U,	// LDAWCP_u6
    100900U,	// LDAWDP_lru6
    100900U,	// LDAWDP_ru6
    2099282U,	// LDAWFI
    12585508U,	// LDAWF_l2rus
    12585508U,	// LDAWF_l3r
    109092U,	// LDAWSP_lru6
    109092U,	// LDAWSP_ru6
    2099359U,	// LDC_lru6
    2099359U,	// LDC_ru6
    1068U,	// LDET_0R
    184551948U,	// LDIVU_l5r
    1038U,	// LDSED_0R
    978U,	// LDSPC_0R
    1008U,	// LDSSR_0R
    117290U,	// LDWCP_lru6
    19111U,	// LDWCP_lu10
    117290U,	// LDWCP_ru6
    19111U,	// LDWCP_u10
    100906U,	// LDWDP_lru6
    100906U,	// LDWDP_ru6
    2099292U,	// LDWFI
    109098U,	// LDWSP_lru6
    109098U,	// LDWSP_ru6
    12585514U,	// LDW_2rus
    12585514U,	// LDW_3r
    268437762U,	// LMUL_l6r
    2425U,	// LSS_3r
    45093017U,	// LSUB_l5r
    2567U,	// LSU_3r
    452987244U,	// MACCS_l4r
    452987381U,	// MACCU_l4r
    19187U,	// MJOIN_1r
    2099426U,	// MKMSK_2r
    2099426U,	// MKMSK_rus
    19132U,	// MSYNC_1r
    2307U,	// MUL_l3r
    2099406U,	// NEG
    2099662U,	// NOT
    2381U,	// OR_3r
    2132789U,	// OUTCT_2r
    2132789U,	// OUTCT_rus
    78680976U,	// OUTPW_l2rus
    2136862U,	// OUTSHR_2r
    2132822U,	// OUTT_2r
    2132832U,	// OUT_2r
    6334684U,	// PEEK_2r
    2419U,	// REMS_l3r
    2556U,	// REMU_l3r
    10524U,	// RETSP_lu6
    10524U,	// RETSP_u6
    575U,	// SELECT_CC
    2132711U,	// SETCLK_l2r
    10264U,	// SETCP_1r
    2132691U,	// SETC_l2r
    2132691U,	// SETC_lru6
    2132691U,	// SETC_ru6
    10273U,	// SETDP_1r
    2132701U,	// SETD_2r
    125819U,	// SETEV_1r
    595U,	// SETKEP_0R
    2132734U,	// SETN_l2r
    2132679U,	// SETPSC_2r
    2132914U,	// SETPS_l2r
    2132811U,	// SETPT_2r
    2132902U,	// SETRDY_l2r
    10282U,	// SETSP_1r
    10584U,	// SETSR_branch_lu6
    10584U,	// SETSR_branch_u6
    10584U,	// SETSR_lu6
    10584U,	// SETSR_u6
    2132891U,	// SETTW_l2r
    125830U,	// SETV_1r
    2361818U,	// SEXT_2r
    2361818U,	// SEXT_rus
    2294U,	// SHL_2rus
    2294U,	// SHL_3r
    2368U,	// SHR_2rus
    2368U,	// SHR_3r
    1096U,	// SSYNC_0r
    12585025U,	// ST16_l3r
    12585037U,	// ST8_l3r
    1082U,	// STET_0R
    1053U,	// STSED_0R
    993U,	// STSPC_0R
    1023U,	// STSSR_0R
    100917U,	// STWDP_lru6
    100917U,	// STWDP_ru6
    2099301U,	// STWFI
    109109U,	// STWSP_lru6
    109109U,	// STWSP_ru6
    12585525U,	// STW_2rus
    12585525U,	// STW_l3r
    2202U,	// SUB_2rus
    2202U,	// SUB_3r
    19208U,	// SYNCR_1r
    6334875U,	// TESTCT_2r
    6334701U,	// TESTLCL_l2r
    6334883U,	// TESTWCT_2r
    2100378U,	// TSETMR_2r
    138170U,	// TSETR_3r
    19401U,	// TSTART_1R
    10430U,	// WAITEF_1R
    10678U,	// WAITET_1R
    1215U,	// WAITEU_0R
    2380U,	// XOR_l3r
    2361824U,	// ZEXT_2r
    2361824U,	// ZEXT_rus
    0U
  };

  const char AsmStrs[] = {
  /* 0 */ 'l', 'd', 'a', 'p', 32, 'r', '1', '1', ',', 32, 0,
  /* 11 */ 'g', 'e', 't', 's', 'r', 32, 'r', '1', '1', ',', 32, 0,
  /* 23 */ 's', 'e', 't', 32, 'c', 'p', ',', 32, 0,
  /* 32 */ 's', 'e', 't', 32, 'd', 'p', ',', 32, 0,
  /* 41 */ 's', 'e', 't', 32, 's', 'p', ',', 32, 0,
  /* 50 */ 'c', 'r', 'c', '3', '2', 32, 0,
  /* 57 */ 'l', 'd', 'a', '1', '6', 32, 0,
  /* 64 */ 's', 't', '1', '6', 32, 0,
  /* 70 */ 'c', 'r', 'c', '8', 32, 0,
  /* 76 */ 's', 't', '8', 32, 0,
  /* 81 */ '#', 32, 'L', 'D', 'A', 'W', 'F', 'I', 32, 0,
  /* 91 */ '#', 32, 'L', 'D', 'W', 'F', 'I', 32, 0,
  /* 100 */ '#', 32, 'S', 'T', 'W', 'F', 'I', 32, 0,
  /* 109 */ '#', 32, 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 129 */ '#', 32, 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 147 */ 'b', 'l', 'a', 32, 0,
  /* 152 */ 'l', 's', 'u', 'b', 32, 0,
  /* 158 */ 'l', 'd', 'c', 32, 0,
  /* 163 */ 'l', 'a', 'd', 'd', 32, 0,
  /* 169 */ 'a', 'n', 'd', 32, 0,
  /* 174 */ 'g', 'e', 't', 'd', 32, 0,
  /* 180 */ 'b', 'f', 32, 0,
  /* 184 */ 'e', 'e', 'f', 32, 0,
  /* 189 */ 'w', 'a', 'i', 't', 'e', 'f', 32, 0,
  /* 197 */ 'e', 'c', 'a', 'l', 'l', 'f', 32, 0,
  /* 205 */ 'n', 'e', 'g', 32, 0,
  /* 210 */ 'd', 'g', 'e', 't', 'r', 'e', 'g', 32, 0,
  /* 219 */ 'p', 'e', 'e', 'k', 32, 0,
  /* 225 */ 'm', 'k', 'm', 's', 'k', 32, 0,
  /* 232 */ 'b', 'l', 32, 0,
  /* 236 */ 't', 'e', 's', 't', 'l', 'c', 'l', 32, 0,
  /* 245 */ 's', 'h', 'l', 32, 0,
  /* 250 */ 'k', 'c', 'a', 'l', 'l', 32, 0,
  /* 257 */ 'l', 'm', 'u', 'l', 32, 0,
  /* 263 */ 'e', 'n', 'd', 'i', 'n', 32, 0,
  /* 270 */ 'g', 'e', 't', 'n', 32, 0,
  /* 276 */ 'e', 'x', 't', 'd', 'p', 32, 0,
  /* 283 */ 'r', 'e', 't', 's', 'p', 32, 0,
  /* 290 */ 'k', 'e', 'n', 't', 's', 'p', 32, 0,
  /* 298 */ 'k', 'r', 'e', 's', 't', 's', 'p', 32, 0,
  /* 307 */ 'e', 'x', 't', 's', 'p', 32, 0,
  /* 314 */ 'e', 'q', 32, 0,
  /* 318 */ 'a', 's', 'h', 'r', 32, 0,
  /* 324 */ 'i', 'n', 's', 'h', 'r', 32, 0,
  /* 331 */ 'x', 'o', 'r', 32, 0,
  /* 336 */ 'c', 'l', 'r', 's', 'r', 32, 0,
  /* 343 */ 's', 'e', 't', 's', 'r', 32, 0,
  /* 350 */ 'g', 'e', 't', 'r', 32, 0,
  /* 356 */ 'l', 'd', '1', '6', 's', 32, 0,
  /* 363 */ 'm', 'a', 'c', 'c', 's', 32, 0,
  /* 370 */ 'r', 'e', 'm', 's', 32, 0,
  /* 376 */ 'l', 's', 's', 32, 0,
  /* 381 */ 'g', 'e', 't', 't', 's', 32, 0,
  /* 388 */ 'd', 'i', 'v', 's', 32, 0,
  /* 394 */ 'b', 'l', 'a', 't', 32, 0,
  /* 400 */ 'b', 't', 32, 0,
  /* 404 */ 'i', 'n', 'c', 't', 32, 0,
  /* 410 */ 't', 'e', 's', 't', 'c', 't', 32, 0,
  /* 418 */ 't', 'e', 's', 't', 'w', 'c', 't', 32, 0,
  /* 427 */ 'e', 'e', 't', 32, 0,
  /* 432 */ 'g', 'e', 't', 32, 0,
  /* 437 */ 'w', 'a', 'i', 't', 'e', 't', 32, 0,
  /* 445 */ 'e', 'c', 'a', 'l', 'l', 't', 32, 0,
  /* 453 */ 'i', 'n', 't', 32, 0,
  /* 458 */ 'a', 'n', 'd', 'n', 'o', 't', 32, 0,
  /* 466 */ 'g', 'e', 't', 's', 't', 32, 0,
  /* 473 */ 's', 'e', 'x', 't', 32, 0,
  /* 479 */ 'z', 'e', 'x', 't', 32, 0,
  /* 485 */ 'l', 'd', '8', 'u', 32, 0,
  /* 491 */ 'b', 'a', 'u', 32, 0,
  /* 496 */ 'b', 'u', 32, 0,
  /* 500 */ 'm', 'a', 'c', 'c', 'u', 32, 0,
  /* 507 */ 'r', 'e', 'm', 'u', 32, 0,
  /* 513 */ 'b', 'r', 'u', 32, 0,
  /* 518 */ 'l', 's', 'u', 32, 0,
  /* 523 */ 'l', 'd', 'i', 'v', 'u', 32, 0,
  /* 530 */ 'b', 'y', 't', 'e', 'r', 'e', 'v', 32, 0,
  /* 539 */ 'b', 'i', 't', 'r', 'e', 'v', 32, 0,
  /* 547 */ 'l', 'd', 'a', 'w', 32, 0,
  /* 553 */ 'l', 'd', 'w', 32, 0,
  /* 558 */ 'i', 'n', 'p', 'w', 32, 0,
  /* 564 */ 's', 't', 'w', 32, 0,
  /* 569 */ 'c', 'l', 'z', 32, 0,
  /* 574 */ '#', 32, 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', 32, 'P', 'S', 'E', 'U', 'D', 'O', '!', 0,
  /* 594 */ 's', 'e', 't', 32, 'k', 'e', 'p', ',', 32, 'r', '1', '1', 0,
  /* 607 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 620 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 627 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 637 */ '#', 'M', 'E', 'M', 'B', 'A', 'R', 'R', 'I', 'E', 'R', 0,
  /* 649 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 664 */ 'l', 'd', 'a', 'w', 32, 'r', '1', '1', ',', 32, 'c', 'p', '[', 0,
  /* 678 */ 'l', 'd', 'w', 32, 'r', '1', '1', ',', 32, 'c', 'p', '[', 0,
  /* 691 */ 'b', 'l', 'a', 32, 'c', 'p', '[', 0,
  /* 699 */ 'm', 's', 'y', 'n', 'c', 32, 'r', 'e', 's', '[', 0,
  /* 710 */ 's', 'e', 't', 'p', 's', 'c', 32, 'r', 'e', 's', '[', 0,
  /* 722 */ 's', 'e', 't', 'c', 32, 'r', 'e', 's', '[', 0,
  /* 732 */ 's', 'e', 't', 'd', 32, 'r', 'e', 's', '[', 0,
  /* 742 */ 's', 'e', 't', 'c', 'l', 'k', 32, 'r', 'e', 's', '[', 0,
  /* 754 */ 'm', 'j', 'o', 'i', 'n', 32, 'r', 'e', 's', '[', 0,
  /* 765 */ 's', 'e', 't', 'n', 32, 'r', 'e', 's', '[', 0,
  /* 775 */ 's', 'y', 'n', 'c', 'r', 32, 'r', 'e', 's', '[', 0,
  /* 786 */ 'f', 'r', 'e', 'e', 'r', 32, 'r', 'e', 's', '[', 0,
  /* 797 */ 'o', 'u', 't', 's', 'h', 'r', 32, 'r', 'e', 's', '[', 0,
  /* 809 */ 'c', 'h', 'k', 'c', 't', 32, 'r', 'e', 's', '[', 0,
  /* 820 */ 'o', 'u', 't', 'c', 't', 32, 'r', 'e', 's', '[', 0,
  /* 831 */ 'c', 'l', 'r', 'p', 't', 32, 'r', 'e', 's', '[', 0,
  /* 842 */ 's', 'e', 't', 'p', 't', 32, 'r', 'e', 's', '[', 0,
  /* 853 */ 'o', 'u', 't', 't', 32, 'r', 'e', 's', '[', 0,
  /* 863 */ 'o', 'u', 't', 32, 'r', 'e', 's', '[', 0,
  /* 872 */ 'e', 'd', 'u', 32, 'r', 'e', 's', '[', 0,
  /* 881 */ 'e', 'e', 'u', 32, 'r', 'e', 's', '[', 0,
  /* 890 */ 's', 'e', 't', 'e', 'v', 32, 'r', 'e', 's', '[', 0,
  /* 901 */ 's', 'e', 't', 'v', 32, 'r', 'e', 's', '[', 0,
  /* 911 */ 'o', 'u', 't', 'p', 'w', 32, 'r', 'e', 's', '[', 0,
  /* 922 */ 's', 'e', 't', 't', 'w', 32, 'r', 'e', 's', '[', 0,
  /* 933 */ 's', 'e', 't', 'r', 'd', 'y', 32, 'r', 'e', 's', '[', 0,
  /* 945 */ 's', 'e', 't', 32, 'p', 's', '[', 0,
  /* 953 */ 's', 'e', 't', 32, 't', '[', 0,
  /* 960 */ 'i', 'n', 'i', 't', 32, 't', '[', 0,
  /* 968 */ 's', 't', 'a', 'r', 't', 32, 't', '[', 0,
  /* 977 */ 'l', 'd', 'w', 32, 's', 'p', 'c', ',', 32, 's', 'p', '[', '1', ']', 0,
  /* 992 */ 's', 't', 'w', 32, 's', 'p', 'c', ',', 32, 's', 'p', '[', '1', ']', 0,
  /* 1007 */ 'l', 'd', 'w', 32, 's', 's', 'r', ',', 32, 's', 'p', '[', '2', ']', 0,
  /* 1022 */ 's', 't', 'w', 32, 's', 's', 'r', ',', 32, 's', 'p', '[', '2', ']', 0,
  /* 1037 */ 'l', 'd', 'w', 32, 's', 'e', 'd', ',', 32, 's', 'p', '[', '3', ']', 0,
  /* 1052 */ 's', 't', 'w', 32, 's', 'e', 'd', ',', 32, 's', 'p', '[', '3', ']', 0,
  /* 1067 */ 'l', 'd', 'w', 32, 'e', 't', ',', 32, 's', 'p', '[', '4', ']', 0,
  /* 1081 */ 's', 't', 'w', 32, 'e', 't', ',', 32, 's', 'p', '[', '4', ']', 0,
  /* 1095 */ 's', 's', 'y', 'n', 'c', 0,
  /* 1101 */ 'g', 'e', 't', 32, 'r', '1', '1', ',', 32, 'e', 'd', 0,
  /* 1113 */ 'g', 'e', 't', 32, 'r', '1', '1', ',', 32, 'i', 'd', 0,
  /* 1125 */ 'c', 'l', 'r', 'e', 0,
  /* 1130 */ 'd', 'c', 'a', 'l', 'l', 0,
  /* 1136 */ 'g', 'e', 't', 32, 'r', '1', '1', ',', 32, 'k', 'e', 'p', 0,
  /* 1149 */ 'g', 'e', 't', 32, 'r', '1', '1', ',', 32, 'k', 's', 'p', 0,
  /* 1162 */ 'd', 'e', 'n', 't', 's', 'p', 0,
  /* 1169 */ 'd', 'r', 'e', 's', 't', 's', 'p', 0,
  /* 1177 */ 't', 's', 'e', 't', 'm', 'r', 32, 'r', 0,
  /* 1186 */ 'g', 'e', 't', 32, 'r', '1', '1', ',', 32, 'e', 't', 0,
  /* 1198 */ 'f', 'r', 'e', 'e', 't', 0,
  /* 1204 */ 'd', 'r', 'e', 't', 0,
  /* 1209 */ 'k', 'r', 'e', 't', 0,
  /* 1214 */ 'w', 'a', 'i', 't', 'e', 'u', 0,
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 2047)-1;


  // Fragment 0 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 11) & 3) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, CLRE_0R, DCALL_0R, DE...
    return;
    break;
  case 1:
    // ADD_2rus, ADD_3r, ADJCALLSTACKDOWN, ADJCALLSTACKUP, ANDNOT_2r, AND_3r,...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // BR_JT, BR_JT32, CRC8_l4r, INITCP_2r, INITDP_2r, INITLR_l2r, INITPC_2r,...
    printOperand(MI, 1, O); 
    break;
  case 3:
    // OUTSHR_2r, TSETR_3r
    printOperand(MI, 2, O); 
    break;
  }


  // Fragment 1 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 13) & 31) {
  default:   // unreachable.
  case 0:
    // ADD_2rus, ADD_3r, ANDNOT_2r, AND_3r, ASHR_l2rus, ASHR_l3r, BITREV_l2r,...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, BAU_1r, BLAT_lu6, BLAT_u6, BLA_1r, B...
    return;
    break;
  case 2:
    // BLACP_lu10, BLACP_u10, CLRPT_1R, EDU_1r, EEU_1r, FREER_1r, LDAWCP_lu6,...
    O << ']'; 
    return;
    break;
  case 3:
    // BR_JT, BR_JT32
    O << "\n"; 
    break;
  case 4:
    // CHKCT_2r, CHKCT_rus, OUTCT_2r, OUTCT_rus, OUTPW_l2rus, OUTSHR_2r, OUTT...
    O << "], "; 
    break;
  case 5:
    // EEF_2r, EET_2r, ENDIN_2r, GETD_l2r, GETN_l2r, GETST_2r, GETTS_2r, INCT...
    O << ", res["; 
    break;
  case 6:
    // GETPS_l2r
    O << ", ps["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 7:
    // INITCP_2r
    O << "]:cp, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 8:
    // INITDP_2r
    O << "]:dp, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 9:
    // INITLR_l2r
    O << "]:lr, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 10:
    // INITPC_2r
    O << "]:pc, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 11:
    // INITSP_2r
    O << "]:sp, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 12:
    // LDAWDP_lru6, LDAWDP_ru6, LDWDP_lru6, LDWDP_ru6, STWDP_lru6, STWDP_ru6
    O << ", dp["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 13:
    // LDAWSP_lru6, LDAWSP_ru6, LDWSP_lru6, LDWSP_ru6, STWSP_lru6, STWSP_ru6
    O << ", sp["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 14:
    // LDWCP_lru6, LDWCP_ru6
    O << ", cp["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 15:
    // SETEV_1r, SETV_1r
    O << "], r11"; 
    return;
    break;
  case 16:
    // TSETR_3r
    O << "]:r"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 18) & 7) {
  default:   // unreachable.
  case 0:
    // ADD_2rus, ADD_3r, AND_3r, ASHR_l2rus, ASHR_l3r, BITREV_l2r, BRBF_lru6,...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ANDNOT_2r, CRC_l3r, INSHR_2r, SEXT_2r, SEXT_rus, ZEXT_2r, ZEXT_rus
    printOperand(MI, 2, O); 
    break;
  case 2:
    // BR_JT
    printInlineJT(MI, 0, O); 
    return;
    break;
  case 3:
    // BR_JT32
    printInlineJT32(MI, 0, O); 
    return;
    break;
  case 4:
    // CRC8_l4r, LADD_l5r, LSUB_l5r, OUTPW_l2rus
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  }


  // Fragment 3 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 21) & 7) {
  default:   // unreachable.
  case 0:
    // ADD_2rus, ADD_3r, AND_3r, ASHR_l2rus, ASHR_l3r, CRC_l3r, DIVS_l3r, DIV...
    O << ", "; 
    break;
  case 1:
    // ANDNOT_2r, BITREV_l2r, BRBF_lru6, BRBF_ru6, BRBT_lru6, BRBT_ru6, BRFF_...
    return;
    break;
  case 2:
    // CRC8_l4r
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case 3:
    // EEF_2r, EET_2r, ENDIN_2r, GETD_l2r, GETN_l2r, GETST_2r, GETTS_2r, INCT...
    O << ']'; 
    return;
    break;
  case 4:
    // INPW_l2rus
    O << "], "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 5:
    // LADD_l5r, LSUB_l5r, OUTPW_l2rus
    printOperand(MI, 2, O); 
    break;
  case 6:
    // LD16S_3r, LD8U_3r, LDA16F_l3r, LDAWF_l2rus, LDAWF_l3r, LDW_2rus, LDW_3...
    O << '['; 
    printOperand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 7:
    // LDA16B_l3r, LDAWB_l2rus, LDAWB_l3r
    O << "[-"; 
    printOperand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 4 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 24) & 7) {
  default:   // unreachable.
  case 0:
    // ADD_2rus, ADD_3r, AND_3r, ASHR_l2rus, ASHR_l3r, DIVS_l3r, DIVU_l3r, EQ...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // CRC_l3r
    printOperand(MI, 3, O); 
    return;
    break;
  case 2:
    // LADD_l5r, LSUB_l5r
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case 3:
    // LDIVU_l5r, MACCS_l4r, MACCU_l4r
    printOperand(MI, 4, O); 
    O << ", "; 
    break;
  case 4:
    // OUTPW_l2rus
    return;
    break;
  }


  // Fragment 5 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 27) & 3) {
  default:   // unreachable.
  case 0:
    // ADD_2rus, ADD_3r, AND_3r, ASHR_l2rus, ASHR_l3r, DIVS_l3r, DIVU_l3r, EQ...
    return;
    break;
  case 1:
    // LDIVU_l5r
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  case 2:
    // LMUL_l6r
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 3:
    // MACCS_l4r, MACCU_l4r
    printOperand(MI, 5, O); 
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *XCoreInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 17 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ 'r', '1', '0', 0,
  /* 4 */ 'r', '0', 0,
  /* 7 */ 'r', '1', '1', 0,
  /* 11 */ 'r', '1', 0,
  /* 14 */ 'r', '2', 0,
  /* 17 */ 'r', '3', 0,
  /* 20 */ 'r', '4', 0,
  /* 23 */ 'r', '5', 0,
  /* 26 */ 'r', '6', 0,
  /* 29 */ 'r', '7', 0,
  /* 32 */ 'r', '8', 0,
  /* 35 */ 'r', '9', 0,
  /* 38 */ 'c', 'p', 0,
  /* 41 */ 'd', 'p', 0,
  /* 44 */ 's', 'p', 0,
  /* 47 */ 'l', 'r', 0,
  };

  static const uint32_t RegAsmOffset[] = {
    38, 41, 47, 44, 4, 11, 14, 17, 20, 23, 26, 29, 32, 35, 
    0, 7, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool XCoreInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  return false;
}

#endif // PRINT_ALIAS_INSTR
