/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register Enum Values                                                 *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass SPMCRegisterClasses[];

namespace SP {
enum {
  NoRegister,
  FCC = 1,
  ICC = 2,
  Y = 3,
  D0 = 4,
  D1 = 5,
  D2 = 6,
  D3 = 7,
  D4 = 8,
  D5 = 9,
  D6 = 10,
  D7 = 11,
  D8 = 12,
  D9 = 13,
  D10 = 14,
  D11 = 15,
  D12 = 16,
  D13 = 17,
  D14 = 18,
  D15 = 19,
  D16 = 20,
  D17 = 21,
  D18 = 22,
  D19 = 23,
  D20 = 24,
  D21 = 25,
  D22 = 26,
  D23 = 27,
  D24 = 28,
  D25 = 29,
  D26 = 30,
  D27 = 31,
  D28 = 32,
  D29 = 33,
  D30 = 34,
  D31 = 35,
  F0 = 36,
  F1 = 37,
  F2 = 38,
  F3 = 39,
  F4 = 40,
  F5 = 41,
  F6 = 42,
  F7 = 43,
  F8 = 44,
  F9 = 45,
  F10 = 46,
  F11 = 47,
  F12 = 48,
  F13 = 49,
  F14 = 50,
  F15 = 51,
  F16 = 52,
  F17 = 53,
  F18 = 54,
  F19 = 55,
  F20 = 56,
  F21 = 57,
  F22 = 58,
  F23 = 59,
  F24 = 60,
  F25 = 61,
  F26 = 62,
  F27 = 63,
  F28 = 64,
  F29 = 65,
  F30 = 66,
  F31 = 67,
  G0 = 68,
  G1 = 69,
  G2 = 70,
  G3 = 71,
  G4 = 72,
  G5 = 73,
  G6 = 74,
  G7 = 75,
  I0 = 76,
  I1 = 77,
  I2 = 78,
  I3 = 79,
  I4 = 80,
  I5 = 81,
  I6 = 82,
  I7 = 83,
  L0 = 84,
  L1 = 85,
  L2 = 86,
  L3 = 87,
  L4 = 88,
  L5 = 89,
  L6 = 90,
  L7 = 91,
  O0 = 92,
  O1 = 93,
  O2 = 94,
  O3 = 95,
  O4 = 96,
  O5 = 97,
  O6 = 98,
  O7 = 99,
  Q0 = 100,
  Q1 = 101,
  Q2 = 102,
  Q3 = 103,
  Q4 = 104,
  Q5 = 105,
  Q6 = 106,
  Q7 = 107,
  Q8 = 108,
  Q9 = 109,
  Q10 = 110,
  Q11 = 111,
  Q12 = 112,
  Q13 = 113,
  Q14 = 114,
  Q15 = 115,
  NUM_TARGET_REGS 	// 116
};
}

// Register classes
namespace SP {
enum {
  FPRegsRegClassID = 0,
  IntRegsRegClassID = 1,
  DFPRegsRegClassID = 2,
  I64RegsRegClassID = 3,
  DFPRegs_with_sub_evenRegClassID = 4,
  QFPRegsRegClassID = 5,
  QFPRegs_with_sub_evenRegClassID = 6
  };
}

// Subregister indices
namespace SP {
enum {
  NoSubRegister,
  sub_even,	// 1
  sub_even64,	// 2
  sub_odd,	// 3
  sub_odd64,	// 4
  sub_odd64_then_sub_even,	// 5
  sub_odd64_then_sub_odd,	// 6
  NUM_TARGET_SUBREGS
};
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*MC Register Information                                                     *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

extern const MCPhysReg SparcRegDiffLists[] = {
  /* 0 */ 65139, 1, 1, 1, 0,
  /* 5 */ 32, 1, 0,
  /* 8 */ 65440, 32, 1, 65504, 33, 1, 0,
  /* 15 */ 34, 1, 0,
  /* 18 */ 65441, 34, 1, 65502, 35, 1, 0,
  /* 25 */ 36, 1, 0,
  /* 28 */ 65442, 36, 1, 65500, 37, 1, 0,
  /* 35 */ 38, 1, 0,
  /* 38 */ 65443, 38, 1, 65498, 39, 1, 0,
  /* 45 */ 40, 1, 0,
  /* 48 */ 65444, 40, 1, 65496, 41, 1, 0,
  /* 55 */ 42, 1, 0,
  /* 58 */ 65445, 42, 1, 65494, 43, 1, 0,
  /* 65 */ 44, 1, 0,
  /* 68 */ 65446, 44, 1, 65492, 45, 1, 0,
  /* 75 */ 46, 1, 0,
  /* 78 */ 65447, 46, 1, 65490, 47, 1, 0,
  /* 85 */ 65355, 1, 0,
  /* 88 */ 65448, 1, 0,
  /* 91 */ 65449, 1, 0,
  /* 94 */ 65450, 1, 0,
  /* 97 */ 65451, 1, 0,
  /* 100 */ 65452, 1, 0,
  /* 103 */ 65453, 1, 0,
  /* 106 */ 65454, 1, 0,
  /* 109 */ 65455, 1, 0,
  /* 112 */ 65531, 1, 0,
  /* 115 */ 15, 0,
  /* 117 */ 80, 0,
  /* 119 */ 81, 0,
  /* 121 */ 82, 0,
  /* 123 */ 83, 0,
  /* 125 */ 84, 0,
  /* 127 */ 85, 0,
  /* 129 */ 86, 0,
  /* 131 */ 87, 0,
  /* 133 */ 65488, 88, 0,
  /* 136 */ 65489, 88, 0,
  /* 139 */ 65489, 89, 0,
  /* 142 */ 65490, 89, 0,
  /* 145 */ 65491, 89, 0,
  /* 148 */ 65491, 90, 0,
  /* 151 */ 65492, 90, 0,
  /* 154 */ 65493, 90, 0,
  /* 157 */ 65493, 91, 0,
  /* 160 */ 65494, 91, 0,
  /* 163 */ 65495, 91, 0,
  /* 166 */ 65495, 92, 0,
  /* 169 */ 65496, 92, 0,
  /* 172 */ 65497, 92, 0,
  /* 175 */ 65497, 93, 0,
  /* 178 */ 65498, 93, 0,
  /* 181 */ 65499, 93, 0,
  /* 184 */ 65499, 94, 0,
  /* 187 */ 65500, 94, 0,
  /* 190 */ 65501, 94, 0,
  /* 193 */ 65501, 95, 0,
  /* 196 */ 65502, 95, 0,
  /* 199 */ 65503, 95, 0,
  /* 202 */ 65503, 96, 0,
  /* 205 */ 65504, 96, 0,
  /* 208 */ 65503, 0,
  /* 210 */ 65519, 0,
  /* 212 */ 65535, 0,
};

extern const uint16_t SparcSubRegIdxLists[] = {
  /* 0 */ 1, 3, 0,
  /* 3 */ 2, 4, 0,
  /* 6 */ 2, 1, 3, 4, 5, 6, 0,
};

extern const MCRegisterInfo::SubRegCoveredBits SparcSubRegIdxRanges[] = {
  { 65535, 65535 },
  { 0, 32 },	// sub_even
  { 0, 64 },	// sub_even64
  { 32, 32 },	// sub_odd
  { 64, 64 },	// sub_odd64
  { 64, 32 },	// sub_odd64_then_sub_even
  { 96, 32 },	// sub_odd64_then_sub_odd
};

extern const char SparcRegStrings[] = {
  /* 0 */ 'D', '1', '0', 0,
  /* 4 */ 'F', '1', '0', 0,
  /* 8 */ 'Q', '1', '0', 0,
  /* 12 */ 'D', '2', '0', 0,
  /* 16 */ 'F', '2', '0', 0,
  /* 20 */ 'D', '3', '0', 0,
  /* 24 */ 'F', '3', '0', 0,
  /* 28 */ 'D', '0', 0,
  /* 31 */ 'F', '0', 0,
  /* 34 */ 'G', '0', 0,
  /* 37 */ 'I', '0', 0,
  /* 40 */ 'L', '0', 0,
  /* 43 */ 'O', '0', 0,
  /* 46 */ 'Q', '0', 0,
  /* 49 */ 'D', '1', '1', 0,
  /* 53 */ 'F', '1', '1', 0,
  /* 57 */ 'Q', '1', '1', 0,
  /* 61 */ 'D', '2', '1', 0,
  /* 65 */ 'F', '2', '1', 0,
  /* 69 */ 'D', '3', '1', 0,
  /* 73 */ 'F', '3', '1', 0,
  /* 77 */ 'D', '1', 0,
  /* 80 */ 'F', '1', 0,
  /* 83 */ 'G', '1', 0,
  /* 86 */ 'I', '1', 0,
  /* 89 */ 'L', '1', 0,
  /* 92 */ 'O', '1', 0,
  /* 95 */ 'Q', '1', 0,
  /* 98 */ 'D', '1', '2', 0,
  /* 102 */ 'F', '1', '2', 0,
  /* 106 */ 'Q', '1', '2', 0,
  /* 110 */ 'D', '2', '2', 0,
  /* 114 */ 'F', '2', '2', 0,
  /* 118 */ 'D', '2', 0,
  /* 121 */ 'F', '2', 0,
  /* 124 */ 'G', '2', 0,
  /* 127 */ 'I', '2', 0,
  /* 130 */ 'L', '2', 0,
  /* 133 */ 'O', '2', 0,
  /* 136 */ 'Q', '2', 0,
  /* 139 */ 'D', '1', '3', 0,
  /* 143 */ 'F', '1', '3', 0,
  /* 147 */ 'Q', '1', '3', 0,
  /* 151 */ 'D', '2', '3', 0,
  /* 155 */ 'F', '2', '3', 0,
  /* 159 */ 'D', '3', 0,
  /* 162 */ 'F', '3', 0,
  /* 165 */ 'G', '3', 0,
  /* 168 */ 'I', '3', 0,
  /* 171 */ 'L', '3', 0,
  /* 174 */ 'O', '3', 0,
  /* 177 */ 'Q', '3', 0,
  /* 180 */ 'D', '1', '4', 0,
  /* 184 */ 'F', '1', '4', 0,
  /* 188 */ 'Q', '1', '4', 0,
  /* 192 */ 'D', '2', '4', 0,
  /* 196 */ 'F', '2', '4', 0,
  /* 200 */ 'D', '4', 0,
  /* 203 */ 'F', '4', 0,
  /* 206 */ 'G', '4', 0,
  /* 209 */ 'I', '4', 0,
  /* 212 */ 'L', '4', 0,
  /* 215 */ 'O', '4', 0,
  /* 218 */ 'Q', '4', 0,
  /* 221 */ 'D', '1', '5', 0,
  /* 225 */ 'F', '1', '5', 0,
  /* 229 */ 'Q', '1', '5', 0,
  /* 233 */ 'D', '2', '5', 0,
  /* 237 */ 'F', '2', '5', 0,
  /* 241 */ 'D', '5', 0,
  /* 244 */ 'F', '5', 0,
  /* 247 */ 'G', '5', 0,
  /* 250 */ 'I', '5', 0,
  /* 253 */ 'L', '5', 0,
  /* 256 */ 'O', '5', 0,
  /* 259 */ 'Q', '5', 0,
  /* 262 */ 'D', '1', '6', 0,
  /* 266 */ 'F', '1', '6', 0,
  /* 270 */ 'D', '2', '6', 0,
  /* 274 */ 'F', '2', '6', 0,
  /* 278 */ 'D', '6', 0,
  /* 281 */ 'F', '6', 0,
  /* 284 */ 'G', '6', 0,
  /* 287 */ 'I', '6', 0,
  /* 290 */ 'L', '6', 0,
  /* 293 */ 'O', '6', 0,
  /* 296 */ 'Q', '6', 0,
  /* 299 */ 'D', '1', '7', 0,
  /* 303 */ 'F', '1', '7', 0,
  /* 307 */ 'D', '2', '7', 0,
  /* 311 */ 'F', '2', '7', 0,
  /* 315 */ 'D', '7', 0,
  /* 318 */ 'F', '7', 0,
  /* 321 */ 'G', '7', 0,
  /* 324 */ 'I', '7', 0,
  /* 327 */ 'L', '7', 0,
  /* 330 */ 'O', '7', 0,
  /* 333 */ 'Q', '7', 0,
  /* 336 */ 'D', '1', '8', 0,
  /* 340 */ 'F', '1', '8', 0,
  /* 344 */ 'D', '2', '8', 0,
  /* 348 */ 'F', '2', '8', 0,
  /* 352 */ 'D', '8', 0,
  /* 355 */ 'F', '8', 0,
  /* 358 */ 'Q', '8', 0,
  /* 361 */ 'D', '1', '9', 0,
  /* 365 */ 'F', '1', '9', 0,
  /* 369 */ 'D', '2', '9', 0,
  /* 373 */ 'F', '2', '9', 0,
  /* 377 */ 'D', '9', 0,
  /* 380 */ 'F', '9', 0,
  /* 383 */ 'Q', '9', 0,
  /* 386 */ 'F', 'C', 'C', 0,
  /* 390 */ 'I', 'C', 'C', 0,
  /* 394 */ 'Y', 0,
};

extern const MCRegisterDesc SparcRegDesc[] = { // Descriptors
  { 3, 0, 0, 0, 0 },
  { 386, 4, 4, 2, 3393 },
  { 390, 4, 4, 2, 3393 },
  { 394, 4, 4, 2, 3393 },
  { 28, 5, 203, 0, 1794 },
  { 77, 12, 194, 0, 1794 },
  { 118, 15, 194, 0, 1794 },
  { 159, 22, 185, 0, 1794 },
  { 200, 25, 185, 0, 1794 },
  { 241, 32, 176, 0, 1794 },
  { 278, 35, 176, 0, 1794 },
  { 315, 42, 167, 0, 1794 },
  { 352, 45, 167, 0, 1794 },
  { 377, 52, 158, 0, 1794 },
  { 0, 55, 158, 0, 1794 },
  { 49, 62, 149, 0, 1794 },
  { 98, 65, 149, 0, 1794 },
  { 139, 72, 140, 0, 1794 },
  { 180, 75, 140, 0, 1794 },
  { 221, 82, 134, 0, 1794 },
  { 262, 4, 134, 2, 1841 },
  { 299, 4, 131, 2, 1841 },
  { 336, 4, 131, 2, 1841 },
  { 361, 4, 129, 2, 1841 },
  { 12, 4, 129, 2, 1841 },
  { 61, 4, 127, 2, 1841 },
  { 110, 4, 127, 2, 1841 },
  { 151, 4, 125, 2, 1841 },
  { 192, 4, 125, 2, 1841 },
  { 233, 4, 123, 2, 1841 },
  { 270, 4, 123, 2, 1841 },
  { 307, 4, 121, 2, 1841 },
  { 344, 4, 121, 2, 1841 },
  { 369, 4, 119, 2, 1841 },
  { 20, 4, 119, 2, 1841 },
  { 69, 4, 117, 2, 1841 },
  { 31, 4, 205, 2, 3329 },
  { 80, 4, 202, 2, 3329 },
  { 121, 4, 199, 2, 3329 },
  { 162, 4, 196, 2, 3329 },
  { 203, 4, 196, 2, 3329 },
  { 244, 4, 193, 2, 3329 },
  { 281, 4, 190, 2, 3329 },
  { 318, 4, 187, 2, 3329 },
  { 355, 4, 187, 2, 3329 },
  { 380, 4, 184, 2, 3329 },
  { 4, 4, 181, 2, 3329 },
  { 53, 4, 178, 2, 3329 },
  { 102, 4, 178, 2, 3329 },
  { 143, 4, 175, 2, 3329 },
  { 184, 4, 172, 2, 3329 },
  { 225, 4, 169, 2, 3329 },
  { 266, 4, 169, 2, 3329 },
  { 303, 4, 166, 2, 3329 },
  { 340, 4, 163, 2, 3329 },
  { 365, 4, 160, 2, 3329 },
  { 16, 4, 160, 2, 3329 },
  { 65, 4, 157, 2, 3329 },
  { 114, 4, 154, 2, 3329 },
  { 155, 4, 151, 2, 3329 },
  { 196, 4, 151, 2, 3329 },
  { 237, 4, 148, 2, 3329 },
  { 274, 4, 145, 2, 3329 },
  { 311, 4, 142, 2, 3329 },
  { 348, 4, 142, 2, 3329 },
  { 373, 4, 139, 2, 3329 },
  { 24, 4, 136, 2, 3329 },
  { 73, 4, 133, 2, 3329 },
  { 34, 4, 4, 2, 3361 },
  { 83, 4, 4, 2, 3361 },
  { 124, 4, 4, 2, 3361 },
  { 165, 4, 4, 2, 3361 },
  { 206, 4, 4, 2, 3361 },
  { 247, 4, 4, 2, 3361 },
  { 284, 4, 4, 2, 3361 },
  { 321, 4, 4, 2, 3361 },
  { 37, 4, 4, 2, 3361 },
  { 86, 4, 4, 2, 3361 },
  { 127, 4, 4, 2, 3361 },
  { 168, 4, 4, 2, 3361 },
  { 209, 4, 4, 2, 3361 },
  { 250, 4, 4, 2, 3361 },
  { 287, 4, 4, 2, 3361 },
  { 324, 4, 4, 2, 3361 },
  { 40, 4, 4, 2, 3361 },
  { 89, 4, 4, 2, 3361 },
  { 130, 4, 4, 2, 3361 },
  { 171, 4, 4, 2, 3361 },
  { 212, 4, 4, 2, 3361 },
  { 253, 4, 4, 2, 3361 },
  { 290, 4, 4, 2, 3361 },
  { 327, 4, 4, 2, 3361 },
  { 43, 4, 4, 2, 3361 },
  { 92, 4, 4, 2, 3361 },
  { 133, 4, 4, 2, 3361 },
  { 174, 4, 4, 2, 3361 },
  { 215, 4, 4, 2, 3361 },
  { 256, 4, 4, 2, 3361 },
  { 293, 4, 4, 2, 3361 },
  { 330, 4, 4, 2, 3361 },
  { 46, 8, 4, 6, 4 },
  { 95, 18, 4, 6, 4 },
  { 136, 28, 4, 6, 4 },
  { 177, 38, 4, 6, 4 },
  { 218, 48, 4, 6, 4 },
  { 259, 58, 4, 6, 4 },
  { 296, 68, 4, 6, 4 },
  { 333, 78, 4, 6, 4 },
  { 358, 88, 4, 3, 1362 },
  { 383, 91, 4, 3, 1362 },
  { 8, 94, 4, 3, 1362 },
  { 57, 97, 4, 3, 1362 },
  { 106, 100, 4, 3, 1362 },
  { 147, 103, 4, 3, 1362 },
  { 188, 106, 4, 3, 1362 },
  { 229, 109, 4, 3, 1362 },
};

extern const uint16_t SparcRegUnitRoots[][2] = {
  { SP::FCC },
  { SP::ICC },
  { SP::Y },
  { SP::F0 },
  { SP::F1 },
  { SP::F2 },
  { SP::F3 },
  { SP::F4 },
  { SP::F5 },
  { SP::F6 },
  { SP::F7 },
  { SP::F8 },
  { SP::F9 },
  { SP::F10 },
  { SP::F11 },
  { SP::F12 },
  { SP::F13 },
  { SP::F14 },
  { SP::F15 },
  { SP::F16 },
  { SP::F17 },
  { SP::F18 },
  { SP::F19 },
  { SP::F20 },
  { SP::F21 },
  { SP::F22 },
  { SP::F23 },
  { SP::F24 },
  { SP::F25 },
  { SP::F26 },
  { SP::F27 },
  { SP::F28 },
  { SP::F29 },
  { SP::F30 },
  { SP::F31 },
  { SP::D16 },
  { SP::D17 },
  { SP::D18 },
  { SP::D19 },
  { SP::D20 },
  { SP::D21 },
  { SP::D22 },
  { SP::D23 },
  { SP::D24 },
  { SP::D25 },
  { SP::D26 },
  { SP::D27 },
  { SP::D28 },
  { SP::D29 },
  { SP::D30 },
  { SP::D31 },
  { SP::G0 },
  { SP::G1 },
  { SP::G2 },
  { SP::G3 },
  { SP::G4 },
  { SP::G5 },
  { SP::G6 },
  { SP::G7 },
  { SP::I0 },
  { SP::I1 },
  { SP::I2 },
  { SP::I3 },
  { SP::I4 },
  { SP::I5 },
  { SP::I6 },
  { SP::I7 },
  { SP::L0 },
  { SP::L1 },
  { SP::L2 },
  { SP::L3 },
  { SP::L4 },
  { SP::L5 },
  { SP::L6 },
  { SP::L7 },
  { SP::O0 },
  { SP::O1 },
  { SP::O2 },
  { SP::O3 },
  { SP::O4 },
  { SP::O5 },
  { SP::O6 },
  { SP::O7 },
};

namespace {     // Register classes...
  // FPRegs Register Class...
  const uint16_t FPRegs[] = {
    SP::F0, SP::F1, SP::F2, SP::F3, SP::F4, SP::F5, SP::F6, SP::F7, SP::F8, SP::F9, SP::F10, SP::F11, SP::F12, SP::F13, SP::F14, SP::F15, SP::F16, SP::F17, SP::F18, SP::F19, SP::F20, SP::F21, SP::F22, SP::F23, SP::F24, SP::F25, SP::F26, SP::F27, SP::F28, SP::F29, SP::F30, SP::F31, 
  };

  // FPRegs Bit set.
  const uint8_t FPRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // IntRegs Register Class...
  const uint16_t IntRegs[] = {
    SP::I0, SP::I1, SP::I2, SP::I3, SP::I4, SP::I5, SP::I6, SP::I7, SP::G0, SP::G1, SP::G2, SP::G3, SP::G4, SP::G5, SP::G6, SP::G7, SP::L0, SP::L1, SP::L2, SP::L3, SP::L4, SP::L5, SP::L6, SP::L7, SP::O0, SP::O1, SP::O2, SP::O3, SP::O4, SP::O5, SP::O6, SP::O7, 
  };

  // IntRegs Bit set.
  const uint8_t IntRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // DFPRegs Register Class...
  const uint16_t DFPRegs[] = {
    SP::D0, SP::D1, SP::D2, SP::D3, SP::D4, SP::D5, SP::D6, SP::D7, SP::D8, SP::D9, SP::D10, SP::D11, SP::D12, SP::D13, SP::D14, SP::D15, SP::D16, SP::D17, SP::D18, SP::D19, SP::D20, SP::D21, SP::D22, SP::D23, SP::D24, SP::D25, SP::D26, SP::D27, SP::D28, SP::D29, SP::D30, SP::D31, 
  };

  // DFPRegs Bit set.
  const uint8_t DFPRegsBits[] = {
    0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // I64Regs Register Class...
  const uint16_t I64Regs[] = {
    SP::I0, SP::I1, SP::I2, SP::I3, SP::I4, SP::I5, SP::I6, SP::I7, SP::G0, SP::G1, SP::G2, SP::G3, SP::G4, SP::G5, SP::G6, SP::G7, SP::L0, SP::L1, SP::L2, SP::L3, SP::L4, SP::L5, SP::L6, SP::L7, SP::O0, SP::O1, SP::O2, SP::O3, SP::O4, SP::O5, SP::O6, SP::O7, 
  };

  // I64Regs Bit set.
  const uint8_t I64RegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 
  };

  // DFPRegs_with_sub_even Register Class...
  const uint16_t DFPRegs_with_sub_even[] = {
    SP::D0, SP::D1, SP::D2, SP::D3, SP::D4, SP::D5, SP::D6, SP::D7, SP::D8, SP::D9, SP::D10, SP::D11, SP::D12, SP::D13, SP::D14, SP::D15, 
  };

  // DFPRegs_with_sub_even Bit set.
  const uint8_t DFPRegs_with_sub_evenBits[] = {
    0xf0, 0xff, 0x0f, 
  };

  // QFPRegs Register Class...
  const uint16_t QFPRegs[] = {
    SP::Q0, SP::Q1, SP::Q2, SP::Q3, SP::Q4, SP::Q5, SP::Q6, SP::Q7, SP::Q8, SP::Q9, SP::Q10, SP::Q11, SP::Q12, SP::Q13, SP::Q14, SP::Q15, 
  };

  // QFPRegs Bit set.
  const uint8_t QFPRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x0f, 
  };

  // QFPRegs_with_sub_even Register Class...
  const uint16_t QFPRegs_with_sub_even[] = {
    SP::Q0, SP::Q1, SP::Q2, SP::Q3, SP::Q4, SP::Q5, SP::Q6, SP::Q7, 
  };

  // QFPRegs_with_sub_even Bit set.
  const uint8_t QFPRegs_with_sub_evenBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0f, 
  };

}

extern const MCRegisterClass SparcMCRegisterClasses[] = {
  { "FPRegs", FPRegs, FPRegsBits, 32, sizeof(FPRegsBits), SP::FPRegsRegClassID, 4, 4, 1, 1 },
  { "IntRegs", IntRegs, IntRegsBits, 32, sizeof(IntRegsBits), SP::IntRegsRegClassID, 4, 4, 1, 1 },
  { "DFPRegs", DFPRegs, DFPRegsBits, 32, sizeof(DFPRegsBits), SP::DFPRegsRegClassID, 8, 8, 1, 1 },
  { "I64Regs", I64Regs, I64RegsBits, 32, sizeof(I64RegsBits), SP::I64RegsRegClassID, 8, 8, 1, 1 },
  { "DFPRegs_with_sub_even", DFPRegs_with_sub_even, DFPRegs_with_sub_evenBits, 16, sizeof(DFPRegs_with_sub_evenBits), SP::DFPRegs_with_sub_evenRegClassID, 8, 8, 1, 1 },
  { "QFPRegs", QFPRegs, QFPRegsBits, 16, sizeof(QFPRegsBits), SP::QFPRegsRegClassID, 16, 16, 1, 1 },
  { "QFPRegs_with_sub_even", QFPRegs_with_sub_even, QFPRegs_with_sub_evenBits, 8, sizeof(QFPRegs_with_sub_evenBits), SP::QFPRegs_with_sub_evenRegClassID, 16, 16, 1, 1 },
};

// SP Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair SPDwarfFlavour0Dwarf2L[] = {
  { 0U, SP::G0 },
  { 1U, SP::G1 },
  { 2U, SP::G2 },
  { 3U, SP::G3 },
  { 4U, SP::G4 },
  { 5U, SP::G5 },
  { 6U, SP::G6 },
  { 7U, SP::G7 },
  { 8U, SP::O0 },
  { 9U, SP::O1 },
  { 10U, SP::O2 },
  { 11U, SP::O3 },
  { 12U, SP::O4 },
  { 13U, SP::O5 },
  { 14U, SP::O6 },
  { 15U, SP::O7 },
  { 16U, SP::L0 },
  { 17U, SP::L1 },
  { 18U, SP::L2 },
  { 19U, SP::L3 },
  { 20U, SP::L4 },
  { 21U, SP::L5 },
  { 22U, SP::L6 },
  { 23U, SP::L7 },
  { 24U, SP::I0 },
  { 25U, SP::I1 },
  { 26U, SP::I2 },
  { 27U, SP::I3 },
  { 28U, SP::I4 },
  { 29U, SP::I5 },
  { 30U, SP::I6 },
  { 31U, SP::I7 },
  { 32U, SP::F0 },
  { 33U, SP::F1 },
  { 34U, SP::F2 },
  { 35U, SP::F3 },
  { 36U, SP::F4 },
  { 37U, SP::F5 },
  { 38U, SP::F6 },
  { 39U, SP::F7 },
  { 40U, SP::F8 },
  { 41U, SP::F9 },
  { 42U, SP::F10 },
  { 43U, SP::F11 },
  { 44U, SP::F12 },
  { 45U, SP::F13 },
  { 46U, SP::F14 },
  { 47U, SP::F15 },
  { 48U, SP::F16 },
  { 49U, SP::F17 },
  { 50U, SP::F18 },
  { 51U, SP::F19 },
  { 52U, SP::F20 },
  { 53U, SP::F21 },
  { 54U, SP::F22 },
  { 55U, SP::F23 },
  { 56U, SP::F24 },
  { 57U, SP::F25 },
  { 58U, SP::F26 },
  { 59U, SP::F27 },
  { 60U, SP::F28 },
  { 61U, SP::F29 },
  { 62U, SP::F30 },
  { 63U, SP::F31 },
  { 72U, SP::D0 },
  { 73U, SP::D1 },
  { 74U, SP::D2 },
  { 75U, SP::D3 },
  { 76U, SP::D4 },
  { 77U, SP::D5 },
  { 78U, SP::D6 },
  { 79U, SP::D7 },
  { 80U, SP::D8 },
  { 81U, SP::D9 },
  { 82U, SP::D10 },
  { 83U, SP::D11 },
  { 84U, SP::D12 },
  { 85U, SP::D13 },
  { 86U, SP::D14 },
  { 87U, SP::D15 },
};
extern const unsigned SPDwarfFlavour0Dwarf2LSize = sizeof(SPDwarfFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair SPEHFlavour0Dwarf2L[] = {
  { 0U, SP::G0 },
  { 1U, SP::G1 },
  { 2U, SP::G2 },
  { 3U, SP::G3 },
  { 4U, SP::G4 },
  { 5U, SP::G5 },
  { 6U, SP::G6 },
  { 7U, SP::G7 },
  { 8U, SP::O0 },
  { 9U, SP::O1 },
  { 10U, SP::O2 },
  { 11U, SP::O3 },
  { 12U, SP::O4 },
  { 13U, SP::O5 },
  { 14U, SP::O6 },
  { 15U, SP::O7 },
  { 16U, SP::L0 },
  { 17U, SP::L1 },
  { 18U, SP::L2 },
  { 19U, SP::L3 },
  { 20U, SP::L4 },
  { 21U, SP::L5 },
  { 22U, SP::L6 },
  { 23U, SP::L7 },
  { 24U, SP::I0 },
  { 25U, SP::I1 },
  { 26U, SP::I2 },
  { 27U, SP::I3 },
  { 28U, SP::I4 },
  { 29U, SP::I5 },
  { 30U, SP::I6 },
  { 31U, SP::I7 },
  { 32U, SP::F0 },
  { 33U, SP::F1 },
  { 34U, SP::F2 },
  { 35U, SP::F3 },
  { 36U, SP::F4 },
  { 37U, SP::F5 },
  { 38U, SP::F6 },
  { 39U, SP::F7 },
  { 40U, SP::F8 },
  { 41U, SP::F9 },
  { 42U, SP::F10 },
  { 43U, SP::F11 },
  { 44U, SP::F12 },
  { 45U, SP::F13 },
  { 46U, SP::F14 },
  { 47U, SP::F15 },
  { 48U, SP::F16 },
  { 49U, SP::F17 },
  { 50U, SP::F18 },
  { 51U, SP::F19 },
  { 52U, SP::F20 },
  { 53U, SP::F21 },
  { 54U, SP::F22 },
  { 55U, SP::F23 },
  { 56U, SP::F24 },
  { 57U, SP::F25 },
  { 58U, SP::F26 },
  { 59U, SP::F27 },
  { 60U, SP::F28 },
  { 61U, SP::F29 },
  { 62U, SP::F30 },
  { 63U, SP::F31 },
  { 72U, SP::D0 },
  { 73U, SP::D1 },
  { 74U, SP::D2 },
  { 75U, SP::D3 },
  { 76U, SP::D4 },
  { 77U, SP::D5 },
  { 78U, SP::D6 },
  { 79U, SP::D7 },
  { 80U, SP::D8 },
  { 81U, SP::D9 },
  { 82U, SP::D10 },
  { 83U, SP::D11 },
  { 84U, SP::D12 },
  { 85U, SP::D13 },
  { 86U, SP::D14 },
  { 87U, SP::D15 },
};
extern const unsigned SPEHFlavour0Dwarf2LSize = sizeof(SPEHFlavour0Dwarf2L)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair SPDwarfFlavour0L2Dwarf[] = {
  { SP::D0, 72U },
  { SP::D1, 73U },
  { SP::D2, 74U },
  { SP::D3, 75U },
  { SP::D4, 76U },
  { SP::D5, 77U },
  { SP::D6, 78U },
  { SP::D7, 79U },
  { SP::D8, 80U },
  { SP::D9, 81U },
  { SP::D10, 82U },
  { SP::D11, 83U },
  { SP::D12, 84U },
  { SP::D13, 85U },
  { SP::D14, 86U },
  { SP::D15, 87U },
  { SP::F0, 32U },
  { SP::F1, 33U },
  { SP::F2, 34U },
  { SP::F3, 35U },
  { SP::F4, 36U },
  { SP::F5, 37U },
  { SP::F6, 38U },
  { SP::F7, 39U },
  { SP::F8, 40U },
  { SP::F9, 41U },
  { SP::F10, 42U },
  { SP::F11, 43U },
  { SP::F12, 44U },
  { SP::F13, 45U },
  { SP::F14, 46U },
  { SP::F15, 47U },
  { SP::F16, 48U },
  { SP::F17, 49U },
  { SP::F18, 50U },
  { SP::F19, 51U },
  { SP::F20, 52U },
  { SP::F21, 53U },
  { SP::F22, 54U },
  { SP::F23, 55U },
  { SP::F24, 56U },
  { SP::F25, 57U },
  { SP::F26, 58U },
  { SP::F27, 59U },
  { SP::F28, 60U },
  { SP::F29, 61U },
  { SP::F30, 62U },
  { SP::F31, 63U },
  { SP::G0, 0U },
  { SP::G1, 1U },
  { SP::G2, 2U },
  { SP::G3, 3U },
  { SP::G4, 4U },
  { SP::G5, 5U },
  { SP::G6, 6U },
  { SP::G7, 7U },
  { SP::I0, 24U },
  { SP::I1, 25U },
  { SP::I2, 26U },
  { SP::I3, 27U },
  { SP::I4, 28U },
  { SP::I5, 29U },
  { SP::I6, 30U },
  { SP::I7, 31U },
  { SP::L0, 16U },
  { SP::L1, 17U },
  { SP::L2, 18U },
  { SP::L3, 19U },
  { SP::L4, 20U },
  { SP::L5, 21U },
  { SP::L6, 22U },
  { SP::L7, 23U },
  { SP::O0, 8U },
  { SP::O1, 9U },
  { SP::O2, 10U },
  { SP::O3, 11U },
  { SP::O4, 12U },
  { SP::O5, 13U },
  { SP::O6, 14U },
  { SP::O7, 15U },
};
extern const unsigned SPDwarfFlavour0L2DwarfSize = sizeof(SPDwarfFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const MCRegisterInfo::DwarfLLVMRegPair SPEHFlavour0L2Dwarf[] = {
  { SP::D0, 72U },
  { SP::D1, 73U },
  { SP::D2, 74U },
  { SP::D3, 75U },
  { SP::D4, 76U },
  { SP::D5, 77U },
  { SP::D6, 78U },
  { SP::D7, 79U },
  { SP::D8, 80U },
  { SP::D9, 81U },
  { SP::D10, 82U },
  { SP::D11, 83U },
  { SP::D12, 84U },
  { SP::D13, 85U },
  { SP::D14, 86U },
  { SP::D15, 87U },
  { SP::F0, 32U },
  { SP::F1, 33U },
  { SP::F2, 34U },
  { SP::F3, 35U },
  { SP::F4, 36U },
  { SP::F5, 37U },
  { SP::F6, 38U },
  { SP::F7, 39U },
  { SP::F8, 40U },
  { SP::F9, 41U },
  { SP::F10, 42U },
  { SP::F11, 43U },
  { SP::F12, 44U },
  { SP::F13, 45U },
  { SP::F14, 46U },
  { SP::F15, 47U },
  { SP::F16, 48U },
  { SP::F17, 49U },
  { SP::F18, 50U },
  { SP::F19, 51U },
  { SP::F20, 52U },
  { SP::F21, 53U },
  { SP::F22, 54U },
  { SP::F23, 55U },
  { SP::F24, 56U },
  { SP::F25, 57U },
  { SP::F26, 58U },
  { SP::F27, 59U },
  { SP::F28, 60U },
  { SP::F29, 61U },
  { SP::F30, 62U },
  { SP::F31, 63U },
  { SP::G0, 0U },
  { SP::G1, 1U },
  { SP::G2, 2U },
  { SP::G3, 3U },
  { SP::G4, 4U },
  { SP::G5, 5U },
  { SP::G6, 6U },
  { SP::G7, 7U },
  { SP::I0, 24U },
  { SP::I1, 25U },
  { SP::I2, 26U },
  { SP::I3, 27U },
  { SP::I4, 28U },
  { SP::I5, 29U },
  { SP::I6, 30U },
  { SP::I7, 31U },
  { SP::L0, 16U },
  { SP::L1, 17U },
  { SP::L2, 18U },
  { SP::L3, 19U },
  { SP::L4, 20U },
  { SP::L5, 21U },
  { SP::L6, 22U },
  { SP::L7, 23U },
  { SP::O0, 8U },
  { SP::O1, 9U },
  { SP::O2, 10U },
  { SP::O3, 11U },
  { SP::O4, 12U },
  { SP::O5, 13U },
  { SP::O6, 14U },
  { SP::O7, 15U },
};
extern const unsigned SPEHFlavour0L2DwarfSize = sizeof(SPEHFlavour0L2Dwarf)/sizeof(MCRegisterInfo::DwarfLLVMRegPair);

extern const uint16_t SparcRegEncodingTable[] = {
  0,
  0,
  0,
  0,
  0,
  2,
  4,
  6,
  8,
  10,
  12,
  14,
  16,
  18,
  20,
  22,
  24,
  26,
  28,
  30,
  1,
  3,
  5,
  7,
  9,
  11,
  13,
  15,
  17,
  19,
  21,
  23,
  25,
  27,
  29,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  0,
  4,
  8,
  12,
  16,
  20,
  24,
  28,
  1,
  5,
  9,
  13,
  17,
  21,
  25,
  29,
};
static inline void InitSparcMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(SparcRegDesc, 116, RA, PC, SparcMCRegisterClasses, 7, SparcRegUnitRoots, 83, SparcRegDiffLists, SparcRegStrings, SparcSubRegIdxLists, 7,
SparcSubRegIdxRanges,   SparcRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(SPDwarfFlavour0Dwarf2L, SPDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapDwarfRegsToLLVMRegs(SPEHFlavour0Dwarf2L, SPEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(SPDwarfFlavour0L2Dwarf, SPDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    RI->mapLLVMRegsToDwarfRegs(SPEHFlavour0L2Dwarf, SPEHFlavour0L2DwarfSize, true);
    break;
  }
}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Register Information Header Fragment                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

struct SparcGenRegisterInfo : public TargetRegisterInfo {
  explicit SparcGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0, unsigned PC = 0);
  virtual bool needsStackRealignment(const MachineFunction &) const
     { return false; }
  virtual unsigned composeSubRegIndicesImpl(unsigned, unsigned) const;
  virtual const TargetRegisterClass *getSubClassWithSubReg(const TargetRegisterClass*, unsigned) const;
  virtual const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const;
  virtual unsigned getRegUnitWeight(unsigned RegUnit) const;
  virtual unsigned getNumRegPressureSets() const;
  virtual const char *getRegPressureSetName(unsigned Idx) const;
  virtual unsigned getRegPressureSetLimit(unsigned Idx) const;
  virtual const int *getRegClassPressureSets(const TargetRegisterClass *RC) const;
  virtual const int *getRegUnitPressureSets(unsigned RegUnit) const;
};

namespace SP { // Register classes
  extern const TargetRegisterClass FPRegsRegClass;
  extern const TargetRegisterClass IntRegsRegClass;
  extern const TargetRegisterClass DFPRegsRegClass;
  extern const TargetRegisterClass I64RegsRegClass;
  extern const TargetRegisterClass DFPRegs_with_sub_evenRegClass;
  extern const TargetRegisterClass QFPRegsRegClass;
  extern const TargetRegisterClass QFPRegs_with_sub_evenRegClass;
} // end of namespace Sparc

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register and Register Classes Information                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass SparcMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i32, MVT::i64, MVT::Other,
  /* 3 */ MVT::f32, MVT::Other,
  /* 5 */ MVT::f64, MVT::Other,
  /* 7 */ MVT::f128, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "sub_even", "sub_even64", "sub_odd", "sub_odd64", "sub_odd64_then_sub_even", "sub_odd64_then_sub_odd" };


static const unsigned SubRegIndexLaneMaskTable[] = {
  ~0u,
  0x00000001, // sub_even
  0x00000003, // sub_even64
  0x00000002, // sub_odd
  0x0000000c, // sub_odd64
  0x00000004, // sub_odd64_then_sub_even
  0x00000008, // sub_odd64_then_sub_odd
 };



static const TargetRegisterClass *const NullRegClasses[] = { NULL };

static const uint32_t FPRegsSubClassMask[] = {
  0x00000001, 
  0x00000050, // sub_even
  0x00000050, // sub_odd
  0x00000040, // sub_odd64_then_sub_even
  0x00000040, // sub_odd64_then_sub_odd
};

static const uint32_t IntRegsSubClassMask[] = {
  0x0000000a, 
};

static const uint32_t DFPRegsSubClassMask[] = {
  0x00000014, 
  0x00000060, // sub_even64
  0x00000060, // sub_odd64
};

static const uint32_t I64RegsSubClassMask[] = {
  0x00000008, 
};

static const uint32_t DFPRegs_with_sub_evenSubClassMask[] = {
  0x00000010, 
  0x00000040, // sub_even64
  0x00000040, // sub_odd64
};

static const uint32_t QFPRegsSubClassMask[] = {
  0x00000060, 
};

static const uint32_t QFPRegs_with_sub_evenSubClassMask[] = {
  0x00000040, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 2, 4, 0,
  /* 3 */ 1, 3, 5, 6, 0,
};

static const TargetRegisterClass *const I64RegsSuperclasses[] = {
  &SP::IntRegsRegClass,
  NULL
};

static const TargetRegisterClass *const DFPRegs_with_sub_evenSuperclasses[] = {
  &SP::DFPRegsRegClass,
  NULL
};

static const TargetRegisterClass *const QFPRegs_with_sub_evenSuperclasses[] = {
  &SP::QFPRegsRegClass,
  NULL
};

namespace SP {   // Register class instances
  extern const TargetRegisterClass FPRegsRegClass = {
    &SparcMCRegisterClasses[FPRegsRegClassID],
    VTLists + 3,
    FPRegsSubClassMask,
    SuperRegIdxSeqs + 3,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass IntRegsRegClass = {
    &SparcMCRegisterClasses[IntRegsRegClassID],
    VTLists + 0,
    IntRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass DFPRegsRegClass = {
    &SparcMCRegisterClasses[DFPRegsRegClassID],
    VTLists + 5,
    DFPRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass I64RegsRegClass = {
    &SparcMCRegisterClasses[I64RegsRegClassID],
    VTLists + 1,
    I64RegsSubClassMask,
    SuperRegIdxSeqs + 2,
    I64RegsSuperclasses,
    0
  };

  extern const TargetRegisterClass DFPRegs_with_sub_evenRegClass = {
    &SparcMCRegisterClasses[DFPRegs_with_sub_evenRegClassID],
    VTLists + 5,
    DFPRegs_with_sub_evenSubClassMask,
    SuperRegIdxSeqs + 0,
    DFPRegs_with_sub_evenSuperclasses,
    0
  };

  extern const TargetRegisterClass QFPRegsRegClass = {
    &SparcMCRegisterClasses[QFPRegsRegClassID],
    VTLists + 7,
    QFPRegsSubClassMask,
    SuperRegIdxSeqs + 2,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass QFPRegs_with_sub_evenRegClass = {
    &SparcMCRegisterClasses[QFPRegs_with_sub_evenRegClassID],
    VTLists + 7,
    QFPRegs_with_sub_evenSubClassMask,
    SuperRegIdxSeqs + 2,
    QFPRegs_with_sub_evenSuperclasses,
    0
  };

}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &SP::FPRegsRegClass,
    &SP::IntRegsRegClass,
    &SP::DFPRegsRegClass,
    &SP::I64RegsRegClass,
    &SP::DFPRegs_with_sub_evenRegClass,
    &SP::QFPRegsRegClass,
    &SP::QFPRegs_with_sub_evenRegClass,
  };
}

static const TargetRegisterInfoDesc SparcRegInfoDesc[] = { // Extra Descriptors
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
};
unsigned SparcGenRegisterInfo::composeSubRegIndicesImpl(unsigned IdxA, unsigned IdxB) const {
  static const uint8_t RowMap[6] = {
    0, 0, 0, 1, 0, 0, 
  };
  static const uint8_t Rows[2][6] = {
    { 1, 0, 3, 0, 0, 0, },
    { 5, 0, 6, 0, 0, 0, },
  };

  --IdxA; assert(IdxA < 6);
  --IdxB; assert(IdxB < 6);
  return Rows[RowMap[IdxA]][IdxB];
}

const TargetRegisterClass *SparcGenRegisterInfo::getSubClassWithSubReg(const TargetRegisterClass *RC, unsigned Idx) const {
  static const uint8_t Table[7][6] = {
    {	// FPRegs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// IntRegs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// DFPRegs
      5,	// sub_even -> DFPRegs_with_sub_even
      0,	// sub_even64
      5,	// sub_odd -> DFPRegs_with_sub_even
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// I64Regs
      0,	// sub_even
      0,	// sub_even64
      0,	// sub_odd
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// DFPRegs_with_sub_even
      5,	// sub_even -> DFPRegs_with_sub_even
      0,	// sub_even64
      5,	// sub_odd -> DFPRegs_with_sub_even
      0,	// sub_odd64
      0,	// sub_odd64_then_sub_even
      0,	// sub_odd64_then_sub_odd
    },
    {	// QFPRegs
      7,	// sub_even -> QFPRegs_with_sub_even
      6,	// sub_even64 -> QFPRegs
      7,	// sub_odd -> QFPRegs_with_sub_even
      6,	// sub_odd64 -> QFPRegs
      7,	// sub_odd64_then_sub_even -> QFPRegs_with_sub_even
      7,	// sub_odd64_then_sub_odd -> QFPRegs_with_sub_even
    },
    {	// QFPRegs_with_sub_even
      7,	// sub_even -> QFPRegs_with_sub_even
      7,	// sub_even64 -> QFPRegs_with_sub_even
      7,	// sub_odd -> QFPRegs_with_sub_even
      7,	// sub_odd64 -> QFPRegs_with_sub_even
      7,	// sub_odd64_then_sub_even -> QFPRegs_with_sub_even
      7,	// sub_odd64_then_sub_odd -> QFPRegs_with_sub_even
    },
  };
  assert(RC && "Missing regclass");
  if (!Idx) return RC;
  --Idx;
  assert(Idx < 6 && "Bad subreg");
  unsigned TV = Table[RC->getID()][Idx];
  return TV ? getRegClass(TV - 1) : 0;
}

/// Get the weight in units of pressure for this register class.
const RegClassWeight &SparcGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 32},  	// FPRegs
    {1, 32},  	// IntRegs
    {2, 64},  	// DFPRegs
    {1, 32},  	// I64Regs
    {2, 32},  	// DFPRegs_with_sub_even
    {4, 64},  	// QFPRegs
    {4, 32},  	// QFPRegs_with_sub_even
    {0, 0} };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned SparcGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 83 && "invalid register unit");
  static const uint8_t RUWeightTable[] = {
    0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
  return RUWeightTable[RegUnit];
}


// Get the number of dimensions of register pressure.
unsigned SparcGenRegisterInfo::getNumRegPressureSets() const {
  return 3;
}

// Get the name of this register unit pressure set.
const char *SparcGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "FPRegs",
    "IntRegs",
    "DFPRegs",
    0 };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned SparcGenRegisterInfo::
getRegPressureSetLimit(unsigned Idx) const {
  static const unsigned PressureLimitTable[] = {
    32,  	// 0: FPRegs
    32,  	// 1: IntRegs
    64,  	// 2: DFPRegs
    0 };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
    0,  2,  -1,  	// #0 FPRegs
    1,  -1,  	// #3 IntRegs
    2,  -1,  	// #5 DFPRegs
    1,  -1,  	// #7 I64Regs
    0,  2,  -1,  	// #9 DFPRegs_with_sub_even
    2,  -1,  	// #12 QFPRegs
    0,  2,  -1,  	// #14 QFPRegs_with_sub_even
    -1,  	// #17 inferred
    -1 };

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* SparcGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const unsigned RCSetStartTable[] = {
    0,3,5,7,9,12,14,0 };
  unsigned SetListStart = RCSetStartTable[RC->getID()];
  return &RCSetsTable[SetListStart];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int* SparcGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 83 && "invalid register unit");
  static const unsigned RUSetStartTable[] = {
    17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0 };
  unsigned SetListStart = RUSetStartTable[RegUnit];
  return &RCSetsTable[SetListStart];
}

extern const MCRegisterDesc SparcRegDesc[];
extern const MCPhysReg SparcRegDiffLists[];
extern const char SparcRegStrings[];
extern const uint16_t SparcRegUnitRoots[][2];
extern const uint16_t SparcSubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits SparcSubRegIdxRanges[];
extern const uint16_t SparcRegEncodingTable[];
// SP Dwarf<->LLVM register mappings.
extern const MCRegisterInfo::DwarfLLVMRegPair SPDwarfFlavour0Dwarf2L[];
extern const unsigned SPDwarfFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SPEHFlavour0Dwarf2L[];
extern const unsigned SPEHFlavour0Dwarf2LSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SPDwarfFlavour0L2Dwarf[];
extern const unsigned SPDwarfFlavour0L2DwarfSize;

extern const MCRegisterInfo::DwarfLLVMRegPair SPEHFlavour0L2Dwarf[];
extern const unsigned SPEHFlavour0L2DwarfSize;

SparcGenRegisterInfo::
SparcGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour, unsigned PC)
  : TargetRegisterInfo(SparcRegInfoDesc, RegisterClasses, RegisterClasses+7,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable, 0xffffffff) {
  InitMCRegisterInfo(SparcRegDesc, 116, RA, PC,
                     SparcMCRegisterClasses, 7,
                     SparcRegUnitRoots,
                     83,
                     SparcRegDiffLists,
                     SparcRegStrings,
                     SparcSubRegIdxLists,
                     7,
                     SparcSubRegIdxRanges,
                     SparcRegEncodingTable);

  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(SPDwarfFlavour0Dwarf2L, SPDwarfFlavour0Dwarf2LSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapDwarfRegsToLLVMRegs(SPEHFlavour0Dwarf2L, SPEHFlavour0Dwarf2LSize, true);
    break;
  }
  switch (DwarfFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(SPDwarfFlavour0L2Dwarf, SPDwarfFlavour0L2DwarfSize, false);
    break;
  }
  switch (EHFlavour) {
  default:
    llvm_unreachable("Unknown DWARF flavour");
  case 0:
    mapLLVMRegsToDwarfRegs(SPEHFlavour0L2Dwarf, SPEHFlavour0L2DwarfSize, true);
    break;
  }
}

static const MCPhysReg CSR_SaveList[] = { 0 };
static const uint32_t CSR_RegMask[] = { 0x00000000, 0x00000000, 0x0ffff000, 0x00000000, };
static const MCPhysReg RTCSR_SaveList[] = { 0 };
static const uint32_t RTCSR_RegMask[] = { 0x00000000, 0x00000000, 0x000c0000, 0x00000000, };


} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

