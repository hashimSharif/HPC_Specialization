/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Enum Values                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace SP {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    PROLOG_LABEL	= 2,
    EH_LABEL	= 3,
    GC_LABEL	= 4,
    KILL	= 5,
    EXTRACT_SUBREG	= 6,
    INSERT_SUBREG	= 7,
    IMPLICIT_DEF	= 8,
    SUBREG_TO_REG	= 9,
    COPY_TO_REGCLASS	= 10,
    DBG_VALUE	= 11,
    REG_SEQUENCE	= 12,
    COPY	= 13,
    BUNDLE	= 14,
    LIFETIME_START	= 15,
    LIFETIME_END	= 16,
    STACKMAP	= 17,
    PATCHPOINT	= 18,
    ADDCCri	= 19,
    ADDCCrr	= 20,
    ADDXri	= 21,
    ADDXrr	= 22,
    ADDri	= 23,
    ADDrr	= 24,
    ADJCALLSTACKDOWN	= 25,
    ADJCALLSTACKUP	= 26,
    ANDNri	= 27,
    ANDNrr	= 28,
    ANDri	= 29,
    ANDrr	= 30,
    BA	= 31,
    BCOND	= 32,
    BINDri	= 33,
    BINDrr	= 34,
    BPXCC	= 35,
    CALL	= 36,
    CMPri	= 37,
    CMPrr	= 38,
    FABSD	= 39,
    FABSQ	= 40,
    FABSS	= 41,
    FADDD	= 42,
    FADDQ	= 43,
    FADDS	= 44,
    FBCOND	= 45,
    FCMPD	= 46,
    FCMPQ	= 47,
    FCMPS	= 48,
    FDIVD	= 49,
    FDIVQ	= 50,
    FDIVS	= 51,
    FDMULQ	= 52,
    FDTOI	= 53,
    FDTOQ	= 54,
    FDTOS	= 55,
    FDTOX	= 56,
    FITOD	= 57,
    FITOQ	= 58,
    FITOS	= 59,
    FLUSHW	= 60,
    FMOVD	= 61,
    FMOVD_FCC	= 62,
    FMOVD_ICC	= 63,
    FMOVD_XCC	= 64,
    FMOVQ	= 65,
    FMOVQ_FCC	= 66,
    FMOVQ_ICC	= 67,
    FMOVS	= 68,
    FMOVS_FCC	= 69,
    FMOVS_ICC	= 70,
    FMOVS_XCC	= 71,
    FMULD	= 72,
    FMULQ	= 73,
    FMULS	= 74,
    FNEGD	= 75,
    FNEGQ	= 76,
    FNEGS	= 77,
    FQTOD	= 78,
    FQTOI	= 79,
    FQTOS	= 80,
    FQTOX	= 81,
    FSMULD	= 82,
    FSQRTD	= 83,
    FSQRTQ	= 84,
    FSQRTS	= 85,
    FSTOD	= 86,
    FSTOI	= 87,
    FSTOQ	= 88,
    FSTOX	= 89,
    FSUBD	= 90,
    FSUBQ	= 91,
    FSUBS	= 92,
    FXTOD	= 93,
    FXTOQ	= 94,
    FXTOS	= 95,
    GETPCX	= 96,
    JMPLri	= 97,
    JMPLrr	= 98,
    LDDFri	= 99,
    LDDFrr	= 100,
    LDFri	= 101,
    LDFrr	= 102,
    LDQFri	= 103,
    LDQFrr	= 104,
    LDSBri	= 105,
    LDSBrr	= 106,
    LDSHri	= 107,
    LDSHrr	= 108,
    LDSWri	= 109,
    LDSWrr	= 110,
    LDUBri	= 111,
    LDUBrr	= 112,
    LDUHri	= 113,
    LDUHrr	= 114,
    LDXri	= 115,
    LDXrr	= 116,
    LDri	= 117,
    LDrr	= 118,
    LEAX_ADDri	= 119,
    LEA_ADDri	= 120,
    MOVFCCri	= 121,
    MOVFCCrr	= 122,
    MOVICCri	= 123,
    MOVICCrr	= 124,
    MOVXCCri	= 125,
    MOVXCCrr	= 126,
    MULXri	= 127,
    MULXrr	= 128,
    NOP	= 129,
    ORNri	= 130,
    ORNrr	= 131,
    ORri	= 132,
    ORrr	= 133,
    POPCrr	= 134,
    RDY	= 135,
    RESTOREri	= 136,
    RESTORErr	= 137,
    RET	= 138,
    RETL	= 139,
    SAVEri	= 140,
    SAVErr	= 141,
    SDIVXri	= 142,
    SDIVXrr	= 143,
    SDIVri	= 144,
    SDIVrr	= 145,
    SELECT_CC_DFP_FCC	= 146,
    SELECT_CC_DFP_ICC	= 147,
    SELECT_CC_FP_FCC	= 148,
    SELECT_CC_FP_ICC	= 149,
    SELECT_CC_Int_FCC	= 150,
    SELECT_CC_Int_ICC	= 151,
    SELECT_CC_QFP_FCC	= 152,
    SELECT_CC_QFP_ICC	= 153,
    SETHIi	= 154,
    SLLXri	= 155,
    SLLXrr	= 156,
    SLLri	= 157,
    SLLrr	= 158,
    SMULri	= 159,
    SMULrr	= 160,
    SRAXri	= 161,
    SRAXrr	= 162,
    SRAri	= 163,
    SRArr	= 164,
    SRLXri	= 165,
    SRLXrr	= 166,
    SRLri	= 167,
    SRLrr	= 168,
    STBri	= 169,
    STBrr	= 170,
    STDFri	= 171,
    STDFrr	= 172,
    STFri	= 173,
    STFrr	= 174,
    STHri	= 175,
    STHrr	= 176,
    STQFri	= 177,
    STQFrr	= 178,
    STXri	= 179,
    STXrr	= 180,
    STri	= 181,
    STrr	= 182,
    SUBCCri	= 183,
    SUBCCrr	= 184,
    SUBXCCrr	= 185,
    SUBXri	= 186,
    SUBXrr	= 187,
    SUBri	= 188,
    SUBrr	= 189,
    TA3	= 190,
    TLS_ADDrr	= 191,
    TLS_CALL	= 192,
    TLS_LDXrr	= 193,
    TLS_LDrr	= 194,
    UDIVXri	= 195,
    UDIVXrr	= 196,
    UDIVri	= 197,
    UDIVrr	= 198,
    UMULri	= 199,
    UMULrr	= 200,
    UNIMP	= 201,
    WRYri	= 202,
    WRYrr	= 203,
    XNORri	= 204,
    XNORrr	= 205,
    XORri	= 206,
    XORrr	= 207,
    INSTRUCTION_LIST_END = 208
  };
namespace Sched {
  enum {
    NoInstrModel	= 0,
    SCHED_LIST_END = 1
  };
}
}
} // End llvm namespace 
#endif // GET_INSTRINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Descriptors                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const uint16_t ImplicitList1[] = { SP::ICC, 0 };
static const uint16_t ImplicitList2[] = { SP::O6, 0 };
static const uint16_t ImplicitList3[] = { SP::FCC, 0 };
static const uint16_t ImplicitList4[] = { SP::O7, 0 };
static const uint16_t ImplicitList5[] = { SP::Y, 0 };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo10[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo31[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo32[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo33[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo34[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo35[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo36[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo37[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo38[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo39[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo40[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo41[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo42[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo43[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo44[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo45[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo46[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo47[] = { { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo48[] = { { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo49[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo50[] = { { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo51[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo52[] = { { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo53[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo54[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo55[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo56[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::DFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo57[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo58[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::FPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo59[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo60[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::QFPRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo61[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo62[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { SP::I64RegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo63[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo64[] = { { SP::IntRegsRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };

extern const MCInstrDesc SparcInsts[] = {
  { 0,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #0 = PHI
  { 1,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #1 = INLINEASM
  { 2,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #2 = PROLOG_LABEL
  { 3,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #3 = EH_LABEL
  { 4,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #4 = GC_LABEL
  { 5,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #5 = KILL
  { 6,	3,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo3,0,0 },  // Inst #6 = EXTRACT_SUBREG
  { 7,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo4,0,0 },  // Inst #7 = INSERT_SUBREG
  { 8,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo5,0,0 },  // Inst #8 = IMPLICIT_DEF
  { 9,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo6,0,0 },  // Inst #9 = SUBREG_TO_REG
  { 10,	3,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo3,0,0 },  // Inst #10 = COPY_TO_REGCLASS
  { 11,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #11 = DBG_VALUE
  { 12,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo5,0,0 },  // Inst #12 = REG_SEQUENCE
  { 13,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo7,0,0 },  // Inst #13 = COPY
  { 14,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #14 = BUNDLE
  { 15,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #15 = LIFETIME_START
  { 16,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #16 = LIFETIME_END
  { 17,	2,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo8,0,0 },  // Inst #17 = STACKMAP
  { 18,	6,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo9,0,0 },  // Inst #18 = PATCHPOINT
  { 19,	3,	1,	0,	0,	0, 0x0ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #19 = ADDCCri
  { 20,	3,	1,	0,	0,	0, 0x0ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #20 = ADDCCrr
  { 21,	3,	1,	0,	0,	0, 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo10,0,0 },  // Inst #21 = ADDXri
  { 22,	3,	1,	0,	0,	0, 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo11,0,0 },  // Inst #22 = ADDXrr
  { 23,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #23 = ADDri
  { 24,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #24 = ADDrr
  { 25,	1,	0,	0,	0,	0, 0x0ULL, ImplicitList2, ImplicitList2, OperandInfo2,0,0 },  // Inst #25 = ADJCALLSTACKDOWN
  { 26,	2,	0,	0,	0,	0, 0x0ULL, ImplicitList2, ImplicitList2, OperandInfo8,0,0 },  // Inst #26 = ADJCALLSTACKUP
  { 27,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #27 = ANDNri
  { 28,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #28 = ANDNrr
  { 29,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #29 = ANDri
  { 30,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #30 = ANDrr
  { 31,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo5,0,0 },  // Inst #31 = BA
  { 32,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, ImplicitList1, NULL, OperandInfo7,0,0 },  // Inst #32 = BCOND
  { 33,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #33 = BINDri
  { 34,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo13,0,0 },  // Inst #34 = BINDrr
  { 35,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, ImplicitList1, NULL, OperandInfo7,0,0 },  // Inst #35 = BPXCC
  { 36,	1,	0,	0,	0,	0|(1<<MCID::DelaySlot)|(1<<MCID::Call)|(1<<MCID::Variadic), 0x0ULL, ImplicitList2, NULL, OperandInfo5,0,0 },  // Inst #36 = CALL
  { 37,	2,	0,	0,	0,	0, 0x0ULL, NULL, ImplicitList1, OperandInfo14,0,0 },  // Inst #37 = CMPri
  { 38,	2,	0,	0,	0,	0, 0x0ULL, NULL, ImplicitList1, OperandInfo15,0,0 },  // Inst #38 = CMPrr
  { 39,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #39 = FABSD
  { 40,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo17,0,0 },  // Inst #40 = FABSQ
  { 41,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo18,0,0 },  // Inst #41 = FABSS
  { 42,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo19,0,0 },  // Inst #42 = FADDD
  { 43,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo20,0,0 },  // Inst #43 = FADDQ
  { 44,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo21,0,0 },  // Inst #44 = FADDS
  { 45,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, ImplicitList3, NULL, OperandInfo7,0,0 },  // Inst #45 = FBCOND
  { 46,	2,	0,	0,	0,	0, 0x0ULL, NULL, ImplicitList3, OperandInfo16,0,0 },  // Inst #46 = FCMPD
  { 47,	2,	0,	0,	0,	0, 0x0ULL, NULL, ImplicitList3, OperandInfo17,0,0 },  // Inst #47 = FCMPQ
  { 48,	2,	0,	0,	0,	0, 0x0ULL, NULL, ImplicitList3, OperandInfo18,0,0 },  // Inst #48 = FCMPS
  { 49,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo19,0,0 },  // Inst #49 = FDIVD
  { 50,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo20,0,0 },  // Inst #50 = FDIVQ
  { 51,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo21,0,0 },  // Inst #51 = FDIVS
  { 52,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo22,0,0 },  // Inst #52 = FDMULQ
  { 53,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo23,0,0 },  // Inst #53 = FDTOI
  { 54,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo24,0,0 },  // Inst #54 = FDTOQ
  { 55,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo23,0,0 },  // Inst #55 = FDTOS
  { 56,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #56 = FDTOX
  { 57,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo25,0,0 },  // Inst #57 = FITOD
  { 58,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo26,0,0 },  // Inst #58 = FITOQ
  { 59,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo18,0,0 },  // Inst #59 = FITOS
  { 60,	0,	0,	0,	0,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #60 = FLUSHW
  { 61,	2,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #61 = FMOVD
  { 62,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList3, NULL, OperandInfo27,0,0 },  // Inst #62 = FMOVD_FCC
  { 63,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo27,0,0 },  // Inst #63 = FMOVD_ICC
  { 64,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo27,0,0 },  // Inst #64 = FMOVD_XCC
  { 65,	2,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo17,0,0 },  // Inst #65 = FMOVQ
  { 66,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList3, NULL, OperandInfo28,0,0 },  // Inst #66 = FMOVQ_FCC
  { 67,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo28,0,0 },  // Inst #67 = FMOVQ_ICC
  { 68,	2,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo18,0,0 },  // Inst #68 = FMOVS
  { 69,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList3, NULL, OperandInfo29,0,0 },  // Inst #69 = FMOVS_FCC
  { 70,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo29,0,0 },  // Inst #70 = FMOVS_ICC
  { 71,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo29,0,0 },  // Inst #71 = FMOVS_XCC
  { 72,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo19,0,0 },  // Inst #72 = FMULD
  { 73,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo20,0,0 },  // Inst #73 = FMULQ
  { 74,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo21,0,0 },  // Inst #74 = FMULS
  { 75,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #75 = FNEGD
  { 76,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo17,0,0 },  // Inst #76 = FNEGQ
  { 77,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo18,0,0 },  // Inst #77 = FNEGS
  { 78,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo30,0,0 },  // Inst #78 = FQTOD
  { 79,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo31,0,0 },  // Inst #79 = FQTOI
  { 80,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo31,0,0 },  // Inst #80 = FQTOS
  { 81,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo30,0,0 },  // Inst #81 = FQTOX
  { 82,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo32,0,0 },  // Inst #82 = FSMULD
  { 83,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #83 = FSQRTD
  { 84,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo17,0,0 },  // Inst #84 = FSQRTQ
  { 85,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo18,0,0 },  // Inst #85 = FSQRTS
  { 86,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo25,0,0 },  // Inst #86 = FSTOD
  { 87,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo18,0,0 },  // Inst #87 = FSTOI
  { 88,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo26,0,0 },  // Inst #88 = FSTOQ
  { 89,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo25,0,0 },  // Inst #89 = FSTOX
  { 90,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo19,0,0 },  // Inst #90 = FSUBD
  { 91,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo20,0,0 },  // Inst #91 = FSUBQ
  { 92,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo21,0,0 },  // Inst #92 = FSUBS
  { 93,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #93 = FXTOD
  { 94,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo24,0,0 },  // Inst #94 = FXTOQ
  { 95,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo23,0,0 },  // Inst #95 = FXTOS
  { 96,	1,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList4, OperandInfo5,0,0 },  // Inst #96 = GETPCX
  { 97,	2,	0,	0,	0,	0|(1<<MCID::DelaySlot)|(1<<MCID::Call)|(1<<MCID::Variadic), 0x0ULL, ImplicitList2, NULL, OperandInfo12,0,0 },  // Inst #97 = JMPLri
  { 98,	2,	0,	0,	0,	0|(1<<MCID::DelaySlot)|(1<<MCID::Call)|(1<<MCID::Variadic), 0x0ULL, ImplicitList2, NULL, OperandInfo13,0,0 },  // Inst #98 = JMPLrr
  { 99,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo33,0,0 },  // Inst #99 = LDDFri
  { 100,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo34,0,0 },  // Inst #100 = LDDFrr
  { 101,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo35,0,0 },  // Inst #101 = LDFri
  { 102,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo36,0,0 },  // Inst #102 = LDFrr
  { 103,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo37,0,0 },  // Inst #103 = LDQFri
  { 104,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo38,0,0 },  // Inst #104 = LDQFrr
  { 105,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo39,0,0 },  // Inst #105 = LDSBri
  { 106,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo40,0,0 },  // Inst #106 = LDSBrr
  { 107,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo39,0,0 },  // Inst #107 = LDSHri
  { 108,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo40,0,0 },  // Inst #108 = LDSHrr
  { 109,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo41,0,0 },  // Inst #109 = LDSWri
  { 110,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo42,0,0 },  // Inst #110 = LDSWrr
  { 111,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo39,0,0 },  // Inst #111 = LDUBri
  { 112,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo40,0,0 },  // Inst #112 = LDUBrr
  { 113,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo39,0,0 },  // Inst #113 = LDUHri
  { 114,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo40,0,0 },  // Inst #114 = LDUHrr
  { 115,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo41,0,0 },  // Inst #115 = LDXri
  { 116,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo42,0,0 },  // Inst #116 = LDXrr
  { 117,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo39,0,0 },  // Inst #117 = LDri
  { 118,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo40,0,0 },  // Inst #118 = LDrr
  { 119,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo41,0,0 },  // Inst #119 = LEAX_ADDri
  { 120,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo39,0,0 },  // Inst #120 = LEA_ADDri
  { 121,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList3, NULL, OperandInfo43,0,0 },  // Inst #121 = MOVFCCri
  { 122,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList3, NULL, OperandInfo44,0,0 },  // Inst #122 = MOVFCCrr
  { 123,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo43,0,0 },  // Inst #123 = MOVICCri
  { 124,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo44,0,0 },  // Inst #124 = MOVICCrr
  { 125,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo43,0,0 },  // Inst #125 = MOVXCCri
  { 126,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList1, NULL, OperandInfo44,0,0 },  // Inst #126 = MOVXCCrr
  { 127,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #127 = MULXri
  { 128,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo45,0,0 },  // Inst #128 = MULXrr
  { 129,	0,	0,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #129 = NOP
  { 130,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #130 = ORNri
  { 131,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #131 = ORNrr
  { 132,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #132 = ORri
  { 133,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #133 = ORrr
  { 134,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #134 = POPCrr
  { 135,	1,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList5, NULL, OperandInfo46,0,0 },  // Inst #135 = RDY
  { 136,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #136 = RESTOREri
  { 137,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #137 = RESTORErr
  { 138,	1,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #138 = RET
  { 139,	1,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::DelaySlot)|(1<<MCID::Terminator), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #139 = RETL
  { 140,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #140 = SAVEri
  { 141,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #141 = SAVErr
  { 142,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #142 = SDIVXri
  { 143,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo45,0,0 },  // Inst #143 = SDIVXrr
  { 144,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo10,0,0 },  // Inst #144 = SDIVri
  { 145,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo11,0,0 },  // Inst #145 = SDIVrr
  { 146,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList3, NULL, OperandInfo47,0,0 },  // Inst #146 = SELECT_CC_DFP_FCC
  { 147,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList1, NULL, OperandInfo47,0,0 },  // Inst #147 = SELECT_CC_DFP_ICC
  { 148,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList3, NULL, OperandInfo48,0,0 },  // Inst #148 = SELECT_CC_FP_FCC
  { 149,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList1, NULL, OperandInfo48,0,0 },  // Inst #149 = SELECT_CC_FP_ICC
  { 150,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList3, NULL, OperandInfo49,0,0 },  // Inst #150 = SELECT_CC_Int_FCC
  { 151,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList1, NULL, OperandInfo49,0,0 },  // Inst #151 = SELECT_CC_Int_ICC
  { 152,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList3, NULL, OperandInfo50,0,0 },  // Inst #152 = SELECT_CC_QFP_FCC
  { 153,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList1, NULL, OperandInfo50,0,0 },  // Inst #153 = SELECT_CC_QFP_ICC
  { 154,	2,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo14,0,0 },  // Inst #154 = SETHIi
  { 155,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo51,0,0 },  // Inst #155 = SLLXri
  { 156,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo52,0,0 },  // Inst #156 = SLLXrr
  { 157,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #157 = SLLri
  { 158,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #158 = SLLrr
  { 159,	3,	1,	0,	0,	0, 0x0ULL, NULL, ImplicitList5, OperandInfo10,0,0 },  // Inst #159 = SMULri
  { 160,	3,	1,	0,	0,	0, 0x0ULL, NULL, ImplicitList5, OperandInfo11,0,0 },  // Inst #160 = SMULrr
  { 161,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo51,0,0 },  // Inst #161 = SRAXri
  { 162,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo52,0,0 },  // Inst #162 = SRAXrr
  { 163,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #163 = SRAri
  { 164,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #164 = SRArr
  { 165,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo51,0,0 },  // Inst #165 = SRLXri
  { 166,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo52,0,0 },  // Inst #166 = SRLXrr
  { 167,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #167 = SRLri
  { 168,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #168 = SRLrr
  { 169,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo53,0,0 },  // Inst #169 = STBri
  { 170,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo54,0,0 },  // Inst #170 = STBrr
  { 171,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo55,0,0 },  // Inst #171 = STDFri
  { 172,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo56,0,0 },  // Inst #172 = STDFrr
  { 173,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo57,0,0 },  // Inst #173 = STFri
  { 174,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo58,0,0 },  // Inst #174 = STFrr
  { 175,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo53,0,0 },  // Inst #175 = STHri
  { 176,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo54,0,0 },  // Inst #176 = STHrr
  { 177,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo59,0,0 },  // Inst #177 = STQFri
  { 178,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo60,0,0 },  // Inst #178 = STQFrr
  { 179,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo61,0,0 },  // Inst #179 = STXri
  { 180,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo62,0,0 },  // Inst #180 = STXrr
  { 181,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo53,0,0 },  // Inst #181 = STri
  { 182,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, NULL, OperandInfo54,0,0 },  // Inst #182 = STrr
  { 183,	3,	1,	0,	0,	0, 0x0ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #183 = SUBCCri
  { 184,	3,	1,	0,	0,	0, 0x0ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #184 = SUBCCrr
  { 185,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo11,0,0 },  // Inst #185 = SUBXCCrr
  { 186,	3,	1,	0,	0,	0, 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo10,0,0 },  // Inst #186 = SUBXri
  { 187,	3,	1,	0,	0,	0, 0x0ULL, ImplicitList1, ImplicitList1, OperandInfo11,0,0 },  // Inst #187 = SUBXrr
  { 188,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #188 = SUBri
  { 189,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #189 = SUBrr
  { 190,	0,	0,	0,	0,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #190 = TA3
  { 191,	4,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo63,0,0 },  // Inst #191 = TLS_ADDrr
  { 192,	2,	0,	0,	0,	0|(1<<MCID::DelaySlot)|(1<<MCID::Call)|(1<<MCID::Variadic), 0x0ULL, ImplicitList2, NULL, OperandInfo7,0,0 },  // Inst #192 = TLS_CALL
  { 193,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo64,0,0 },  // Inst #193 = TLS_LDXrr
  { 194,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo64,0,0 },  // Inst #194 = TLS_LDrr
  { 195,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #195 = UDIVXri
  { 196,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo45,0,0 },  // Inst #196 = UDIVXrr
  { 197,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo10,0,0 },  // Inst #197 = UDIVri
  { 198,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo11,0,0 },  // Inst #198 = UDIVrr
  { 199,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo10,0,0 },  // Inst #199 = UMULri
  { 200,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo11,0,0 },  // Inst #200 = UMULrr
  { 201,	1,	0,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #201 = UNIMP
  { 202,	2,	0,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo14,0,0 },  // Inst #202 = WRYri
  { 203,	2,	0,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList5, OperandInfo15,0,0 },  // Inst #203 = WRYrr
  { 204,	3,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #204 = XNORri
  { 205,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #205 = XNORrr
  { 206,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #206 = XORri
  { 207,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #207 = XORrr
};

extern const char SparcInstrNameData[] = {
  /* 0 */ 'T', 'A', '3', 0,
  /* 4 */ 'B', 'A', 0,
  /* 7 */ 'F', 'M', 'O', 'V', 'D', '_', 'F', 'C', 'C', 0,
  /* 17 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'F', 'C', 'C', 0,
  /* 35 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'P', '_', 'F', 'C', 'C', 0,
  /* 53 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'F', 'C', 'C', 0,
  /* 70 */ 'F', 'M', 'O', 'V', 'Q', '_', 'F', 'C', 'C', 0,
  /* 80 */ 'F', 'M', 'O', 'V', 'S', '_', 'F', 'C', 'C', 0,
  /* 90 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'F', 'C', 'C', 0,
  /* 108 */ 'F', 'M', 'O', 'V', 'D', '_', 'I', 'C', 'C', 0,
  /* 118 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'D', 'F', 'P', '_', 'I', 'C', 'C', 0,
  /* 136 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'P', '_', 'I', 'C', 'C', 0,
  /* 154 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', 'P', '_', 'I', 'C', 'C', 0,
  /* 171 */ 'F', 'M', 'O', 'V', 'Q', '_', 'I', 'C', 'C', 0,
  /* 181 */ 'F', 'M', 'O', 'V', 'S', '_', 'I', 'C', 'C', 0,
  /* 191 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', 'n', 't', '_', 'I', 'C', 'C', 0,
  /* 209 */ 'B', 'P', 'X', 'C', 'C', 0,
  /* 215 */ 'F', 'M', 'O', 'V', 'D', '_', 'X', 'C', 'C', 0,
  /* 225 */ 'F', 'M', 'O', 'V', 'S', '_', 'X', 'C', 'C', 0,
  /* 235 */ 'F', 'S', 'U', 'B', 'D', 0,
  /* 241 */ 'F', 'A', 'D', 'D', 'D', 0,
  /* 247 */ 'F', 'N', 'E', 'G', 'D', 0,
  /* 253 */ 'F', 'M', 'U', 'L', 'D', 0,
  /* 259 */ 'F', 'S', 'M', 'U', 'L', 'D', 0,
  /* 266 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 279 */ 'F', 'B', 'C', 'O', 'N', 'D', 0,
  /* 286 */ 'F', 'I', 'T', 'O', 'D', 0,
  /* 292 */ 'F', 'Q', 'T', 'O', 'D', 0,
  /* 298 */ 'F', 'S', 'T', 'O', 'D', 0,
  /* 304 */ 'F', 'X', 'T', 'O', 'D', 0,
  /* 310 */ 'F', 'C', 'M', 'P', 'D', 0,
  /* 316 */ 'F', 'A', 'B', 'S', 'D', 0,
  /* 322 */ 'F', 'S', 'Q', 'R', 'T', 'D', 0,
  /* 329 */ 'F', 'D', 'I', 'V', 'D', 0,
  /* 335 */ 'F', 'M', 'O', 'V', 'D', 0,
  /* 341 */ 'R', 'E', 'G', '_', 'S', 'E', 'Q', 'U', 'E', 'N', 'C', 'E', 0,
  /* 354 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 361 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 371 */ 'I', 'M', 'P', 'L', 'I', 'C', 'I', 'T', '_', 'D', 'E', 'F', 0,
  /* 384 */ 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 399 */ 'I', 'N', 'S', 'E', 'R', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 413 */ 'S', 'U', 'B', 'R', 'E', 'G', '_', 'T', 'O', '_', 'R', 'E', 'G', 0,
  /* 427 */ 'P', 'H', 'I', 0,
  /* 431 */ 'F', 'D', 'T', 'O', 'I', 0,
  /* 437 */ 'F', 'Q', 'T', 'O', 'I', 0,
  /* 443 */ 'F', 'S', 'T', 'O', 'I', 0,
  /* 449 */ 'G', 'C', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 458 */ 'P', 'R', 'O', 'L', 'O', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 471 */ 'E', 'H', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 480 */ 'T', 'L', 'S', '_', 'C', 'A', 'L', 'L', 0,
  /* 489 */ 'K', 'I', 'L', 'L', 0,
  /* 494 */ 'R', 'E', 'T', 'L', 0,
  /* 499 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', 0,
  /* 509 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 0,
  /* 526 */ 'S', 'T', 'A', 'C', 'K', 'M', 'A', 'P', 0,
  /* 535 */ 'U', 'N', 'I', 'M', 'P', 0,
  /* 541 */ 'N', 'O', 'P', 0,
  /* 545 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 0,
  /* 560 */ 'F', 'S', 'U', 'B', 'Q', 0,
  /* 566 */ 'F', 'A', 'D', 'D', 'Q', 0,
  /* 572 */ 'F', 'N', 'E', 'G', 'Q', 0,
  /* 578 */ 'F', 'D', 'M', 'U', 'L', 'Q', 0,
  /* 585 */ 'F', 'M', 'U', 'L', 'Q', 0,
  /* 591 */ 'F', 'D', 'T', 'O', 'Q', 0,
  /* 597 */ 'F', 'I', 'T', 'O', 'Q', 0,
  /* 603 */ 'F', 'S', 'T', 'O', 'Q', 0,
  /* 609 */ 'F', 'X', 'T', 'O', 'Q', 0,
  /* 615 */ 'F', 'C', 'M', 'P', 'Q', 0,
  /* 621 */ 'F', 'A', 'B', 'S', 'Q', 0,
  /* 627 */ 'F', 'S', 'Q', 'R', 'T', 'Q', 0,
  /* 634 */ 'F', 'D', 'I', 'V', 'Q', 0,
  /* 640 */ 'F', 'M', 'O', 'V', 'Q', 0,
  /* 646 */ 'F', 'S', 'U', 'B', 'S', 0,
  /* 652 */ 'F', 'A', 'D', 'D', 'S', 0,
  /* 658 */ 'F', 'N', 'E', 'G', 'S', 0,
  /* 664 */ 'F', 'M', 'U', 'L', 'S', 0,
  /* 670 */ 'F', 'D', 'T', 'O', 'S', 0,
  /* 676 */ 'F', 'I', 'T', 'O', 'S', 0,
  /* 682 */ 'F', 'Q', 'T', 'O', 'S', 0,
  /* 688 */ 'F', 'X', 'T', 'O', 'S', 0,
  /* 694 */ 'F', 'C', 'M', 'P', 'S', 0,
  /* 700 */ 'C', 'O', 'P', 'Y', '_', 'T', 'O', '_', 'R', 'E', 'G', 'C', 'L', 'A', 'S', 'S', 0,
  /* 717 */ 'F', 'A', 'B', 'S', 'S', 0,
  /* 723 */ 'F', 'S', 'Q', 'R', 'T', 'S', 0,
  /* 730 */ 'F', 'D', 'I', 'V', 'S', 0,
  /* 736 */ 'F', 'M', 'O', 'V', 'S', 0,
  /* 742 */ 'R', 'E', 'T', 0,
  /* 746 */ 'P', 'A', 'T', 'C', 'H', 'P', 'O', 'I', 'N', 'T', 0,
  /* 757 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 772 */ 'F', 'L', 'U', 'S', 'H', 'W', 0,
  /* 779 */ 'G', 'E', 'T', 'P', 'C', 'X', 0,
  /* 786 */ 'F', 'D', 'T', 'O', 'X', 0,
  /* 792 */ 'F', 'Q', 'T', 'O', 'X', 0,
  /* 798 */ 'F', 'S', 'T', 'O', 'X', 0,
  /* 804 */ 'R', 'D', 'Y', 0,
  /* 808 */ 'C', 'O', 'P', 'Y', 0,
  /* 813 */ 'S', 'E', 'T', 'H', 'I', 'i', 0,
  /* 820 */ 'S', 'R', 'A', 'r', 'i', 0,
  /* 826 */ 'L', 'D', 'S', 'B', 'r', 'i', 0,
  /* 833 */ 'S', 'T', 'B', 'r', 'i', 0,
  /* 839 */ 'L', 'D', 'U', 'B', 'r', 'i', 0,
  /* 846 */ 'S', 'U', 'B', 'r', 'i', 0,
  /* 852 */ 'S', 'U', 'B', 'C', 'C', 'r', 'i', 0,
  /* 860 */ 'A', 'D', 'D', 'C', 'C', 'r', 'i', 0,
  /* 868 */ 'M', 'O', 'V', 'F', 'C', 'C', 'r', 'i', 0,
  /* 877 */ 'M', 'O', 'V', 'I', 'C', 'C', 'r', 'i', 0,
  /* 886 */ 'M', 'O', 'V', 'X', 'C', 'C', 'r', 'i', 0,
  /* 895 */ 'L', 'E', 'A', '_', 'A', 'D', 'D', 'r', 'i', 0,
  /* 905 */ 'L', 'E', 'A', 'X', '_', 'A', 'D', 'D', 'r', 'i', 0,
  /* 916 */ 'L', 'D', 'r', 'i', 0,
  /* 921 */ 'A', 'N', 'D', 'r', 'i', 0,
  /* 927 */ 'B', 'I', 'N', 'D', 'r', 'i', 0,
  /* 934 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', 'r', 'i', 0,
  /* 944 */ 'S', 'A', 'V', 'E', 'r', 'i', 0,
  /* 951 */ 'L', 'D', 'D', 'F', 'r', 'i', 0,
  /* 958 */ 'L', 'D', 'F', 'r', 'i', 0,
  /* 964 */ 'S', 'T', 'D', 'F', 'r', 'i', 0,
  /* 971 */ 'L', 'D', 'Q', 'F', 'r', 'i', 0,
  /* 978 */ 'S', 'T', 'Q', 'F', 'r', 'i', 0,
  /* 985 */ 'S', 'T', 'F', 'r', 'i', 0,
  /* 991 */ 'L', 'D', 'S', 'H', 'r', 'i', 0,
  /* 998 */ 'S', 'T', 'H', 'r', 'i', 0,
  /* 1004 */ 'L', 'D', 'U', 'H', 'r', 'i', 0,
  /* 1011 */ 'S', 'L', 'L', 'r', 'i', 0,
  /* 1017 */ 'J', 'M', 'P', 'L', 'r', 'i', 0,
  /* 1024 */ 'S', 'R', 'L', 'r', 'i', 0,
  /* 1030 */ 'S', 'M', 'U', 'L', 'r', 'i', 0,
  /* 1037 */ 'U', 'M', 'U', 'L', 'r', 'i', 0,
  /* 1044 */ 'A', 'N', 'D', 'N', 'r', 'i', 0,
  /* 1051 */ 'O', 'R', 'N', 'r', 'i', 0,
  /* 1057 */ 'C', 'M', 'P', 'r', 'i', 0,
  /* 1063 */ 'X', 'N', 'O', 'R', 'r', 'i', 0,
  /* 1070 */ 'X', 'O', 'R', 'r', 'i', 0,
  /* 1076 */ 'S', 'T', 'r', 'i', 0,
  /* 1081 */ 'S', 'D', 'I', 'V', 'r', 'i', 0,
  /* 1088 */ 'U', 'D', 'I', 'V', 'r', 'i', 0,
  /* 1095 */ 'L', 'D', 'S', 'W', 'r', 'i', 0,
  /* 1102 */ 'S', 'R', 'A', 'X', 'r', 'i', 0,
  /* 1109 */ 'S', 'U', 'B', 'X', 'r', 'i', 0,
  /* 1116 */ 'A', 'D', 'D', 'X', 'r', 'i', 0,
  /* 1123 */ 'L', 'D', 'X', 'r', 'i', 0,
  /* 1129 */ 'S', 'L', 'L', 'X', 'r', 'i', 0,
  /* 1136 */ 'S', 'R', 'L', 'X', 'r', 'i', 0,
  /* 1143 */ 'M', 'U', 'L', 'X', 'r', 'i', 0,
  /* 1150 */ 'S', 'T', 'X', 'r', 'i', 0,
  /* 1156 */ 'S', 'D', 'I', 'V', 'X', 'r', 'i', 0,
  /* 1164 */ 'U', 'D', 'I', 'V', 'X', 'r', 'i', 0,
  /* 1172 */ 'W', 'R', 'Y', 'r', 'i', 0,
  /* 1178 */ 'S', 'R', 'A', 'r', 'r', 0,
  /* 1184 */ 'L', 'D', 'S', 'B', 'r', 'r', 0,
  /* 1191 */ 'S', 'T', 'B', 'r', 'r', 0,
  /* 1197 */ 'L', 'D', 'U', 'B', 'r', 'r', 0,
  /* 1204 */ 'S', 'U', 'B', 'r', 'r', 0,
  /* 1210 */ 'S', 'U', 'B', 'C', 'C', 'r', 'r', 0,
  /* 1218 */ 'A', 'D', 'D', 'C', 'C', 'r', 'r', 0,
  /* 1226 */ 'M', 'O', 'V', 'F', 'C', 'C', 'r', 'r', 0,
  /* 1235 */ 'M', 'O', 'V', 'I', 'C', 'C', 'r', 'r', 0,
  /* 1244 */ 'S', 'U', 'B', 'X', 'C', 'C', 'r', 'r', 0,
  /* 1253 */ 'M', 'O', 'V', 'X', 'C', 'C', 'r', 'r', 0,
  /* 1262 */ 'P', 'O', 'P', 'C', 'r', 'r', 0,
  /* 1269 */ 'T', 'L', 'S', '_', 'A', 'D', 'D', 'r', 'r', 0,
  /* 1279 */ 'T', 'L', 'S', '_', 'L', 'D', 'r', 'r', 0,
  /* 1288 */ 'A', 'N', 'D', 'r', 'r', 0,
  /* 1294 */ 'B', 'I', 'N', 'D', 'r', 'r', 0,
  /* 1301 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', 'r', 'r', 0,
  /* 1311 */ 'S', 'A', 'V', 'E', 'r', 'r', 0,
  /* 1318 */ 'L', 'D', 'D', 'F', 'r', 'r', 0,
  /* 1325 */ 'L', 'D', 'F', 'r', 'r', 0,
  /* 1331 */ 'S', 'T', 'D', 'F', 'r', 'r', 0,
  /* 1338 */ 'L', 'D', 'Q', 'F', 'r', 'r', 0,
  /* 1345 */ 'S', 'T', 'Q', 'F', 'r', 'r', 0,
  /* 1352 */ 'S', 'T', 'F', 'r', 'r', 0,
  /* 1358 */ 'L', 'D', 'S', 'H', 'r', 'r', 0,
  /* 1365 */ 'S', 'T', 'H', 'r', 'r', 0,
  /* 1371 */ 'L', 'D', 'U', 'H', 'r', 'r', 0,
  /* 1378 */ 'S', 'L', 'L', 'r', 'r', 0,
  /* 1384 */ 'J', 'M', 'P', 'L', 'r', 'r', 0,
  /* 1391 */ 'S', 'R', 'L', 'r', 'r', 0,
  /* 1397 */ 'S', 'M', 'U', 'L', 'r', 'r', 0,
  /* 1404 */ 'U', 'M', 'U', 'L', 'r', 'r', 0,
  /* 1411 */ 'A', 'N', 'D', 'N', 'r', 'r', 0,
  /* 1418 */ 'O', 'R', 'N', 'r', 'r', 0,
  /* 1424 */ 'C', 'M', 'P', 'r', 'r', 0,
  /* 1430 */ 'X', 'N', 'O', 'R', 'r', 'r', 0,
  /* 1437 */ 'X', 'O', 'R', 'r', 'r', 0,
  /* 1443 */ 'S', 'T', 'r', 'r', 0,
  /* 1448 */ 'S', 'D', 'I', 'V', 'r', 'r', 0,
  /* 1455 */ 'U', 'D', 'I', 'V', 'r', 'r', 0,
  /* 1462 */ 'L', 'D', 'S', 'W', 'r', 'r', 0,
  /* 1469 */ 'S', 'R', 'A', 'X', 'r', 'r', 0,
  /* 1476 */ 'S', 'U', 'B', 'X', 'r', 'r', 0,
  /* 1483 */ 'A', 'D', 'D', 'X', 'r', 'r', 0,
  /* 1490 */ 'T', 'L', 'S', '_', 'L', 'D', 'X', 'r', 'r', 0,
  /* 1500 */ 'S', 'L', 'L', 'X', 'r', 'r', 0,
  /* 1507 */ 'S', 'R', 'L', 'X', 'r', 'r', 0,
  /* 1514 */ 'M', 'U', 'L', 'X', 'r', 'r', 0,
  /* 1521 */ 'S', 'T', 'X', 'r', 'r', 0,
  /* 1527 */ 'S', 'D', 'I', 'V', 'X', 'r', 'r', 0,
  /* 1535 */ 'U', 'D', 'I', 'V', 'X', 'r', 'r', 0,
  /* 1543 */ 'W', 'R', 'Y', 'r', 'r', 0,
};

extern const unsigned SparcInstrNameIndices[] = {
    427U, 499U, 458U, 471U, 449U, 489U, 384U, 399U, 
    371U, 413U, 700U, 361U, 341U, 808U, 354U, 757U, 
    266U, 526U, 746U, 860U, 1218U, 1116U, 1483U, 899U, 
    1273U, 509U, 545U, 1044U, 1411U, 921U, 1288U, 4U, 
    280U, 927U, 1294U, 209U, 484U, 1057U, 1424U, 316U, 
    621U, 717U, 241U, 566U, 652U, 279U, 310U, 615U, 
    694U, 329U, 634U, 730U, 578U, 431U, 591U, 670U, 
    786U, 286U, 597U, 676U, 772U, 335U, 7U, 108U, 
    215U, 640U, 70U, 171U, 736U, 80U, 181U, 225U, 
    253U, 585U, 664U, 247U, 572U, 658U, 292U, 437U, 
    682U, 792U, 259U, 322U, 627U, 723U, 298U, 443U, 
    603U, 798U, 235U, 560U, 646U, 304U, 609U, 688U, 
    779U, 1017U, 1384U, 951U, 1318U, 958U, 1325U, 971U, 
    1338U, 826U, 1184U, 991U, 1358U, 1095U, 1462U, 839U, 
    1197U, 1004U, 1371U, 1123U, 1494U, 916U, 1283U, 905U, 
    895U, 868U, 1226U, 877U, 1235U, 886U, 1253U, 1143U, 
    1514U, 541U, 1051U, 1418U, 1065U, 1432U, 1262U, 804U, 
    934U, 1301U, 742U, 494U, 944U, 1311U, 1156U, 1527U, 
    1081U, 1448U, 17U, 118U, 53U, 154U, 90U, 191U, 
    35U, 136U, 813U, 1129U, 1500U, 1011U, 1378U, 1030U, 
    1397U, 1102U, 1469U, 820U, 1178U, 1136U, 1507U, 1024U, 
    1391U, 833U, 1191U, 964U, 1331U, 985U, 1352U, 998U, 
    1365U, 978U, 1345U, 1150U, 1521U, 1076U, 1443U, 852U, 
    1210U, 1244U, 1109U, 1476U, 846U, 1204U, 0U, 1269U, 
    480U, 1490U, 1279U, 1164U, 1535U, 1088U, 1455U, 1037U, 
    1404U, 535U, 1172U, 1543U, 1063U, 1430U, 1070U, 1437U, 
};

static inline void InitSparcMCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(SparcInsts, SparcInstrNameIndices, SparcInstrNameData, 208);
}

} // End llvm namespace 
#endif // GET_INSTRINFO_MC_DESC


#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct SparcGenInstrInfo : public TargetInstrInfo {
  explicit SparcGenInstrInfo(int SO = -1, int DO = -1);
  virtual ~SparcGenInstrInfo();
};
} // End llvm namespace 
#endif // GET_INSTRINFO_HEADER


#ifdef GET_INSTRINFO_CTOR_DTOR
#undef GET_INSTRINFO_CTOR_DTOR
namespace llvm {
extern const MCInstrDesc SparcInsts[];
extern const unsigned SparcInstrNameIndices[];
extern const char SparcInstrNameData[];
SparcGenInstrInfo::SparcGenInstrInfo(int SO, int DO)
  : TargetInstrInfo(SO, DO) {
  InitMCInstrInfo(SparcInsts, SparcInstrNameIndices, SparcInstrNameData, 208);
}
SparcGenInstrInfo::~SparcGenInstrInfo() {}
} // End llvm namespace 
#endif // GET_INSTRINFO_CTOR_DTOR

#ifdef GET_INSTRINFO_OPERAND_ENUM
#undef GET_INSTRINFO_OPERAND_ENUM
namespace llvm {namespace SP {
namespace OpName { 
enum {
OPERAND_LAST
};
} // End namespace OpName
} // End namespace SP
} // End namespace llvm
#endif //GET_INSTRINFO_OPERAND_ENUM
#ifdef GET_INSTRINFO_NAMED_OPS
#undef GET_INSTRINFO_NAMED_OPS
namespace llvm {namespace SP {
int16_t getNamedOperandIdx(uint16_t Opcode, uint16_t NamedIdx) {
  return -1;
}
} // End namespace SP
} // End namespace llvm
#endif //GET_INSTRINFO_NAMED_OPS

#ifdef GET_INSTRINFO_OPERAND_TYPES_ENUM
#undef GET_INSTRINFO_OPERAND_TYPES_ENUM
namespace llvm {namespace SP {
namespace OpTypes { 
enum OperandType {
  CCOp = 0,
  MEMri = 1,
  MEMrr = 2,
  TLSSym = 3,
  brtarget = 4,
  calltarget = 5,
  f32imm = 6,
  f64imm = 7,
  getPCX = 8,
  i16imm = 9,
  i1imm = 10,
  i32imm = 11,
  i64imm = 12,
  i8imm = 13,
  OPERAND_TYPE_LIST_END
};
} // End namespace OpTypes
} // End namespace SP
} // End namespace llvm
#endif // GET_INSTRINFO_OPERAND_TYPES_ENUM
