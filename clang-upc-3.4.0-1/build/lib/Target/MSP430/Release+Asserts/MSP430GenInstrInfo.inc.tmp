/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Enum Values                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace MSP430 {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    PROLOG_LABEL	= 2,
    EH_LABEL	= 3,
    GC_LABEL	= 4,
    KILL	= 5,
    EXTRACT_SUBREG	= 6,
    INSERT_SUBREG	= 7,
    IMPLICIT_DEF	= 8,
    SUBREG_TO_REG	= 9,
    COPY_TO_REGCLASS	= 10,
    DBG_VALUE	= 11,
    REG_SEQUENCE	= 12,
    COPY	= 13,
    BUNDLE	= 14,
    LIFETIME_START	= 15,
    LIFETIME_END	= 16,
    STACKMAP	= 17,
    PATCHPOINT	= 18,
    ADC16mi	= 19,
    ADC16mm	= 20,
    ADC16mr	= 21,
    ADC16ri	= 22,
    ADC16rm	= 23,
    ADC16rr	= 24,
    ADC8mi	= 25,
    ADC8mm	= 26,
    ADC8mr	= 27,
    ADC8ri	= 28,
    ADC8rm	= 29,
    ADC8rr	= 30,
    ADD16mi	= 31,
    ADD16mm	= 32,
    ADD16mr	= 33,
    ADD16ri	= 34,
    ADD16rm	= 35,
    ADD16rm_POST	= 36,
    ADD16rr	= 37,
    ADD8mi	= 38,
    ADD8mm	= 39,
    ADD8mr	= 40,
    ADD8ri	= 41,
    ADD8rm	= 42,
    ADD8rm_POST	= 43,
    ADD8rr	= 44,
    ADJCALLSTACKDOWN	= 45,
    ADJCALLSTACKUP	= 46,
    AND16mi	= 47,
    AND16mm	= 48,
    AND16mr	= 49,
    AND16ri	= 50,
    AND16rm	= 51,
    AND16rm_POST	= 52,
    AND16rr	= 53,
    AND8mi	= 54,
    AND8mm	= 55,
    AND8mr	= 56,
    AND8ri	= 57,
    AND8rm	= 58,
    AND8rm_POST	= 59,
    AND8rr	= 60,
    BIC16mm	= 61,
    BIC16mr	= 62,
    BIC16rm	= 63,
    BIC16rr	= 64,
    BIC8mm	= 65,
    BIC8mr	= 66,
    BIC8rm	= 67,
    BIC8rr	= 68,
    BIT16mi	= 69,
    BIT16mm	= 70,
    BIT16mr	= 71,
    BIT16ri	= 72,
    BIT16rm	= 73,
    BIT16rr	= 74,
    BIT8mi	= 75,
    BIT8mm	= 76,
    BIT8mr	= 77,
    BIT8ri	= 78,
    BIT8rm	= 79,
    BIT8rr	= 80,
    Bi	= 81,
    Bm	= 82,
    Br	= 83,
    CALLi	= 84,
    CALLm	= 85,
    CALLr	= 86,
    CMP16mi	= 87,
    CMP16mr	= 88,
    CMP16ri	= 89,
    CMP16rm	= 90,
    CMP16rr	= 91,
    CMP8mi	= 92,
    CMP8mr	= 93,
    CMP8ri	= 94,
    CMP8rm	= 95,
    CMP8rr	= 96,
    JCC	= 97,
    JMP	= 98,
    MOV16mi	= 99,
    MOV16mm	= 100,
    MOV16mr	= 101,
    MOV16ri	= 102,
    MOV16rm	= 103,
    MOV16rm_POST	= 104,
    MOV16rr	= 105,
    MOV8mi	= 106,
    MOV8mm	= 107,
    MOV8mr	= 108,
    MOV8ri	= 109,
    MOV8rm	= 110,
    MOV8rm_POST	= 111,
    MOV8rr	= 112,
    MOVZX16rm8	= 113,
    MOVZX16rr8	= 114,
    NOP	= 115,
    OR16mi	= 116,
    OR16mm	= 117,
    OR16mr	= 118,
    OR16ri	= 119,
    OR16rm	= 120,
    OR16rm_POST	= 121,
    OR16rr	= 122,
    OR8mi	= 123,
    OR8mm	= 124,
    OR8mr	= 125,
    OR8ri	= 126,
    OR8rm	= 127,
    OR8rm_POST	= 128,
    OR8rr	= 129,
    POP16r	= 130,
    PUSH16r	= 131,
    RET	= 132,
    RETI	= 133,
    SAR16r1	= 134,
    SAR16r1c	= 135,
    SAR8r1	= 136,
    SAR8r1c	= 137,
    SBC16mi	= 138,
    SBC16mm	= 139,
    SBC16mr	= 140,
    SBC16ri	= 141,
    SBC16rm	= 142,
    SBC16rr	= 143,
    SBC8mi	= 144,
    SBC8mm	= 145,
    SBC8mr	= 146,
    SBC8ri	= 147,
    SBC8rm	= 148,
    SBC8rr	= 149,
    SEXT16r	= 150,
    SHL16r1	= 151,
    SHL8r1	= 152,
    SUB16mi	= 153,
    SUB16mm	= 154,
    SUB16mr	= 155,
    SUB16ri	= 156,
    SUB16rm	= 157,
    SUB16rm_POST	= 158,
    SUB16rr	= 159,
    SUB8mi	= 160,
    SUB8mm	= 161,
    SUB8mr	= 162,
    SUB8ri	= 163,
    SUB8rm	= 164,
    SUB8rm_POST	= 165,
    SUB8rr	= 166,
    SWPB16r	= 167,
    Select16	= 168,
    Select8	= 169,
    Shl16	= 170,
    Shl8	= 171,
    Sra16	= 172,
    Sra8	= 173,
    Srl16	= 174,
    Srl8	= 175,
    XOR16mi	= 176,
    XOR16mm	= 177,
    XOR16mr	= 178,
    XOR16ri	= 179,
    XOR16rm	= 180,
    XOR16rm_POST	= 181,
    XOR16rr	= 182,
    XOR8mi	= 183,
    XOR8mm	= 184,
    XOR8mr	= 185,
    XOR8ri	= 186,
    XOR8rm	= 187,
    XOR8rm_POST	= 188,
    XOR8rr	= 189,
    ZEXT16r	= 190,
    INSTRUCTION_LIST_END = 191
  };
namespace Sched {
  enum {
    NoInstrModel	= 0,
    SCHED_LIST_END = 1
  };
}
}
} // End llvm namespace 
#endif // GET_INSTRINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Descriptors                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const uint16_t ImplicitList1[] = { MSP430::SRW, 0 };
static const uint16_t ImplicitList2[] = { MSP430::SPW, 0 };
static const uint16_t ImplicitList3[] = { MSP430::SPW, MSP430::SRW, 0 };
static const uint16_t ImplicitList4[] = { MSP430::R12W, MSP430::R13W, MSP430::R14W, MSP430::R15W, MSP430::SRW, 0 };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo10[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo21[] = { { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo22[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo31[] = { { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo32[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo33[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo34[] = { { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo35[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo36[] = { { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo37[] = { { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR16RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo38[] = { { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { MSP430::GR8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };

extern const MCInstrDesc MSP430Insts[] = {
  { 0,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #0 = PHI
  { 1,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #1 = INLINEASM
  { 2,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #2 = PROLOG_LABEL
  { 3,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #3 = EH_LABEL
  { 4,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #4 = GC_LABEL
  { 5,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #5 = KILL
  { 6,	3,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo3,0,0 },  // Inst #6 = EXTRACT_SUBREG
  { 7,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo4,0,0 },  // Inst #7 = INSERT_SUBREG
  { 8,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo5,0,0 },  // Inst #8 = IMPLICIT_DEF
  { 9,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo6,0,0 },  // Inst #9 = SUBREG_TO_REG
  { 10,	3,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo3,0,0 },  // Inst #10 = COPY_TO_REGCLASS
  { 11,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #11 = DBG_VALUE
  { 12,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo5,0,0 },  // Inst #12 = REG_SEQUENCE
  { 13,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo7,0,0 },  // Inst #13 = COPY
  { 14,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #14 = BUNDLE
  { 15,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #15 = LIFETIME_START
  { 16,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #16 = LIFETIME_END
  { 17,	2,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo8,0,0 },  // Inst #17 = STACKMAP
  { 18,	6,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo9,0,0 },  // Inst #18 = PATCHPOINT
  { 19,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, ImplicitList1, ImplicitList1, OperandInfo10,0,0 },  // Inst #19 = ADC16mi
  { 20,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, ImplicitList1, ImplicitList1, OperandInfo11,0,0 },  // Inst #20 = ADC16mm
  { 21,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, ImplicitList1, ImplicitList1, OperandInfo12,0,0 },  // Inst #21 = ADC16mr
  { 22,	3,	1,	0,	0,	0, 0xeULL, ImplicitList1, ImplicitList1, OperandInfo13,0,0 },  // Inst #22 = ADC16ri
  { 23,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, ImplicitList1, ImplicitList1, OperandInfo14,0,0 },  // Inst #23 = ADC16rm
  { 24,	3,	1,	0,	0,	0|(1<<MCID::Commutable), 0xaULL, ImplicitList1, ImplicitList1, OperandInfo15,0,0 },  // Inst #24 = ADC16rr
  { 25,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, ImplicitList1, ImplicitList1, OperandInfo10,0,0 },  // Inst #25 = ADC8mi
  { 26,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, ImplicitList1, ImplicitList1, OperandInfo11,0,0 },  // Inst #26 = ADC8mm
  { 27,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, ImplicitList1, ImplicitList1, OperandInfo16,0,0 },  // Inst #27 = ADC8mr
  { 28,	3,	1,	0,	0,	0, 0xeULL, ImplicitList1, ImplicitList1, OperandInfo17,0,0 },  // Inst #28 = ADC8ri
  { 29,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, ImplicitList1, ImplicitList1, OperandInfo18,0,0 },  // Inst #29 = ADC8rm
  { 30,	3,	1,	0,	0,	0|(1<<MCID::Commutable), 0xaULL, ImplicitList1, ImplicitList1, OperandInfo19,0,0 },  // Inst #30 = ADC8rr
  { 31,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #31 = ADD16mi
  { 32,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #32 = ADD16mm
  { 33,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, NULL, ImplicitList1, OperandInfo12,0,0 },  // Inst #33 = ADD16mr
  { 34,	3,	1,	0,	0,	0, 0xeULL, NULL, ImplicitList1, OperandInfo13,0,0 },  // Inst #34 = ADD16ri
  { 35,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo14,0,0 },  // Inst #35 = ADD16rm
  { 36,	4,	2,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects)|(1<<MCID::ExtraDefRegAllocReq), 0xaULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #36 = ADD16rm_POST
  { 37,	3,	1,	0,	0,	0|(1<<MCID::Commutable), 0xaULL, NULL, ImplicitList1, OperandInfo15,0,0 },  // Inst #37 = ADD16rr
  { 38,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #38 = ADD8mi
  { 39,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #39 = ADD8mm
  { 40,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, NULL, ImplicitList1, OperandInfo16,0,0 },  // Inst #40 = ADD8mr
  { 41,	3,	1,	0,	0,	0, 0xeULL, NULL, ImplicitList1, OperandInfo17,0,0 },  // Inst #41 = ADD8ri
  { 42,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo18,0,0 },  // Inst #42 = ADD8rm
  { 43,	4,	2,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects)|(1<<MCID::ExtraDefRegAllocReq), 0xaULL, NULL, ImplicitList1, OperandInfo21,0,0 },  // Inst #43 = ADD8rm_POST
  { 44,	3,	1,	0,	0,	0|(1<<MCID::Commutable), 0xaULL, NULL, ImplicitList1, OperandInfo19,0,0 },  // Inst #44 = ADD8rr
  { 45,	1,	0,	0,	0,	0, 0x4ULL, ImplicitList2, ImplicitList3, OperandInfo2,0,0 },  // Inst #45 = ADJCALLSTACKDOWN
  { 46,	2,	0,	0,	0,	0, 0x4ULL, ImplicitList2, ImplicitList3, OperandInfo8,0,0 },  // Inst #46 = ADJCALLSTACKUP
  { 47,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #47 = AND16mi
  { 48,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #48 = AND16mm
  { 49,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, NULL, ImplicitList1, OperandInfo12,0,0 },  // Inst #49 = AND16mr
  { 50,	3,	1,	0,	0,	0, 0xeULL, NULL, ImplicitList1, OperandInfo13,0,0 },  // Inst #50 = AND16ri
  { 51,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo14,0,0 },  // Inst #51 = AND16rm
  { 52,	4,	2,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects)|(1<<MCID::ExtraDefRegAllocReq), 0xaULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #52 = AND16rm_POST
  { 53,	3,	1,	0,	0,	0|(1<<MCID::Commutable), 0xaULL, NULL, ImplicitList1, OperandInfo15,0,0 },  // Inst #53 = AND16rr
  { 54,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #54 = AND8mi
  { 55,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #55 = AND8mm
  { 56,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, NULL, ImplicitList1, OperandInfo16,0,0 },  // Inst #56 = AND8mr
  { 57,	3,	1,	0,	0,	0, 0xeULL, NULL, ImplicitList1, OperandInfo17,0,0 },  // Inst #57 = AND8ri
  { 58,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo18,0,0 },  // Inst #58 = AND8rm
  { 59,	4,	2,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects)|(1<<MCID::ExtraDefRegAllocReq), 0xaULL, NULL, ImplicitList1, OperandInfo21,0,0 },  // Inst #59 = AND8rm_POST
  { 60,	3,	1,	0,	0,	0|(1<<MCID::Commutable), 0xaULL, NULL, ImplicitList1, OperandInfo19,0,0 },  // Inst #60 = AND8rr
  { 61,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #61 = BIC16mm
  { 62,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, NULL, ImplicitList1, OperandInfo12,0,0 },  // Inst #62 = BIC16mr
  { 63,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo14,0,0 },  // Inst #63 = BIC16rm
  { 64,	3,	1,	0,	0,	0, 0xaULL, NULL, ImplicitList1, OperandInfo15,0,0 },  // Inst #64 = BIC16rr
  { 65,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #65 = BIC8mm
  { 66,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, NULL, ImplicitList1, OperandInfo16,0,0 },  // Inst #66 = BIC8mr
  { 67,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo18,0,0 },  // Inst #67 = BIC8rm
  { 68,	3,	1,	0,	0,	0, 0xaULL, NULL, ImplicitList1, OperandInfo19,0,0 },  // Inst #68 = BIC8rr
  { 69,	3,	0,	0,	0,	0|(1<<MCID::MayLoad), 0x12ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #69 = BIT16mi
  { 70,	4,	0,	0,	0,	0|(1<<MCID::MayLoad), 0x12ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #70 = BIT16mm
  { 71,	3,	0,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo12,0,0 },  // Inst #71 = BIT16mr
  { 72,	2,	0,	0,	0,	0, 0xeULL, NULL, ImplicitList1, OperandInfo22,0,0 },  // Inst #72 = BIT16ri
  { 73,	3,	0,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo23,0,0 },  // Inst #73 = BIT16rm
  { 74,	2,	0,	0,	0,	0|(1<<MCID::Commutable), 0xaULL, NULL, ImplicitList1, OperandInfo24,0,0 },  // Inst #74 = BIT16rr
  { 75,	3,	0,	0,	0,	0|(1<<MCID::MayLoad), 0x12ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #75 = BIT8mi
  { 76,	4,	0,	0,	0,	0|(1<<MCID::MayLoad), 0x12ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #76 = BIT8mm
  { 77,	3,	0,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo16,0,0 },  // Inst #77 = BIT8mr
  { 78,	2,	0,	0,	0,	0, 0xeULL, NULL, ImplicitList1, OperandInfo25,0,0 },  // Inst #78 = BIT8ri
  { 79,	3,	0,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo26,0,0 },  // Inst #79 = BIT8rm
  { 80,	2,	0,	0,	0,	0|(1<<MCID::Commutable), 0xaULL, NULL, ImplicitList1, OperandInfo27,0,0 },  // Inst #80 = BIT8rr
  { 81,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0xeULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #81 = Bi
  { 82,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::MayLoad)|(1<<MCID::Terminator), 0xeULL, NULL, NULL, OperandInfo28,0,0 },  // Inst #82 = Bm
  { 83,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0xaULL, NULL, NULL, OperandInfo29,0,0 },  // Inst #83 = Br
  { 84,	1,	0,	0,	0,	0|(1<<MCID::Call), 0xdULL, ImplicitList2, ImplicitList4, OperandInfo2,0,0 },  // Inst #84 = CALLi
  { 85,	2,	0,	0,	0,	0|(1<<MCID::Call)|(1<<MCID::MayLoad), 0xdULL, ImplicitList2, ImplicitList4, OperandInfo28,0,0 },  // Inst #85 = CALLm
  { 86,	1,	0,	0,	0,	0|(1<<MCID::Call), 0x9ULL, ImplicitList2, ImplicitList4, OperandInfo29,0,0 },  // Inst #86 = CALLr
  { 87,	3,	0,	0,	0,	0|(1<<MCID::MayLoad), 0x12ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #87 = CMP16mi
  { 88,	3,	0,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo12,0,0 },  // Inst #88 = CMP16mr
  { 89,	2,	0,	0,	0,	0, 0xeULL, NULL, ImplicitList1, OperandInfo22,0,0 },  // Inst #89 = CMP16ri
  { 90,	3,	0,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo23,0,0 },  // Inst #90 = CMP16rm
  { 91,	2,	0,	0,	0,	0, 0xaULL, NULL, ImplicitList1, OperandInfo24,0,0 },  // Inst #91 = CMP16rr
  { 92,	3,	0,	0,	0,	0|(1<<MCID::MayLoad), 0x12ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #92 = CMP8mi
  { 93,	3,	0,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo16,0,0 },  // Inst #93 = CMP8mr
  { 94,	2,	0,	0,	0,	0, 0xeULL, NULL, ImplicitList1, OperandInfo25,0,0 },  // Inst #94 = CMP8ri
  { 95,	3,	0,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo26,0,0 },  // Inst #95 = CMP8rm
  { 96,	2,	0,	0,	0,	0, 0xaULL, NULL, ImplicitList1, OperandInfo27,0,0 },  // Inst #96 = CMP8rr
  { 97,	2,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0xbULL, ImplicitList1, NULL, OperandInfo7,0,0 },  // Inst #97 = JCC
  { 98,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0xbULL, NULL, NULL, OperandInfo5,0,0 },  // Inst #98 = JMP
  { 99,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x12ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #99 = MOV16mi
  { 100,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #100 = MOV16mm
  { 101,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0xeULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #101 = MOV16mr
  { 102,	2,	1,	0,	0,	0|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0xeULL, NULL, NULL, OperandInfo22,0,0 },  // Inst #102 = MOV16ri
  { 103,	3,	1,	0,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad)|(1<<MCID::Rematerializable), 0xeULL, NULL, NULL, OperandInfo23,0,0 },  // Inst #103 = MOV16rm
  { 104,	3,	2,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects)|(1<<MCID::ExtraDefRegAllocReq), 0xaULL, NULL, NULL, OperandInfo30,0,0 },  // Inst #104 = MOV16rm_POST
  { 105,	2,	1,	0,	0,	0, 0xaULL, NULL, NULL, OperandInfo24,0,0 },  // Inst #105 = MOV16rr
  { 106,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0x12ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #106 = MOV8mi
  { 107,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #107 = MOV8mm
  { 108,	3,	0,	0,	0,	0|(1<<MCID::MayStore), 0xeULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #108 = MOV8mr
  { 109,	2,	1,	0,	0,	0|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0xeULL, NULL, NULL, OperandInfo25,0,0 },  // Inst #109 = MOV8ri
  { 110,	3,	1,	0,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad)|(1<<MCID::Rematerializable), 0xeULL, NULL, NULL, OperandInfo26,0,0 },  // Inst #110 = MOV8rm
  { 111,	3,	2,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects)|(1<<MCID::ExtraDefRegAllocReq), 0xaULL, NULL, NULL, OperandInfo31,0,0 },  // Inst #111 = MOV8rm_POST
  { 112,	2,	1,	0,	0,	0, 0xaULL, NULL, NULL, OperandInfo27,0,0 },  // Inst #112 = MOV8rr
  { 113,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, NULL, OperandInfo23,0,0 },  // Inst #113 = MOVZX16rm8
  { 114,	2,	1,	0,	0,	0, 0xaULL, NULL, NULL, OperandInfo32,0,0 },  // Inst #114 = MOVZX16rr8
  { 115,	0,	0,	0,	0,	0, 0x4ULL, NULL, NULL, 0,0,0 },  // Inst #115 = NOP
  { 116,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #116 = OR16mi
  { 117,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #117 = OR16mm
  { 118,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, NULL, ImplicitList1, OperandInfo12,0,0 },  // Inst #118 = OR16mr
  { 119,	3,	1,	0,	0,	0, 0xeULL, NULL, ImplicitList1, OperandInfo13,0,0 },  // Inst #119 = OR16ri
  { 120,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo14,0,0 },  // Inst #120 = OR16rm
  { 121,	4,	2,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects)|(1<<MCID::ExtraDefRegAllocReq), 0xaULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #121 = OR16rm_POST
  { 122,	3,	1,	0,	0,	0|(1<<MCID::Commutable), 0xaULL, NULL, ImplicitList1, OperandInfo15,0,0 },  // Inst #122 = OR16rr
  { 123,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #123 = OR8mi
  { 124,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #124 = OR8mm
  { 125,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, NULL, ImplicitList1, OperandInfo16,0,0 },  // Inst #125 = OR8mr
  { 126,	3,	1,	0,	0,	0, 0xeULL, NULL, ImplicitList1, OperandInfo17,0,0 },  // Inst #126 = OR8ri
  { 127,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo18,0,0 },  // Inst #127 = OR8rm
  { 128,	4,	2,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects)|(1<<MCID::ExtraDefRegAllocReq), 0xaULL, NULL, ImplicitList1, OperandInfo21,0,0 },  // Inst #128 = OR8rm_POST
  { 129,	3,	1,	0,	0,	0|(1<<MCID::Commutable), 0xaULL, NULL, ImplicitList1, OperandInfo19,0,0 },  // Inst #129 = OR8rr
  { 130,	1,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xaULL, ImplicitList2, ImplicitList2, OperandInfo29,0,0 },  // Inst #130 = POP16r
  { 131,	1,	0,	0,	0,	0|(1<<MCID::MayStore), 0x9ULL, ImplicitList2, ImplicitList2, OperandInfo29,0,0 },  // Inst #131 = PUSH16r
  { 132,	0,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0xaULL, NULL, NULL, 0,0,0 },  // Inst #132 = RET
  { 133,	0,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x9ULL, NULL, NULL, 0,0,0 },  // Inst #133 = RETI
  { 134,	2,	1,	0,	0,	0, 0x9ULL, NULL, ImplicitList1, OperandInfo33,0,0 },  // Inst #134 = SAR16r1
  { 135,	2,	1,	0,	0,	0, 0x4ULL, NULL, ImplicitList1, OperandInfo33,0,0 },  // Inst #135 = SAR16r1c
  { 136,	2,	1,	0,	0,	0, 0x9ULL, NULL, ImplicitList1, OperandInfo34,0,0 },  // Inst #136 = SAR8r1
  { 137,	2,	1,	0,	0,	0, 0x4ULL, NULL, ImplicitList1, OperandInfo34,0,0 },  // Inst #137 = SAR8r1c
  { 138,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, ImplicitList1, ImplicitList1, OperandInfo10,0,0 },  // Inst #138 = SBC16mi
  { 139,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, ImplicitList1, ImplicitList1, OperandInfo11,0,0 },  // Inst #139 = SBC16mm
  { 140,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, ImplicitList1, ImplicitList1, OperandInfo12,0,0 },  // Inst #140 = SBC16mr
  { 141,	3,	1,	0,	0,	0, 0xeULL, ImplicitList1, ImplicitList1, OperandInfo13,0,0 },  // Inst #141 = SBC16ri
  { 142,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, ImplicitList1, ImplicitList1, OperandInfo14,0,0 },  // Inst #142 = SBC16rm
  { 143,	3,	1,	0,	0,	0, 0xaULL, ImplicitList1, ImplicitList1, OperandInfo15,0,0 },  // Inst #143 = SBC16rr
  { 144,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, ImplicitList1, ImplicitList1, OperandInfo10,0,0 },  // Inst #144 = SBC8mi
  { 145,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, ImplicitList1, ImplicitList1, OperandInfo11,0,0 },  // Inst #145 = SBC8mm
  { 146,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, ImplicitList1, ImplicitList1, OperandInfo16,0,0 },  // Inst #146 = SBC8mr
  { 147,	3,	1,	0,	0,	0, 0xeULL, ImplicitList1, ImplicitList1, OperandInfo17,0,0 },  // Inst #147 = SBC8ri
  { 148,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, ImplicitList1, ImplicitList1, OperandInfo18,0,0 },  // Inst #148 = SBC8rm
  { 149,	3,	1,	0,	0,	0, 0xaULL, ImplicitList1, ImplicitList1, OperandInfo19,0,0 },  // Inst #149 = SBC8rr
  { 150,	2,	1,	0,	0,	0, 0x9ULL, NULL, ImplicitList1, OperandInfo33,0,0 },  // Inst #150 = SEXT16r
  { 151,	2,	1,	0,	0,	0, 0xaULL, NULL, ImplicitList1, OperandInfo33,0,0 },  // Inst #151 = SHL16r1
  { 152,	2,	1,	0,	0,	0, 0xaULL, NULL, ImplicitList1, OperandInfo34,0,0 },  // Inst #152 = SHL8r1
  { 153,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #153 = SUB16mi
  { 154,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #154 = SUB16mm
  { 155,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, NULL, ImplicitList1, OperandInfo12,0,0 },  // Inst #155 = SUB16mr
  { 156,	3,	1,	0,	0,	0, 0xeULL, NULL, ImplicitList1, OperandInfo13,0,0 },  // Inst #156 = SUB16ri
  { 157,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo14,0,0 },  // Inst #157 = SUB16rm
  { 158,	4,	2,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects)|(1<<MCID::ExtraDefRegAllocReq), 0xaULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #158 = SUB16rm_POST
  { 159,	3,	1,	0,	0,	0, 0xaULL, NULL, ImplicitList1, OperandInfo15,0,0 },  // Inst #159 = SUB16rr
  { 160,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #160 = SUB8mi
  { 161,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #161 = SUB8mm
  { 162,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, NULL, ImplicitList1, OperandInfo16,0,0 },  // Inst #162 = SUB8mr
  { 163,	3,	1,	0,	0,	0, 0xeULL, NULL, ImplicitList1, OperandInfo17,0,0 },  // Inst #163 = SUB8ri
  { 164,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo18,0,0 },  // Inst #164 = SUB8rm
  { 165,	4,	2,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects)|(1<<MCID::ExtraDefRegAllocReq), 0xaULL, NULL, ImplicitList1, OperandInfo21,0,0 },  // Inst #165 = SUB8rm_POST
  { 166,	3,	1,	0,	0,	0, 0xaULL, NULL, ImplicitList1, OperandInfo19,0,0 },  // Inst #166 = SUB8rr
  { 167,	2,	1,	0,	0,	0, 0x9ULL, NULL, NULL, OperandInfo33,0,0 },  // Inst #167 = SWPB16r
  { 168,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x4ULL, NULL, NULL, OperandInfo35,0,0 },  // Inst #168 = Select16
  { 169,	4,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x4ULL, NULL, NULL, OperandInfo36,0,0 },  // Inst #169 = Select8
  { 170,	3,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x4ULL, NULL, ImplicitList1, OperandInfo37,0,0 },  // Inst #170 = Shl16
  { 171,	3,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x4ULL, NULL, ImplicitList1, OperandInfo38,0,0 },  // Inst #171 = Shl8
  { 172,	3,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x4ULL, NULL, ImplicitList1, OperandInfo37,0,0 },  // Inst #172 = Sra16
  { 173,	3,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x4ULL, NULL, ImplicitList1, OperandInfo38,0,0 },  // Inst #173 = Sra8
  { 174,	3,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x4ULL, NULL, ImplicitList1, OperandInfo37,0,0 },  // Inst #174 = Srl16
  { 175,	3,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x4ULL, NULL, ImplicitList1, OperandInfo38,0,0 },  // Inst #175 = Srl8
  { 176,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #176 = XOR16mi
  { 177,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #177 = XOR16mm
  { 178,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, NULL, ImplicitList1, OperandInfo12,0,0 },  // Inst #178 = XOR16mr
  { 179,	3,	1,	0,	0,	0, 0xeULL, NULL, ImplicitList1, OperandInfo13,0,0 },  // Inst #179 = XOR16ri
  { 180,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo14,0,0 },  // Inst #180 = XOR16rm
  { 181,	4,	2,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects)|(1<<MCID::ExtraDefRegAllocReq), 0xaULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #181 = XOR16rm_POST
  { 182,	3,	1,	0,	0,	0|(1<<MCID::Commutable), 0xaULL, NULL, ImplicitList1, OperandInfo15,0,0 },  // Inst #182 = XOR16rr
  { 183,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #183 = XOR8mi
  { 184,	4,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x12ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #184 = XOR8mm
  { 185,	3,	0,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0xeULL, NULL, ImplicitList1, OperandInfo16,0,0 },  // Inst #185 = XOR8mr
  { 186,	3,	1,	0,	0,	0, 0xeULL, NULL, ImplicitList1, OperandInfo17,0,0 },  // Inst #186 = XOR8ri
  { 187,	4,	1,	0,	0,	0|(1<<MCID::MayLoad), 0xeULL, NULL, ImplicitList1, OperandInfo18,0,0 },  // Inst #187 = XOR8rm
  { 188,	4,	2,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects)|(1<<MCID::ExtraDefRegAllocReq), 0xaULL, NULL, ImplicitList1, OperandInfo21,0,0 },  // Inst #188 = XOR8rm_POST
  { 189,	3,	1,	0,	0,	0|(1<<MCID::Commutable), 0xaULL, NULL, ImplicitList1, OperandInfo19,0,0 },  // Inst #189 = XOR8rr
  { 190,	2,	1,	0,	0,	0, 0xaULL, NULL, NULL, OperandInfo33,0,0 },  // Inst #190 = ZEXT16r
};

extern const char MSP430InstrNameData[] = {
  /* 0 */ 'S', 'H', 'L', '1', '6', 'r', '1', 0,
  /* 8 */ 'S', 'A', 'R', '1', '6', 'r', '1', 0,
  /* 16 */ 'S', 'H', 'L', '8', 'r', '1', 0,
  /* 23 */ 'S', 'A', 'R', '8', 'r', '1', 0,
  /* 30 */ 'S', 'r', 'a', '1', '6', 0,
  /* 36 */ 'S', 'h', 'l', '1', '6', 0,
  /* 42 */ 'S', 'r', 'l', '1', '6', 0,
  /* 48 */ 'S', 'e', 'l', 'e', 'c', 't', '1', '6', 0,
  /* 57 */ 'S', 'r', 'a', '8', 0,
  /* 62 */ 'S', 'h', 'l', '8', 0,
  /* 67 */ 'S', 'r', 'l', '8', 0,
  /* 72 */ 'M', 'O', 'V', 'Z', 'X', '1', '6', 'r', 'm', '8', 0,
  /* 83 */ 'M', 'O', 'V', 'Z', 'X', '1', '6', 'r', 'r', '8', 0,
  /* 94 */ 'S', 'e', 'l', 'e', 'c', 't', '8', 0,
  /* 102 */ 'J', 'C', 'C', 0,
  /* 106 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 119 */ 'R', 'E', 'G', '_', 'S', 'E', 'Q', 'U', 'E', 'N', 'C', 'E', 0,
  /* 132 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 139 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 149 */ 'I', 'M', 'P', 'L', 'I', 'C', 'I', 'T', '_', 'D', 'E', 'F', 0,
  /* 162 */ 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 177 */ 'I', 'N', 'S', 'E', 'R', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 191 */ 'S', 'U', 'B', 'R', 'E', 'G', '_', 'T', 'O', '_', 'R', 'E', 'G', 0,
  /* 205 */ 'P', 'H', 'I', 0,
  /* 209 */ 'R', 'E', 'T', 'I', 0,
  /* 214 */ 'G', 'C', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 223 */ 'P', 'R', 'O', 'L', 'O', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 236 */ 'E', 'H', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 245 */ 'K', 'I', 'L', 'L', 0,
  /* 250 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', 0,
  /* 260 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 0,
  /* 277 */ 'S', 'T', 'A', 'C', 'K', 'M', 'A', 'P', 0,
  /* 286 */ 'J', 'M', 'P', 0,
  /* 290 */ 'N', 'O', 'P', 0,
  /* 294 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 0,
  /* 309 */ 'C', 'O', 'P', 'Y', '_', 'T', 'O', '_', 'R', 'E', 'G', 'C', 'L', 'A', 'S', 'S', 0,
  /* 326 */ 'R', 'E', 'T', 0,
  /* 330 */ 'P', 'A', 'T', 'C', 'H', 'P', 'O', 'I', 'N', 'T', 0,
  /* 341 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 356 */ 'S', 'U', 'B', '1', '6', 'r', 'm', '_', 'P', 'O', 'S', 'T', 0,
  /* 369 */ 'A', 'D', 'D', '1', '6', 'r', 'm', '_', 'P', 'O', 'S', 'T', 0,
  /* 382 */ 'A', 'N', 'D', '1', '6', 'r', 'm', '_', 'P', 'O', 'S', 'T', 0,
  /* 395 */ 'X', 'O', 'R', '1', '6', 'r', 'm', '_', 'P', 'O', 'S', 'T', 0,
  /* 408 */ 'M', 'O', 'V', '1', '6', 'r', 'm', '_', 'P', 'O', 'S', 'T', 0,
  /* 421 */ 'S', 'U', 'B', '8', 'r', 'm', '_', 'P', 'O', 'S', 'T', 0,
  /* 433 */ 'A', 'D', 'D', '8', 'r', 'm', '_', 'P', 'O', 'S', 'T', 0,
  /* 445 */ 'A', 'N', 'D', '8', 'r', 'm', '_', 'P', 'O', 'S', 'T', 0,
  /* 457 */ 'X', 'O', 'R', '8', 'r', 'm', '_', 'P', 'O', 'S', 'T', 0,
  /* 469 */ 'M', 'O', 'V', '8', 'r', 'm', '_', 'P', 'O', 'S', 'T', 0,
  /* 481 */ 'C', 'O', 'P', 'Y', 0,
  /* 486 */ 'S', 'A', 'R', '1', '6', 'r', '1', 'c', 0,
  /* 495 */ 'S', 'A', 'R', '8', 'r', '1', 'c', 0,
  /* 503 */ 'B', 'i', 0,
  /* 506 */ 'C', 'A', 'L', 'L', 'i', 0,
  /* 512 */ 'S', 'U', 'B', '1', '6', 'm', 'i', 0,
  /* 520 */ 'S', 'B', 'C', '1', '6', 'm', 'i', 0,
  /* 528 */ 'A', 'D', 'C', '1', '6', 'm', 'i', 0,
  /* 536 */ 'A', 'D', 'D', '1', '6', 'm', 'i', 0,
  /* 544 */ 'A', 'N', 'D', '1', '6', 'm', 'i', 0,
  /* 552 */ 'C', 'M', 'P', '1', '6', 'm', 'i', 0,
  /* 560 */ 'X', 'O', 'R', '1', '6', 'm', 'i', 0,
  /* 568 */ 'B', 'I', 'T', '1', '6', 'm', 'i', 0,
  /* 576 */ 'M', 'O', 'V', '1', '6', 'm', 'i', 0,
  /* 584 */ 'S', 'U', 'B', '8', 'm', 'i', 0,
  /* 591 */ 'S', 'B', 'C', '8', 'm', 'i', 0,
  /* 598 */ 'A', 'D', 'C', '8', 'm', 'i', 0,
  /* 605 */ 'A', 'D', 'D', '8', 'm', 'i', 0,
  /* 612 */ 'A', 'N', 'D', '8', 'm', 'i', 0,
  /* 619 */ 'C', 'M', 'P', '8', 'm', 'i', 0,
  /* 626 */ 'X', 'O', 'R', '8', 'm', 'i', 0,
  /* 633 */ 'B', 'I', 'T', '8', 'm', 'i', 0,
  /* 640 */ 'M', 'O', 'V', '8', 'm', 'i', 0,
  /* 647 */ 'S', 'U', 'B', '1', '6', 'r', 'i', 0,
  /* 655 */ 'S', 'B', 'C', '1', '6', 'r', 'i', 0,
  /* 663 */ 'A', 'D', 'C', '1', '6', 'r', 'i', 0,
  /* 671 */ 'A', 'D', 'D', '1', '6', 'r', 'i', 0,
  /* 679 */ 'A', 'N', 'D', '1', '6', 'r', 'i', 0,
  /* 687 */ 'C', 'M', 'P', '1', '6', 'r', 'i', 0,
  /* 695 */ 'X', 'O', 'R', '1', '6', 'r', 'i', 0,
  /* 703 */ 'B', 'I', 'T', '1', '6', 'r', 'i', 0,
  /* 711 */ 'M', 'O', 'V', '1', '6', 'r', 'i', 0,
  /* 719 */ 'S', 'U', 'B', '8', 'r', 'i', 0,
  /* 726 */ 'S', 'B', 'C', '8', 'r', 'i', 0,
  /* 733 */ 'A', 'D', 'C', '8', 'r', 'i', 0,
  /* 740 */ 'A', 'D', 'D', '8', 'r', 'i', 0,
  /* 747 */ 'A', 'N', 'D', '8', 'r', 'i', 0,
  /* 754 */ 'C', 'M', 'P', '8', 'r', 'i', 0,
  /* 761 */ 'X', 'O', 'R', '8', 'r', 'i', 0,
  /* 768 */ 'B', 'I', 'T', '8', 'r', 'i', 0,
  /* 775 */ 'M', 'O', 'V', '8', 'r', 'i', 0,
  /* 782 */ 'B', 'm', 0,
  /* 785 */ 'C', 'A', 'L', 'L', 'm', 0,
  /* 791 */ 'S', 'U', 'B', '1', '6', 'm', 'm', 0,
  /* 799 */ 'S', 'B', 'C', '1', '6', 'm', 'm', 0,
  /* 807 */ 'A', 'D', 'C', '1', '6', 'm', 'm', 0,
  /* 815 */ 'B', 'I', 'C', '1', '6', 'm', 'm', 0,
  /* 823 */ 'A', 'D', 'D', '1', '6', 'm', 'm', 0,
  /* 831 */ 'A', 'N', 'D', '1', '6', 'm', 'm', 0,
  /* 839 */ 'X', 'O', 'R', '1', '6', 'm', 'm', 0,
  /* 847 */ 'B', 'I', 'T', '1', '6', 'm', 'm', 0,
  /* 855 */ 'M', 'O', 'V', '1', '6', 'm', 'm', 0,
  /* 863 */ 'S', 'U', 'B', '8', 'm', 'm', 0,
  /* 870 */ 'S', 'B', 'C', '8', 'm', 'm', 0,
  /* 877 */ 'A', 'D', 'C', '8', 'm', 'm', 0,
  /* 884 */ 'B', 'I', 'C', '8', 'm', 'm', 0,
  /* 891 */ 'A', 'D', 'D', '8', 'm', 'm', 0,
  /* 898 */ 'A', 'N', 'D', '8', 'm', 'm', 0,
  /* 905 */ 'X', 'O', 'R', '8', 'm', 'm', 0,
  /* 912 */ 'B', 'I', 'T', '8', 'm', 'm', 0,
  /* 919 */ 'M', 'O', 'V', '8', 'm', 'm', 0,
  /* 926 */ 'S', 'U', 'B', '1', '6', 'r', 'm', 0,
  /* 934 */ 'S', 'B', 'C', '1', '6', 'r', 'm', 0,
  /* 942 */ 'A', 'D', 'C', '1', '6', 'r', 'm', 0,
  /* 950 */ 'B', 'I', 'C', '1', '6', 'r', 'm', 0,
  /* 958 */ 'A', 'D', 'D', '1', '6', 'r', 'm', 0,
  /* 966 */ 'A', 'N', 'D', '1', '6', 'r', 'm', 0,
  /* 974 */ 'C', 'M', 'P', '1', '6', 'r', 'm', 0,
  /* 982 */ 'X', 'O', 'R', '1', '6', 'r', 'm', 0,
  /* 990 */ 'B', 'I', 'T', '1', '6', 'r', 'm', 0,
  /* 998 */ 'M', 'O', 'V', '1', '6', 'r', 'm', 0,
  /* 1006 */ 'S', 'U', 'B', '8', 'r', 'm', 0,
  /* 1013 */ 'S', 'B', 'C', '8', 'r', 'm', 0,
  /* 1020 */ 'A', 'D', 'C', '8', 'r', 'm', 0,
  /* 1027 */ 'B', 'I', 'C', '8', 'r', 'm', 0,
  /* 1034 */ 'A', 'D', 'D', '8', 'r', 'm', 0,
  /* 1041 */ 'A', 'N', 'D', '8', 'r', 'm', 0,
  /* 1048 */ 'C', 'M', 'P', '8', 'r', 'm', 0,
  /* 1055 */ 'X', 'O', 'R', '8', 'r', 'm', 0,
  /* 1062 */ 'B', 'I', 'T', '8', 'r', 'm', 0,
  /* 1069 */ 'M', 'O', 'V', '8', 'r', 'm', 0,
  /* 1076 */ 'S', 'W', 'P', 'B', '1', '6', 'r', 0,
  /* 1084 */ 'P', 'U', 'S', 'H', '1', '6', 'r', 0,
  /* 1092 */ 'P', 'O', 'P', '1', '6', 'r', 0,
  /* 1099 */ 'S', 'E', 'X', 'T', '1', '6', 'r', 0,
  /* 1107 */ 'Z', 'E', 'X', 'T', '1', '6', 'r', 0,
  /* 1115 */ 'B', 'r', 0,
  /* 1118 */ 'C', 'A', 'L', 'L', 'r', 0,
  /* 1124 */ 'S', 'U', 'B', '1', '6', 'm', 'r', 0,
  /* 1132 */ 'S', 'B', 'C', '1', '6', 'm', 'r', 0,
  /* 1140 */ 'A', 'D', 'C', '1', '6', 'm', 'r', 0,
  /* 1148 */ 'B', 'I', 'C', '1', '6', 'm', 'r', 0,
  /* 1156 */ 'A', 'D', 'D', '1', '6', 'm', 'r', 0,
  /* 1164 */ 'A', 'N', 'D', '1', '6', 'm', 'r', 0,
  /* 1172 */ 'C', 'M', 'P', '1', '6', 'm', 'r', 0,
  /* 1180 */ 'X', 'O', 'R', '1', '6', 'm', 'r', 0,
  /* 1188 */ 'B', 'I', 'T', '1', '6', 'm', 'r', 0,
  /* 1196 */ 'M', 'O', 'V', '1', '6', 'm', 'r', 0,
  /* 1204 */ 'S', 'U', 'B', '8', 'm', 'r', 0,
  /* 1211 */ 'S', 'B', 'C', '8', 'm', 'r', 0,
  /* 1218 */ 'A', 'D', 'C', '8', 'm', 'r', 0,
  /* 1225 */ 'B', 'I', 'C', '8', 'm', 'r', 0,
  /* 1232 */ 'A', 'D', 'D', '8', 'm', 'r', 0,
  /* 1239 */ 'A', 'N', 'D', '8', 'm', 'r', 0,
  /* 1246 */ 'C', 'M', 'P', '8', 'm', 'r', 0,
  /* 1253 */ 'X', 'O', 'R', '8', 'm', 'r', 0,
  /* 1260 */ 'B', 'I', 'T', '8', 'm', 'r', 0,
  /* 1267 */ 'M', 'O', 'V', '8', 'm', 'r', 0,
  /* 1274 */ 'S', 'U', 'B', '1', '6', 'r', 'r', 0,
  /* 1282 */ 'S', 'B', 'C', '1', '6', 'r', 'r', 0,
  /* 1290 */ 'A', 'D', 'C', '1', '6', 'r', 'r', 0,
  /* 1298 */ 'B', 'I', 'C', '1', '6', 'r', 'r', 0,
  /* 1306 */ 'A', 'D', 'D', '1', '6', 'r', 'r', 0,
  /* 1314 */ 'A', 'N', 'D', '1', '6', 'r', 'r', 0,
  /* 1322 */ 'C', 'M', 'P', '1', '6', 'r', 'r', 0,
  /* 1330 */ 'X', 'O', 'R', '1', '6', 'r', 'r', 0,
  /* 1338 */ 'B', 'I', 'T', '1', '6', 'r', 'r', 0,
  /* 1346 */ 'M', 'O', 'V', '1', '6', 'r', 'r', 0,
  /* 1354 */ 'S', 'U', 'B', '8', 'r', 'r', 0,
  /* 1361 */ 'S', 'B', 'C', '8', 'r', 'r', 0,
  /* 1368 */ 'A', 'D', 'C', '8', 'r', 'r', 0,
  /* 1375 */ 'B', 'I', 'C', '8', 'r', 'r', 0,
  /* 1382 */ 'A', 'D', 'D', '8', 'r', 'r', 0,
  /* 1389 */ 'A', 'N', 'D', '8', 'r', 'r', 0,
  /* 1396 */ 'C', 'M', 'P', '8', 'r', 'r', 0,
  /* 1403 */ 'X', 'O', 'R', '8', 'r', 'r', 0,
  /* 1410 */ 'B', 'I', 'T', '8', 'r', 'r', 0,
  /* 1417 */ 'M', 'O', 'V', '8', 'r', 'r', 0,
};

extern const unsigned MSP430InstrNameIndices[] = {
    205U, 250U, 223U, 236U, 214U, 245U, 162U, 177U, 
    149U, 191U, 309U, 139U, 119U, 481U, 132U, 341U, 
    106U, 277U, 330U, 528U, 807U, 1140U, 663U, 942U, 
    1290U, 598U, 877U, 1218U, 733U, 1020U, 1368U, 536U, 
    823U, 1156U, 671U, 958U, 369U, 1306U, 605U, 891U, 
    1232U, 740U, 1034U, 433U, 1382U, 260U, 294U, 544U, 
    831U, 1164U, 679U, 966U, 382U, 1314U, 612U, 898U, 
    1239U, 747U, 1041U, 445U, 1389U, 815U, 1148U, 950U, 
    1298U, 884U, 1225U, 1027U, 1375U, 568U, 847U, 1188U, 
    703U, 990U, 1338U, 633U, 912U, 1260U, 768U, 1062U, 
    1410U, 503U, 782U, 1115U, 506U, 785U, 1118U, 552U, 
    1172U, 687U, 974U, 1322U, 619U, 1246U, 754U, 1048U, 
    1396U, 102U, 286U, 576U, 855U, 1196U, 711U, 998U, 
    408U, 1346U, 640U, 919U, 1267U, 775U, 1069U, 469U, 
    1417U, 72U, 83U, 290U, 561U, 840U, 1181U, 696U, 
    983U, 396U, 1331U, 627U, 906U, 1254U, 762U, 1056U, 
    458U, 1404U, 1092U, 1084U, 326U, 209U, 8U, 486U, 
    23U, 495U, 520U, 799U, 1132U, 655U, 934U, 1282U, 
    591U, 870U, 1211U, 726U, 1013U, 1361U, 1099U, 0U, 
    16U, 512U, 791U, 1124U, 647U, 926U, 356U, 1274U, 
    584U, 863U, 1204U, 719U, 1006U, 421U, 1354U, 1076U, 
    48U, 94U, 36U, 62U, 30U, 57U, 42U, 67U, 
    560U, 839U, 1180U, 695U, 982U, 395U, 1330U, 626U, 
    905U, 1253U, 761U, 1055U, 457U, 1403U, 1107U, 
};

static inline void InitMSP430MCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(MSP430Insts, MSP430InstrNameIndices, MSP430InstrNameData, 191);
}

} // End llvm namespace 
#endif // GET_INSTRINFO_MC_DESC


#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct MSP430GenInstrInfo : public TargetInstrInfo {
  explicit MSP430GenInstrInfo(int SO = -1, int DO = -1);
  virtual ~MSP430GenInstrInfo();
};
} // End llvm namespace 
#endif // GET_INSTRINFO_HEADER


#ifdef GET_INSTRINFO_CTOR_DTOR
#undef GET_INSTRINFO_CTOR_DTOR
namespace llvm {
extern const MCInstrDesc MSP430Insts[];
extern const unsigned MSP430InstrNameIndices[];
extern const char MSP430InstrNameData[];
MSP430GenInstrInfo::MSP430GenInstrInfo(int SO, int DO)
  : TargetInstrInfo(SO, DO) {
  InitMCInstrInfo(MSP430Insts, MSP430InstrNameIndices, MSP430InstrNameData, 191);
}
MSP430GenInstrInfo::~MSP430GenInstrInfo() {}
} // End llvm namespace 
#endif // GET_INSTRINFO_CTOR_DTOR

#ifdef GET_INSTRINFO_OPERAND_ENUM
#undef GET_INSTRINFO_OPERAND_ENUM
namespace llvm {namespace MSP430 {
namespace OpName { 
enum {
OPERAND_LAST
};
} // End namespace OpName
} // End namespace MSP430
} // End namespace llvm
#endif //GET_INSTRINFO_OPERAND_ENUM
#ifdef GET_INSTRINFO_NAMED_OPS
#undef GET_INSTRINFO_NAMED_OPS
namespace llvm {namespace MSP430 {
int16_t getNamedOperandIdx(uint16_t Opcode, uint16_t NamedIdx) {
  return -1;
}
} // End namespace MSP430
} // End namespace llvm
#endif //GET_INSTRINFO_NAMED_OPS

#ifdef GET_INSTRINFO_OPERAND_TYPES_ENUM
#undef GET_INSTRINFO_OPERAND_TYPES_ENUM
namespace llvm {namespace MSP430 {
namespace OpTypes { 
enum OperandType {
  cc = 0,
  f32imm = 1,
  f64imm = 2,
  i16imm = 3,
  i1imm = 4,
  i32imm = 5,
  i64imm = 6,
  i8imm = 7,
  jmptarget = 8,
  memdst = 9,
  memsrc = 10,
  OPERAND_TYPE_LIST_END
};
} // End namespace OpTypes
} // End namespace MSP430
} // End namespace llvm
#endif // GET_INSTRINFO_OPERAND_TYPES_ENUM
