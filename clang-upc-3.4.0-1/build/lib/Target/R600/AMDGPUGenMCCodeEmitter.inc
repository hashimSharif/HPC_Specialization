/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Machine Code Emitter                                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

uint64_t AMDGPUMCCodeEmitter::getBinaryCodeForInstr(const MCInst &MI,
    SmallVectorImpl<MCFixup> &Fixups) const {
  static const uint64_t InstBits[] = {
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),	// ADD
    UINT64_C(28587302322176),	// ADD_INT
    UINT64_C(0),	// ALU_CLAUSE
    UINT64_C(26388279066624),	// AND_INT
    UINT64_C(11544872091648),	// ASHR_eg
    UINT64_C(61572651155456),	// ASHR_r600
    UINT64_C(140737488355328),	// BFE_UINT_eg
    UINT64_C(211106232532992),	// BFI_INT_eg
    UINT64_C(422212465065984),	// BIT_ALIGN_INT_eg
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(9223372040616312832),	// BUFFER_LOAD_DWORDX2_ADDR64
    UINT64_C(9223372040616288256),	// BUFFER_LOAD_DWORDX2_IDXEN
    UINT64_C(9223372040616284160),	// BUFFER_LOAD_DWORDX2_OFFEN
    UINT64_C(9223372040616574976),	// BUFFER_LOAD_DWORDX4_ADDR64
    UINT64_C(9223372040616550400),	// BUFFER_LOAD_DWORDX4_IDXEN
    UINT64_C(9223372040616546304),	// BUFFER_LOAD_DWORDX4_OFFEN
    UINT64_C(9223372040616050688),	// BUFFER_LOAD_DWORD_ADDR64
    UINT64_C(9223372040616026112),	// BUFFER_LOAD_DWORD_IDXEN
    UINT64_C(9223372040616022016),	// BUFFER_LOAD_DWORD_OFFEN
    UINT64_C(9223372040613691392),	// BUFFER_LOAD_FORMAT_XYZW_ADDR64
    UINT64_C(9223372040613666816),	// BUFFER_LOAD_FORMAT_XYZW_IDXEN
    UINT64_C(9223372040613662720),	// BUFFER_LOAD_FORMAT_XYZW_OFFEN
    UINT64_C(9223372040615264256),	// BUFFER_LOAD_SBYTE_ADDR64
    UINT64_C(9223372040615239680),	// BUFFER_LOAD_SBYTE_IDXEN
    UINT64_C(9223372040615235584),	// BUFFER_LOAD_SBYTE_OFFEN
    UINT64_C(9223372040615788544),	// BUFFER_LOAD_SSHORT_ADDR64
    UINT64_C(9223372040615763968),	// BUFFER_LOAD_SSHORT_IDXEN
    UINT64_C(9223372040615759872),	// BUFFER_LOAD_SSHORT_OFFEN
    UINT64_C(9223372040615002112),	// BUFFER_LOAD_UBYTE_ADDR64
    UINT64_C(9223372040614977536),	// BUFFER_LOAD_UBYTE_IDXEN
    UINT64_C(9223372040614973440),	// BUFFER_LOAD_UBYTE_OFFEN
    UINT64_C(9223372040615526400),	// BUFFER_LOAD_USHORT_ADDR64
    UINT64_C(9223372040615501824),	// BUFFER_LOAD_USHORT_IDXEN
    UINT64_C(9223372040615497728),	// BUFFER_LOAD_USHORT_OFFEN
    UINT64_C(9223372040619196416),	// BUFFER_STORE_BYTE
    UINT64_C(9223372040620244992),	// BUFFER_STORE_DWORD
    UINT64_C(9223372040620507136),	// BUFFER_STORE_DWORDX2
    UINT64_C(9223372040620769280),	// BUFFER_STORE_DWORDX4
    UINT64_C(9223372040619720704),	// BUFFER_STORE_SHORT
    UINT64_C(0),
    UINT64_C(9895604649984),	// CEIL
    UINT64_C(11529215046068469760),	// CF_ALU
    UINT64_C(12105675798371893248),	// CF_ALU_POP_AFTER
    UINT64_C(11817445422220181504),	// CF_ALU_PUSH_BEFORE
    UINT64_C(9565645608534933504),	// CF_CALL_FS_EG
    UINT64_C(9907919180215091200),	// CF_CALL_FS_R600
    UINT64_C(9367487224930631680),	// CF_CONTINUE_EG
    UINT64_C(9511602413006487552),	// CF_CONTINUE_R600
    UINT64_C(9457559217478041600),	// CF_ELSE_EG
    UINT64_C(9691746398101307392),	// CF_ELSE_R600
    UINT64_C(9799832789158199296),	// CF_END_CM
    UINT64_C(9232379236109516800),	// CF_END_EG
    UINT64_C(9232379236109516800),	// CF_END_R600
    UINT64_C(9403516021949595648),	// CF_JUMP_EG
    UINT64_C(9583660007044415488),	// CF_JUMP_R600
    UINT64_C(9241386435364257792),	// CF_TC_EG
    UINT64_C(9259400833873739776),	// CF_TC_R600
    UINT64_C(9259400833873739776),	// CF_VC_EG
    UINT64_C(9295429630892703744),	// CF_VC_R600
    UINT64_C(0),
    UINT64_C(985162418487296),	// CNDE_INT
    UINT64_C(879609302220800),	// CNDE_eg
    UINT64_C(844424930131968),	// CNDE_r600
    UINT64_C(1055531162664960),	// CNDGE_INT
    UINT64_C(949978046398464),	// CNDGE_eg
    UINT64_C(914793674309632),	// CNDGE_r600
    UINT64_C(1020346790576128),	// CNDGT_INT
    UINT64_C(914793674309632),	// CNDGT_eg
    UINT64_C(879609302220800),	// CNDGT_r600
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(78065325572096),	// COS_cm
    UINT64_C(78065325572096),	// COS_eg
    UINT64_C(61022895341568),	// COS_r600
    UINT64_C(61022895341568),	// COS_r700
    UINT64_C(0),
    UINT64_C(105553116266496),	// CUBE_eg_real
    UINT64_C(0),
    UINT64_C(45079976738816),	// CUBE_r600_real
    UINT64_C(0),
    UINT64_C(104453604638720),	// DOT4_eg
    UINT64_C(43980465111040),	// DOT4_r600
    UINT64_C(0),
    UINT64_C(3632267264),	// DS_ADD_U32_RTN
    UINT64_C(3638034432),	// DS_READ_B32
    UINT64_C(3639345152),	// DS_READ_I16
    UINT64_C(3638820864),	// DS_READ_I8
    UINT64_C(3639607296),	// DS_READ_U16
    UINT64_C(3639083008),	// DS_READ_U8
    UINT64_C(3632529408),	// DS_SUB_U32_RTN
    UINT64_C(3632005120),	// DS_WRITE_B16
    UINT64_C(3627286528),	// DS_WRITE_B32
    UINT64_C(3631742976),	// DS_WRITE_B8
    UINT64_C(9223372036854775808),	// EG_ExportBuf
    UINT64_C(9223372040076001280),	// EG_ExportSwz
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(9313444029402185728),	// END_LOOP_EG
    UINT64_C(9403516021949595648),	// END_LOOP_R600
    UINT64_C(4160749568),	// EXP
    UINT64_C(70918499991552),	// EXP_IEEE_cm
    UINT64_C(70918499991552),	// EXP_IEEE_eg
    UINT64_C(53326313947136),	// EXP_IEEE_r600
    UINT64_C(0),
    UINT64_C(0),	// FETCH_CLAUSE
    UINT64_C(10995116277760),	// FLOOR
    UINT64_C(43980465111040),	// FLT_TO_INT_eg
    UINT64_C(58823872086016),	// FLT_TO_INT_r600
    UINT64_C(84662395338752),	// FLT_TO_UINT_eg
    UINT64_C(66520453480448),	// FLT_TO_UINT_r600
    UINT64_C(0),
    UINT64_C(8796093022208),	// FRACT
    UINT64_C(0),
    UINT64_C(46181635850240),	// GROUP_BARRIER
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V1_V1
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V1_V2
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V1_V4
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V2_V1
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V2_V2
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V2_V4
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V3_V1
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V3_V2
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V3_V4
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V4_V1
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V4_V2
    UINT64_C(4030201856),	// IMAGE_GET_RESINFO_V4_V4
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V1_V1
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V1_V2
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V1_V4
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V2_V1
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V2_V2
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V2_V4
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V3_V1
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V3_V2
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V3_V4
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V4_V1
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V4_V2
    UINT64_C(4026793984),	// IMAGE_LOAD_MIP_V4_V4
    UINT64_C(4026531840),	// IMAGE_LOAD_V1_V1
    UINT64_C(4026531840),	// IMAGE_LOAD_V1_V2
    UINT64_C(4026531840),	// IMAGE_LOAD_V1_V4
    UINT64_C(4026531840),	// IMAGE_LOAD_V2_V1
    UINT64_C(4026531840),	// IMAGE_LOAD_V2_V2
    UINT64_C(4026531840),	// IMAGE_LOAD_V2_V4
    UINT64_C(4026531840),	// IMAGE_LOAD_V3_V1
    UINT64_C(4026531840),	// IMAGE_LOAD_V3_V2
    UINT64_C(4026531840),	// IMAGE_LOAD_V3_V4
    UINT64_C(4026531840),	// IMAGE_LOAD_V4_V1
    UINT64_C(4026531840),	// IMAGE_LOAD_V4_V2
    UINT64_C(4026531840),	// IMAGE_LOAD_V4_V4
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V1_V1
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V1_V16
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V1_V2
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V1_V4
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V1_V8
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V2_V1
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V2_V16
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V2_V2
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V2_V4
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V2_V8
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V3_V1
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V3_V16
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V3_V2
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V3_V4
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V3_V8
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V4_V1
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V4_V16
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V4_V2
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V4_V4
    UINT64_C(4036231168),	// IMAGE_SAMPLE_B_V4_V8
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V1_V1
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V1_V16
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V1_V2
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V1_V4
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V1_V8
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V2_V1
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V2_V16
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V2_V2
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V2_V4
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V2_V8
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V3_V1
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V3_V16
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V3_V2
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V3_V4
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V3_V8
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V4_V1
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V4_V16
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V4_V2
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V4_V4
    UINT64_C(4038328320),	// IMAGE_SAMPLE_C_B_V4_V8
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V1_V1
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V1_V16
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V1_V2
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V1_V4
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V1_V8
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V2_V1
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V2_V16
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V2_V2
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V2_V4
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V2_V8
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V3_V1
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V3_V16
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V3_V2
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V3_V4
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V3_V8
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V4_V1
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V4_V16
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V4_V2
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V4_V4
    UINT64_C(4037541888),	// IMAGE_SAMPLE_C_D_V4_V8
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V1_V1
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V1_V16
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V1_V2
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V1_V4
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V1_V8
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V2_V1
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V2_V16
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V2_V2
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V2_V4
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V2_V8
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V3_V1
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V3_V16
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V3_V2
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V3_V4
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V3_V8
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V4_V1
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V4_V16
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V4_V2
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V4_V4
    UINT64_C(4038066176),	// IMAGE_SAMPLE_C_L_V4_V8
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V1_V1
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V1_V16
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V1_V2
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V1_V4
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V1_V8
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V2_V1
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V2_V16
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V2_V2
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V2_V4
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V2_V8
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V3_V1
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V3_V16
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V3_V2
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V3_V4
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V3_V8
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V4_V1
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V4_V16
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V4_V2
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V4_V4
    UINT64_C(4037017600),	// IMAGE_SAMPLE_C_V4_V8
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V1_V1
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V1_V16
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V1_V2
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V1_V4
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V1_V8
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V2_V1
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V2_V16
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V2_V2
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V2_V4
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V2_V8
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V3_V1
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V3_V16
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V3_V2
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V3_V4
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V3_V8
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V4_V1
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V4_V16
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V4_V2
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V4_V4
    UINT64_C(4035444736),	// IMAGE_SAMPLE_D_V4_V8
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V1_V1
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V1_V16
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V1_V2
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V1_V4
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V1_V8
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V2_V1
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V2_V16
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V2_V2
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V2_V4
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V2_V8
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V3_V1
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V3_V16
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V3_V2
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V3_V4
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V3_V8
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V4_V1
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V4_V16
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V4_V2
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V4_V4
    UINT64_C(4035969024),	// IMAGE_SAMPLE_L_V4_V8
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V1_V1
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V1_V16
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V1_V2
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V1_V4
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V1_V8
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V2_V1
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V2_V16
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V2_V2
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V2_V4
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V2_V8
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V3_V1
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V3_V16
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V3_V2
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V3_V4
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V3_V8
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V4_V1
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V4_V16
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V4_V2
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V4_V4
    UINT64_C(4034920448),	// IMAGE_SAMPLE_V4_V8
    UINT64_C(123145302310912),	// INTERP_LOAD_P0
    UINT64_C(4294967295),	// INTERP_PAIR_XY
    UINT64_C(4294967295),	// INTERP_PAIR_ZW
    UINT64_C(4294967295),	// INTERP_VEC_LOAD
    UINT64_C(5747147278385152),	// INTERP_XY
    UINT64_C(5747697034199040),	// INTERP_ZW
    UINT64_C(85212151152640),	// INT_TO_FLT_eg
    UINT64_C(59373627899904),	// INT_TO_FLT_r600
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(24739011624960),	// KILLGT
    UINT64_C(598134325510144),	// LDS_ADD
    UINT64_C(288828510477221888),	// LDS_ADD_RET
    UINT64_C(486986894081523712),	// LDS_BYTE_READ_RET
    UINT64_C(162727720910848000),	// LDS_BYTE_WRITE
    UINT64_C(450958097062559744),	// LDS_READ_RET
    UINT64_C(505001292591005696),	// LDS_SHORT_READ_RET
    UINT64_C(171734920165588992),	// LDS_SHORT_WRITE
    UINT64_C(9605333580251136),	// LDS_SUB
    UINT64_C(297835709731962880),	// LDS_SUB_RET
    UINT64_C(495994093336264704),	// LDS_UBYTE_READ_RET
    UINT64_C(514008491845746688),	// LDS_USHORT_READ_RET
    UINT64_C(117691724637143040),	// LDS_WRITE
    UINT64_C(0),	// LITERALS
    UINT64_C(0),
    UINT64_C(71468255805440),	// LOG_CLAMPED_eg
    UINT64_C(53876069761024),	// LOG_CLAMPED_r600
    UINT64_C(72018011619328),	// LOG_IEEE_cm
    UINT64_C(72018011619328),	// LOG_IEEE_eg
    UINT64_C(54425825574912),	// LOG_IEEE_r600
    UINT64_C(9385501623440113664),	// LOOP_BREAK_EG
    UINT64_C(9547631210025451520),	// LOOP_BREAK_R600
    UINT64_C(12644383719424),	// LSHL_eg
    UINT64_C(62672162783232),	// LSHL_r600
    UINT64_C(12094627905536),	// LSHR_eg
    UINT64_C(62122406969344),	// LSHR_r600
    UINT64_C(0),
    UINT64_C(1649267441664),	// MAX
    UINT64_C(29686813949952),	// MAX_INT
    UINT64_C(30786325577728),	// MAX_UINT
    UINT64_C(2199023255552),	// MIN
    UINT64_C(30236569763840),	// MIN_INT
    UINT64_C(31336081391616),	// MIN_UINT
    UINT64_C(13743895347200),	// MOV
    UINT64_C(112150186033152),	// MOVA_INT_eg
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(549755813888),	// MUL
    UINT64_C(844424930131968),	// MULADD_IEEE_eg
    UINT64_C(703687441776640),	// MULADD_IEEE_r600
    UINT64_C(281474976710656),	// MULADD_INT24_cm
    UINT64_C(562949953421312),	// MULADD_UINT24_eg
    UINT64_C(703687441776640),	// MULADD_eg
    UINT64_C(562949953421312),	// MULADD_r600
    UINT64_C(79164837199872),	// MULHI_INT_cm
    UINT64_C(79164837199872),	// MULHI_INT_eg
    UINT64_C(63771674411008),	// MULHI_INT_r600
    UINT64_C(80264348827648),	// MULHI_UINT_cm
    UINT64_C(80264348827648),	// MULHI_UINT_eg
    UINT64_C(64871186038784),	// MULHI_UINT_r600
    UINT64_C(78615081385984),	// MULLO_INT_cm
    UINT64_C(78615081385984),	// MULLO_INT_eg
    UINT64_C(63221918597120),	// MULLO_INT_r600
    UINT64_C(79714593013760),	// MULLO_UINT_cm
    UINT64_C(79714593013760),	// MULLO_UINT_eg
    UINT64_C(64321430224896),	// MULLO_UINT_r600
    UINT64_C(1099511627776),	// MUL_IEEE
    UINT64_C(50027779063808),	// MUL_INT24_cm
    UINT64_C(1090715534753792),	// MUL_LIT_eg
    UINT64_C(422212465065984),	// MUL_LIT_r600
    UINT64_C(99505802313728),	// MUL_UINT24_eg
    UINT64_C(28037546508288),	// NOT_INT
    UINT64_C(26938034880512),	// OR_INT
    UINT64_C(0),	// PAD
    UINT64_C(9475573615987523584),	// POP_EG
    UINT64_C(9727775195120271360),	// POP_R600
    UINT64_C(17592186044416),	// PRED_SETE
    UINT64_C(36283883716608),	// PRED_SETE_INT
    UINT64_C(18691697672192),	// PRED_SETGE
    UINT64_C(37383395344384),	// PRED_SETGE_INT
    UINT64_C(18141941858304),	// PRED_SETGT
    UINT64_C(36833639530496),	// PRED_SETGT_INT
    UINT64_C(19241453486080),	// PRED_SETNE
    UINT64_C(37933151158272),	// PRED_SETNE_INT
    UINT64_C(0),
    UINT64_C(9223372036854775808),	// R600_ExportBuf
    UINT64_C(9223372040076001280),	// R600_ExportSwz
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(10772874191460901136),	// RAT_MSKOR
    UINT64_C(10790888589970383168),	// RAT_STORE_DWORD128
    UINT64_C(10790642299365761344),	// RAT_STORE_DWORD32
    UINT64_C(10790677483737850176),	// RAT_STORE_DWORD64
    UINT64_C(10790888589970382880),	// RAT_WRITE_CACHELESS_128_eg
    UINT64_C(10790642299365761056),	// RAT_WRITE_CACHELESS_32_eg
    UINT64_C(10790677483737849888),	// RAT_WRITE_CACHELESS_64_eg
    UINT64_C(74217034874880),	// RECIPSQRT_CLAMPED_cm
    UINT64_C(74217034874880),	// RECIPSQRT_CLAMPED_eg
    UINT64_C(56624848830464),	// RECIPSQRT_CLAMPED_r600
    UINT64_C(75316546502656),	// RECIPSQRT_IEEE_cm
    UINT64_C(75316546502656),	// RECIPSQRT_IEEE_eg
    UINT64_C(57724360458240),	// RECIPSQRT_IEEE_r600
    UINT64_C(72567767433216),	// RECIP_CLAMPED_cm
    UINT64_C(72567767433216),	// RECIP_CLAMPED_eg
    UINT64_C(54975581388800),	// RECIP_CLAMPED_r600
    UINT64_C(73667279060992),	// RECIP_IEEE_cm
    UINT64_C(73667279060992),	// RECIP_IEEE_eg
    UINT64_C(56075093016576),	// RECIP_IEEE_r600
    UINT64_C(81363860455424),	// RECIP_UINT_eg
    UINT64_C(65970697666560),	// RECIP_UINT_r600
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(10445360463872),	// RNDNE
    UINT64_C(4398046511104),	// SETE
    UINT64_C(6597069766656),	// SETE_DX10
    UINT64_C(31885837205504),	// SETE_INT
    UINT64_C(7696581394432),	// SETGE_DX10
    UINT64_C(32985348833280),	// SETGE_INT
    UINT64_C(34634616274944),	// SETGE_UINT
    UINT64_C(7146825580544),	// SETGT_DX10
    UINT64_C(32435593019392),	// SETGT_INT
    UINT64_C(34084860461056),	// SETGT_UINT
    UINT64_C(8246337208320),	// SETNE_DX10
    UINT64_C(33535104647168),	// SETNE_INT
    UINT64_C(5497558138880),	// SGE
    UINT64_C(4947802324992),	// SGT
    UINT64_C(77515569758208),	// SIN_cm
    UINT64_C(77515569758208),	// SIN_eg
    UINT64_C(60473139527680),	// SIN_r600
    UINT64_C(60473139527680),	// SIN_r700
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(6047313952768),	// SNE
    UINT64_C(29137058136064),	// SUB_INT
    UINT64_C(0),
    UINT64_C(2516582400),	// S_ABSDIFF_I32
    UINT64_C(3196072960),	// S_ABS_I32
    UINT64_C(2181038080),	// S_ADDC_U32
    UINT64_C(3078619136),	// S_ADDK_I32
    UINT64_C(2164260864),	// S_ADD_I32
    UINT64_C(2147483648),	// S_ADD_U32
    UINT64_C(2315255808),	// S_ANDN2_B32
    UINT64_C(2323644416),	// S_ANDN2_B64
    UINT64_C(3196069632),	// S_ANDN2_SAVEEXEC_B64
    UINT64_C(2264924160),	// S_AND_B32
    UINT64_C(2273312768),	// S_AND_B64
    UINT64_C(3196068864),	// S_AND_SAVEEXEC_B64
    UINT64_C(2432696320),	// S_ASHR_I32
    UINT64_C(2441084928),	// S_ASHR_I64
    UINT64_C(3213492224),	// S_BARRIER
    UINT64_C(2483027968),	// S_BFE_I32
    UINT64_C(2499805184),	// S_BFE_I64
    UINT64_C(2474639360),	// S_BFE_U32
    UINT64_C(2491416576),	// S_BFE_U64
    UINT64_C(2449473536),	// S_BFM_B32
    UINT64_C(2457862144),	// S_BFM_B64
    UINT64_C(3212967936),	// S_BRANCH
    UINT64_C(3196062464),	// S_BREV_B32
    UINT64_C(3196062720),	// S_BREV_B64
    UINT64_C(3271557376),	// S_BUFFER_LOAD_DWORDX16_IMM
    UINT64_C(3271557120),	// S_BUFFER_LOAD_DWORDX16_SGPR
    UINT64_C(3258974464),	// S_BUFFER_LOAD_DWORDX2_IMM
    UINT64_C(3258974208),	// S_BUFFER_LOAD_DWORDX2_SGPR
    UINT64_C(3263168768),	// S_BUFFER_LOAD_DWORDX4_IMM
    UINT64_C(3263168512),	// S_BUFFER_LOAD_DWORDX4_SGPR
    UINT64_C(3267363072),	// S_BUFFER_LOAD_DWORDX8_IMM
    UINT64_C(3267362816),	// S_BUFFER_LOAD_DWORDX8_SGPR
    UINT64_C(3254780160),	// S_BUFFER_LOAD_DWORD_IMM
    UINT64_C(3254779904),	// S_BUFFER_LOAD_DWORD_SGPR
    UINT64_C(3213426688),	// S_CBRANCH_EXECNZ
    UINT64_C(3213361152),	// S_CBRANCH_EXECZ
    UINT64_C(3213099008),	// S_CBRANCH_SCC0
    UINT64_C(3213164544),	// S_CBRANCH_SCC1
    UINT64_C(3213295616),	// S_CBRANCH_VCCNZ
    UINT64_C(3213230080),	// S_CBRANCH_VCCZ
    UINT64_C(2969567232),	// S_CMOVK_I32
    UINT64_C(3196060928),	// S_CMOV_B32
    UINT64_C(3196061184),	// S_CMOV_B64
    UINT64_C(3028287488),	// S_CMPK_EQ_U32
    UINT64_C(3003121664),	// S_CMPK_GE_I32
    UINT64_C(3053453312),	// S_CMPK_GE_U32
    UINT64_C(2994733056),	// S_CMPK_GT_I32
    UINT64_C(3045064704),	// S_CMPK_GT_U32
    UINT64_C(3019898880),	// S_CMPK_LE_I32
    UINT64_C(3070230528),	// S_CMPK_LE_U32
    UINT64_C(2986344448),	// S_CMPK_LG_I32
    UINT64_C(3036676096),	// S_CMPK_LG_U32
    UINT64_C(3011510272),	// S_CMPK_LT_I32
    UINT64_C(3061841920),	// S_CMPK_LT_U32
    UINT64_C(3204448256),	// S_CMP_EQ_I32
    UINT64_C(3204841472),	// S_CMP_EQ_U32
    UINT64_C(3204644864),	// S_CMP_GE_I32
    UINT64_C(3205038080),	// S_CMP_GE_U32
    UINT64_C(3204579328),	// S_CMP_GT_I32
    UINT64_C(3204972544),	// S_CMP_GT_U32
    UINT64_C(3204775936),	// S_CMP_LE_I32
    UINT64_C(3205169152),	// S_CMP_LE_U32
    UINT64_C(3204513792),	// S_CMP_LG_I32
    UINT64_C(3204907008),	// S_CMP_LG_U32
    UINT64_C(3204710400),	// S_CMP_LT_I32
    UINT64_C(3205103616),	// S_CMP_LT_U32
    UINT64_C(2231369728),	// S_CSELECT_B32
    UINT64_C(2239758336),	// S_CSELECT_B64
    UINT64_C(3212902400),	// S_ENDPGM
    UINT64_C(3196065536),	// S_FLBIT_I32
    UINT64_C(3196067584),	// S_GETPC_B64
    UINT64_C(3103784960),	// S_GETREG_B32
    UINT64_C(3120562176),	// S_GETREG_REGRD_B32
    UINT64_C(3238002944),	// S_LOAD_DWORDX16_IMM
    UINT64_C(3238002688),	// S_LOAD_DWORDX16_SGPR
    UINT64_C(3225420032),	// S_LOAD_DWORDX2_IMM
    UINT64_C(3225419776),	// S_LOAD_DWORDX2_SGPR
    UINT64_C(3229614336),	// S_LOAD_DWORDX4_IMM
    UINT64_C(3229614080),	// S_LOAD_DWORDX4_SGPR
    UINT64_C(3233808640),	// S_LOAD_DWORDX8_IMM
    UINT64_C(3233808384),	// S_LOAD_DWORDX8_SGPR
    UINT64_C(3221225728),	// S_LOAD_DWORD_IMM
    UINT64_C(3221225472),	// S_LOAD_DWORD_SGPR
    UINT64_C(2399141888),	// S_LSHL_B32
    UINT64_C(2407530496),	// S_LSHL_B64
    UINT64_C(2415919104),	// S_LSHR_B32
    UINT64_C(2424307712),	// S_LSHR_B64
    UINT64_C(2214592512),	// S_MAX_I32
    UINT64_C(2222981120),	// S_MAX_U32
    UINT64_C(2197815296),	// S_MIN_I32
    UINT64_C(2206203904),	// S_MIN_U32
    UINT64_C(2952790016),	// S_MOVK_I32
    UINT64_C(3196071936),	// S_MOVRELD_B32
    UINT64_C(3196072192),	// S_MOVRELD_B64
    UINT64_C(3196071424),	// S_MOVRELS_B32
    UINT64_C(3196071680),	// S_MOVRELS_B64
    UINT64_C(3196060416),	// S_MOV_B32
    UINT64_C(3196060672),	// S_MOV_B64
    UINT64_C(3196073216),	// S_MOV_FED_B32
    UINT64_C(3196072704),	// S_MOV_REGRD_B32
    UINT64_C(3087007744),	// S_MULK_I32
    UINT64_C(2466250752),	// S_MUL_I32
    UINT64_C(2348810240),	// S_NAND_B32
    UINT64_C(2357198848),	// S_NAND_B64
    UINT64_C(3196070144),	// S_NAND_SAVEEXEC_B64
    UINT64_C(2365587456),	// S_NOR_B32
    UINT64_C(2373976064),	// S_NOR_B64
    UINT64_C(3196070400),	// S_NOR_SAVEEXEC_B64
    UINT64_C(3196061440),	// S_NOT_B32
    UINT64_C(3196061696),	// S_NOT_B64
    UINT64_C(2332033024),	// S_ORN2_B32
    UINT64_C(2340421632),	// S_ORN2_B64
    UINT64_C(3196069888),	// S_ORN2_SAVEEXEC_B64
    UINT64_C(2281701376),	// S_OR_B32
    UINT64_C(2290089984),	// S_OR_B64
    UINT64_C(3196069120),	// S_OR_SAVEEXEC_B64
    UINT64_C(3196070912),	// S_QUADMASK_B32
    UINT64_C(3196071168),	// S_QUADMASK_B64
    UINT64_C(3196068352),	// S_RFE_B64
    UINT64_C(3196067840),	// S_SETPC_B64
    UINT64_C(3112173568),	// S_SETREG_B32
    UINT64_C(2189426688),	// S_SUBB_U32
    UINT64_C(2172649472),	// S_SUB_I32
    UINT64_C(2155872256),	// S_SUB_U32
    UINT64_C(3196068096),	// S_SWAPPC_B64
    UINT64_C(3213623296),	// S_WAITCNT
    UINT64_C(3196061952),	// S_WQM_B32
    UINT64_C(3196062208),	// S_WQM_B64
    UINT64_C(2382364672),	// S_XNOR_B32
    UINT64_C(2390753280),	// S_XNOR_B64
    UINT64_C(3196070656),	// S_XNOR_SAVEEXEC_B64
    UINT64_C(2298478592),	// S_XOR_B32
    UINT64_C(2306867200),	// S_XOR_B64
    UINT64_C(3196069376),	// S_XOR_SAVEEXEC_B64
    UINT64_C(3892510720),	// TBUFFER_LOAD_FORMAT_XYZW
    UINT64_C(3892576256),	// TBUFFER_STORE_FORMAT_X
    UINT64_C(3892641792),	// TBUFFER_STORE_FORMAT_XY
    UINT64_C(3892707328),	// TBUFFER_STORE_FORMAT_XYZ
    UINT64_C(3892772864),	// TBUFFER_STORE_FORMAT_XYZW
    UINT64_C(7),	// TEX_GET_GRADIENTS_H
    UINT64_C(8),	// TEX_GET_GRADIENTS_V
    UINT64_C(4),	// TEX_GET_TEXTURE_RESINFO
    UINT64_C(3),	// TEX_LD
    UINT64_C(35),	// TEX_LDPTR
    UINT64_C(16),	// TEX_SAMPLE
    UINT64_C(24),	// TEX_SAMPLE_C
    UINT64_C(28),	// TEX_SAMPLE_C_G
    UINT64_C(25),	// TEX_SAMPLE_C_L
    UINT64_C(26),	// TEX_SAMPLE_C_LB
    UINT64_C(20),	// TEX_SAMPLE_G
    UINT64_C(17),	// TEX_SAMPLE_L
    UINT64_C(18),	// TEX_SAMPLE_LB
    UINT64_C(11),	// TEX_SET_GRADIENTS_H
    UINT64_C(12),	// TEX_SET_GRADIENTS_V
    UINT64_C(16775081780284751936),	// TEX_VTX_CONSTBUF
    UINT64_C(9236056004066541632),	// TEX_VTX_TEXBUF
    UINT64_C(9345848836096),	// TRUNC
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(85761906966528),	// UINT_TO_FLT_eg
    UINT64_C(59923383713792),	// UINT_TO_FLT_r600
    UINT64_C(1769087820812517696),	// VTX_READ_GLOBAL_128_cm
    UINT64_C(1769087821886259520),	// VTX_READ_GLOBAL_128_eg
    UINT64_C(1251983104222953792),	// VTX_READ_GLOBAL_16_cm
    UINT64_C(1251983104357171520),	// VTX_READ_GLOBAL_16_eg
    UINT64_C(1396098292298809664),	// VTX_READ_GLOBAL_32_cm
    UINT64_C(1396098292567245120),	// VTX_READ_GLOBAL_32_eg
    UINT64_C(1684223115334254912),	// VTX_READ_GLOBAL_64_cm
    UINT64_C(1684223115871125824),	// VTX_READ_GLOBAL_64_eg
    UINT64_C(1179925510185025856),	// VTX_READ_GLOBAL_8_cm
    UINT64_C(1179925510252134720),	// VTX_READ_GLOBAL_8_eg
    UINT64_C(1769087820812517440),	// VTX_READ_PARAM_128_cm
    UINT64_C(1769087821886259264),	// VTX_READ_PARAM_128_eg
    UINT64_C(1251983104222953536),	// VTX_READ_PARAM_16_cm
    UINT64_C(1251983104357171264),	// VTX_READ_PARAM_16_eg
    UINT64_C(1396098292298809408),	// VTX_READ_PARAM_32_cm
    UINT64_C(1396098292567244864),	// VTX_READ_PARAM_32_eg
    UINT64_C(1684223115334254656),	// VTX_READ_PARAM_64_cm
    UINT64_C(1684223115871125568),	// VTX_READ_PARAM_64_eg
    UINT64_C(1179925510185025600),	// VTX_READ_PARAM_8_cm
    UINT64_C(1179925510252134464),	// VTX_READ_PARAM_8_eg
    UINT64_C(1342177280),	// V_ADDC_U32_e32
    UINT64_C(144115191604341248),	// V_ADDC_U32_e64
    UINT64_C(100663296),	// V_ADD_F32_e32
    UINT64_C(144115191599464448),	// V_ADD_F32_e64
    UINT64_C(3536322560),	// V_ADD_F64
    UINT64_C(1241513984),	// V_ADD_I32_e32
    UINT64_C(144115191603948032),	// V_ADD_I32_e64
    UINT64_C(3533438976),	// V_ALIGNBIT_B32
    UINT64_C(3533570048),	// V_ALIGNBYTE_B32
    UINT64_C(905969664),	// V_AND_B32_e32
    UINT64_C(144115191602610176),	// V_AND_B32_e64
    UINT64_C(805306368),	// V_ASHRREV_I32_e32
    UINT64_C(144115191602216960),	// V_ASHRREV_I32_e64
    UINT64_C(771751936),	// V_ASHR_I32_e32
    UINT64_C(144115191602085888),	// V_ASHR_I32_e64
    UINT64_C(144115191612047360),	// V_ASHR_I64
    UINT64_C(3532783616),	// V_BFE_I32
    UINT64_C(3532652544),	// V_BFE_U32
    UINT64_C(3532914688),	// V_BFI_B32
    UINT64_C(1006632960),	// V_BFM_B32_e32
    UINT64_C(144115191603003392),	// V_BFM_B32_e64
    UINT64_C(2113957888),	// V_BFREV_B32_e32
    UINT64_C(144396666599899136),	// V_BFREV_B32_e64
    UINT64_C(2113946624),	// V_CEIL_F32_e32
    UINT64_C(144396666597015552),	// V_CEIL_F32_e64
    UINT64_C(2091122688),	// V_CMPSX_EQ_F32_e32
    UINT64_C(144115191576264704),	// V_CMPSX_EQ_F32_e64
    UINT64_C(2095316992),	// V_CMPSX_EQ_F64_e32
    UINT64_C(144115191580459008),	// V_CMPSX_EQ_F64_e64
    UINT64_C(2090860544),	// V_CMPSX_F_F32_e32
    UINT64_C(144115191576002560),	// V_CMPSX_F_F32_e64
    UINT64_C(2095054848),	// V_CMPSX_F_F64_e32
    UINT64_C(144115191580196864),	// V_CMPSX_F_F64_e64
    UINT64_C(2091646976),	// V_CMPSX_GE_F32_e32
    UINT64_C(144115191576788992),	// V_CMPSX_GE_F32_e64
    UINT64_C(2095841280),	// V_CMPSX_GE_F64_e32
    UINT64_C(144115191580983296),	// V_CMPSX_GE_F64_e64
    UINT64_C(2091384832),	// V_CMPSX_GT_F32_e32
    UINT64_C(144115191576526848),	// V_CMPSX_GT_F32_e64
    UINT64_C(2095579136),	// V_CMPSX_GT_F64_e32
    UINT64_C(144115191580721152),	// V_CMPSX_GT_F64_e64
    UINT64_C(2091253760),	// V_CMPSX_LE_F32_e32
    UINT64_C(144115191576395776),	// V_CMPSX_LE_F32_e64
    UINT64_C(2095448064),	// V_CMPSX_LE_F64_e32
    UINT64_C(144115191580590080),	// V_CMPSX_LE_F64_e64
    UINT64_C(2091515904),	// V_CMPSX_LG_F32_e32
    UINT64_C(144115191576657920),	// V_CMPSX_LG_F32_e64
    UINT64_C(2095710208),	// V_CMPSX_LG_F64_e32
    UINT64_C(144115191580852224),	// V_CMPSX_LG_F64_e64
    UINT64_C(2090991616),	// V_CMPSX_LT_F32_e32
    UINT64_C(144115191576133632),	// V_CMPSX_LT_F32_e64
    UINT64_C(2095185920),	// V_CMPSX_LT_F64_e32
    UINT64_C(144115191580327936),	// V_CMPSX_LT_F64_e64
    UINT64_C(2092564480),	// V_CMPSX_NEQ_F32_e32
    UINT64_C(144115191577706496),	// V_CMPSX_NEQ_F32_e64
    UINT64_C(2096758784),	// V_CMPSX_NEQ_F64_e32
    UINT64_C(144115191581900800),	// V_CMPSX_NEQ_F64_e64
    UINT64_C(2092040192),	// V_CMPSX_NGE_F32_e32
    UINT64_C(144115191577182208),	// V_CMPSX_NGE_F32_e64
    UINT64_C(2096234496),	// V_CMPSX_NGE_F64_e32
    UINT64_C(144115191581376512),	// V_CMPSX_NGE_F64_e64
    UINT64_C(2092302336),	// V_CMPSX_NGT_F32_e32
    UINT64_C(144115191577444352),	// V_CMPSX_NGT_F32_e64
    UINT64_C(2096496640),	// V_CMPSX_NGT_F64_e32
    UINT64_C(144115191581638656),	// V_CMPSX_NGT_F64_e64
    UINT64_C(2092433408),	// V_CMPSX_NLE_F32_e32
    UINT64_C(144115191577575424),	// V_CMPSX_NLE_F32_e64
    UINT64_C(2096627712),	// V_CMPSX_NLE_F64_e32
    UINT64_C(144115191581769728),	// V_CMPSX_NLE_F64_e64
    UINT64_C(2092171264),	// V_CMPSX_NLG_F32_e32
    UINT64_C(144115191577313280),	// V_CMPSX_NLG_F32_e64
    UINT64_C(2096365568),	// V_CMPSX_NLG_F64_e32
    UINT64_C(144115191581507584),	// V_CMPSX_NLG_F64_e64
    UINT64_C(2092695552),	// V_CMPSX_NLT_F32_e32
    UINT64_C(144115191577837568),	// V_CMPSX_NLT_F32_e64
    UINT64_C(2096889856),	// V_CMPSX_NLT_F64_e32
    UINT64_C(144115191582031872),	// V_CMPSX_NLT_F64_e64
    UINT64_C(2091778048),	// V_CMPSX_O_F32_e32
    UINT64_C(144115191576920064),	// V_CMPSX_O_F32_e64
    UINT64_C(2095972352),	// V_CMPSX_O_F64_e32
    UINT64_C(144115191581114368),	// V_CMPSX_O_F64_e64
    UINT64_C(2092826624),	// V_CMPSX_TRU_F32_e32
    UINT64_C(144115191577968640),	// V_CMPSX_TRU_F32_e64
    UINT64_C(2097020928),	// V_CMPSX_TRU_F64_e32
    UINT64_C(144115191582162944),	// V_CMPSX_TRU_F64_e64
    UINT64_C(2091909120),	// V_CMPSX_U_F32_e32
    UINT64_C(144115191577051136),	// V_CMPSX_U_F32_e64
    UINT64_C(2096103424),	// V_CMPSX_U_F64_e32
    UINT64_C(144115191581245440),	// V_CMPSX_U_F64_e64
    UINT64_C(2089025536),	// V_CMPS_EQ_F32_e32
    UINT64_C(144115191574167552),	// V_CMPS_EQ_F32_e64
    UINT64_C(2093219840),	// V_CMPS_EQ_F64_e32
    UINT64_C(144115191578361856),	// V_CMPS_EQ_F64_e64
    UINT64_C(2088763392),	// V_CMPS_F_F32_e32
    UINT64_C(144115191573905408),	// V_CMPS_F_F32_e64
    UINT64_C(2092957696),	// V_CMPS_F_F64_e32
    UINT64_C(144115191578099712),	// V_CMPS_F_F64_e64
    UINT64_C(2089549824),	// V_CMPS_GE_F32_e32
    UINT64_C(144115191574691840),	// V_CMPS_GE_F32_e64
    UINT64_C(2093744128),	// V_CMPS_GE_F64_e32
    UINT64_C(144115191578886144),	// V_CMPS_GE_F64_e64
    UINT64_C(2089287680),	// V_CMPS_GT_F32_e32
    UINT64_C(144115191574429696),	// V_CMPS_GT_F32_e64
    UINT64_C(2093481984),	// V_CMPS_GT_F64_e32
    UINT64_C(144115191578624000),	// V_CMPS_GT_F64_e64
    UINT64_C(2089156608),	// V_CMPS_LE_F32_e32
    UINT64_C(144115191574298624),	// V_CMPS_LE_F32_e64
    UINT64_C(2093350912),	// V_CMPS_LE_F64_e32
    UINT64_C(144115191578492928),	// V_CMPS_LE_F64_e64
    UINT64_C(2089418752),	// V_CMPS_LG_F32_e32
    UINT64_C(144115191574560768),	// V_CMPS_LG_F32_e64
    UINT64_C(2093613056),	// V_CMPS_LG_F64_e32
    UINT64_C(144115191578755072),	// V_CMPS_LG_F64_e64
    UINT64_C(2088894464),	// V_CMPS_LT_F32_e32
    UINT64_C(144115191574036480),	// V_CMPS_LT_F32_e64
    UINT64_C(2093088768),	// V_CMPS_LT_F64_e32
    UINT64_C(144115191578230784),	// V_CMPS_LT_F64_e64
    UINT64_C(2090467328),	// V_CMPS_NEQ_F32_e32
    UINT64_C(144115191575609344),	// V_CMPS_NEQ_F32_e64
    UINT64_C(2094661632),	// V_CMPS_NEQ_F64_e32
    UINT64_C(144115191579803648),	// V_CMPS_NEQ_F64_e64
    UINT64_C(2089943040),	// V_CMPS_NGE_F32_e32
    UINT64_C(144115191575085056),	// V_CMPS_NGE_F32_e64
    UINT64_C(2094137344),	// V_CMPS_NGE_F64_e32
    UINT64_C(144115191579279360),	// V_CMPS_NGE_F64_e64
    UINT64_C(2090205184),	// V_CMPS_NGT_F32_e32
    UINT64_C(144115191575347200),	// V_CMPS_NGT_F32_e64
    UINT64_C(2094399488),	// V_CMPS_NGT_F64_e32
    UINT64_C(144115191579541504),	// V_CMPS_NGT_F64_e64
    UINT64_C(2090336256),	// V_CMPS_NLE_F32_e32
    UINT64_C(144115191575478272),	// V_CMPS_NLE_F32_e64
    UINT64_C(2094530560),	// V_CMPS_NLE_F64_e32
    UINT64_C(144115191579672576),	// V_CMPS_NLE_F64_e64
    UINT64_C(2090074112),	// V_CMPS_NLG_F32_e32
    UINT64_C(144115191575216128),	// V_CMPS_NLG_F32_e64
    UINT64_C(2094268416),	// V_CMPS_NLG_F64_e32
    UINT64_C(144115191579410432),	// V_CMPS_NLG_F64_e64
    UINT64_C(2090598400),	// V_CMPS_NLT_F32_e32
    UINT64_C(144115191575740416),	// V_CMPS_NLT_F32_e64
    UINT64_C(2094792704),	// V_CMPS_NLT_F64_e32
    UINT64_C(144115191579934720),	// V_CMPS_NLT_F64_e64
    UINT64_C(2089680896),	// V_CMPS_O_F32_e32
    UINT64_C(144115191574822912),	// V_CMPS_O_F32_e64
    UINT64_C(2093875200),	// V_CMPS_O_F64_e32
    UINT64_C(144115191579017216),	// V_CMPS_O_F64_e64
    UINT64_C(2090729472),	// V_CMPS_TRU_F32_e32
    UINT64_C(144115191575871488),	// V_CMPS_TRU_F32_e64
    UINT64_C(2094923776),	// V_CMPS_TRU_F64_e32
    UINT64_C(144115191580065792),	// V_CMPS_TRU_F64_e64
    UINT64_C(2089811968),	// V_CMPS_U_F32_e32
    UINT64_C(144115191574953984),	// V_CMPS_U_F32_e64
    UINT64_C(2094006272),	// V_CMPS_U_F64_e32
    UINT64_C(144115191579148288),	// V_CMPS_U_F64_e64
    UINT64_C(2100297728),	// V_CMPX_CLASS_F32_e32
    UINT64_C(144115191585439744),	// V_CMPX_CLASS_F32_e64
    UINT64_C(2104492032),	// V_CMPX_CLASS_F64_e32
    UINT64_C(144115191589634048),	// V_CMPX_CLASS_F64_e64
    UINT64_C(2082734080),	// V_CMPX_EQ_F32_e32
    UINT64_C(144115191567876096),	// V_CMPX_EQ_F32_e64
    UINT64_C(2086928384),	// V_CMPX_EQ_F64_e32
    UINT64_C(144115191572070400),	// V_CMPX_EQ_F64_e64
    UINT64_C(2099511296),	// V_CMPX_EQ_I32_e32
    UINT64_C(144115191584653312),	// V_CMPX_EQ_I32_e64
    UINT64_C(2103705600),	// V_CMPX_EQ_I64_e32
    UINT64_C(144115191588847616),	// V_CMPX_EQ_I64_e64
    UINT64_C(2107899904),	// V_CMPX_EQ_U32_e32
    UINT64_C(144115191593041920),	// V_CMPX_EQ_U32_e64
    UINT64_C(2112094208),	// V_CMPX_EQ_U64_e32
    UINT64_C(144115191597236224),	// V_CMPX_EQ_U64_e64
    UINT64_C(2082471936),	// V_CMPX_F_F32_e32
    UINT64_C(144115191567613952),	// V_CMPX_F_F32_e64
    UINT64_C(2086666240),	// V_CMPX_F_F64_e32
    UINT64_C(144115191571808256),	// V_CMPX_F_F64_e64
    UINT64_C(2099249152),	// V_CMPX_F_I32_e32
    UINT64_C(144115191584391168),	// V_CMPX_F_I32_e64
    UINT64_C(2103443456),	// V_CMPX_F_I64_e32
    UINT64_C(144115191588585472),	// V_CMPX_F_I64_e64
    UINT64_C(2107637760),	// V_CMPX_F_U32_e32
    UINT64_C(144115191592779776),	// V_CMPX_F_U32_e64
    UINT64_C(2111832064),	// V_CMPX_F_U64_e32
    UINT64_C(144115191596974080),	// V_CMPX_F_U64_e64
    UINT64_C(2083258368),	// V_CMPX_GE_F32_e32
    UINT64_C(144115191568400384),	// V_CMPX_GE_F32_e64
    UINT64_C(2087452672),	// V_CMPX_GE_F64_e32
    UINT64_C(144115191572594688),	// V_CMPX_GE_F64_e64
    UINT64_C(2100035584),	// V_CMPX_GE_I32_e32
    UINT64_C(144115191585177600),	// V_CMPX_GE_I32_e64
    UINT64_C(2104229888),	// V_CMPX_GE_I64_e32
    UINT64_C(144115191589371904),	// V_CMPX_GE_I64_e64
    UINT64_C(2108424192),	// V_CMPX_GE_U32_e32
    UINT64_C(144115191593566208),	// V_CMPX_GE_U32_e64
    UINT64_C(2112618496),	// V_CMPX_GE_U64_e32
    UINT64_C(144115191597760512),	// V_CMPX_GE_U64_e64
    UINT64_C(2082996224),	// V_CMPX_GT_F32_e32
    UINT64_C(144115191568138240),	// V_CMPX_GT_F32_e64
    UINT64_C(2087190528),	// V_CMPX_GT_F64_e32
    UINT64_C(144115191572332544),	// V_CMPX_GT_F64_e64
    UINT64_C(2099773440),	// V_CMPX_GT_I32_e32
    UINT64_C(144115191584915456),	// V_CMPX_GT_I32_e64
    UINT64_C(2103967744),	// V_CMPX_GT_I64_e32
    UINT64_C(144115191589109760),	// V_CMPX_GT_I64_e64
    UINT64_C(2108162048),	// V_CMPX_GT_U32_e32
    UINT64_C(144115191593304064),	// V_CMPX_GT_U32_e64
    UINT64_C(2112356352),	// V_CMPX_GT_U64_e32
    UINT64_C(144115191597498368),	// V_CMPX_GT_U64_e64
    UINT64_C(2082865152),	// V_CMPX_LE_F32_e32
    UINT64_C(144115191568007168),	// V_CMPX_LE_F32_e64
    UINT64_C(2087059456),	// V_CMPX_LE_F64_e32
    UINT64_C(144115191572201472),	// V_CMPX_LE_F64_e64
    UINT64_C(2099642368),	// V_CMPX_LE_I32_e32
    UINT64_C(144115191584784384),	// V_CMPX_LE_I32_e64
    UINT64_C(2103836672),	// V_CMPX_LE_I64_e32
    UINT64_C(144115191588978688),	// V_CMPX_LE_I64_e64
    UINT64_C(2108030976),	// V_CMPX_LE_U32_e32
    UINT64_C(144115191593172992),	// V_CMPX_LE_U32_e64
    UINT64_C(2112225280),	// V_CMPX_LE_U64_e32
    UINT64_C(144115191597367296),	// V_CMPX_LE_U64_e64
    UINT64_C(2083127296),	// V_CMPX_LG_F32_e32
    UINT64_C(144115191568269312),	// V_CMPX_LG_F32_e64
    UINT64_C(2087321600),	// V_CMPX_LG_F64_e32
    UINT64_C(144115191572463616),	// V_CMPX_LG_F64_e64
    UINT64_C(2082603008),	// V_CMPX_LT_F32_e32
    UINT64_C(144115191567745024),	// V_CMPX_LT_F32_e64
    UINT64_C(2086797312),	// V_CMPX_LT_F64_e32
    UINT64_C(144115191571939328),	// V_CMPX_LT_F64_e64
    UINT64_C(2099380224),	// V_CMPX_LT_I32_e32
    UINT64_C(144115191584522240),	// V_CMPX_LT_I32_e64
    UINT64_C(2103574528),	// V_CMPX_LT_I64_e32
    UINT64_C(144115191588716544),	// V_CMPX_LT_I64_e64
    UINT64_C(2107768832),	// V_CMPX_LT_U32_e32
    UINT64_C(144115191592910848),	// V_CMPX_LT_U32_e64
    UINT64_C(2111963136),	// V_CMPX_LT_U64_e32
    UINT64_C(144115191597105152),	// V_CMPX_LT_U64_e64
    UINT64_C(2084175872),	// V_CMPX_NEQ_F32_e32
    UINT64_C(144115191569317888),	// V_CMPX_NEQ_F32_e64
    UINT64_C(2088370176),	// V_CMPX_NEQ_F64_e32
    UINT64_C(144115191573512192),	// V_CMPX_NEQ_F64_e64
    UINT64_C(2099904512),	// V_CMPX_NE_I32_e32
    UINT64_C(144115191585046528),	// V_CMPX_NE_I32_e64
    UINT64_C(2104098816),	// V_CMPX_NE_I64_e32
    UINT64_C(144115191589240832),	// V_CMPX_NE_I64_e64
    UINT64_C(2108293120),	// V_CMPX_NE_U32_e32
    UINT64_C(144115191593435136),	// V_CMPX_NE_U32_e64
    UINT64_C(2112487424),	// V_CMPX_NE_U64_e32
    UINT64_C(144115191597629440),	// V_CMPX_NE_U64_e64
    UINT64_C(2083651584),	// V_CMPX_NGE_F32_e32
    UINT64_C(144115191568793600),	// V_CMPX_NGE_F32_e64
    UINT64_C(2087845888),	// V_CMPX_NGE_F64_e32
    UINT64_C(144115191572987904),	// V_CMPX_NGE_F64_e64
    UINT64_C(2083913728),	// V_CMPX_NGT_F32_e32
    UINT64_C(144115191569055744),	// V_CMPX_NGT_F32_e64
    UINT64_C(2088108032),	// V_CMPX_NGT_F64_e32
    UINT64_C(144115191573250048),	// V_CMPX_NGT_F64_e64
    UINT64_C(2084044800),	// V_CMPX_NLE_F32_e32
    UINT64_C(144115191569186816),	// V_CMPX_NLE_F32_e64
    UINT64_C(2088239104),	// V_CMPX_NLE_F64_e32
    UINT64_C(144115191573381120),	// V_CMPX_NLE_F64_e64
    UINT64_C(2083782656),	// V_CMPX_NLG_F32_e32
    UINT64_C(144115191568924672),	// V_CMPX_NLG_F32_e64
    UINT64_C(2087976960),	// V_CMPX_NLG_F64_e32
    UINT64_C(144115191573118976),	// V_CMPX_NLG_F64_e64
    UINT64_C(2084306944),	// V_CMPX_NLT_F32_e32
    UINT64_C(144115191569448960),	// V_CMPX_NLT_F32_e64
    UINT64_C(2088501248),	// V_CMPX_NLT_F64_e32
    UINT64_C(144115191573643264),	// V_CMPX_NLT_F64_e64
    UINT64_C(2083389440),	// V_CMPX_O_F32_e32
    UINT64_C(144115191568531456),	// V_CMPX_O_F32_e64
    UINT64_C(2087583744),	// V_CMPX_O_F64_e32
    UINT64_C(144115191572725760),	// V_CMPX_O_F64_e64
    UINT64_C(2084438016),	// V_CMPX_TRU_F32_e32
    UINT64_C(144115191569580032),	// V_CMPX_TRU_F32_e64
    UINT64_C(2088632320),	// V_CMPX_TRU_F64_e32
    UINT64_C(144115191573774336),	// V_CMPX_TRU_F64_e64
    UINT64_C(2100166656),	// V_CMPX_T_I32_e32
    UINT64_C(144115191585308672),	// V_CMPX_T_I32_e64
    UINT64_C(2104360960),	// V_CMPX_T_I64_e32
    UINT64_C(144115191589502976),	// V_CMPX_T_I64_e64
    UINT64_C(2108555264),	// V_CMPX_T_U32_e32
    UINT64_C(144115191593697280),	// V_CMPX_T_U32_e64
    UINT64_C(2112749568),	// V_CMPX_T_U64_e32
    UINT64_C(144115191597891584),	// V_CMPX_T_U64_e64
    UINT64_C(2083520512),	// V_CMPX_U_F32_e32
    UINT64_C(144115191568662528),	// V_CMPX_U_F32_e64
    UINT64_C(2087714816),	// V_CMPX_U_F64_e32
    UINT64_C(144115191572856832),	// V_CMPX_U_F64_e64
    UINT64_C(2098200576),	// V_CMP_CLASS_F32_e32
    UINT64_C(144115191583342592),	// V_CMP_CLASS_F32_e64
    UINT64_C(2102394880),	// V_CMP_CLASS_F64_e32
    UINT64_C(144115191587536896),	// V_CMP_CLASS_F64_e64
    UINT64_C(2080636928),	// V_CMP_EQ_F32_e32
    UINT64_C(144115191565778944),	// V_CMP_EQ_F32_e64
    UINT64_C(2084831232),	// V_CMP_EQ_F64_e32
    UINT64_C(144115191569973248),	// V_CMP_EQ_F64_e64
    UINT64_C(2097414144),	// V_CMP_EQ_I32_e32
    UINT64_C(144115191582556160),	// V_CMP_EQ_I32_e64
    UINT64_C(2101608448),	// V_CMP_EQ_I64_e32
    UINT64_C(144115191586750464),	// V_CMP_EQ_I64_e64
    UINT64_C(2105802752),	// V_CMP_EQ_U32_e32
    UINT64_C(144115191590944768),	// V_CMP_EQ_U32_e64
    UINT64_C(2109997056),	// V_CMP_EQ_U64_e32
    UINT64_C(144115191595139072),	// V_CMP_EQ_U64_e64
    UINT64_C(2080374784),	// V_CMP_F_F32_e32
    UINT64_C(144115191565516800),	// V_CMP_F_F32_e64
    UINT64_C(2084569088),	// V_CMP_F_F64_e32
    UINT64_C(144115191569711104),	// V_CMP_F_F64_e64
    UINT64_C(2097152000),	// V_CMP_F_I32_e32
    UINT64_C(144115191582294016),	// V_CMP_F_I32_e64
    UINT64_C(2101346304),	// V_CMP_F_I64_e32
    UINT64_C(144115191586488320),	// V_CMP_F_I64_e64
    UINT64_C(2105540608),	// V_CMP_F_U32_e32
    UINT64_C(144115191590682624),	// V_CMP_F_U32_e64
    UINT64_C(2109734912),	// V_CMP_F_U64_e32
    UINT64_C(144115191594876928),	// V_CMP_F_U64_e64
    UINT64_C(2081161216),	// V_CMP_GE_F32_e32
    UINT64_C(144115191566303232),	// V_CMP_GE_F32_e64
    UINT64_C(2085355520),	// V_CMP_GE_F64_e32
    UINT64_C(144115191570497536),	// V_CMP_GE_F64_e64
    UINT64_C(2097938432),	// V_CMP_GE_I32_e32
    UINT64_C(144115191583080448),	// V_CMP_GE_I32_e64
    UINT64_C(2102132736),	// V_CMP_GE_I64_e32
    UINT64_C(144115191587274752),	// V_CMP_GE_I64_e64
    UINT64_C(2106327040),	// V_CMP_GE_U32_e32
    UINT64_C(144115191591469056),	// V_CMP_GE_U32_e64
    UINT64_C(2110521344),	// V_CMP_GE_U64_e32
    UINT64_C(144115191595663360),	// V_CMP_GE_U64_e64
    UINT64_C(2080899072),	// V_CMP_GT_F32_e32
    UINT64_C(144115191566041088),	// V_CMP_GT_F32_e64
    UINT64_C(2085093376),	// V_CMP_GT_F64_e32
    UINT64_C(144115191570235392),	// V_CMP_GT_F64_e64
    UINT64_C(2097676288),	// V_CMP_GT_I32_e32
    UINT64_C(144115191582818304),	// V_CMP_GT_I32_e64
    UINT64_C(2101870592),	// V_CMP_GT_I64_e32
    UINT64_C(144115191587012608),	// V_CMP_GT_I64_e64
    UINT64_C(2106064896),	// V_CMP_GT_U32_e32
    UINT64_C(144115191591206912),	// V_CMP_GT_U32_e64
    UINT64_C(2110259200),	// V_CMP_GT_U64_e32
    UINT64_C(144115191595401216),	// V_CMP_GT_U64_e64
    UINT64_C(2080768000),	// V_CMP_LE_F32_e32
    UINT64_C(144115191565910016),	// V_CMP_LE_F32_e64
    UINT64_C(2084962304),	// V_CMP_LE_F64_e32
    UINT64_C(144115191570104320),	// V_CMP_LE_F64_e64
    UINT64_C(2097545216),	// V_CMP_LE_I32_e32
    UINT64_C(144115191582687232),	// V_CMP_LE_I32_e64
    UINT64_C(2101739520),	// V_CMP_LE_I64_e32
    UINT64_C(144115191586881536),	// V_CMP_LE_I64_e64
    UINT64_C(2105933824),	// V_CMP_LE_U32_e32
    UINT64_C(144115191591075840),	// V_CMP_LE_U32_e64
    UINT64_C(2110128128),	// V_CMP_LE_U64_e32
    UINT64_C(144115191595270144),	// V_CMP_LE_U64_e64
    UINT64_C(2081030144),	// V_CMP_LG_F32_e32
    UINT64_C(144115191566172160),	// V_CMP_LG_F32_e64
    UINT64_C(2085224448),	// V_CMP_LG_F64_e32
    UINT64_C(144115191570366464),	// V_CMP_LG_F64_e64
    UINT64_C(2080505856),	// V_CMP_LT_F32_e32
    UINT64_C(144115191565647872),	// V_CMP_LT_F32_e64
    UINT64_C(2084700160),	// V_CMP_LT_F64_e32
    UINT64_C(144115191569842176),	// V_CMP_LT_F64_e64
    UINT64_C(2097283072),	// V_CMP_LT_I32_e32
    UINT64_C(144115191582425088),	// V_CMP_LT_I32_e64
    UINT64_C(2101477376),	// V_CMP_LT_I64_e32
    UINT64_C(144115191586619392),	// V_CMP_LT_I64_e64
    UINT64_C(2105671680),	// V_CMP_LT_U32_e32
    UINT64_C(144115191590813696),	// V_CMP_LT_U32_e64
    UINT64_C(2109865984),	// V_CMP_LT_U64_e32
    UINT64_C(144115191595008000),	// V_CMP_LT_U64_e64
    UINT64_C(2082078720),	// V_CMP_NEQ_F32_e32
    UINT64_C(144115191567220736),	// V_CMP_NEQ_F32_e64
    UINT64_C(2086273024),	// V_CMP_NEQ_F64_e32
    UINT64_C(144115191571415040),	// V_CMP_NEQ_F64_e64
    UINT64_C(2097807360),	// V_CMP_NE_I32_e32
    UINT64_C(144115191582949376),	// V_CMP_NE_I32_e64
    UINT64_C(2102001664),	// V_CMP_NE_I64_e32
    UINT64_C(144115191587143680),	// V_CMP_NE_I64_e64
    UINT64_C(2106195968),	// V_CMP_NE_U32_e32
    UINT64_C(144115191591337984),	// V_CMP_NE_U32_e64
    UINT64_C(2110390272),	// V_CMP_NE_U64_e32
    UINT64_C(144115191595532288),	// V_CMP_NE_U64_e64
    UINT64_C(2081554432),	// V_CMP_NGE_F32_e32
    UINT64_C(144115191566696448),	// V_CMP_NGE_F32_e64
    UINT64_C(2085748736),	// V_CMP_NGE_F64_e32
    UINT64_C(144115191570890752),	// V_CMP_NGE_F64_e64
    UINT64_C(2081816576),	// V_CMP_NGT_F32_e32
    UINT64_C(144115191566958592),	// V_CMP_NGT_F32_e64
    UINT64_C(2086010880),	// V_CMP_NGT_F64_e32
    UINT64_C(144115191571152896),	// V_CMP_NGT_F64_e64
    UINT64_C(2081947648),	// V_CMP_NLE_F32_e32
    UINT64_C(144115191567089664),	// V_CMP_NLE_F32_e64
    UINT64_C(2086141952),	// V_CMP_NLE_F64_e32
    UINT64_C(144115191571283968),	// V_CMP_NLE_F64_e64
    UINT64_C(2081685504),	// V_CMP_NLG_F32_e32
    UINT64_C(144115191566827520),	// V_CMP_NLG_F32_e64
    UINT64_C(2085879808),	// V_CMP_NLG_F64_e32
    UINT64_C(144115191571021824),	// V_CMP_NLG_F64_e64
    UINT64_C(2082209792),	// V_CMP_NLT_F32_e32
    UINT64_C(144115191567351808),	// V_CMP_NLT_F32_e64
    UINT64_C(2086404096),	// V_CMP_NLT_F64_e32
    UINT64_C(144115191571546112),	// V_CMP_NLT_F64_e64
    UINT64_C(2081292288),	// V_CMP_O_F32_e32
    UINT64_C(144115191566434304),	// V_CMP_O_F32_e64
    UINT64_C(2085486592),	// V_CMP_O_F64_e32
    UINT64_C(144115191570628608),	// V_CMP_O_F64_e64
    UINT64_C(2082340864),	// V_CMP_TRU_F32_e32
    UINT64_C(144115191567482880),	// V_CMP_TRU_F32_e64
    UINT64_C(2086535168),	// V_CMP_TRU_F64_e32
    UINT64_C(144115191571677184),	// V_CMP_TRU_F64_e64
    UINT64_C(2098069504),	// V_CMP_T_I32_e32
    UINT64_C(144115191583211520),	// V_CMP_T_I32_e64
    UINT64_C(2102263808),	// V_CMP_T_I64_e32
    UINT64_C(144115191587405824),	// V_CMP_T_I64_e64
    UINT64_C(2106458112),	// V_CMP_T_U32_e32
    UINT64_C(144115191591600128),	// V_CMP_T_U32_e64
    UINT64_C(2110652416),	// V_CMP_T_U64_e32
    UINT64_C(144115191595794432),	// V_CMP_T_U64_e64
    UINT64_C(2081423360),	// V_CMP_U_F32_e32
    UINT64_C(144115191566565376),	// V_CMP_U_F32_e64
    UINT64_C(2085617664),	// V_CMP_U_F64_e32
    UINT64_C(144115191570759680),	// V_CMP_U_F64_e64
    UINT64_C(0),	// V_CNDMASK_B32_e32
    UINT64_C(3523215360),	// V_CNDMASK_B32_e64
    UINT64_C(2113956864),	// V_COS_F32_e32
    UINT64_C(144396666599636992),	// V_COS_F32_e64
    UINT64_C(3532128256),	// V_CUBEID_F32
    UINT64_C(3532521472),	// V_CUBEMA_F32
    UINT64_C(3532259328),	// V_CUBESC_F32
    UINT64_C(3532390400),	// V_CUBETC_F32
    UINT64_C(2113936896),	// V_CVT_F32_F64_e32
    UINT64_C(144396666594525184),	// V_CVT_F32_F64_e64
    UINT64_C(2113931776),	// V_CVT_F32_I32_e32
    UINT64_C(144396666593214464),	// V_CVT_F32_I32_e64
    UINT64_C(2113932288),	// V_CVT_F32_U32_e32
    UINT64_C(144396666593345536),	// V_CVT_F32_U32_e64
    UINT64_C(2113937408),	// V_CVT_F64_F32_e32
    UINT64_C(144396666594656256),	// V_CVT_F64_F32_e64
    UINT64_C(2113931264),	// V_CVT_F64_I32_e32
    UINT64_C(144396666593083392),	// V_CVT_F64_I32_e64
    UINT64_C(2113933312),	// V_CVT_I32_F32_e32
    UINT64_C(144396666593607680),	// V_CVT_I32_F32_e64
    UINT64_C(2113930752),	// V_CVT_I32_F64_e32
    UINT64_C(144396666592952320),	// V_CVT_I32_F64_e64
    UINT64_C(1577058304),	// V_CVT_PKRTZ_F16_F32_e32
    UINT64_C(144115191605231616),	// V_CVT_PKRTZ_F16_F32_e64
    UINT64_C(2113932800),	// V_CVT_U32_F32_e32
    UINT64_C(144396666593476608),	// V_CVT_U32_F32_e64
    UINT64_C(3535667200),	// V_DIV_FIXUP_F32
    UINT64_C(3535798272),	// V_DIV_FIXUP_F64
    UINT64_C(3537764352),	// V_DIV_FMAS_F32
    UINT64_C(3537895424),	// V_DIV_FMAS_F64
    UINT64_C(3537502208),	// V_DIV_SCALE_F32
    UINT64_C(3537633280),	// V_DIV_SCALE_F64
    UINT64_C(2113948160),	// V_EXP_F32_e32
    UINT64_C(144396666597408768),	// V_EXP_F32_e64
    UINT64_C(2113959424),	// V_FFBH_I32_e32
    UINT64_C(144396666600292352),	// V_FFBH_I32_e64
    UINT64_C(2113958400),	// V_FFBH_U32_e32
    UINT64_C(144396666600030208),	// V_FFBH_U32_e64
    UINT64_C(2113958912),	// V_FFBL_B32_e32
    UINT64_C(144396666600161280),	// V_FFBL_B32_e64
    UINT64_C(2113947648),	// V_FLOOR_F32_e32
    UINT64_C(144396666597277696),	// V_FLOOR_F32_e64
    UINT64_C(3533045760),	// V_FMA_F32
    UINT64_C(3533176832),	// V_FMA_F64
    UINT64_C(2113945600),	// V_FRACT_F32_e32
    UINT64_C(144396666596753408),	// V_FRACT_F32_e64
    UINT64_C(2113960960),	// V_FRACT_F64_e32
    UINT64_C(144396666600685568),	// V_FRACT_F64_e64
    UINT64_C(2113961984),	// V_FREXP_MANT_F32_e32
    UINT64_C(144396666600947712),	// V_FREXP_MANT_F32_e64
    UINT64_C(2113960448),	// V_FREXP_MANT_F64_e32
    UINT64_C(144396666600554496),	// V_FREXP_MANT_F64_e64
    UINT64_C(3355574272),	// V_INTERP_MOV_F32
    UINT64_C(3355443200),	// V_INTERP_P1_F32
    UINT64_C(3355508736),	// V_INTERP_P2_F32
    UINT64_C(1442840576),	// V_LDEXP_F32_e32
    UINT64_C(144115191604707328),	// V_LDEXP_F32_e64
    UINT64_C(3536846848),	// V_LDEXP_F64
    UINT64_C(2113948672),	// V_LOG_CLAMP_F32_e32
    UINT64_C(144396666597539840),	// V_LOG_CLAMP_F32_e64
    UINT64_C(2113949184),	// V_LOG_F32_e32
    UINT64_C(144396666597670912),	// V_LOG_F32_e64
    UINT64_C(872415232),	// V_LSHLREV_B32_e32
    UINT64_C(144115191602479104),	// V_LSHLREV_B32_e64
    UINT64_C(838860800),	// V_LSHL_B32_e32
    UINT64_C(144115191602348032),	// V_LSHL_B32_e64
    UINT64_C(144115191611785216),	// V_LSHL_B64
    UINT64_C(738197504),	// V_LSHRREV_B32_e32
    UINT64_C(144115191601954816),	// V_LSHRREV_B32_e64
    UINT64_C(704643072),	// V_LSHR_B32_e32
    UINT64_C(144115191601823744),	// V_LSHR_B32_e64
    UINT64_C(144115191611916288),	// V_LSHR_B64
    UINT64_C(1040187392),	// V_MAC_F32_e32
    UINT64_C(144115191603134464),	// V_MAC_F32_e64
    UINT64_C(201326592),	// V_MAC_LEGACY_F32_e32
    UINT64_C(144115191599857664),	// V_MAC_LEGACY_F32_e64
    UINT64_C(1107296256),	// V_MADAK_F32_e32
    UINT64_C(144115191603396608),	// V_MADAK_F32_e64
    UINT64_C(1073741824),	// V_MADMK_F32_e32
    UINT64_C(144115191603265536),	// V_MADMK_F32_e64
    UINT64_C(3531735040),	// V_MAD_F32
    UINT64_C(3531866112),	// V_MAD_I32_I24
    UINT64_C(3531603968),	// V_MAD_LEGACY_F32
    UINT64_C(3531997184),	// V_MAD_U32_U24
    UINT64_C(536870912),	// V_MAX_F32_e32
    UINT64_C(144115191601168384),	// V_MAX_F32_e64
    UINT64_C(3536715776),	// V_MAX_F64
    UINT64_C(603979776),	// V_MAX_I32_e32
    UINT64_C(144115191601430528),	// V_MAX_I32_e64
    UINT64_C(469762048),	// V_MAX_LEGACY_F32_e32
    UINT64_C(144115191600906240),	// V_MAX_LEGACY_F32_e64
    UINT64_C(671088640),	// V_MAX_U32_e32
    UINT64_C(144115191601692672),	// V_MAX_U32_e64
    UINT64_C(1207959552),	// V_MBCNT_HI_U32_B32_e32
    UINT64_C(144115191603789824),	// V_MBCNT_HI_U32_B32_e64
    UINT64_C(1174405120),	// V_MBCNT_LO_U32_B32_e32
    UINT64_C(144115191603658752),	// V_MBCNT_LO_U32_B32_e64
    UINT64_C(503316480),	// V_MIN_F32_e32
    UINT64_C(144115191601037312),	// V_MIN_F32_e64
    UINT64_C(3536584704),	// V_MIN_F64
    UINT64_C(570425344),	// V_MIN_I32_e32
    UINT64_C(144115191601299456),	// V_MIN_I32_e64
    UINT64_C(436207616),	// V_MIN_LEGACY_F32_e32
    UINT64_C(144115191600775168),	// V_MIN_LEGACY_F32_e64
    UINT64_C(637534208),	// V_MIN_U32_e32
    UINT64_C(144115191601561600),	// V_MIN_U32_e64
    UINT64_C(2113963008),	// V_MOVRELD_B32_e32
    UINT64_C(144396666601209856),	// V_MOVRELD_B32_e64
    UINT64_C(2113964032),	// V_MOVRELSD_B32_e32
    UINT64_C(144396666601472000),	// V_MOVRELSD_B32_e64
    UINT64_C(2113963520),	// V_MOVRELS_B32_e32
    UINT64_C(144396666601340928),	// V_MOVRELS_B32_e64
    UINT64_C(2113929728),	// V_MOV_B32_e32
    UINT64_C(144396666592690176),	// V_MOV_B32_e64
    UINT64_C(2113933824),	// V_MOV_FED_B32_e32
    UINT64_C(144396666593738752),	// V_MOV_FED_B32_e64
    UINT64_C(3533701120),	// V_MULLIT_F32
    UINT64_C(268435456),	// V_MUL_F32_e32
    UINT64_C(144115191600119808),	// V_MUL_F32_e64
    UINT64_C(3536453632),	// V_MUL_F64
    UINT64_C(3537371136),	// V_MUL_HI_I32
    UINT64_C(3537108992),	// V_MUL_HI_U32
    UINT64_C(301989888),	// V_MUL_I32_I24_e32
    UINT64_C(144115191600250880),	// V_MUL_I32_I24_e64
    UINT64_C(234881024),	// V_MUL_LEGACY_F32_e32
    UINT64_C(144115191599988736),	// V_MUL_LEGACY_F32_e64
    UINT64_C(3537240064),	// V_MUL_LO_I32
    UINT64_C(3536977920),	// V_MUL_LO_U32
    UINT64_C(369098752),	// V_MUL_U32_U24_e32
    UINT64_C(144115191600513024),	// V_MUL_U32_U24_e64
    UINT64_C(2113957376),	// V_NOT_B32_e32
    UINT64_C(144396666599768064),	// V_NOT_B32_e64
    UINT64_C(939524096),	// V_OR_B32_e32
    UINT64_C(144115191602741248),	// V_OR_B32_e64
    UINT64_C(2113949696),	// V_RCP_CLAMP_F32_e32
    UINT64_C(144396666597801984),	// V_RCP_CLAMP_F32_e64
    UINT64_C(2113953792),	// V_RCP_CLAMP_F64_e32
    UINT64_C(144396666598850560),	// V_RCP_CLAMP_F64_e64
    UINT64_C(2113950720),	// V_RCP_F32_e32
    UINT64_C(144396666598064128),	// V_RCP_F32_e64
    UINT64_C(2113953280),	// V_RCP_F64_e32
    UINT64_C(144396666598719488),	// V_RCP_F64_e64
    UINT64_C(2113951232),	// V_RCP_IFLAG_F32_e32
    UINT64_C(144396666598195200),	// V_RCP_IFLAG_F32_e64
    UINT64_C(2113950208),	// V_RCP_LEGACY_F32_e32
    UINT64_C(144396666597933056),	// V_RCP_LEGACY_F32_e64
    UINT64_C(2113930240),	// V_READFIRSTLANE_B32_e32
    UINT64_C(144396666592821248),	// V_READFIRSTLANE_B32_e64
    UINT64_C(33554432),	// V_READLANE_B32_e32
    UINT64_C(144115191599202304),	// V_READLANE_B32_e64
    UINT64_C(2113947136),	// V_RNDNE_F32_e32
    UINT64_C(144396666597146624),	// V_RNDNE_F32_e64
    UINT64_C(2113951744),	// V_RSQ_CLAMP_F32_e32
    UINT64_C(144396666598326272),	// V_RSQ_CLAMP_F32_e64
    UINT64_C(2113954816),	// V_RSQ_CLAMP_F64_e32
    UINT64_C(144396666599112704),	// V_RSQ_CLAMP_F64_e64
    UINT64_C(2113952768),	// V_RSQ_F32_e32
    UINT64_C(144396666598588416),	// V_RSQ_F32_e64
    UINT64_C(2113954304),	// V_RSQ_F64_e32
    UINT64_C(144396666598981632),	// V_RSQ_F64_e64
    UINT64_C(2113952256),	// V_RSQ_LEGACY_F32_e32
    UINT64_C(144396666598457344),	// V_RSQ_LEGACY_F32_e64
    UINT64_C(3535405056),	// V_SAD_U32
    UINT64_C(2113956352),	// V_SIN_F32_e32
    UINT64_C(144396666599505920),	// V_SIN_F32_e64
    UINT64_C(2113955328),	// V_SQRT_F32_e32
    UINT64_C(144396666599243776),	// V_SQRT_F32_e64
    UINT64_C(2113955840),	// V_SQRT_F64_e32
    UINT64_C(144396666599374848),	// V_SQRT_F64_e64
    UINT64_C(1409286144),	// V_SUBBREV_U32_e32
    UINT64_C(144115191604603392),	// V_SUBBREV_U32_e64
    UINT64_C(1375731712),	// V_SUBB_U32_e32
    UINT64_C(144115191604472320),	// V_SUBB_U32_e64
    UINT64_C(167772160),	// V_SUBREV_F32_e32
    UINT64_C(144115191599726592),	// V_SUBREV_F32_e64
    UINT64_C(1308622848),	// V_SUBREV_I32_e32
    UINT64_C(144115191604210176),	// V_SUBREV_I32_e64
    UINT64_C(134217728),	// V_SUB_F32_e32
    UINT64_C(144115191599595520),	// V_SUB_F32_e64
    UINT64_C(0),
    UINT64_C(1275068416),	// V_SUB_I32_e32
    UINT64_C(144115191604079104),	// V_SUB_I32_e64
    UINT64_C(3538419712),	// V_TRIG_PREOP_F64
    UINT64_C(2113946112),	// V_TRUNC_F32_e32
    UINT64_C(144396666596884480),	// V_TRUNC_F32_e64
    UINT64_C(67108864),	// V_WRITELANE_B32_e32
    UINT64_C(144115191599333376),	// V_WRITELANE_B32_e64
    UINT64_C(973078528),	// V_XOR_B32_e32
    UINT64_C(144115191602872320),	// V_XOR_B32_e64
    UINT64_C(0),
    UINT64_C(9331458427911667712),	// WHILE_LOOP_EG
    UINT64_C(9439544818968559616),	// WHILE_LOOP_R600
    UINT64_C(27487790694400),	// XOR_INT
    UINT64_C(0)
  };
  const unsigned opcode = MI.getOpcode();
  uint64_t Value = InstBits[opcode];
  uint64_t op = 0;
  (void)op;  // suppress warning
  switch (opcode) {
    case AMDGPU::CF_CALL_FS_EG:
    case AMDGPU::CF_CALL_FS_R600:
    case AMDGPU::CF_END_CM:
    case AMDGPU::CF_END_EG:
    case AMDGPU::CF_END_R600:
    case AMDGPU::GROUP_BARRIER:
    case AMDGPU::INTERP_PAIR_XY:
    case AMDGPU::INTERP_PAIR_ZW:
    case AMDGPU::INTERP_VEC_LOAD:
    case AMDGPU::PAD:
    case AMDGPU::S_BARRIER:
    case AMDGPU::S_ENDPGM: {
      break;
    }
    case AMDGPU::CF_CONTINUE_EG:
    case AMDGPU::END_LOOP_EG:
    case AMDGPU::LOOP_BREAK_EG:
    case AMDGPU::WHILE_LOOP_EG: {
      // op: ADDR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(16777215);
      break;
    }
    case AMDGPU::CF_TC_EG:
    case AMDGPU::CF_VC_EG: {
      // op: ADDR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(16777215);
      // op: COUNT
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(63)) << 42;
      break;
    }
    case AMDGPU::CF_ELSE_EG:
    case AMDGPU::CF_JUMP_EG:
    case AMDGPU::POP_EG: {
      // op: ADDR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(16777215);
      // op: POP_COUNT
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(7)) << 32;
      break;
    }
    case AMDGPU::CF_ALU:
    case AMDGPU::CF_ALU_POP_AFTER:
    case AMDGPU::CF_ALU_PUSH_BEFORE: {
      // op: ADDR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(4194303);
      // op: KCACHE_BANK0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(15)) << 22;
      // op: KCACHE_BANK1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 26;
      // op: KCACHE_MODE0
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(3)) << 30;
      // op: KCACHE_MODE1
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(3)) << 32;
      // op: KCACHE_ADDR0
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(255)) << 34;
      // op: KCACHE_ADDR1
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(255)) << 42;
      // op: COUNT
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups);
      Value |= (op & UINT64_C(127)) << 50;
      break;
    }
    case AMDGPU::CF_CONTINUE_R600:
    case AMDGPU::END_LOOP_R600:
    case AMDGPU::LOOP_BREAK_R600:
    case AMDGPU::WHILE_LOOP_R600: {
      // op: ADDR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(4294967295);
      break;
    }
    case AMDGPU::CF_TC_R600:
    case AMDGPU::CF_VC_R600: {
      // op: ADDR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(4294967295);
      // op: CNT
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(8)) << 48;
      Value |= (op & UINT64_C(7)) << 42;
      break;
    }
    case AMDGPU::CF_ELSE_R600:
    case AMDGPU::CF_JUMP_R600:
    case AMDGPU::POP_R600: {
      // op: ADDR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(4294967295);
      // op: POP_COUNT
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(7)) << 32;
      break;
    }
    case AMDGPU::EXP: {
      // op: EN
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(15);
      // op: TGT
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(63)) << 4;
      // op: COMPR
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 10;
      // op: DONE
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 11;
      // op: VM
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 12;
      // op: VSRC0
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(255)) << 32;
      // op: VSRC1
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(255)) << 40;
      // op: VSRC2
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups);
      Value |= (op & UINT64_C(255)) << 48;
      // op: VSRC3
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::TEX_GET_GRADIENTS_H:
    case AMDGPU::TEX_GET_GRADIENTS_V:
    case AMDGPU::TEX_GET_TEXTURE_RESINFO:
    case AMDGPU::TEX_LD:
    case AMDGPU::TEX_LDPTR:
    case AMDGPU::TEX_SAMPLE:
    case AMDGPU::TEX_SAMPLE_C:
    case AMDGPU::TEX_SAMPLE_C_G:
    case AMDGPU::TEX_SAMPLE_C_L:
    case AMDGPU::TEX_SAMPLE_C_LB:
    case AMDGPU::TEX_SAMPLE_G:
    case AMDGPU::TEX_SAMPLE_L:
    case AMDGPU::TEX_SAMPLE_LB:
    case AMDGPU::TEX_SET_GRADIENTS_H:
    case AMDGPU::TEX_SET_GRADIENTS_V: {
      // op: RESOURCE_ID
      op = getMachineOpValue(MI, MI.getOperand(13), Fixups);
      Value |= (op & UINT64_C(255)) << 8;
      // op: SRC_GPR
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(127)) << 16;
      // op: DST_GPR
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 32;
      // op: DST_SEL_X
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups);
      Value |= (op & UINT64_C(7)) << 41;
      // op: DST_SEL_Y
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups);
      Value |= (op & UINT64_C(7)) << 44;
      // op: DST_SEL_Z
      op = getMachineOpValue(MI, MI.getOperand(11), Fixups);
      Value |= (op & UINT64_C(7)) << 47;
      // op: DST_SEL_W
      op = getMachineOpValue(MI, MI.getOperand(12), Fixups);
      Value |= (op & UINT64_C(7)) << 50;
      // op: COORD_TYPE_X
      op = getMachineOpValue(MI, MI.getOperand(15), Fixups);
      Value |= (op & UINT64_C(1)) << 60;
      // op: COORD_TYPE_Y
      op = getMachineOpValue(MI, MI.getOperand(16), Fixups);
      Value |= (op & UINT64_C(1)) << 61;
      // op: COORD_TYPE_Z
      op = getMachineOpValue(MI, MI.getOperand(17), Fixups);
      Value |= (op & UINT64_C(1)) << 62;
      // op: COORD_TYPE_W
      op = getMachineOpValue(MI, MI.getOperand(18), Fixups);
      Value |= (op & UINT64_C(1)) << 63;
      break;
    }
    case AMDGPU::S_BUFFER_LOAD_DWORDX16_IMM:
    case AMDGPU::S_BUFFER_LOAD_DWORDX16_SGPR:
    case AMDGPU::S_BUFFER_LOAD_DWORDX2_IMM:
    case AMDGPU::S_BUFFER_LOAD_DWORDX2_SGPR:
    case AMDGPU::S_BUFFER_LOAD_DWORDX4_IMM:
    case AMDGPU::S_BUFFER_LOAD_DWORDX4_SGPR:
    case AMDGPU::S_BUFFER_LOAD_DWORDX8_IMM:
    case AMDGPU::S_BUFFER_LOAD_DWORDX8_SGPR:
    case AMDGPU::S_BUFFER_LOAD_DWORD_IMM:
    case AMDGPU::S_BUFFER_LOAD_DWORD_SGPR:
    case AMDGPU::S_LOAD_DWORDX16_IMM:
    case AMDGPU::S_LOAD_DWORDX16_SGPR:
    case AMDGPU::S_LOAD_DWORDX2_IMM:
    case AMDGPU::S_LOAD_DWORDX2_SGPR:
    case AMDGPU::S_LOAD_DWORDX4_IMM:
    case AMDGPU::S_LOAD_DWORDX4_SGPR:
    case AMDGPU::S_LOAD_DWORDX8_IMM:
    case AMDGPU::S_LOAD_DWORDX8_SGPR:
    case AMDGPU::S_LOAD_DWORD_IMM:
    case AMDGPU::S_LOAD_DWORD_SGPR: {
      // op: SDST
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 15;
      // op: SBASE
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(126)) << 8;
      // op: OFFSET
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= op & UINT64_C(255);
      break;
    }
    case AMDGPU::S_ADDK_I32:
    case AMDGPU::S_CMOVK_I32:
    case AMDGPU::S_CMPK_EQ_U32:
    case AMDGPU::S_CMPK_GE_I32:
    case AMDGPU::S_CMPK_GE_U32:
    case AMDGPU::S_CMPK_GT_I32:
    case AMDGPU::S_CMPK_GT_U32:
    case AMDGPU::S_CMPK_LE_I32:
    case AMDGPU::S_CMPK_LE_U32:
    case AMDGPU::S_CMPK_LG_I32:
    case AMDGPU::S_CMPK_LG_U32:
    case AMDGPU::S_CMPK_LT_I32:
    case AMDGPU::S_CMPK_LT_U32:
    case AMDGPU::S_GETREG_B32:
    case AMDGPU::S_GETREG_REGRD_B32:
    case AMDGPU::S_MOVK_I32:
    case AMDGPU::S_MULK_I32:
    case AMDGPU::S_SETREG_B32: {
      // op: SDST
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 16;
      // op: SIMM16
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::S_ABS_I32:
    case AMDGPU::S_ANDN2_SAVEEXEC_B64:
    case AMDGPU::S_AND_SAVEEXEC_B64:
    case AMDGPU::S_BREV_B32:
    case AMDGPU::S_BREV_B64:
    case AMDGPU::S_CMOV_B32:
    case AMDGPU::S_CMOV_B64:
    case AMDGPU::S_FLBIT_I32:
    case AMDGPU::S_GETPC_B64:
    case AMDGPU::S_MOVRELD_B32:
    case AMDGPU::S_MOVRELD_B64:
    case AMDGPU::S_MOVRELS_B32:
    case AMDGPU::S_MOVRELS_B64:
    case AMDGPU::S_MOV_B32:
    case AMDGPU::S_MOV_B64:
    case AMDGPU::S_MOV_FED_B32:
    case AMDGPU::S_MOV_REGRD_B32:
    case AMDGPU::S_NAND_SAVEEXEC_B64:
    case AMDGPU::S_NOR_SAVEEXEC_B64:
    case AMDGPU::S_NOT_B32:
    case AMDGPU::S_NOT_B64:
    case AMDGPU::S_ORN2_SAVEEXEC_B64:
    case AMDGPU::S_OR_SAVEEXEC_B64:
    case AMDGPU::S_QUADMASK_B32:
    case AMDGPU::S_QUADMASK_B64:
    case AMDGPU::S_RFE_B64:
    case AMDGPU::S_SETPC_B64:
    case AMDGPU::S_SWAPPC_B64:
    case AMDGPU::S_WQM_B32:
    case AMDGPU::S_WQM_B64:
    case AMDGPU::S_XNOR_SAVEEXEC_B64:
    case AMDGPU::S_XOR_SAVEEXEC_B64: {
      // op: SDST
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 16;
      // op: SSRC0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(255);
      break;
    }
    case AMDGPU::S_ABSDIFF_I32:
    case AMDGPU::S_ADDC_U32:
    case AMDGPU::S_ADD_I32:
    case AMDGPU::S_ADD_U32:
    case AMDGPU::S_ANDN2_B32:
    case AMDGPU::S_ANDN2_B64:
    case AMDGPU::S_AND_B32:
    case AMDGPU::S_AND_B64:
    case AMDGPU::S_ASHR_I32:
    case AMDGPU::S_ASHR_I64:
    case AMDGPU::S_BFE_I32:
    case AMDGPU::S_BFE_I64:
    case AMDGPU::S_BFE_U32:
    case AMDGPU::S_BFE_U64:
    case AMDGPU::S_BFM_B32:
    case AMDGPU::S_BFM_B64:
    case AMDGPU::S_CSELECT_B32:
    case AMDGPU::S_CSELECT_B64:
    case AMDGPU::S_LSHL_B32:
    case AMDGPU::S_LSHL_B64:
    case AMDGPU::S_LSHR_B32:
    case AMDGPU::S_LSHR_B64:
    case AMDGPU::S_MAX_I32:
    case AMDGPU::S_MAX_U32:
    case AMDGPU::S_MIN_I32:
    case AMDGPU::S_MIN_U32:
    case AMDGPU::S_MUL_I32:
    case AMDGPU::S_NAND_B32:
    case AMDGPU::S_NAND_B64:
    case AMDGPU::S_NOR_B32:
    case AMDGPU::S_NOR_B64:
    case AMDGPU::S_ORN2_B32:
    case AMDGPU::S_ORN2_B64:
    case AMDGPU::S_OR_B32:
    case AMDGPU::S_OR_B64:
    case AMDGPU::S_SUBB_U32:
    case AMDGPU::S_SUB_I32:
    case AMDGPU::S_SUB_U32:
    case AMDGPU::S_XNOR_B32:
    case AMDGPU::S_XNOR_B64:
    case AMDGPU::S_XOR_B32:
    case AMDGPU::S_XOR_B64: {
      // op: SDST
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 16;
      // op: SSRC0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(255);
      // op: SSRC1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
    case AMDGPU::S_BRANCH:
    case AMDGPU::S_CBRANCH_EXECNZ:
    case AMDGPU::S_CBRANCH_EXECZ:
    case AMDGPU::S_CBRANCH_SCC0:
    case AMDGPU::S_CBRANCH_SCC1:
    case AMDGPU::S_CBRANCH_VCCNZ:
    case AMDGPU::S_CBRANCH_VCCZ:
    case AMDGPU::S_WAITCNT: {
      // op: SIMM16
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(65535);
      break;
    }
    case AMDGPU::V_CMPSX_EQ_F32_e32:
    case AMDGPU::V_CMPSX_EQ_F64_e32:
    case AMDGPU::V_CMPSX_F_F32_e32:
    case AMDGPU::V_CMPSX_F_F64_e32:
    case AMDGPU::V_CMPSX_GE_F32_e32:
    case AMDGPU::V_CMPSX_GE_F64_e32:
    case AMDGPU::V_CMPSX_GT_F32_e32:
    case AMDGPU::V_CMPSX_GT_F64_e32:
    case AMDGPU::V_CMPSX_LE_F32_e32:
    case AMDGPU::V_CMPSX_LE_F64_e32:
    case AMDGPU::V_CMPSX_LG_F32_e32:
    case AMDGPU::V_CMPSX_LG_F64_e32:
    case AMDGPU::V_CMPSX_LT_F32_e32:
    case AMDGPU::V_CMPSX_LT_F64_e32:
    case AMDGPU::V_CMPSX_NEQ_F32_e32:
    case AMDGPU::V_CMPSX_NEQ_F64_e32:
    case AMDGPU::V_CMPSX_NGE_F32_e32:
    case AMDGPU::V_CMPSX_NGE_F64_e32:
    case AMDGPU::V_CMPSX_NGT_F32_e32:
    case AMDGPU::V_CMPSX_NGT_F64_e32:
    case AMDGPU::V_CMPSX_NLE_F32_e32:
    case AMDGPU::V_CMPSX_NLE_F64_e32:
    case AMDGPU::V_CMPSX_NLG_F32_e32:
    case AMDGPU::V_CMPSX_NLG_F64_e32:
    case AMDGPU::V_CMPSX_NLT_F32_e32:
    case AMDGPU::V_CMPSX_NLT_F64_e32:
    case AMDGPU::V_CMPSX_O_F32_e32:
    case AMDGPU::V_CMPSX_O_F64_e32:
    case AMDGPU::V_CMPSX_TRU_F32_e32:
    case AMDGPU::V_CMPSX_TRU_F64_e32:
    case AMDGPU::V_CMPSX_U_F32_e32:
    case AMDGPU::V_CMPSX_U_F64_e32:
    case AMDGPU::V_CMPS_EQ_F32_e32:
    case AMDGPU::V_CMPS_EQ_F64_e32:
    case AMDGPU::V_CMPS_F_F32_e32:
    case AMDGPU::V_CMPS_F_F64_e32:
    case AMDGPU::V_CMPS_GE_F32_e32:
    case AMDGPU::V_CMPS_GE_F64_e32:
    case AMDGPU::V_CMPS_GT_F32_e32:
    case AMDGPU::V_CMPS_GT_F64_e32:
    case AMDGPU::V_CMPS_LE_F32_e32:
    case AMDGPU::V_CMPS_LE_F64_e32:
    case AMDGPU::V_CMPS_LG_F32_e32:
    case AMDGPU::V_CMPS_LG_F64_e32:
    case AMDGPU::V_CMPS_LT_F32_e32:
    case AMDGPU::V_CMPS_LT_F64_e32:
    case AMDGPU::V_CMPS_NEQ_F32_e32:
    case AMDGPU::V_CMPS_NEQ_F64_e32:
    case AMDGPU::V_CMPS_NGE_F32_e32:
    case AMDGPU::V_CMPS_NGE_F64_e32:
    case AMDGPU::V_CMPS_NGT_F32_e32:
    case AMDGPU::V_CMPS_NGT_F64_e32:
    case AMDGPU::V_CMPS_NLE_F32_e32:
    case AMDGPU::V_CMPS_NLE_F64_e32:
    case AMDGPU::V_CMPS_NLG_F32_e32:
    case AMDGPU::V_CMPS_NLG_F64_e32:
    case AMDGPU::V_CMPS_NLT_F32_e32:
    case AMDGPU::V_CMPS_NLT_F64_e32:
    case AMDGPU::V_CMPS_O_F32_e32:
    case AMDGPU::V_CMPS_O_F64_e32:
    case AMDGPU::V_CMPS_TRU_F32_e32:
    case AMDGPU::V_CMPS_TRU_F64_e32:
    case AMDGPU::V_CMPS_U_F32_e32:
    case AMDGPU::V_CMPS_U_F64_e32:
    case AMDGPU::V_CMPX_CLASS_F32_e32:
    case AMDGPU::V_CMPX_CLASS_F64_e32:
    case AMDGPU::V_CMPX_EQ_F32_e32:
    case AMDGPU::V_CMPX_EQ_F64_e32:
    case AMDGPU::V_CMPX_EQ_I32_e32:
    case AMDGPU::V_CMPX_EQ_I64_e32:
    case AMDGPU::V_CMPX_EQ_U32_e32:
    case AMDGPU::V_CMPX_EQ_U64_e32:
    case AMDGPU::V_CMPX_F_F32_e32:
    case AMDGPU::V_CMPX_F_F64_e32:
    case AMDGPU::V_CMPX_F_I32_e32:
    case AMDGPU::V_CMPX_F_I64_e32:
    case AMDGPU::V_CMPX_F_U32_e32:
    case AMDGPU::V_CMPX_F_U64_e32:
    case AMDGPU::V_CMPX_GE_F32_e32:
    case AMDGPU::V_CMPX_GE_F64_e32:
    case AMDGPU::V_CMPX_GE_I32_e32:
    case AMDGPU::V_CMPX_GE_I64_e32:
    case AMDGPU::V_CMPX_GE_U32_e32:
    case AMDGPU::V_CMPX_GE_U64_e32:
    case AMDGPU::V_CMPX_GT_F32_e32:
    case AMDGPU::V_CMPX_GT_F64_e32:
    case AMDGPU::V_CMPX_GT_I32_e32:
    case AMDGPU::V_CMPX_GT_I64_e32:
    case AMDGPU::V_CMPX_GT_U32_e32:
    case AMDGPU::V_CMPX_GT_U64_e32:
    case AMDGPU::V_CMPX_LE_F32_e32:
    case AMDGPU::V_CMPX_LE_F64_e32:
    case AMDGPU::V_CMPX_LE_I32_e32:
    case AMDGPU::V_CMPX_LE_I64_e32:
    case AMDGPU::V_CMPX_LE_U32_e32:
    case AMDGPU::V_CMPX_LE_U64_e32:
    case AMDGPU::V_CMPX_LG_F32_e32:
    case AMDGPU::V_CMPX_LG_F64_e32:
    case AMDGPU::V_CMPX_LT_F32_e32:
    case AMDGPU::V_CMPX_LT_F64_e32:
    case AMDGPU::V_CMPX_LT_I32_e32:
    case AMDGPU::V_CMPX_LT_I64_e32:
    case AMDGPU::V_CMPX_LT_U32_e32:
    case AMDGPU::V_CMPX_LT_U64_e32:
    case AMDGPU::V_CMPX_NEQ_F32_e32:
    case AMDGPU::V_CMPX_NEQ_F64_e32:
    case AMDGPU::V_CMPX_NE_I32_e32:
    case AMDGPU::V_CMPX_NE_I64_e32:
    case AMDGPU::V_CMPX_NE_U32_e32:
    case AMDGPU::V_CMPX_NE_U64_e32:
    case AMDGPU::V_CMPX_NGE_F32_e32:
    case AMDGPU::V_CMPX_NGE_F64_e32:
    case AMDGPU::V_CMPX_NGT_F32_e32:
    case AMDGPU::V_CMPX_NGT_F64_e32:
    case AMDGPU::V_CMPX_NLE_F32_e32:
    case AMDGPU::V_CMPX_NLE_F64_e32:
    case AMDGPU::V_CMPX_NLG_F32_e32:
    case AMDGPU::V_CMPX_NLG_F64_e32:
    case AMDGPU::V_CMPX_NLT_F32_e32:
    case AMDGPU::V_CMPX_NLT_F64_e32:
    case AMDGPU::V_CMPX_O_F32_e32:
    case AMDGPU::V_CMPX_O_F64_e32:
    case AMDGPU::V_CMPX_TRU_F32_e32:
    case AMDGPU::V_CMPX_TRU_F64_e32:
    case AMDGPU::V_CMPX_T_I32_e32:
    case AMDGPU::V_CMPX_T_I64_e32:
    case AMDGPU::V_CMPX_T_U32_e32:
    case AMDGPU::V_CMPX_T_U64_e32:
    case AMDGPU::V_CMPX_U_F32_e32:
    case AMDGPU::V_CMPX_U_F64_e32:
    case AMDGPU::V_CMP_CLASS_F32_e32:
    case AMDGPU::V_CMP_CLASS_F64_e32:
    case AMDGPU::V_CMP_EQ_F32_e32:
    case AMDGPU::V_CMP_EQ_F64_e32:
    case AMDGPU::V_CMP_EQ_I32_e32:
    case AMDGPU::V_CMP_EQ_I64_e32:
    case AMDGPU::V_CMP_EQ_U32_e32:
    case AMDGPU::V_CMP_EQ_U64_e32:
    case AMDGPU::V_CMP_F_F32_e32:
    case AMDGPU::V_CMP_F_F64_e32:
    case AMDGPU::V_CMP_F_I32_e32:
    case AMDGPU::V_CMP_F_I64_e32:
    case AMDGPU::V_CMP_F_U32_e32:
    case AMDGPU::V_CMP_F_U64_e32:
    case AMDGPU::V_CMP_GE_F32_e32:
    case AMDGPU::V_CMP_GE_F64_e32:
    case AMDGPU::V_CMP_GE_I32_e32:
    case AMDGPU::V_CMP_GE_I64_e32:
    case AMDGPU::V_CMP_GE_U32_e32:
    case AMDGPU::V_CMP_GE_U64_e32:
    case AMDGPU::V_CMP_GT_F32_e32:
    case AMDGPU::V_CMP_GT_F64_e32:
    case AMDGPU::V_CMP_GT_I32_e32:
    case AMDGPU::V_CMP_GT_I64_e32:
    case AMDGPU::V_CMP_GT_U32_e32:
    case AMDGPU::V_CMP_GT_U64_e32:
    case AMDGPU::V_CMP_LE_F32_e32:
    case AMDGPU::V_CMP_LE_F64_e32:
    case AMDGPU::V_CMP_LE_I32_e32:
    case AMDGPU::V_CMP_LE_I64_e32:
    case AMDGPU::V_CMP_LE_U32_e32:
    case AMDGPU::V_CMP_LE_U64_e32:
    case AMDGPU::V_CMP_LG_F32_e32:
    case AMDGPU::V_CMP_LG_F64_e32:
    case AMDGPU::V_CMP_LT_F32_e32:
    case AMDGPU::V_CMP_LT_F64_e32:
    case AMDGPU::V_CMP_LT_I32_e32:
    case AMDGPU::V_CMP_LT_I64_e32:
    case AMDGPU::V_CMP_LT_U32_e32:
    case AMDGPU::V_CMP_LT_U64_e32:
    case AMDGPU::V_CMP_NEQ_F32_e32:
    case AMDGPU::V_CMP_NEQ_F64_e32:
    case AMDGPU::V_CMP_NE_I32_e32:
    case AMDGPU::V_CMP_NE_I64_e32:
    case AMDGPU::V_CMP_NE_U32_e32:
    case AMDGPU::V_CMP_NE_U64_e32:
    case AMDGPU::V_CMP_NGE_F32_e32:
    case AMDGPU::V_CMP_NGE_F64_e32:
    case AMDGPU::V_CMP_NGT_F32_e32:
    case AMDGPU::V_CMP_NGT_F64_e32:
    case AMDGPU::V_CMP_NLE_F32_e32:
    case AMDGPU::V_CMP_NLE_F64_e32:
    case AMDGPU::V_CMP_NLG_F32_e32:
    case AMDGPU::V_CMP_NLG_F64_e32:
    case AMDGPU::V_CMP_NLT_F32_e32:
    case AMDGPU::V_CMP_NLT_F64_e32:
    case AMDGPU::V_CMP_O_F32_e32:
    case AMDGPU::V_CMP_O_F64_e32:
    case AMDGPU::V_CMP_TRU_F32_e32:
    case AMDGPU::V_CMP_TRU_F64_e32:
    case AMDGPU::V_CMP_T_I32_e32:
    case AMDGPU::V_CMP_T_I64_e32:
    case AMDGPU::V_CMP_T_U32_e32:
    case AMDGPU::V_CMP_T_U64_e32:
    case AMDGPU::V_CMP_U_F32_e32:
    case AMDGPU::V_CMP_U_F64_e32: {
      // op: SRC0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(511);
      // op: VSRC1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(255)) << 9;
      break;
    }
    case AMDGPU::S_CMP_EQ_I32:
    case AMDGPU::S_CMP_EQ_U32:
    case AMDGPU::S_CMP_GE_I32:
    case AMDGPU::S_CMP_GE_U32:
    case AMDGPU::S_CMP_GT_I32:
    case AMDGPU::S_CMP_GT_U32:
    case AMDGPU::S_CMP_LE_I32:
    case AMDGPU::S_CMP_LE_U32:
    case AMDGPU::S_CMP_LG_I32:
    case AMDGPU::S_CMP_LG_U32:
    case AMDGPU::S_CMP_LT_I32:
    case AMDGPU::S_CMP_LT_U32: {
      // op: SSRC0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(255);
      // op: SSRC1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
    case AMDGPU::IMAGE_GET_RESINFO_V1_V1:
    case AMDGPU::IMAGE_GET_RESINFO_V1_V2:
    case AMDGPU::IMAGE_GET_RESINFO_V1_V4:
    case AMDGPU::IMAGE_GET_RESINFO_V2_V1:
    case AMDGPU::IMAGE_GET_RESINFO_V2_V2:
    case AMDGPU::IMAGE_GET_RESINFO_V2_V4:
    case AMDGPU::IMAGE_GET_RESINFO_V3_V1:
    case AMDGPU::IMAGE_GET_RESINFO_V3_V2:
    case AMDGPU::IMAGE_GET_RESINFO_V3_V4:
    case AMDGPU::IMAGE_GET_RESINFO_V4_V1:
    case AMDGPU::IMAGE_GET_RESINFO_V4_V2:
    case AMDGPU::IMAGE_GET_RESINFO_V4_V4:
    case AMDGPU::IMAGE_LOAD_MIP_V1_V1:
    case AMDGPU::IMAGE_LOAD_MIP_V1_V2:
    case AMDGPU::IMAGE_LOAD_MIP_V1_V4:
    case AMDGPU::IMAGE_LOAD_MIP_V2_V1:
    case AMDGPU::IMAGE_LOAD_MIP_V2_V2:
    case AMDGPU::IMAGE_LOAD_MIP_V2_V4:
    case AMDGPU::IMAGE_LOAD_MIP_V3_V1:
    case AMDGPU::IMAGE_LOAD_MIP_V3_V2:
    case AMDGPU::IMAGE_LOAD_MIP_V3_V4:
    case AMDGPU::IMAGE_LOAD_MIP_V4_V1:
    case AMDGPU::IMAGE_LOAD_MIP_V4_V2:
    case AMDGPU::IMAGE_LOAD_MIP_V4_V4:
    case AMDGPU::IMAGE_LOAD_V1_V1:
    case AMDGPU::IMAGE_LOAD_V1_V2:
    case AMDGPU::IMAGE_LOAD_V1_V4:
    case AMDGPU::IMAGE_LOAD_V2_V1:
    case AMDGPU::IMAGE_LOAD_V2_V2:
    case AMDGPU::IMAGE_LOAD_V2_V4:
    case AMDGPU::IMAGE_LOAD_V3_V1:
    case AMDGPU::IMAGE_LOAD_V3_V2:
    case AMDGPU::IMAGE_LOAD_V3_V4:
    case AMDGPU::IMAGE_LOAD_V4_V1:
    case AMDGPU::IMAGE_LOAD_V4_V2:
    case AMDGPU::IMAGE_LOAD_V4_V4: {
      // op: VDATA
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(255)) << 40;
      // op: DMASK
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(15)) << 8;
      // op: UNORM
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 12;
      // op: GLC
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 13;
      // op: DA
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 14;
      // op: R128
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(1)) << 15;
      // op: TFE
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(1)) << 16;
      // op: LWE
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups);
      Value |= (op & UINT64_C(1)) << 17;
      // op: SLC
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups);
      Value |= (op & UINT64_C(1)) << 25;
      // op: VADDR
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups);
      Value |= (op & UINT64_C(255)) << 32;
      // op: SRSRC
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups);
      Value |= (op & UINT64_C(124)) << 46;
      break;
    }
    case AMDGPU::IMAGE_SAMPLE_B_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_B_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_B_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_B_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_B_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_B_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_B_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_B_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_B_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_B_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_B_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_B_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_B_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_B_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_B_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_B_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_B_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_B_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_B_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_B_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_B_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_B_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_B_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_B_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_B_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_D_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_D_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_D_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_D_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_D_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_L_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_L_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_L_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_L_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_L_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_L_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_L_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_L_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_L_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_L_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_L_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_L_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_L_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_L_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_L_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_L_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_L_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_L_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_L_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_L_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_C_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_C_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_C_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_C_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_C_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_C_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_C_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_C_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_C_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_C_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_C_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_C_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_C_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_C_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_C_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_C_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_C_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_C_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_C_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_C_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_D_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_D_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_D_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_D_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_D_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_D_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_D_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_D_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_D_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_D_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_D_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_D_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_D_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_D_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_D_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_D_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_D_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_D_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_D_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_D_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_L_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_L_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_L_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_L_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_L_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_L_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_L_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_L_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_L_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_L_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_L_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_L_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_L_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_L_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_L_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_L_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_L_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_L_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_L_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_L_V4_V8:
    case AMDGPU::IMAGE_SAMPLE_V1_V1:
    case AMDGPU::IMAGE_SAMPLE_V1_V16:
    case AMDGPU::IMAGE_SAMPLE_V1_V2:
    case AMDGPU::IMAGE_SAMPLE_V1_V4:
    case AMDGPU::IMAGE_SAMPLE_V1_V8:
    case AMDGPU::IMAGE_SAMPLE_V2_V1:
    case AMDGPU::IMAGE_SAMPLE_V2_V16:
    case AMDGPU::IMAGE_SAMPLE_V2_V2:
    case AMDGPU::IMAGE_SAMPLE_V2_V4:
    case AMDGPU::IMAGE_SAMPLE_V2_V8:
    case AMDGPU::IMAGE_SAMPLE_V3_V1:
    case AMDGPU::IMAGE_SAMPLE_V3_V16:
    case AMDGPU::IMAGE_SAMPLE_V3_V2:
    case AMDGPU::IMAGE_SAMPLE_V3_V4:
    case AMDGPU::IMAGE_SAMPLE_V3_V8:
    case AMDGPU::IMAGE_SAMPLE_V4_V1:
    case AMDGPU::IMAGE_SAMPLE_V4_V16:
    case AMDGPU::IMAGE_SAMPLE_V4_V2:
    case AMDGPU::IMAGE_SAMPLE_V4_V4:
    case AMDGPU::IMAGE_SAMPLE_V4_V8: {
      // op: VDATA
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(255)) << 40;
      // op: DMASK
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(15)) << 8;
      // op: UNORM
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 12;
      // op: GLC
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 13;
      // op: DA
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 14;
      // op: R128
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(1)) << 15;
      // op: TFE
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(1)) << 16;
      // op: LWE
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups);
      Value |= (op & UINT64_C(1)) << 17;
      // op: SLC
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups);
      Value |= (op & UINT64_C(1)) << 25;
      // op: VADDR
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups);
      Value |= (op & UINT64_C(255)) << 32;
      // op: SRSRC
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups);
      Value |= (op & UINT64_C(124)) << 46;
      // op: SSAMP
      op = getMachineOpValue(MI, MI.getOperand(11), Fixups);
      Value |= (op & UINT64_C(124)) << 51;
      break;
    }
    case AMDGPU::TBUFFER_LOAD_FORMAT_XYZW:
    case AMDGPU::TBUFFER_STORE_FORMAT_X:
    case AMDGPU::TBUFFER_STORE_FORMAT_XY:
    case AMDGPU::TBUFFER_STORE_FORMAT_XYZ:
    case AMDGPU::TBUFFER_STORE_FORMAT_XYZW: {
      // op: VDATA
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(255)) << 40;
      // op: OFFSET
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(4095);
      // op: OFFEN
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 12;
      // op: IDXEN
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 13;
      // op: GLC
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 14;
      // op: ADDR64
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(1)) << 15;
      // op: DFMT
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(15)) << 19;
      // op: NFMT
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups);
      Value |= (op & UINT64_C(7)) << 23;
      // op: VADDR
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups);
      Value |= (op & UINT64_C(255)) << 32;
      // op: SRSRC
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups);
      Value |= (op & UINT64_C(124)) << 46;
      // op: SLC
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups);
      Value |= (op & UINT64_C(1)) << 54;
      // op: TFE
      op = getMachineOpValue(MI, MI.getOperand(11), Fixups);
      Value |= (op & UINT64_C(1)) << 55;
      // op: SOFFSET
      op = getMachineOpValue(MI, MI.getOperand(12), Fixups);
      Value |= (op & UINT64_C(255)) << 56;
      break;
    }
    case AMDGPU::V_BFREV_B32_e32:
    case AMDGPU::V_CEIL_F32_e32:
    case AMDGPU::V_COS_F32_e32:
    case AMDGPU::V_CVT_F32_F64_e32:
    case AMDGPU::V_CVT_F32_I32_e32:
    case AMDGPU::V_CVT_F32_U32_e32:
    case AMDGPU::V_CVT_F64_F32_e32:
    case AMDGPU::V_CVT_F64_I32_e32:
    case AMDGPU::V_CVT_I32_F32_e32:
    case AMDGPU::V_CVT_I32_F64_e32:
    case AMDGPU::V_CVT_U32_F32_e32:
    case AMDGPU::V_EXP_F32_e32:
    case AMDGPU::V_FFBH_I32_e32:
    case AMDGPU::V_FFBH_U32_e32:
    case AMDGPU::V_FFBL_B32_e32:
    case AMDGPU::V_FLOOR_F32_e32:
    case AMDGPU::V_FRACT_F32_e32:
    case AMDGPU::V_FRACT_F64_e32:
    case AMDGPU::V_FREXP_MANT_F32_e32:
    case AMDGPU::V_FREXP_MANT_F64_e32:
    case AMDGPU::V_LOG_CLAMP_F32_e32:
    case AMDGPU::V_LOG_F32_e32:
    case AMDGPU::V_MOVRELD_B32_e32:
    case AMDGPU::V_MOVRELSD_B32_e32:
    case AMDGPU::V_MOVRELS_B32_e32:
    case AMDGPU::V_MOV_B32_e32:
    case AMDGPU::V_MOV_FED_B32_e32:
    case AMDGPU::V_NOT_B32_e32:
    case AMDGPU::V_RCP_CLAMP_F32_e32:
    case AMDGPU::V_RCP_CLAMP_F64_e32:
    case AMDGPU::V_RCP_F32_e32:
    case AMDGPU::V_RCP_F64_e32:
    case AMDGPU::V_RCP_IFLAG_F32_e32:
    case AMDGPU::V_RCP_LEGACY_F32_e32:
    case AMDGPU::V_READFIRSTLANE_B32_e32:
    case AMDGPU::V_RNDNE_F32_e32:
    case AMDGPU::V_RSQ_CLAMP_F32_e32:
    case AMDGPU::V_RSQ_CLAMP_F64_e32:
    case AMDGPU::V_RSQ_F32_e32:
    case AMDGPU::V_RSQ_F64_e32:
    case AMDGPU::V_RSQ_LEGACY_F32_e32:
    case AMDGPU::V_SIN_F32_e32:
    case AMDGPU::V_SQRT_F32_e32:
    case AMDGPU::V_SQRT_F64_e32:
    case AMDGPU::V_TRUNC_F32_e32: {
      // op: VDST
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(255)) << 17;
      // op: SRC0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(511);
      break;
    }
    case AMDGPU::V_ADDC_U32_e32:
    case AMDGPU::V_ADD_F32_e32:
    case AMDGPU::V_ADD_I32_e32:
    case AMDGPU::V_AND_B32_e32:
    case AMDGPU::V_ASHRREV_I32_e32:
    case AMDGPU::V_ASHR_I32_e32:
    case AMDGPU::V_BFM_B32_e32:
    case AMDGPU::V_CNDMASK_B32_e32:
    case AMDGPU::V_CVT_PKRTZ_F16_F32_e32:
    case AMDGPU::V_LDEXP_F32_e32:
    case AMDGPU::V_LSHLREV_B32_e32:
    case AMDGPU::V_LSHL_B32_e32:
    case AMDGPU::V_LSHRREV_B32_e32:
    case AMDGPU::V_LSHR_B32_e32:
    case AMDGPU::V_MAC_F32_e32:
    case AMDGPU::V_MAC_LEGACY_F32_e32:
    case AMDGPU::V_MADAK_F32_e32:
    case AMDGPU::V_MADMK_F32_e32:
    case AMDGPU::V_MAX_F32_e32:
    case AMDGPU::V_MAX_I32_e32:
    case AMDGPU::V_MAX_LEGACY_F32_e32:
    case AMDGPU::V_MAX_U32_e32:
    case AMDGPU::V_MBCNT_HI_U32_B32_e32:
    case AMDGPU::V_MBCNT_LO_U32_B32_e32:
    case AMDGPU::V_MIN_F32_e32:
    case AMDGPU::V_MIN_I32_e32:
    case AMDGPU::V_MIN_LEGACY_F32_e32:
    case AMDGPU::V_MIN_U32_e32:
    case AMDGPU::V_MUL_F32_e32:
    case AMDGPU::V_MUL_I32_I24_e32:
    case AMDGPU::V_MUL_LEGACY_F32_e32:
    case AMDGPU::V_MUL_U32_U24_e32:
    case AMDGPU::V_OR_B32_e32:
    case AMDGPU::V_READLANE_B32_e32:
    case AMDGPU::V_SUBBREV_U32_e32:
    case AMDGPU::V_SUBB_U32_e32:
    case AMDGPU::V_SUBREV_F32_e32:
    case AMDGPU::V_SUBREV_I32_e32:
    case AMDGPU::V_SUB_F32_e32:
    case AMDGPU::V_SUB_I32_e32:
    case AMDGPU::V_WRITELANE_B32_e32:
    case AMDGPU::V_XOR_B32_e32: {
      // op: VDST
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(255)) << 17;
      // op: SRC0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(511);
      // op: VSRC1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(255)) << 9;
      break;
    }
    case AMDGPU::V_INTERP_MOV_F32:
    case AMDGPU::V_INTERP_P1_F32: {
      // op: VDST
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(255)) << 18;
      // op: VSRC
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(255);
      // op: ATTRCHAN
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(3)) << 8;
      // op: ATTR
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AMDGPU::V_INTERP_P2_F32: {
      // op: VDST
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(255)) << 18;
      // op: VSRC
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= op & UINT64_C(255);
      // op: ATTRCHAN
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(3)) << 8;
      // op: ATTR
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AMDGPU::EG_ExportBuf: {
      // op: arraybase
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= op & UINT64_C(8191);
      // op: type
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(3)) << 13;
      // op: gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 15;
      // op: arraySize
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(4095)) << 32;
      // op: compMask
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(15)) << 44;
      // op: eop
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(1)) << 53;
      // op: inst
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(255)) << 54;
      break;
    }
    case AMDGPU::R600_ExportBuf: {
      // op: arraybase
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= op & UINT64_C(8191);
      // op: type
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(3)) << 13;
      // op: gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 15;
      // op: arraySize
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(4095)) << 32;
      // op: compMask
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(15)) << 44;
      // op: eop
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(1)) << 53;
      // op: inst
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(255)) << 55;
      break;
    }
    case AMDGPU::EG_ExportSwz: {
      // op: arraybase
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= op & UINT64_C(8191);
      // op: type
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(3)) << 13;
      // op: gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 15;
      // op: sw_x
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(7)) << 32;
      // op: sw_y
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(7)) << 35;
      // op: sw_z
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(7)) << 38;
      // op: sw_w
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(7)) << 41;
      // op: eop
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups);
      Value |= (op & UINT64_C(1)) << 53;
      // op: inst
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups);
      Value |= (op & UINT64_C(255)) << 54;
      break;
    }
    case AMDGPU::R600_ExportSwz: {
      // op: arraybase
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= op & UINT64_C(8191);
      // op: type
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(3)) << 13;
      // op: gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 15;
      // op: sw_x
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(7)) << 32;
      // op: sw_y
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(7)) << 35;
      // op: sw_z
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(7)) << 38;
      // op: sw_w
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(7)) << 41;
      // op: eop
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups);
      Value |= (op & UINT64_C(1)) << 53;
      // op: inst
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups);
      Value |= (op & UINT64_C(255)) << 55;
      break;
    }
    case AMDGPU::V_BFREV_B32_e64:
    case AMDGPU::V_CEIL_F32_e64:
    case AMDGPU::V_COS_F32_e64:
    case AMDGPU::V_CVT_F32_F64_e64:
    case AMDGPU::V_CVT_F32_I32_e64:
    case AMDGPU::V_CVT_F32_U32_e64:
    case AMDGPU::V_CVT_F64_F32_e64:
    case AMDGPU::V_CVT_F64_I32_e64:
    case AMDGPU::V_CVT_I32_F32_e64:
    case AMDGPU::V_CVT_I32_F64_e64:
    case AMDGPU::V_CVT_U32_F32_e64:
    case AMDGPU::V_EXP_F32_e64:
    case AMDGPU::V_FFBH_I32_e64:
    case AMDGPU::V_FFBH_U32_e64:
    case AMDGPU::V_FFBL_B32_e64:
    case AMDGPU::V_FLOOR_F32_e64:
    case AMDGPU::V_FRACT_F32_e64:
    case AMDGPU::V_FRACT_F64_e64:
    case AMDGPU::V_FREXP_MANT_F32_e64:
    case AMDGPU::V_FREXP_MANT_F64_e64:
    case AMDGPU::V_LOG_CLAMP_F32_e64:
    case AMDGPU::V_LOG_F32_e64:
    case AMDGPU::V_MOVRELD_B32_e64:
    case AMDGPU::V_MOVRELSD_B32_e64:
    case AMDGPU::V_MOVRELS_B32_e64:
    case AMDGPU::V_MOV_B32_e64:
    case AMDGPU::V_MOV_FED_B32_e64:
    case AMDGPU::V_NOT_B32_e64:
    case AMDGPU::V_RCP_CLAMP_F32_e64:
    case AMDGPU::V_RCP_CLAMP_F64_e64:
    case AMDGPU::V_RCP_F32_e64:
    case AMDGPU::V_RCP_F64_e64:
    case AMDGPU::V_RCP_IFLAG_F32_e64:
    case AMDGPU::V_RCP_LEGACY_F32_e64:
    case AMDGPU::V_READFIRSTLANE_B32_e64:
    case AMDGPU::V_RNDNE_F32_e64:
    case AMDGPU::V_RSQ_CLAMP_F32_e64:
    case AMDGPU::V_RSQ_CLAMP_F64_e64:
    case AMDGPU::V_RSQ_F32_e64:
    case AMDGPU::V_RSQ_F64_e64:
    case AMDGPU::V_RSQ_LEGACY_F32_e64:
    case AMDGPU::V_SIN_F32_e64:
    case AMDGPU::V_SQRT_F32_e64:
    case AMDGPU::V_SQRT_F64_e64:
    case AMDGPU::V_TRUNC_F32_e64: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(255);
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(511)) << 32;
      // op: abs
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(7)) << 8;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 11;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(3)) << 59;
      // op: neg
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(7)) << 61;
      break;
    }
    case AMDGPU::V_ASHR_I64:
    case AMDGPU::V_LSHL_B64:
    case AMDGPU::V_LSHR_B64: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(255);
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(511)) << 41;
      break;
    }
    case AMDGPU::V_ADD_F32_e64:
    case AMDGPU::V_AND_B32_e64:
    case AMDGPU::V_ASHRREV_I32_e64:
    case AMDGPU::V_ASHR_I32_e64:
    case AMDGPU::V_BFM_B32_e64:
    case AMDGPU::V_CMPSX_EQ_F32_e64:
    case AMDGPU::V_CMPSX_EQ_F64_e64:
    case AMDGPU::V_CMPSX_F_F32_e64:
    case AMDGPU::V_CMPSX_F_F64_e64:
    case AMDGPU::V_CMPSX_GE_F32_e64:
    case AMDGPU::V_CMPSX_GE_F64_e64:
    case AMDGPU::V_CMPSX_GT_F32_e64:
    case AMDGPU::V_CMPSX_GT_F64_e64:
    case AMDGPU::V_CMPSX_LE_F32_e64:
    case AMDGPU::V_CMPSX_LE_F64_e64:
    case AMDGPU::V_CMPSX_LG_F32_e64:
    case AMDGPU::V_CMPSX_LG_F64_e64:
    case AMDGPU::V_CMPSX_LT_F32_e64:
    case AMDGPU::V_CMPSX_LT_F64_e64:
    case AMDGPU::V_CMPSX_NEQ_F32_e64:
    case AMDGPU::V_CMPSX_NEQ_F64_e64:
    case AMDGPU::V_CMPSX_NGE_F32_e64:
    case AMDGPU::V_CMPSX_NGE_F64_e64:
    case AMDGPU::V_CMPSX_NGT_F32_e64:
    case AMDGPU::V_CMPSX_NGT_F64_e64:
    case AMDGPU::V_CMPSX_NLE_F32_e64:
    case AMDGPU::V_CMPSX_NLE_F64_e64:
    case AMDGPU::V_CMPSX_NLG_F32_e64:
    case AMDGPU::V_CMPSX_NLG_F64_e64:
    case AMDGPU::V_CMPSX_NLT_F32_e64:
    case AMDGPU::V_CMPSX_NLT_F64_e64:
    case AMDGPU::V_CMPSX_O_F32_e64:
    case AMDGPU::V_CMPSX_O_F64_e64:
    case AMDGPU::V_CMPSX_TRU_F32_e64:
    case AMDGPU::V_CMPSX_TRU_F64_e64:
    case AMDGPU::V_CMPSX_U_F32_e64:
    case AMDGPU::V_CMPSX_U_F64_e64:
    case AMDGPU::V_CMPS_EQ_F32_e64:
    case AMDGPU::V_CMPS_EQ_F64_e64:
    case AMDGPU::V_CMPS_F_F32_e64:
    case AMDGPU::V_CMPS_F_F64_e64:
    case AMDGPU::V_CMPS_GE_F32_e64:
    case AMDGPU::V_CMPS_GE_F64_e64:
    case AMDGPU::V_CMPS_GT_F32_e64:
    case AMDGPU::V_CMPS_GT_F64_e64:
    case AMDGPU::V_CMPS_LE_F32_e64:
    case AMDGPU::V_CMPS_LE_F64_e64:
    case AMDGPU::V_CMPS_LG_F32_e64:
    case AMDGPU::V_CMPS_LG_F64_e64:
    case AMDGPU::V_CMPS_LT_F32_e64:
    case AMDGPU::V_CMPS_LT_F64_e64:
    case AMDGPU::V_CMPS_NEQ_F32_e64:
    case AMDGPU::V_CMPS_NEQ_F64_e64:
    case AMDGPU::V_CMPS_NGE_F32_e64:
    case AMDGPU::V_CMPS_NGE_F64_e64:
    case AMDGPU::V_CMPS_NGT_F32_e64:
    case AMDGPU::V_CMPS_NGT_F64_e64:
    case AMDGPU::V_CMPS_NLE_F32_e64:
    case AMDGPU::V_CMPS_NLE_F64_e64:
    case AMDGPU::V_CMPS_NLG_F32_e64:
    case AMDGPU::V_CMPS_NLG_F64_e64:
    case AMDGPU::V_CMPS_NLT_F32_e64:
    case AMDGPU::V_CMPS_NLT_F64_e64:
    case AMDGPU::V_CMPS_O_F32_e64:
    case AMDGPU::V_CMPS_O_F64_e64:
    case AMDGPU::V_CMPS_TRU_F32_e64:
    case AMDGPU::V_CMPS_TRU_F64_e64:
    case AMDGPU::V_CMPS_U_F32_e64:
    case AMDGPU::V_CMPS_U_F64_e64:
    case AMDGPU::V_CMPX_CLASS_F32_e64:
    case AMDGPU::V_CMPX_CLASS_F64_e64:
    case AMDGPU::V_CMPX_EQ_F32_e64:
    case AMDGPU::V_CMPX_EQ_F64_e64:
    case AMDGPU::V_CMPX_EQ_I32_e64:
    case AMDGPU::V_CMPX_EQ_I64_e64:
    case AMDGPU::V_CMPX_EQ_U32_e64:
    case AMDGPU::V_CMPX_EQ_U64_e64:
    case AMDGPU::V_CMPX_F_F32_e64:
    case AMDGPU::V_CMPX_F_F64_e64:
    case AMDGPU::V_CMPX_F_I32_e64:
    case AMDGPU::V_CMPX_F_I64_e64:
    case AMDGPU::V_CMPX_F_U32_e64:
    case AMDGPU::V_CMPX_F_U64_e64:
    case AMDGPU::V_CMPX_GE_F32_e64:
    case AMDGPU::V_CMPX_GE_F64_e64:
    case AMDGPU::V_CMPX_GE_I32_e64:
    case AMDGPU::V_CMPX_GE_I64_e64:
    case AMDGPU::V_CMPX_GE_U32_e64:
    case AMDGPU::V_CMPX_GE_U64_e64:
    case AMDGPU::V_CMPX_GT_F32_e64:
    case AMDGPU::V_CMPX_GT_F64_e64:
    case AMDGPU::V_CMPX_GT_I32_e64:
    case AMDGPU::V_CMPX_GT_I64_e64:
    case AMDGPU::V_CMPX_GT_U32_e64:
    case AMDGPU::V_CMPX_GT_U64_e64:
    case AMDGPU::V_CMPX_LE_F32_e64:
    case AMDGPU::V_CMPX_LE_F64_e64:
    case AMDGPU::V_CMPX_LE_I32_e64:
    case AMDGPU::V_CMPX_LE_I64_e64:
    case AMDGPU::V_CMPX_LE_U32_e64:
    case AMDGPU::V_CMPX_LE_U64_e64:
    case AMDGPU::V_CMPX_LG_F32_e64:
    case AMDGPU::V_CMPX_LG_F64_e64:
    case AMDGPU::V_CMPX_LT_F32_e64:
    case AMDGPU::V_CMPX_LT_F64_e64:
    case AMDGPU::V_CMPX_LT_I32_e64:
    case AMDGPU::V_CMPX_LT_I64_e64:
    case AMDGPU::V_CMPX_LT_U32_e64:
    case AMDGPU::V_CMPX_LT_U64_e64:
    case AMDGPU::V_CMPX_NEQ_F32_e64:
    case AMDGPU::V_CMPX_NEQ_F64_e64:
    case AMDGPU::V_CMPX_NE_I32_e64:
    case AMDGPU::V_CMPX_NE_I64_e64:
    case AMDGPU::V_CMPX_NE_U32_e64:
    case AMDGPU::V_CMPX_NE_U64_e64:
    case AMDGPU::V_CMPX_NGE_F32_e64:
    case AMDGPU::V_CMPX_NGE_F64_e64:
    case AMDGPU::V_CMPX_NGT_F32_e64:
    case AMDGPU::V_CMPX_NGT_F64_e64:
    case AMDGPU::V_CMPX_NLE_F32_e64:
    case AMDGPU::V_CMPX_NLE_F64_e64:
    case AMDGPU::V_CMPX_NLG_F32_e64:
    case AMDGPU::V_CMPX_NLG_F64_e64:
    case AMDGPU::V_CMPX_NLT_F32_e64:
    case AMDGPU::V_CMPX_NLT_F64_e64:
    case AMDGPU::V_CMPX_O_F32_e64:
    case AMDGPU::V_CMPX_O_F64_e64:
    case AMDGPU::V_CMPX_TRU_F32_e64:
    case AMDGPU::V_CMPX_TRU_F64_e64:
    case AMDGPU::V_CMPX_T_I32_e64:
    case AMDGPU::V_CMPX_T_I64_e64:
    case AMDGPU::V_CMPX_T_U32_e64:
    case AMDGPU::V_CMPX_T_U64_e64:
    case AMDGPU::V_CMPX_U_F32_e64:
    case AMDGPU::V_CMPX_U_F64_e64:
    case AMDGPU::V_CMP_CLASS_F32_e64:
    case AMDGPU::V_CMP_CLASS_F64_e64:
    case AMDGPU::V_CMP_EQ_F32_e64:
    case AMDGPU::V_CMP_EQ_F64_e64:
    case AMDGPU::V_CMP_EQ_I32_e64:
    case AMDGPU::V_CMP_EQ_I64_e64:
    case AMDGPU::V_CMP_EQ_U32_e64:
    case AMDGPU::V_CMP_EQ_U64_e64:
    case AMDGPU::V_CMP_F_F32_e64:
    case AMDGPU::V_CMP_F_F64_e64:
    case AMDGPU::V_CMP_F_I32_e64:
    case AMDGPU::V_CMP_F_I64_e64:
    case AMDGPU::V_CMP_F_U32_e64:
    case AMDGPU::V_CMP_F_U64_e64:
    case AMDGPU::V_CMP_GE_F32_e64:
    case AMDGPU::V_CMP_GE_F64_e64:
    case AMDGPU::V_CMP_GE_I32_e64:
    case AMDGPU::V_CMP_GE_I64_e64:
    case AMDGPU::V_CMP_GE_U32_e64:
    case AMDGPU::V_CMP_GE_U64_e64:
    case AMDGPU::V_CMP_GT_F32_e64:
    case AMDGPU::V_CMP_GT_F64_e64:
    case AMDGPU::V_CMP_GT_I32_e64:
    case AMDGPU::V_CMP_GT_I64_e64:
    case AMDGPU::V_CMP_GT_U32_e64:
    case AMDGPU::V_CMP_GT_U64_e64:
    case AMDGPU::V_CMP_LE_F32_e64:
    case AMDGPU::V_CMP_LE_F64_e64:
    case AMDGPU::V_CMP_LE_I32_e64:
    case AMDGPU::V_CMP_LE_I64_e64:
    case AMDGPU::V_CMP_LE_U32_e64:
    case AMDGPU::V_CMP_LE_U64_e64:
    case AMDGPU::V_CMP_LG_F32_e64:
    case AMDGPU::V_CMP_LG_F64_e64:
    case AMDGPU::V_CMP_LT_F32_e64:
    case AMDGPU::V_CMP_LT_F64_e64:
    case AMDGPU::V_CMP_LT_I32_e64:
    case AMDGPU::V_CMP_LT_I64_e64:
    case AMDGPU::V_CMP_LT_U32_e64:
    case AMDGPU::V_CMP_LT_U64_e64:
    case AMDGPU::V_CMP_NEQ_F32_e64:
    case AMDGPU::V_CMP_NEQ_F64_e64:
    case AMDGPU::V_CMP_NE_I32_e64:
    case AMDGPU::V_CMP_NE_I64_e64:
    case AMDGPU::V_CMP_NE_U32_e64:
    case AMDGPU::V_CMP_NE_U64_e64:
    case AMDGPU::V_CMP_NGE_F32_e64:
    case AMDGPU::V_CMP_NGE_F64_e64:
    case AMDGPU::V_CMP_NGT_F32_e64:
    case AMDGPU::V_CMP_NGT_F64_e64:
    case AMDGPU::V_CMP_NLE_F32_e64:
    case AMDGPU::V_CMP_NLE_F64_e64:
    case AMDGPU::V_CMP_NLG_F32_e64:
    case AMDGPU::V_CMP_NLG_F64_e64:
    case AMDGPU::V_CMP_NLT_F32_e64:
    case AMDGPU::V_CMP_NLT_F64_e64:
    case AMDGPU::V_CMP_O_F32_e64:
    case AMDGPU::V_CMP_O_F64_e64:
    case AMDGPU::V_CMP_TRU_F32_e64:
    case AMDGPU::V_CMP_TRU_F64_e64:
    case AMDGPU::V_CMP_T_I32_e64:
    case AMDGPU::V_CMP_T_I64_e64:
    case AMDGPU::V_CMP_T_U32_e64:
    case AMDGPU::V_CMP_T_U64_e64:
    case AMDGPU::V_CMP_U_F32_e64:
    case AMDGPU::V_CMP_U_F64_e64:
    case AMDGPU::V_CVT_PKRTZ_F16_F32_e64:
    case AMDGPU::V_LDEXP_F32_e64:
    case AMDGPU::V_LSHLREV_B32_e64:
    case AMDGPU::V_LSHL_B32_e64:
    case AMDGPU::V_LSHRREV_B32_e64:
    case AMDGPU::V_LSHR_B32_e64:
    case AMDGPU::V_MAC_F32_e64:
    case AMDGPU::V_MAC_LEGACY_F32_e64:
    case AMDGPU::V_MADAK_F32_e64:
    case AMDGPU::V_MADMK_F32_e64:
    case AMDGPU::V_MAX_F32_e64:
    case AMDGPU::V_MAX_I32_e64:
    case AMDGPU::V_MAX_LEGACY_F32_e64:
    case AMDGPU::V_MAX_U32_e64:
    case AMDGPU::V_MBCNT_HI_U32_B32_e64:
    case AMDGPU::V_MBCNT_LO_U32_B32_e64:
    case AMDGPU::V_MIN_F32_e64:
    case AMDGPU::V_MIN_I32_e64:
    case AMDGPU::V_MIN_LEGACY_F32_e64:
    case AMDGPU::V_MIN_U32_e64:
    case AMDGPU::V_MUL_F32_e64:
    case AMDGPU::V_MUL_I32_I24_e64:
    case AMDGPU::V_MUL_LEGACY_F32_e64:
    case AMDGPU::V_MUL_U32_U24_e64:
    case AMDGPU::V_OR_B32_e64:
    case AMDGPU::V_READLANE_B32_e64:
    case AMDGPU::V_SUBREV_F32_e64:
    case AMDGPU::V_SUB_F32_e64:
    case AMDGPU::V_WRITELANE_B32_e64:
    case AMDGPU::V_XOR_B32_e64: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(255);
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(511)) << 41;
      // op: abs
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(7)) << 8;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 11;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(3)) << 59;
      // op: neg
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(7)) << 61;
      break;
    }
    case AMDGPU::V_ADDC_U32_e64:
    case AMDGPU::V_ADD_I32_e64:
    case AMDGPU::V_SUBBREV_U32_e64:
    case AMDGPU::V_SUBB_U32_e64:
    case AMDGPU::V_SUBREV_I32_e64:
    case AMDGPU::V_SUB_I32_e64: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(255);
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(511)) << 41;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(3)) << 59;
      // op: neg
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(7)) << 61;
      break;
    }
    case AMDGPU::V_ADD_F64:
    case AMDGPU::V_ALIGNBIT_B32:
    case AMDGPU::V_ALIGNBYTE_B32:
    case AMDGPU::V_BFE_I32:
    case AMDGPU::V_BFE_U32:
    case AMDGPU::V_BFI_B32:
    case AMDGPU::V_CNDMASK_B32_e64:
    case AMDGPU::V_CUBEID_F32:
    case AMDGPU::V_CUBEMA_F32:
    case AMDGPU::V_CUBESC_F32:
    case AMDGPU::V_CUBETC_F32:
    case AMDGPU::V_DIV_FIXUP_F32:
    case AMDGPU::V_DIV_FIXUP_F64:
    case AMDGPU::V_DIV_FMAS_F32:
    case AMDGPU::V_DIV_FMAS_F64:
    case AMDGPU::V_DIV_SCALE_F32:
    case AMDGPU::V_DIV_SCALE_F64:
    case AMDGPU::V_FMA_F32:
    case AMDGPU::V_FMA_F64:
    case AMDGPU::V_LDEXP_F64:
    case AMDGPU::V_MAD_F32:
    case AMDGPU::V_MAD_I32_I24:
    case AMDGPU::V_MAD_LEGACY_F32:
    case AMDGPU::V_MAD_U32_U24:
    case AMDGPU::V_MAX_F64:
    case AMDGPU::V_MIN_F64:
    case AMDGPU::V_MULLIT_F32:
    case AMDGPU::V_MUL_F64:
    case AMDGPU::V_MUL_HI_I32:
    case AMDGPU::V_MUL_HI_U32:
    case AMDGPU::V_MUL_LO_I32:
    case AMDGPU::V_MUL_LO_U32:
    case AMDGPU::V_SAD_U32:
    case AMDGPU::V_TRIG_PREOP_F64: {
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(255);
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(511)) << 32;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(511)) << 41;
      // op: src2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(511)) << 50;
      // op: abs
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(7)) << 8;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(1)) << 11;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(3)) << 59;
      // op: neg
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups);
      Value |= (op & UINT64_C(7)) << 61;
      break;
    }
    case AMDGPU::TEX_VTX_CONSTBUF:
    case AMDGPU::TEX_VTX_TEXBUF: {
      // op: dst_gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 32;
      // op: src_gpr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(127)) << 16;
      // op: BUFFER_ID
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
    case AMDGPU::DS_WRITE_B16:
    case AMDGPU::DS_WRITE_B32:
    case AMDGPU::DS_WRITE_B8: {
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(1)) << 17;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data0
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(255)) << 40;
      // op: data1
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(255)) << 48;
      // op: offset0
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= op & UINT64_C(255);
      // op: offset1
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
    case AMDGPU::LITERALS: {
      // op: literal1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(4294967295);
      // op: literal2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(4294967295)) << 32;
      break;
    }
    case AMDGPU::ALU_CLAUSE:
    case AMDGPU::FETCH_CLAUSE: {
      // op: num
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(255);
      break;
    }
    case AMDGPU::BUFFER_LOAD_DWORDX2_ADDR64:
    case AMDGPU::BUFFER_LOAD_DWORDX2_IDXEN:
    case AMDGPU::BUFFER_LOAD_DWORDX4_ADDR64:
    case AMDGPU::BUFFER_LOAD_DWORDX4_IDXEN:
    case AMDGPU::BUFFER_LOAD_DWORD_ADDR64:
    case AMDGPU::BUFFER_LOAD_DWORD_IDXEN:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZW_ADDR64:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZW_IDXEN:
    case AMDGPU::BUFFER_LOAD_SBYTE_ADDR64:
    case AMDGPU::BUFFER_LOAD_SBYTE_IDXEN:
    case AMDGPU::BUFFER_LOAD_SSHORT_ADDR64:
    case AMDGPU::BUFFER_LOAD_SSHORT_IDXEN:
    case AMDGPU::BUFFER_LOAD_UBYTE_ADDR64:
    case AMDGPU::BUFFER_LOAD_UBYTE_IDXEN:
    case AMDGPU::BUFFER_LOAD_USHORT_ADDR64:
    case AMDGPU::BUFFER_LOAD_USHORT_IDXEN:
    case AMDGPU::BUFFER_STORE_BYTE:
    case AMDGPU::BUFFER_STORE_DWORD:
    case AMDGPU::BUFFER_STORE_DWORDX2:
    case AMDGPU::BUFFER_STORE_DWORDX4:
    case AMDGPU::BUFFER_STORE_SHORT: {
      // op: offset
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= op & UINT64_C(4095);
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(255)) << 32;
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(124)) << 46;
      break;
    }
    case AMDGPU::RAT_MSKOR:
    case AMDGPU::RAT_STORE_DWORD128:
    case AMDGPU::RAT_STORE_DWORD32:
    case AMDGPU::RAT_STORE_DWORD64: {
      // op: rw_gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 15;
      // op: index_gpr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(127)) << 23;
      break;
    }
    case AMDGPU::RAT_WRITE_CACHELESS_128_eg:
    case AMDGPU::RAT_WRITE_CACHELESS_32_eg:
    case AMDGPU::RAT_WRITE_CACHELESS_64_eg: {
      // op: rw_gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 15;
      // op: index_gpr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(127)) << 23;
      // op: eop
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 53;
      break;
    }
    case AMDGPU::LDS_ADD:
    case AMDGPU::LDS_BYTE_WRITE:
    case AMDGPU::LDS_SHORT_WRITE:
    case AMDGPU::LDS_SUB:
    case AMDGPU::LDS_WRITE: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(1)) << 9;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1536)) << 14;
      Value |= (op & UINT64_C(511)) << 13;
      // op: src1_rel
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 22;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(1)) << 31;
      // op: bank_swizzle
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups);
      Value |= (op & UINT64_C(7)) << 50;
      break;
    }
    case AMDGPU::LDS_BYTE_READ_RET:
    case AMDGPU::LDS_READ_RET:
    case AMDGPU::LDS_SHORT_READ_RET:
    case AMDGPU::LDS_UBYTE_READ_RET:
    case AMDGPU::LDS_USHORT_READ_RET: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 9;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 31;
      // op: bank_swizzle
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(7)) << 50;
      break;
    }
    case AMDGPU::LDS_ADD_RET:
    case AMDGPU::LDS_SUB_RET: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 9;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1536)) << 14;
      Value |= (op & UINT64_C(511)) << 13;
      // op: src1_rel
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(1)) << 22;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups);
      Value |= (op & UINT64_C(1)) << 31;
      // op: bank_swizzle
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups);
      Value |= (op & UINT64_C(7)) << 50;
      break;
    }
    case AMDGPU::BFE_UINT_eg:
    case AMDGPU::BFI_INT_eg:
    case AMDGPU::BIT_ALIGN_INT_eg:
    case AMDGPU::CNDE_INT:
    case AMDGPU::CNDE_eg:
    case AMDGPU::CNDE_r600:
    case AMDGPU::CNDGE_INT:
    case AMDGPU::CNDGE_eg:
    case AMDGPU::CNDGE_r600:
    case AMDGPU::CNDGT_INT:
    case AMDGPU::CNDGT_eg:
    case AMDGPU::CNDGT_r600:
    case AMDGPU::MULADD_IEEE_eg:
    case AMDGPU::MULADD_IEEE_r600:
    case AMDGPU::MULADD_INT24_cm:
    case AMDGPU::MULADD_UINT24_eg:
    case AMDGPU::MULADD_eg:
    case AMDGPU::MULADD_r600:
    case AMDGPU::MUL_LIT_eg:
    case AMDGPU::MUL_LIT_r600: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(1)) << 9;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups);
      Value |= (op & UINT64_C(1536)) << 14;
      Value |= (op & UINT64_C(511)) << 13;
      // op: src1_rel
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups);
      Value |= (op & UINT64_C(1)) << 22;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(16), Fixups);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(15), Fixups);
      Value |= (op & UINT64_C(1)) << 31;
      // op: src0_neg
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 12;
      // op: src1_neg
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups);
      Value |= (op & UINT64_C(1)) << 25;
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(1536)) << 52;
      Value |= (op & UINT64_C(127)) << 53;
      // op: bank_swizzle
      op = getMachineOpValue(MI, MI.getOperand(18), Fixups);
      Value |= (op & UINT64_C(7)) << 50;
      // op: dst_rel
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(1)) << 60;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 63;
      // op: src2
      op = getMachineOpValue(MI, MI.getOperand(11), Fixups);
      Value |= (op & UINT64_C(1536)) << 33;
      Value |= (op & UINT64_C(511)) << 32;
      // op: src2_rel
      op = getMachineOpValue(MI, MI.getOperand(13), Fixups);
      Value |= (op & UINT64_C(1)) << 41;
      // op: src2_neg
      op = getMachineOpValue(MI, MI.getOperand(12), Fixups);
      Value |= (op & UINT64_C(1)) << 44;
      break;
    }
    case AMDGPU::CEIL:
    case AMDGPU::COS_cm:
    case AMDGPU::COS_eg:
    case AMDGPU::COS_r600:
    case AMDGPU::COS_r700:
    case AMDGPU::EXP_IEEE_cm:
    case AMDGPU::EXP_IEEE_eg:
    case AMDGPU::EXP_IEEE_r600:
    case AMDGPU::FLOOR:
    case AMDGPU::FLT_TO_INT_eg:
    case AMDGPU::FLT_TO_INT_r600:
    case AMDGPU::FLT_TO_UINT_eg:
    case AMDGPU::FLT_TO_UINT_r600:
    case AMDGPU::FRACT:
    case AMDGPU::INTERP_LOAD_P0:
    case AMDGPU::INT_TO_FLT_eg:
    case AMDGPU::INT_TO_FLT_r600:
    case AMDGPU::LOG_CLAMPED_eg:
    case AMDGPU::LOG_CLAMPED_r600:
    case AMDGPU::LOG_IEEE_cm:
    case AMDGPU::LOG_IEEE_eg:
    case AMDGPU::LOG_IEEE_r600:
    case AMDGPU::MOV:
    case AMDGPU::MOVA_INT_eg:
    case AMDGPU::NOT_INT:
    case AMDGPU::RECIPSQRT_CLAMPED_cm:
    case AMDGPU::RECIPSQRT_CLAMPED_eg:
    case AMDGPU::RECIPSQRT_CLAMPED_r600:
    case AMDGPU::RECIPSQRT_IEEE_cm:
    case AMDGPU::RECIPSQRT_IEEE_eg:
    case AMDGPU::RECIPSQRT_IEEE_r600:
    case AMDGPU::RECIP_CLAMPED_cm:
    case AMDGPU::RECIP_CLAMPED_eg:
    case AMDGPU::RECIP_CLAMPED_r600:
    case AMDGPU::RECIP_IEEE_cm:
    case AMDGPU::RECIP_IEEE_eg:
    case AMDGPU::RECIP_IEEE_r600:
    case AMDGPU::RECIP_UINT_eg:
    case AMDGPU::RECIP_UINT_r600:
    case AMDGPU::RNDNE:
    case AMDGPU::SIN_cm:
    case AMDGPU::SIN_eg:
    case AMDGPU::SIN_r600:
    case AMDGPU::SIN_r700:
    case AMDGPU::TRUNC:
    case AMDGPU::UINT_TO_FLT_eg:
    case AMDGPU::UINT_TO_FLT_r600: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups);
      Value |= (op & UINT64_C(1)) << 9;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(11), Fixups);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups);
      Value |= (op & UINT64_C(1)) << 31;
      // op: src0_neg
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(1)) << 12;
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(1536)) << 52;
      Value |= (op & UINT64_C(127)) << 53;
      // op: bank_swizzle
      op = getMachineOpValue(MI, MI.getOperand(13), Fixups);
      Value |= (op & UINT64_C(7)) << 50;
      // op: dst_rel
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 60;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 63;
      // op: src0_abs
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups);
      Value |= (op & UINT64_C(1)) << 32;
      // op: write
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(1)) << 36;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(3)) << 37;
      break;
    }
    case AMDGPU::ADD:
    case AMDGPU::ADD_INT:
    case AMDGPU::AND_INT:
    case AMDGPU::ASHR_eg:
    case AMDGPU::ASHR_r600:
    case AMDGPU::CUBE_eg_real:
    case AMDGPU::CUBE_r600_real:
    case AMDGPU::DOT4_eg:
    case AMDGPU::DOT4_r600:
    case AMDGPU::KILLGT:
    case AMDGPU::LSHL_eg:
    case AMDGPU::LSHL_r600:
    case AMDGPU::LSHR_eg:
    case AMDGPU::LSHR_r600:
    case AMDGPU::MAX:
    case AMDGPU::MAX_INT:
    case AMDGPU::MAX_UINT:
    case AMDGPU::MIN:
    case AMDGPU::MIN_INT:
    case AMDGPU::MIN_UINT:
    case AMDGPU::MUL:
    case AMDGPU::MULHI_INT_cm:
    case AMDGPU::MULHI_INT_eg:
    case AMDGPU::MULHI_INT_r600:
    case AMDGPU::MULHI_UINT_cm:
    case AMDGPU::MULHI_UINT_eg:
    case AMDGPU::MULHI_UINT_r600:
    case AMDGPU::MULLO_INT_cm:
    case AMDGPU::MULLO_INT_eg:
    case AMDGPU::MULLO_INT_r600:
    case AMDGPU::MULLO_UINT_cm:
    case AMDGPU::MULLO_UINT_eg:
    case AMDGPU::MULLO_UINT_r600:
    case AMDGPU::MUL_IEEE:
    case AMDGPU::MUL_INT24_cm:
    case AMDGPU::MUL_UINT24_eg:
    case AMDGPU::OR_INT:
    case AMDGPU::PRED_SETE:
    case AMDGPU::PRED_SETE_INT:
    case AMDGPU::PRED_SETGE:
    case AMDGPU::PRED_SETGE_INT:
    case AMDGPU::PRED_SETGT:
    case AMDGPU::PRED_SETGT_INT:
    case AMDGPU::PRED_SETNE:
    case AMDGPU::PRED_SETNE_INT:
    case AMDGPU::SETE:
    case AMDGPU::SETE_DX10:
    case AMDGPU::SETE_INT:
    case AMDGPU::SETGE_DX10:
    case AMDGPU::SETGE_INT:
    case AMDGPU::SETGE_UINT:
    case AMDGPU::SETGT_DX10:
    case AMDGPU::SETGT_INT:
    case AMDGPU::SETGT_UINT:
    case AMDGPU::SETNE_DX10:
    case AMDGPU::SETNE_INT:
    case AMDGPU::SGE:
    case AMDGPU::SGT:
    case AMDGPU::SNE:
    case AMDGPU::SUB_INT:
    case AMDGPU::XOR_INT: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups);
      Value |= (op & UINT64_C(1)) << 9;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(12), Fixups);
      Value |= (op & UINT64_C(1536)) << 14;
      Value |= (op & UINT64_C(511)) << 13;
      // op: src1_rel
      op = getMachineOpValue(MI, MI.getOperand(14), Fixups);
      Value |= (op & UINT64_C(1)) << 22;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(18), Fixups);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(17), Fixups);
      Value |= (op & UINT64_C(1)) << 31;
      // op: src0_neg
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups);
      Value |= (op & UINT64_C(1)) << 12;
      // op: src1_neg
      op = getMachineOpValue(MI, MI.getOperand(13), Fixups);
      Value |= (op & UINT64_C(1)) << 25;
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(1536)) << 52;
      Value |= (op & UINT64_C(127)) << 53;
      // op: bank_swizzle
      op = getMachineOpValue(MI, MI.getOperand(20), Fixups);
      Value |= (op & UINT64_C(7)) << 50;
      // op: dst_rel
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(1)) << 60;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(1)) << 63;
      // op: src0_abs
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups);
      Value |= (op & UINT64_C(1)) << 32;
      // op: src1_abs
      op = getMachineOpValue(MI, MI.getOperand(15), Fixups);
      Value |= (op & UINT64_C(1)) << 33;
      // op: update_exec_mask
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(1)) << 34;
      // op: update_pred
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 35;
      // op: write
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 36;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(3)) << 37;
      break;
    }
    case AMDGPU::INTERP_XY:
    case AMDGPU::INTERP_ZW: {
      // op: src0
      op = getMachineOpValue(MI, MI.getOperand(7), Fixups);
      Value |= (op & UINT64_C(1536)) << 1;
      Value |= op & UINT64_C(511);
      // op: src0_rel
      op = getMachineOpValue(MI, MI.getOperand(9), Fixups);
      Value |= (op & UINT64_C(1)) << 9;
      // op: src1
      op = getMachineOpValue(MI, MI.getOperand(12), Fixups);
      Value |= (op & UINT64_C(1536)) << 14;
      Value |= (op & UINT64_C(511)) << 13;
      // op: src1_rel
      op = getMachineOpValue(MI, MI.getOperand(14), Fixups);
      Value |= (op & UINT64_C(1)) << 22;
      // op: pred_sel
      op = getMachineOpValue(MI, MI.getOperand(18), Fixups);
      Value |= (op & UINT64_C(3)) << 29;
      // op: last
      op = getMachineOpValue(MI, MI.getOperand(17), Fixups);
      Value |= (op & UINT64_C(1)) << 31;
      // op: src0_neg
      op = getMachineOpValue(MI, MI.getOperand(8), Fixups);
      Value |= (op & UINT64_C(1)) << 12;
      // op: src1_neg
      op = getMachineOpValue(MI, MI.getOperand(13), Fixups);
      Value |= (op & UINT64_C(1)) << 25;
      // op: dst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(1536)) << 52;
      Value |= (op & UINT64_C(127)) << 53;
      // op: dst_rel
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(1)) << 60;
      // op: clamp
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(1)) << 63;
      // op: src0_abs
      op = getMachineOpValue(MI, MI.getOperand(10), Fixups);
      Value |= (op & UINT64_C(1)) << 32;
      // op: src1_abs
      op = getMachineOpValue(MI, MI.getOperand(15), Fixups);
      Value |= (op & UINT64_C(1)) << 33;
      // op: update_exec_mask
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(1)) << 34;
      // op: update_pred
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 35;
      // op: write
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 36;
      // op: omod
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(3)) << 37;
      break;
    }
    case AMDGPU::VTX_READ_GLOBAL_128_cm:
    case AMDGPU::VTX_READ_GLOBAL_128_eg:
    case AMDGPU::VTX_READ_GLOBAL_16_cm:
    case AMDGPU::VTX_READ_GLOBAL_16_eg:
    case AMDGPU::VTX_READ_GLOBAL_32_cm:
    case AMDGPU::VTX_READ_GLOBAL_32_eg:
    case AMDGPU::VTX_READ_GLOBAL_64_cm:
    case AMDGPU::VTX_READ_GLOBAL_64_eg:
    case AMDGPU::VTX_READ_GLOBAL_8_cm:
    case AMDGPU::VTX_READ_GLOBAL_8_eg:
    case AMDGPU::VTX_READ_PARAM_128_cm:
    case AMDGPU::VTX_READ_PARAM_128_eg:
    case AMDGPU::VTX_READ_PARAM_16_cm:
    case AMDGPU::VTX_READ_PARAM_16_eg:
    case AMDGPU::VTX_READ_PARAM_32_cm:
    case AMDGPU::VTX_READ_PARAM_32_eg:
    case AMDGPU::VTX_READ_PARAM_64_cm:
    case AMDGPU::VTX_READ_PARAM_64_eg:
    case AMDGPU::VTX_READ_PARAM_8_cm:
    case AMDGPU::VTX_READ_PARAM_8_eg: {
      // op: src_gpr
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(127)) << 16;
      // op: dst_gpr
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 32;
      break;
    }
    case AMDGPU::BUFFER_LOAD_DWORDX2_OFFEN:
    case AMDGPU::BUFFER_LOAD_DWORDX4_OFFEN:
    case AMDGPU::BUFFER_LOAD_DWORD_OFFEN:
    case AMDGPU::BUFFER_LOAD_FORMAT_XYZW_OFFEN:
    case AMDGPU::BUFFER_LOAD_SBYTE_OFFEN:
    case AMDGPU::BUFFER_LOAD_SSHORT_OFFEN:
    case AMDGPU::BUFFER_LOAD_UBYTE_OFFEN:
    case AMDGPU::BUFFER_LOAD_USHORT_OFFEN: {
      // op: vaddr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(255)) << 32;
      // op: vdata
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(255)) << 40;
      // op: srsrc
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(124)) << 46;
      break;
    }
    case AMDGPU::DS_READ_B32:
    case AMDGPU::DS_READ_I16:
    case AMDGPU::DS_READ_I8:
    case AMDGPU::DS_READ_U16:
    case AMDGPU::DS_READ_U8: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(255)) << 56;
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(1)) << 17;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data0
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(255)) << 40;
      // op: data1
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(255)) << 48;
      // op: offset0
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= op & UINT64_C(255);
      // op: offset1
      op = getMachineOpValue(MI, MI.getOperand(6), Fixups);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
    case AMDGPU::DS_ADD_U32_RTN:
    case AMDGPU::DS_SUB_U32_RTN: {
      // op: vdst
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(255)) << 56;
      // op: gds
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(1)) << 17;
      // op: addr
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(255)) << 32;
      // op: data0
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(255)) << 40;
      // op: offset0
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= op & UINT64_C(255);
      // op: offset1
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(255)) << 8;
      break;
    }
  default:
    std::string msg;
    raw_string_ostream Msg(msg);
    Msg << "Not supported instr: " << MI;
    report_fatal_error(Msg.str());
  }
  return Value;
}

