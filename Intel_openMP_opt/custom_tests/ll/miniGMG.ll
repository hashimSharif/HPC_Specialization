; ModuleID = 'custom_tests/bc/miniGMG.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%ident_t = type { i32, i32, i32, i32, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.domain_type = type { %struct.anon, i32, i32, i32, i32, [27 x i32], [27 x double*], [27 x double*], [27 x %struct.anon.0], [10 x %struct.bufferCopy_type*], i32, i32, i32, i32, i32, i32, %struct.anon.0, %struct.anon.0, %struct.anon.0, %struct.anon.0, %struct.anon.0, i32, i32, i32, i32, i32, [10 x double], [10 x double], %struct.subdomain_type* }
%struct.anon = type { [10 x i64], [10 x i64], [10 x i64], [10 x i64], [10 x i64], [10 x i64], [10 x i64], [10 x i64], [10 x i64], [10 x i64], [10 x i64], [10 x i64], [10 x i64], [10 x i64], [10 x i64], [10 x i64], i64, i64, i64 }
%struct.bufferCopy_type = type { i32, i32, i32, %struct.anon.0, %struct.anon.2, %struct.anon.2 }
%struct.anon.2 = type { i32, i32, i32, i32, i32, i32, double* }
%struct.anon.0 = type { i32, i32, i32 }
%struct.subdomain_type = type { %struct.anon.0, %struct.anon.0, i32, i32, [27 x %struct.neighbor_type], %struct.box_type* }
%struct.neighbor_type = type { i32, i32, %struct.anon.10, %struct.anon.10 }
%struct.anon.10 = type { i32, %struct.anon.0 }
%struct.box_type = type { double, %struct.anon.0, %struct.anon.0, %struct.anon.0, i32, i32, i32, i32, i32, [27 x i32], double**, i64*, [2 x double*], i8* }
%struct.MPI_Status = type { i32, i32, i32, i32, i32 }
%struct.kmp_task_t_with_privates = type { %struct.kmp_task_t, %struct..kmp_privates.t }
%struct.kmp_task_t = type { i8*, i32 (i32, i8*)*, i32, i32 (i32, i8*)* }
%struct..kmp_privates.t = type { %struct.box_type*, double, double*, double*, double, double, double*, double*, double*, double*, double*, double*, i32, i32, i32, i32, i32, i32 }

@.gomp_critical_user_.reduction.var = common global [8 x i32] zeroinitializer
@str = private unnamed_addr constant [14 x i8] c"PlaceHolder \0A\00"
@exchange_boundary.corners = private unnamed_addr constant [27 x i32] [i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1], align 16
@exchange_boundary.edges = private unnamed_addr constant [27 x i32] [i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0], align 16
@0 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0) }, align 8
@.str.1 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@1 = private unnamed_addr constant %ident_t { i32 0, i32 18, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0) }, align 8
@.str.8 = private unnamed_addr constant [35 x i8] c"  level=%2d, eigenvalue_max ~= %e\0A\00", align 1
@stdout = external global %struct._IO_FILE*, align 8
@.str.57 = private unnamed_addr constant [33 x i8] c"\0A  average value of f = %20.12e\0A\00", align 1
@2 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i32 0, i32 0) }, align 8
@.str = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"Requested MPI_THREAD_FUNNELED, \00", align 1
@str.21 = private unnamed_addr constant [24 x i8] c"got MPI_THREAD_MULTIPLE\00"
@str.20 = private unnamed_addr constant [22 x i8] c"got MPI_THREAD_SINGLE\00"
@str.19 = private unnamed_addr constant [24 x i8] c"got MPI_THREAD_FUNNELED\00"
@str.18 = private unnamed_addr constant [26 x i8] c"got MPI_THREAD_SERIALIZED\00"
@.str.10 = private unnamed_addr constant [38 x i8] c"got Unknown MPI Threading Model (%d)\0A\00", align 1
@str.17 = private unnamed_addr constant [87 x i8] c"usage: ./a.out [log2_subdomain_dim]   [subdomains per rank in i,j,k]  [ranks in i,j,k]\00"
@.str.12 = private unnamed_addr constant [71 x i8] c"error, ranks_in_i*ranks_in_j*ranks_in_k(%d*%d*%d=%d) != MPI_Tasks(%d)\0A\00", align 1
@.str.13 = private unnamed_addr constant [28 x i8] c"%d MPI Tasks of %d threads\0A\00", align 1
@.str.14 = private unnamed_addr constant [43 x i8] c"truncating the v-cycle at %d^3 subdomains\0A\00", align 1
@.str.15 = private unnamed_addr constant [34 x i8] c"initializing alpha, beta, RHS ...\00", align 1
@str.2 = private unnamed_addr constant [5 x i8] c"done\00"
@.str.5 = private unnamed_addr constant [26 x i8] c"creating domain...       \00", align 1
@.str.1.6 = private unnamed_addr constant [34 x i8] c"#ghosts(%d)>bottom grid size(%d)\0A\00", align 1
@str.43 = private unnamed_addr constant [30 x i8] c"subdomain_dim's must be equal\00"
@create_domain.FacesEdgesCorners = private unnamed_addr constant [27 x i32] [i32 4, i32 10, i32 12, i32 14, i32 16, i32 22, i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 0, i32 2, i32 6, i32 8, i32 18, i32 20, i32 24, i32 26, i32 13], align 16
@create_domain.edges = private unnamed_addr constant [27 x i32] [i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0], align 16
@create_domain.corners = private unnamed_addr constant [27 x i32] [i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1], align 16
@str.48 = private unnamed_addr constant [5 x i8] c"done\00"
@.str.4 = private unnamed_addr constant [32 x i8] c"  %d x %d x %d (per subdomain)\0A\00", align 1
@.str.5.7 = private unnamed_addr constant [30 x i8] c"  %d x %d x %d (per process)\0A\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"  %d x %d x %d (overall)\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"  %d-deep ghost zones\0A\00", align 1
@.str.8.8 = private unnamed_addr constant [21 x i8] c"  allocated %llu MB\0A\00", align 1
@.str.9 = private unnamed_addr constant [26 x i8] c"deallocating domain...   \00", align 1
@.str.10.13 = private unnamed_addr constant [24 x i8] c"                       \00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"%12d \00", align 1
@.str.13.14 = private unnamed_addr constant [8 x i8] c"%10d^3 \00", align 1
@str.45 = private unnamed_addr constant [13 x i8] c"       total\00"
@.str.15.15 = private unnamed_addr constant [24 x i8] c"smooth                 \00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"%12.6f \00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"%12.6f\0A\00", align 1
@.str.18 = private unnamed_addr constant [24 x i8] c"residual               \00", align 1
@.str.19 = private unnamed_addr constant [24 x i8] c"restriction            \00", align 1
@.str.20 = private unnamed_addr constant [24 x i8] c"interpolation          \00", align 1
@.str.21 = private unnamed_addr constant [24 x i8] c"applyOp                \00", align 1
@.str.22 = private unnamed_addr constant [24 x i8] c"BLAS1                  \00", align 1
@.str.23 = private unnamed_addr constant [24 x i8] c"BLAS3                  \00", align 1
@.str.24 = private unnamed_addr constant [24 x i8] c"communication          \00", align 1
@.str.25 = private unnamed_addr constant [24 x i8] c"  local exchange       \00", align 1
@.str.26 = private unnamed_addr constant [24 x i8] c"  pack MPI buffers     \00", align 1
@.str.27 = private unnamed_addr constant [24 x i8] c"  unpack MPI buffers   \00", align 1
@.str.28 = private unnamed_addr constant [24 x i8] c"  MPI_Isend            \00", align 1
@.str.29 = private unnamed_addr constant [24 x i8] c"  MPI_Irecv            \00", align 1
@.str.30 = private unnamed_addr constant [24 x i8] c"  MPI_Waitall          \00", align 1
@.str.31 = private unnamed_addr constant [24 x i8] c"  MPI_collectives      \00", align 1
@.str.32 = private unnamed_addr constant [24 x i8] c"--------------         \00", align 1
@.str.33 = private unnamed_addr constant [14 x i8] c"------------ \00", align 1
@.str.34 = private unnamed_addr constant [24 x i8] c"Total by level         \00", align 1
@.str.35 = private unnamed_addr constant [34 x i8] c"  Total time in MGBuild   %12.6f\0A\00", align 1
@.str.36 = private unnamed_addr constant [34 x i8] c"  Total time in MGSolve   %12.6f\0A\00", align 1
@.str.37 = private unnamed_addr constant [34 x i8] c"              \22 v-cycles  %12.6f\0A\00", align 1
@.str.38 = private unnamed_addr constant [32 x i8] c"      number of v-cycles  %12d\0A\00", align 1
@.str.39 = private unnamed_addr constant [32 x i8] c"Bottom solver iterations  %12d\0A\00", align 1
@str.46 = private unnamed_addr constant [2 x i8] c"\0A\00"
@.str.41 = private unnamed_addr constant [33 x i8] c"MGBuild...                      \00", align 1
@.str.42 = private unnamed_addr constant [33 x i8] c"MGSolve...                      \00", align 1
@RandomPadding = global i32 -1, align 4

; Function Attrs: noinline nounwind uwtable
define void @placeHolder() #0 {
entry:
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @str, i64 0, i64 0))
  ret void
}

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture) #1

; Function Attrs: norecurse nounwind uwtable
define void @DoBufferCopy(%struct.domain_type* nocapture readonly %domain, i32 %level, i32 %grid_id, i32 %buffer) #2 {
entry:
  %idxprom = sext i32 %buffer to i64
  %idxprom1 = sext i32 %level to i64
  %arrayidx = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 9, i64 %idxprom1
  %0 = load %struct.bufferCopy_type*, %struct.bufferCopy_type** %arrayidx, align 8, !tbaa !1
  %i = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 3, i32 0
  %1 = load i32, i32* %i, align 4, !tbaa !5
  %j = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 3, i32 1
  %2 = load i32, i32* %j, align 4, !tbaa !10
  %k = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 3, i32 2
  %3 = load i32, i32* %k, align 4, !tbaa !11
  %i20 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 4, i32 1
  %4 = load i32, i32* %i20, align 4, !tbaa !12
  %j27 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 4, i32 2
  %5 = load i32, i32* %j27, align 8, !tbaa !13
  %k34 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 4, i32 3
  %6 = load i32, i32* %k34, align 4, !tbaa !14
  %pencil = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 4, i32 4
  %7 = load i32, i32* %pencil, align 8, !tbaa !15
  %plane = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 4, i32 5
  %8 = load i32, i32* %plane, align 4, !tbaa !16
  %i52 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 5, i32 1
  %9 = load i32, i32* %i52, align 4, !tbaa !17
  %j59 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 5, i32 2
  %10 = load i32, i32* %j59, align 8, !tbaa !18
  %k66 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 5, i32 3
  %11 = load i32, i32* %k66, align 4, !tbaa !19
  %pencil73 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 5, i32 4
  %12 = load i32, i32* %pencil73, align 8, !tbaa !20
  %plane80 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 5, i32 5
  %13 = load i32, i32* %plane80, align 4, !tbaa !21
  %ptr = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 4, i32 6
  %ptr95 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 5, i32 6
  %14 = load double*, double** %ptr95, align 8, !tbaa !22
  %box = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 4, i32 0
  %15 = load i32, i32* %box, align 8, !tbaa !23
  %cmp = icmp sgt i32 %15, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %idxprom102 = sext i32 %grid_id to i64
  %idxprom111 = sext i32 %15 to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %16 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %16, i64 %idxprom111, i32 5
  %17 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %17, i64 %idxprom1, i32 10
  %18 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx114 = getelementptr inbounds double*, double** %18, i64 %idxprom102
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %read81.0.in = phi double** [ %arrayidx114, %if.then ], [ %ptr, %entry ]
  %read81.0 = load double*, double** %read81.0.in, align 8, !tbaa !1
  %box121 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %0, i64 %idxprom, i32 5, i32 0
  %19 = load i32, i32* %box121, align 8, !tbaa !33
  %cmp122 = icmp sgt i32 %19, -1
  br i1 %cmp122, label %if.then123, label %if.end140

if.then123:                                       ; preds = %if.end
  %idxprom124 = sext i32 %grid_id to i64
  %idxprom133 = sext i32 %19 to i64
  %subdomains134 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %20 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains134, align 8, !tbaa !24
  %levels136 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %20, i64 %idxprom133, i32 5
  %21 = load %struct.box_type*, %struct.box_type** %levels136, align 8, !tbaa !28
  %grids138 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom1, i32 10
  %22 = load double**, double*** %grids138, align 8, !tbaa !30
  %arrayidx139 = getelementptr inbounds double*, double** %22, i64 %idxprom124
  %23 = load double*, double** %arrayidx139, align 8, !tbaa !1
  br label %if.end140

if.end140:                                        ; preds = %if.then123, %if.end
  %write88.0 = phi double* [ %23, %if.then123 ], [ %14, %if.end ]
  switch i32 %1, label %for.cond222.preheader [
    i32 1, label %for.cond.preheader
    i32 4, label %for.cond171.preheader
  ]

for.cond171.preheader:                            ; preds = %if.end140
  %cmp172431 = icmp sgt i32 %3, 0
  %cmp175429 = icmp sgt i32 %2, 0
  %or.cond = and i1 %cmp172431, %cmp175429
  br i1 %or.cond, label %for.body176.lr.ph.us.preheader, label %if.end261

for.body176.lr.ph.us.preheader:                   ; preds = %for.cond171.preheader
  %24 = sext i32 %5 to i64
  %25 = sext i32 %7 to i64
  %26 = sext i32 %10 to i64
  %27 = sext i32 %12 to i64
  br label %for.body176.lr.ph.us

for.body176.us:                                   ; preds = %for.body176.us, %for.body176.lr.ph.us
  %indvars.iv480 = phi i64 [ 0, %for.body176.lr.ph.us ], [ %indvars.iv.next481, %for.body176.us ]
  %28 = add nsw i64 %indvars.iv480, %24
  %29 = mul nsw i64 %28, %25
  %30 = trunc i64 %29 to i32
  %add183.us = add i32 %add180.us, %30
  %31 = add nsw i64 %indvars.iv480, %26
  %32 = mul nsw i64 %31, %27
  %33 = trunc i64 %32 to i32
  %add190.us = add i32 %add187.us, %33
  %idxprom192.us = sext i32 %add183.us to i64
  %arrayidx193.us = getelementptr inbounds double, double* %read81.0, i64 %idxprom192.us
  %34 = bitcast double* %arrayidx193.us to i64*
  %35 = load i64, i64* %34, align 8, !tbaa !34
  %idxprom195.us = sext i32 %add190.us to i64
  %arrayidx196.us = getelementptr inbounds double, double* %write88.0, i64 %idxprom195.us
  %36 = bitcast double* %arrayidx196.us to i64*
  store i64 %35, i64* %36, align 8, !tbaa !34
  %add197.us = add nsw i32 %add183.us, 1
  %idxprom198.us = sext i32 %add197.us to i64
  %arrayidx199.us = getelementptr inbounds double, double* %read81.0, i64 %idxprom198.us
  %37 = bitcast double* %arrayidx199.us to i64*
  %38 = load i64, i64* %37, align 8, !tbaa !34
  %add200.us = add nsw i32 %add190.us, 1
  %idxprom201.us = sext i32 %add200.us to i64
  %arrayidx202.us = getelementptr inbounds double, double* %write88.0, i64 %idxprom201.us
  %39 = bitcast double* %arrayidx202.us to i64*
  store i64 %38, i64* %39, align 8, !tbaa !34
  %add203.us = add nsw i32 %add183.us, 2
  %idxprom204.us = sext i32 %add203.us to i64
  %arrayidx205.us = getelementptr inbounds double, double* %read81.0, i64 %idxprom204.us
  %40 = bitcast double* %arrayidx205.us to i64*
  %41 = load i64, i64* %40, align 8, !tbaa !34
  %add206.us = add nsw i32 %add190.us, 2
  %idxprom207.us = sext i32 %add206.us to i64
  %arrayidx208.us = getelementptr inbounds double, double* %write88.0, i64 %idxprom207.us
  %42 = bitcast double* %arrayidx208.us to i64*
  store i64 %41, i64* %42, align 8, !tbaa !34
  %add209.us = add nsw i32 %add183.us, 3
  %idxprom210.us = sext i32 %add209.us to i64
  %arrayidx211.us = getelementptr inbounds double, double* %read81.0, i64 %idxprom210.us
  %43 = bitcast double* %arrayidx211.us to i64*
  %44 = load i64, i64* %43, align 8, !tbaa !34
  %add212.us = add nsw i32 %add190.us, 3
  %idxprom213.us = sext i32 %add212.us to i64
  %arrayidx214.us = getelementptr inbounds double, double* %write88.0, i64 %idxprom213.us
  %45 = bitcast double* %arrayidx214.us to i64*
  store i64 %44, i64* %45, align 8, !tbaa !34
  %indvars.iv.next481 = add nuw nsw i64 %indvars.iv480, 1
  %lftr.wideiv486 = trunc i64 %indvars.iv.next481 to i32
  %exitcond487 = icmp eq i32 %lftr.wideiv486, %2
  br i1 %exitcond487, label %for.cond174.for.inc218_crit_edge.us, label %for.body176.us

for.body176.lr.ph.us:                             ; preds = %for.cond174.for.inc218_crit_edge.us, %for.body176.lr.ph.us.preheader
  %k143.1432.us = phi i32 [ %inc219.us, %for.cond174.for.inc218_crit_edge.us ], [ 0, %for.body176.lr.ph.us.preheader ]
  %add181.us = add nsw i32 %k143.1432.us, %6
  %mul182.us = mul nsw i32 %add181.us, %8
  %add180.us = add i32 %mul182.us, %4
  %add188.us = add nsw i32 %k143.1432.us, %11
  %mul189.us = mul nsw i32 %add188.us, %13
  %add187.us = add i32 %mul189.us, %9
  br label %for.body176.us

for.cond174.for.inc218_crit_edge.us:              ; preds = %for.body176.us
  %inc219.us = add nuw nsw i32 %k143.1432.us, 1
  %exitcond488 = icmp eq i32 %inc219.us, %3
  br i1 %exitcond488, label %if.end261.loopexit496, label %for.body176.lr.ph.us

for.cond.preheader:                               ; preds = %if.end140
  %cmp146426 = icmp sgt i32 %3, 0
  %cmp148424 = icmp sgt i32 %2, 0
  %or.cond492 = and i1 %cmp146426, %cmp148424
  br i1 %or.cond492, label %for.body149.lr.ph.us.preheader, label %if.end261

for.body149.lr.ph.us.preheader:                   ; preds = %for.cond.preheader
  %46 = sext i32 %5 to i64
  %47 = sext i32 %7 to i64
  %48 = sext i32 %10 to i64
  %49 = sext i32 %12 to i64
  %xtraiter497 = and i32 %2, 1
  %lcmp.mod498 = icmp eq i32 %xtraiter497, 0
  %50 = mul i32 %5, %7
  %51 = mul i32 %10, %12
  %52 = icmp eq i32 %2, 1
  br label %for.body149.lr.ph.us

for.body149.us:                                   ; preds = %for.body149.us, %for.body149.lr.ph.us.split.split
  %indvars.iv470 = phi i64 [ %indvars.iv470.unr, %for.body149.lr.ph.us.split.split ], [ %indvars.iv.next471.1, %for.body149.us ]
  %53 = add nsw i64 %indvars.iv470, %46
  %54 = mul nsw i64 %53, %47
  %55 = trunc i64 %54 to i32
  %add154.us = add i32 %add151.us, %55
  %56 = add nsw i64 %indvars.iv470, %48
  %57 = mul nsw i64 %56, %49
  %58 = trunc i64 %57 to i32
  %add161.us = add i32 %add158.us, %58
  %idxprom162.us = sext i32 %add154.us to i64
  %arrayidx163.us = getelementptr inbounds double, double* %read81.0, i64 %idxprom162.us
  %59 = bitcast double* %arrayidx163.us to i64*
  %60 = load i64, i64* %59, align 8, !tbaa !34
  %idxprom164.us = sext i32 %add161.us to i64
  %arrayidx165.us = getelementptr inbounds double, double* %write88.0, i64 %idxprom164.us
  %61 = bitcast double* %arrayidx165.us to i64*
  store i64 %60, i64* %61, align 8, !tbaa !34
  %indvars.iv.next471 = add nuw nsw i64 %indvars.iv470, 1
  %62 = add nsw i64 %indvars.iv.next471, %46
  %63 = mul nsw i64 %62, %47
  %64 = trunc i64 %63 to i32
  %add154.us.1 = add i32 %add151.us, %64
  %65 = add nsw i64 %indvars.iv.next471, %48
  %66 = mul nsw i64 %65, %49
  %67 = trunc i64 %66 to i32
  %add161.us.1 = add i32 %add158.us, %67
  %idxprom162.us.1 = sext i32 %add154.us.1 to i64
  %arrayidx163.us.1 = getelementptr inbounds double, double* %read81.0, i64 %idxprom162.us.1
  %68 = bitcast double* %arrayidx163.us.1 to i64*
  %69 = load i64, i64* %68, align 8, !tbaa !34
  %idxprom164.us.1 = sext i32 %add161.us.1 to i64
  %arrayidx165.us.1 = getelementptr inbounds double, double* %write88.0, i64 %idxprom164.us.1
  %70 = bitcast double* %arrayidx165.us.1 to i64*
  store i64 %69, i64* %70, align 8, !tbaa !34
  %indvars.iv.next471.1 = add nsw i64 %indvars.iv470, 2
  %lftr.wideiv476.1 = trunc i64 %indvars.iv.next471.1 to i32
  %exitcond477.1 = icmp eq i32 %lftr.wideiv476.1, %2
  br i1 %exitcond477.1, label %for.cond147.for.inc166_crit_edge.us.unr-lcssa, label %for.body149.us

for.body149.lr.ph.us:                             ; preds = %for.cond147.for.inc166_crit_edge.us, %for.body149.lr.ph.us.preheader
  %k143.0427.us = phi i32 [ %inc167.us, %for.cond147.for.inc166_crit_edge.us ], [ 0, %for.body149.lr.ph.us.preheader ]
  %add152.us = add nsw i32 %k143.0427.us, %6
  %mul153.us = mul nsw i32 %add152.us, %8
  %add151.us = add i32 %mul153.us, %4
  %add159.us = add nsw i32 %k143.0427.us, %11
  %mul160.us = mul nsw i32 %add159.us, %13
  %add158.us = add i32 %mul160.us, %9
  br i1 %lcmp.mod498, label %for.body149.lr.ph.us.split, label %for.body149.us.prol

for.body149.us.prol:                              ; preds = %for.body149.lr.ph.us
  %add154.us.prol = add i32 %add151.us, %50
  %add161.us.prol = add i32 %add158.us, %51
  %idxprom162.us.prol = sext i32 %add154.us.prol to i64
  %arrayidx163.us.prol = getelementptr inbounds double, double* %read81.0, i64 %idxprom162.us.prol
  %71 = bitcast double* %arrayidx163.us.prol to i64*
  %72 = load i64, i64* %71, align 8, !tbaa !34
  %idxprom164.us.prol = sext i32 %add161.us.prol to i64
  %arrayidx165.us.prol = getelementptr inbounds double, double* %write88.0, i64 %idxprom164.us.prol
  %73 = bitcast double* %arrayidx165.us.prol to i64*
  store i64 %72, i64* %73, align 8, !tbaa !34
  br label %for.body149.lr.ph.us.split

for.body149.lr.ph.us.split:                       ; preds = %for.body149.lr.ph.us, %for.body149.us.prol
  %indvars.iv470.unr = phi i64 [ 0, %for.body149.lr.ph.us ], [ 1, %for.body149.us.prol ]
  br i1 %52, label %for.cond147.for.inc166_crit_edge.us, label %for.body149.lr.ph.us.split.split

for.body149.lr.ph.us.split.split:                 ; preds = %for.body149.lr.ph.us.split
  br label %for.body149.us

for.cond147.for.inc166_crit_edge.us.unr-lcssa:    ; preds = %for.body149.us
  br label %for.cond147.for.inc166_crit_edge.us

for.cond147.for.inc166_crit_edge.us:              ; preds = %for.body149.lr.ph.us.split, %for.cond147.for.inc166_crit_edge.us.unr-lcssa
  %inc167.us = add nuw nsw i32 %k143.0427.us, 1
  %exitcond478 = icmp eq i32 %inc167.us, %3
  br i1 %exitcond478, label %if.end261.loopexit495, label %for.body149.lr.ph.us

for.cond222.preheader:                            ; preds = %if.end140
  %cmp223421 = icmp sgt i32 %3, 0
  br i1 %cmp223421, label %for.cond225.preheader.lr.ph, label %if.end261

for.cond225.preheader.lr.ph:                      ; preds = %for.cond222.preheader
  %cmp226418 = icmp sgt i32 %2, 0
  %cmp229416 = icmp sgt i32 %1, 0
  br i1 %cmp226418, label %for.cond228.preheader.lr.ph.us.preheader, label %if.end261

for.cond228.preheader.lr.ph.us.preheader:         ; preds = %for.cond225.preheader.lr.ph
  %xtraiter = and i32 %1, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  %74 = icmp eq i32 %1, 1
  br label %for.cond228.preheader.lr.ph.us

for.cond228.preheader.lr.ph.us:                   ; preds = %for.cond228.preheader.lr.ph.us.preheader, %for.cond225.for.inc257_crit_edge.us
  %k143.2422.us = phi i32 [ %inc258.us, %for.cond225.for.inc257_crit_edge.us ], [ 0, %for.cond228.preheader.lr.ph.us.preheader ]
  %add236.us = add nsw i32 %k143.2422.us, %6
  %mul237.us = mul nsw i32 %add236.us, %8
  %add232.us = add i32 %mul237.us, %4
  %add244.us = add nsw i32 %k143.2422.us, %11
  %mul245.us = mul nsw i32 %add244.us, %13
  %add240.us = add i32 %mul245.us, %9
  br i1 %cmp229416, label %for.body230.lr.ph.us.us.preheader, label %for.cond225.for.inc257_crit_edge.us

for.body230.lr.ph.us.us.preheader:                ; preds = %for.cond228.preheader.lr.ph.us
  br label %for.body230.lr.ph.us.us

for.cond225.for.inc257_crit_edge.us.loopexit:     ; preds = %for.cond228.for.inc254_crit_edge.us.us
  br label %for.cond225.for.inc257_crit_edge.us

for.cond225.for.inc257_crit_edge.us:              ; preds = %for.cond225.for.inc257_crit_edge.us.loopexit, %for.cond228.preheader.lr.ph.us
  %inc258.us = add nuw nsw i32 %k143.2422.us, 1
  %exitcond468 = icmp eq i32 %inc258.us, %3
  br i1 %exitcond468, label %if.end261.loopexit, label %for.cond228.preheader.lr.ph.us

for.body230.lr.ph.us.us:                          ; preds = %for.body230.lr.ph.us.us.preheader, %for.cond228.for.inc254_crit_edge.us.us
  %j142.2419.us.us = phi i32 [ %inc255.us.us, %for.cond228.for.inc254_crit_edge.us.us ], [ 0, %for.body230.lr.ph.us.us.preheader ]
  %add233.us.us = add nsw i32 %j142.2419.us.us, %5
  %mul234.us.us = mul nsw i32 %add233.us.us, %7
  %add235.us.us = add i32 %add232.us, %mul234.us.us
  %add241.us.us = add nsw i32 %j142.2419.us.us, %10
  %mul242.us.us = mul nsw i32 %add241.us.us, %12
  %add243.us.us = add i32 %add240.us, %mul242.us.us
  br i1 %lcmp.mod, label %for.body230.lr.ph.us.us.split, label %for.body230.us.us.prol

for.body230.us.us.prol:                           ; preds = %for.body230.lr.ph.us.us
  %add238.us.us.prol = add i32 %add232.us, %mul234.us.us
  %add246.us.us.prol = add i32 %add240.us, %mul242.us.us
  %idxprom247.us.us.prol = sext i32 %add238.us.us.prol to i64
  %arrayidx248.us.us.prol = getelementptr inbounds double, double* %read81.0, i64 %idxprom247.us.us.prol
  %75 = bitcast double* %arrayidx248.us.us.prol to i64*
  %76 = load i64, i64* %75, align 8, !tbaa !34
  %idxprom249.us.us.prol = sext i32 %add246.us.us.prol to i64
  %arrayidx250.us.us.prol = getelementptr inbounds double, double* %write88.0, i64 %idxprom249.us.us.prol
  %77 = bitcast double* %arrayidx250.us.us.prol to i64*
  store i64 %76, i64* %77, align 8, !tbaa !34
  br label %for.body230.lr.ph.us.us.split

for.body230.lr.ph.us.us.split:                    ; preds = %for.body230.lr.ph.us.us, %for.body230.us.us.prol
  %indvars.iv.unr = phi i64 [ 0, %for.body230.lr.ph.us.us ], [ 1, %for.body230.us.us.prol ]
  br i1 %74, label %for.cond228.for.inc254_crit_edge.us.us, label %for.body230.lr.ph.us.us.split.split

for.body230.lr.ph.us.us.split.split:              ; preds = %for.body230.lr.ph.us.us.split
  br label %for.body230.us.us

for.cond228.for.inc254_crit_edge.us.us.unr-lcssa: ; preds = %for.body230.us.us
  br label %for.cond228.for.inc254_crit_edge.us.us

for.cond228.for.inc254_crit_edge.us.us:           ; preds = %for.body230.lr.ph.us.us.split, %for.cond228.for.inc254_crit_edge.us.us.unr-lcssa
  %inc255.us.us = add nuw nsw i32 %j142.2419.us.us, 1
  %exitcond467 = icmp eq i32 %inc255.us.us, %2
  br i1 %exitcond467, label %for.cond225.for.inc257_crit_edge.us.loopexit, label %for.body230.lr.ph.us.us

for.body230.us.us:                                ; preds = %for.body230.us.us, %for.body230.lr.ph.us.us.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %for.body230.lr.ph.us.us.split.split ], [ %indvars.iv.next.1, %for.body230.us.us ]
  %78 = trunc i64 %indvars.iv to i32
  %add238.us.us = add i32 %add235.us.us, %78
  %add246.us.us = add i32 %add243.us.us, %78
  %idxprom247.us.us = sext i32 %add238.us.us to i64
  %arrayidx248.us.us = getelementptr inbounds double, double* %read81.0, i64 %idxprom247.us.us
  %79 = bitcast double* %arrayidx248.us.us to i64*
  %80 = load i64, i64* %79, align 8, !tbaa !34
  %idxprom249.us.us = sext i32 %add246.us.us to i64
  %arrayidx250.us.us = getelementptr inbounds double, double* %write88.0, i64 %idxprom249.us.us
  %81 = bitcast double* %arrayidx250.us.us to i64*
  store i64 %80, i64* %81, align 8, !tbaa !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %82 = trunc i64 %indvars.iv.next to i32
  %add238.us.us.1 = add i32 %add235.us.us, %82
  %add246.us.us.1 = add i32 %add243.us.us, %82
  %idxprom247.us.us.1 = sext i32 %add238.us.us.1 to i64
  %arrayidx248.us.us.1 = getelementptr inbounds double, double* %read81.0, i64 %idxprom247.us.us.1
  %83 = bitcast double* %arrayidx248.us.us.1 to i64*
  %84 = load i64, i64* %83, align 8, !tbaa !34
  %idxprom249.us.us.1 = sext i32 %add246.us.us.1 to i64
  %arrayidx250.us.us.1 = getelementptr inbounds double, double* %write88.0, i64 %idxprom249.us.us.1
  %85 = bitcast double* %arrayidx250.us.us.1 to i64*
  store i64 %84, i64* %85, align 8, !tbaa !34
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %lftr.wideiv.1 = trunc i64 %indvars.iv.next.1 to i32
  %exitcond466.1 = icmp eq i32 %lftr.wideiv.1, %1
  br i1 %exitcond466.1, label %for.cond228.for.inc254_crit_edge.us.us.unr-lcssa, label %for.body230.us.us

if.end261.loopexit:                               ; preds = %for.cond225.for.inc257_crit_edge.us
  br label %if.end261

if.end261.loopexit495:                            ; preds = %for.cond147.for.inc166_crit_edge.us
  br label %if.end261

if.end261.loopexit496:                            ; preds = %for.cond174.for.inc218_crit_edge.us
  br label %if.end261

if.end261:                                        ; preds = %if.end261.loopexit496, %if.end261.loopexit495, %if.end261.loopexit, %for.cond225.preheader.lr.ph, %for.cond171.preheader, %for.cond.preheader, %for.cond222.preheader
  ret void
}

; Function Attrs: nounwind uwtable
define void @exchange_boundary(%struct.domain_type* %domain, i32 %level, i32 %grid_id, i32 %exchange_faces, i32 %exchange_edges, i32 %exchange_corners) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %grid_id.addr = alloca i32, align 4
  %exchange_faces.addr = alloca i32, align 4
  %exchange_edges.addr = alloca i32, align 4
  %exchange_corners.addr = alloca i32, align 4
  %buffer = alloca i32, align 4
  %faces = alloca [27 x i32], align 16
  %exchange = alloca [27 x i32], align 16
  %buffers_packed = alloca [54 x double*], align 16
  %sizes_packed = alloca [54 x i32], align 16
  %ranks_packed = alloca [54 x i32], align 16
  %tags_packed = alloca [54 x i32], align 16
  %requests_packed = alloca [54 x i32], align 16
  %status_packed = alloca [54 x %struct.MPI_Status], align 16
  %sizes_all = alloca [27 x i32], align 16
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store i32 %grid_id, i32* %grid_id.addr, align 4, !tbaa !35
  store i32 %exchange_faces, i32* %exchange_faces.addr, align 4, !tbaa !35
  store i32 %exchange_edges, i32* %exchange_edges.addr, align 4, !tbaa !35
  store i32 %exchange_corners, i32* %exchange_corners.addr, align 4, !tbaa !35
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %0 = bitcast i32* %buffer to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  store i32 0, i32* %buffer, align 4, !tbaa !35
  %1 = bitcast [27 x i32]* %faces to i8*
  call void @llvm.lifetime.start(i64 108, i8* %1) #1
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 108, i32 16, i1 false)
  %2 = getelementptr [27 x i32], [27 x i32]* %faces, i64 0, i64 4
  store i32 1, i32* %2, align 16
  %3 = getelementptr [27 x i32], [27 x i32]* %faces, i64 0, i64 10
  store i32 1, i32* %3, align 8
  %4 = getelementptr [27 x i32], [27 x i32]* %faces, i64 0, i64 12
  store i32 1, i32* %4, align 16
  %5 = getelementptr [27 x i32], [27 x i32]* %faces, i64 0, i64 14
  store i32 1, i32* %5, align 8
  %6 = getelementptr [27 x i32], [27 x i32]* %faces, i64 0, i64 16
  store i32 1, i32* %6, align 16
  %7 = getelementptr [27 x i32], [27 x i32]* %faces, i64 0, i64 22
  store i32 1, i32* %7, align 8
  %8 = bitcast [27 x i32]* %exchange to i8*
  call void @llvm.lifetime.start(i64 108, i8* %8) #1
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 108, i32 16, i1 false)
  %tobool = icmp eq i32 %exchange_faces, 0
  %tobool3 = icmp eq i32 %exchange_edges, 0
  %tobool11 = icmp eq i32 %exchange_corners, 0
  br i1 %tobool, label %entry.split.us, label %entry.split

entry.split.us:                                   ; preds = %entry
  br i1 %tobool3, label %if.end10.us.us.preheader, label %if.then4.us.preheader

if.then4.us.preheader:                            ; preds = %entry.split.us
  br label %if.then4.us

if.end10.us.us.preheader:                         ; preds = %entry.split.us
  br label %if.end10.us.us

if.end10.us.us:                                   ; preds = %for.inc.us.us.2, %if.end10.us.us.preheader
  %indvars.iv439 = phi i64 [ 0, %if.end10.us.us.preheader ], [ %indvars.iv.next440.2, %for.inc.us.us.2 ]
  br i1 %tobool11, label %for.inc.us.us, label %if.then12.us.us

if.then12.us.us:                                  ; preds = %if.end10.us.us
  %arrayidx14.us.us = getelementptr inbounds [27 x i32], [27 x i32]* @exchange_boundary.corners, i64 0, i64 %indvars.iv439
  %9 = load i32, i32* %arrayidx14.us.us, align 4, !tbaa !35
  %arrayidx16.us.us = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 %indvars.iv439
  %10 = load i32, i32* %arrayidx16.us.us, align 4, !tbaa !35
  %or17.us.us = or i32 %10, %9
  store i32 %or17.us.us, i32* %arrayidx16.us.us, align 4, !tbaa !35
  br label %for.inc.us.us

for.inc.us.us:                                    ; preds = %if.then12.us.us, %if.end10.us.us
  %indvars.iv.next440 = add nuw nsw i64 %indvars.iv439, 1
  br i1 %tobool11, label %for.inc.us.us.1, label %if.then12.us.us.1

if.then4.us:                                      ; preds = %if.then4.us.preheader, %for.inc.us
  %indvars.iv442 = phi i64 [ %indvars.iv.next443, %for.inc.us ], [ 0, %if.then4.us.preheader ]
  %arrayidx6.us = getelementptr inbounds [27 x i32], [27 x i32]* @exchange_boundary.edges, i64 0, i64 %indvars.iv442
  %11 = load i32, i32* %arrayidx6.us, align 4, !tbaa !35
  %arrayidx8.us = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 %indvars.iv442
  %12 = load i32, i32* %arrayidx8.us, align 4, !tbaa !35
  %or9.us = or i32 %12, %11
  store i32 %or9.us, i32* %arrayidx8.us, align 4, !tbaa !35
  br i1 %tobool11, label %for.inc.us, label %if.then12.us

if.then12.us:                                     ; preds = %if.then4.us
  %arrayidx14.us = getelementptr inbounds [27 x i32], [27 x i32]* @exchange_boundary.corners, i64 0, i64 %indvars.iv442
  %13 = load i32, i32* %arrayidx14.us, align 4, !tbaa !35
  %or17.us = or i32 %or9.us, %13
  store i32 %or17.us, i32* %arrayidx8.us, align 4, !tbaa !35
  br label %for.inc.us

for.inc.us:                                       ; preds = %if.then12.us, %if.then4.us
  %indvars.iv.next443 = add nuw nsw i64 %indvars.iv442, 1
  %exitcond444 = icmp eq i64 %indvars.iv.next443, 27
  br i1 %exitcond444, label %for.end.loopexit485, label %if.then4.us

entry.split:                                      ; preds = %entry
  br i1 %tobool3, label %if.then.us365.preheader, label %entry.split.split

if.then.us365.preheader:                          ; preds = %entry.split
  br label %if.then.us365

if.then.us365:                                    ; preds = %if.then.us365.preheader, %for.inc.us382
  %indvars.iv445 = phi i64 [ %indvars.iv.next446, %for.inc.us382 ], [ 0, %if.then.us365.preheader ]
  %arrayidx.us367 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 %indvars.iv445
  %14 = load i32, i32* %arrayidx.us367, align 4, !tbaa !35
  %arrayidx2.us368 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 %indvars.iv445
  %15 = load i32, i32* %arrayidx2.us368, align 4, !tbaa !35
  %or.us369 = or i32 %15, %14
  store i32 %or.us369, i32* %arrayidx2.us368, align 4, !tbaa !35
  br i1 %tobool11, label %for.inc.us382, label %if.then12.us377

if.then12.us377:                                  ; preds = %if.then.us365
  %arrayidx14.us379 = getelementptr inbounds [27 x i32], [27 x i32]* @exchange_boundary.corners, i64 0, i64 %indvars.iv445
  %16 = load i32, i32* %arrayidx14.us379, align 4, !tbaa !35
  %or17.us381 = or i32 %or.us369, %16
  store i32 %or17.us381, i32* %arrayidx2.us368, align 4, !tbaa !35
  br label %for.inc.us382

for.inc.us382:                                    ; preds = %if.then12.us377, %if.then.us365
  %indvars.iv.next446 = add nuw nsw i64 %indvars.iv445, 1
  %exitcond447 = icmp eq i64 %indvars.iv.next446, 27
  br i1 %exitcond447, label %for.end.loopexit486, label %if.then.us365

entry.split.split:                                ; preds = %entry.split
  br i1 %tobool11, label %vector.body470.preheader, label %vector.body.preheader

vector.body.preheader:                            ; preds = %entry.split.split
  br label %vector.body

vector.body470.preheader:                         ; preds = %entry.split.split
  br label %vector.body470

vector.body:                                      ; preds = %vector.body.preheader
  %17 = bitcast [27 x i32]* %faces to <4 x i32>*
  %wide.load = load <4 x i32>, <4 x i32>* %17, align 16, !tbaa !35
  %18 = bitcast [27 x i32]* %exchange to <4 x i32>*
  %wide.load467 = load <4 x i32>, <4 x i32>* %18, align 16, !tbaa !35
  %19 = or <4 x i32> %wide.load467, %wide.load
  %20 = or <4 x i32> %19, <i32 1, i32 1, i32 1, i32 1>
  %21 = bitcast [27 x i32]* %exchange to <4 x i32>*
  store <4 x i32> %20, <4 x i32>* %21, align 16, !tbaa !35
  %22 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 4
  %23 = bitcast i32* %22 to <4 x i32>*
  %wide.load.1 = load <4 x i32>, <4 x i32>* %23, align 16, !tbaa !35
  %24 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 4
  %25 = bitcast i32* %24 to <4 x i32>*
  %wide.load467.1 = load <4 x i32>, <4 x i32>* %25, align 16, !tbaa !35
  %26 = or <4 x i32> %wide.load467.1, %wide.load.1
  %27 = or <4 x i32> %26, <i32 0, i32 1, i32 1, i32 1>
  %28 = bitcast i32* %24 to <4 x i32>*
  store <4 x i32> %27, <4 x i32>* %28, align 16, !tbaa !35
  %29 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 8
  %30 = bitcast i32* %29 to <4 x i32>*
  %wide.load.2 = load <4 x i32>, <4 x i32>* %30, align 16, !tbaa !35
  %31 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 8
  %32 = bitcast i32* %31 to <4 x i32>*
  %wide.load467.2 = load <4 x i32>, <4 x i32>* %32, align 16, !tbaa !35
  %33 = or <4 x i32> %wide.load467.2, %wide.load.2
  %34 = or <4 x i32> %33, <i32 1, i32 1, i32 0, i32 1>
  %35 = bitcast i32* %31 to <4 x i32>*
  store <4 x i32> %34, <4 x i32>* %35, align 16, !tbaa !35
  %36 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 12
  %37 = bitcast i32* %36 to <4 x i32>*
  %wide.load.3 = load <4 x i32>, <4 x i32>* %37, align 16, !tbaa !35
  %38 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 12
  %39 = bitcast i32* %38 to <4 x i32>*
  %wide.load467.3 = load <4 x i32>, <4 x i32>* %39, align 16, !tbaa !35
  %40 = or <4 x i32> %wide.load467.3, %wide.load.3
  %41 = or <4 x i32> %40, <i32 0, i32 0, i32 0, i32 1>
  %42 = bitcast i32* %38 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %42, align 16, !tbaa !35
  %43 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 16
  %44 = bitcast i32* %43 to <4 x i32>*
  %wide.load.4 = load <4 x i32>, <4 x i32>* %44, align 16, !tbaa !35
  %45 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 16
  %46 = bitcast i32* %45 to <4 x i32>*
  %wide.load467.4 = load <4 x i32>, <4 x i32>* %46, align 16, !tbaa !35
  %47 = or <4 x i32> %wide.load467.4, %wide.load.4
  %48 = or <4 x i32> %47, <i32 0, i32 1, i32 1, i32 1>
  %49 = bitcast i32* %45 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %49, align 16, !tbaa !35
  %50 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 20
  %51 = bitcast i32* %50 to <4 x i32>*
  %wide.load.5 = load <4 x i32>, <4 x i32>* %51, align 16, !tbaa !35
  %52 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 20
  %53 = bitcast i32* %52 to <4 x i32>*
  %wide.load467.5 = load <4 x i32>, <4 x i32>* %53, align 16, !tbaa !35
  %54 = or <4 x i32> %wide.load467.5, %wide.load.5
  %55 = or <4 x i32> %54, <i32 1, i32 1, i32 0, i32 1>
  %56 = bitcast i32* %52 to <4 x i32>*
  store <4 x i32> %55, <4 x i32>* %56, align 16, !tbaa !35
  br label %if.then

vector.body470:                                   ; preds = %vector.body470.preheader
  %57 = bitcast [27 x i32]* %faces to <4 x i32>*
  %wide.load482 = load <4 x i32>, <4 x i32>* %57, align 16, !tbaa !35
  %58 = bitcast [27 x i32]* %exchange to <4 x i32>*
  %wide.load483 = load <4 x i32>, <4 x i32>* %58, align 16, !tbaa !35
  %59 = or <4 x i32> %wide.load483, %wide.load482
  %60 = or <4 x i32> %59, <i32 0, i32 1, i32 0, i32 1>
  %61 = bitcast [27 x i32]* %exchange to <4 x i32>*
  store <4 x i32> %60, <4 x i32>* %61, align 16, !tbaa !35
  %62 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 4
  %63 = bitcast i32* %62 to <4 x i32>*
  %wide.load482.1 = load <4 x i32>, <4 x i32>* %63, align 16, !tbaa !35
  %64 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 4
  %65 = bitcast i32* %64 to <4 x i32>*
  %wide.load483.1 = load <4 x i32>, <4 x i32>* %65, align 16, !tbaa !35
  %66 = or <4 x i32> %wide.load483.1, %wide.load482.1
  %67 = or <4 x i32> %66, <i32 0, i32 1, i32 0, i32 1>
  %68 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> %67, <4 x i32>* %68, align 16, !tbaa !35
  %69 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 8
  %70 = bitcast i32* %69 to <4 x i32>*
  %wide.load482.2 = load <4 x i32>, <4 x i32>* %70, align 16, !tbaa !35
  %71 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 8
  %72 = bitcast i32* %71 to <4 x i32>*
  %wide.load483.2 = load <4 x i32>, <4 x i32>* %72, align 16, !tbaa !35
  %73 = or <4 x i32> %wide.load483.2, %wide.load482.2
  %74 = or <4 x i32> %73, <i32 0, i32 1, i32 0, i32 1>
  %75 = bitcast i32* %71 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %75, align 16, !tbaa !35
  %76 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 12
  %77 = bitcast i32* %76 to <4 x i32>*
  %wide.load482.3 = load <4 x i32>, <4 x i32>* %77, align 16, !tbaa !35
  %78 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 12
  %79 = bitcast i32* %78 to <4 x i32>*
  %wide.load483.3 = load <4 x i32>, <4 x i32>* %79, align 16, !tbaa !35
  %80 = or <4 x i32> %wide.load483.3, %wide.load482.3
  %81 = or <4 x i32> %80, <i32 0, i32 0, i32 0, i32 1>
  %82 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %81, <4 x i32>* %82, align 16, !tbaa !35
  %83 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 16
  %84 = bitcast i32* %83 to <4 x i32>*
  %wide.load482.4 = load <4 x i32>, <4 x i32>* %84, align 16, !tbaa !35
  %85 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 16
  %86 = bitcast i32* %85 to <4 x i32>*
  %wide.load483.4 = load <4 x i32>, <4 x i32>* %86, align 16, !tbaa !35
  %87 = or <4 x i32> %wide.load483.4, %wide.load482.4
  %88 = or <4 x i32> %87, <i32 0, i32 1, i32 0, i32 1>
  %89 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %88, <4 x i32>* %89, align 16, !tbaa !35
  %90 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 20
  %91 = bitcast i32* %90 to <4 x i32>*
  %wide.load482.5 = load <4 x i32>, <4 x i32>* %91, align 16, !tbaa !35
  %92 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 20
  %93 = bitcast i32* %92 to <4 x i32>*
  %wide.load483.5 = load <4 x i32>, <4 x i32>* %93, align 16, !tbaa !35
  %94 = or <4 x i32> %wide.load483.5, %wide.load482.5
  %95 = or <4 x i32> %94, <i32 0, i32 1, i32 0, i32 1>
  %96 = bitcast i32* %92 to <4 x i32>*
  store <4 x i32> %95, <4 x i32>* %96, align 16, !tbaa !35
  br label %if.then.us387

if.then.us387:                                    ; preds = %vector.body470
  %arrayidx.us389 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 24
  %97 = load i32, i32* %arrayidx.us389, align 16, !tbaa !35
  %arrayidx2.us390 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 24
  %98 = load i32, i32* %arrayidx2.us390, align 16, !tbaa !35
  %or.us391 = or i32 %98, %97
  store i32 %or.us391, i32* %arrayidx2.us390, align 16, !tbaa !35
  %arrayidx.us389.1 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 25
  %99 = load i32, i32* %arrayidx.us389.1, align 4, !tbaa !35
  %arrayidx2.us390.1 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 25
  %100 = load i32, i32* %arrayidx2.us390.1, align 4, !tbaa !35
  %or.us391.1 = or i32 %100, %99
  %or9.us397.1 = or i32 %or.us391.1, 1
  store i32 %or9.us397.1, i32* %arrayidx2.us390.1, align 4, !tbaa !35
  %arrayidx.us389.2 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 26
  %101 = load i32, i32* %arrayidx.us389.2, align 8, !tbaa !35
  %arrayidx2.us390.2 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 26
  %102 = load i32, i32* %arrayidx2.us390.2, align 8, !tbaa !35
  %or.us391.2 = or i32 %102, %101
  store i32 %or.us391.2, i32* %arrayidx2.us390.2, align 8, !tbaa !35
  br label %for.end

if.then:                                          ; preds = %vector.body
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 24
  %103 = load i32, i32* %arrayidx, align 16, !tbaa !35
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 24
  %104 = load i32, i32* %arrayidx2, align 16, !tbaa !35
  %or = or i32 %104, %103
  %or17 = or i32 %or, 1
  store i32 %or17, i32* %arrayidx2, align 16, !tbaa !35
  %arrayidx.1 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 25
  %105 = load i32, i32* %arrayidx.1, align 4, !tbaa !35
  %arrayidx2.1 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 25
  %106 = load i32, i32* %arrayidx2.1, align 4, !tbaa !35
  %or.1 = or i32 %106, %105
  %or9.1 = or i32 %or.1, 1
  store i32 %or9.1, i32* %arrayidx2.1, align 4, !tbaa !35
  %arrayidx.2 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 26
  %107 = load i32, i32* %arrayidx.2, align 8, !tbaa !35
  %arrayidx2.2 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 26
  %108 = load i32, i32* %arrayidx2.2, align 8, !tbaa !35
  %or.2 = or i32 %108, %107
  %or17.2 = or i32 %or.2, 1
  store i32 %or17.2, i32* %arrayidx2.2, align 8, !tbaa !35
  br label %for.end

for.end.loopexit:                                 ; preds = %for.inc.us.us.2
  br label %for.end

for.end.loopexit485:                              ; preds = %for.inc.us
  br label %for.end

for.end.loopexit486:                              ; preds = %for.inc.us382
  br label %for.end

for.end:                                          ; preds = %if.then, %if.then.us387, %for.end.loopexit486, %for.end.loopexit485, %for.end.loopexit
  %109 = bitcast [54 x double*]* %buffers_packed to i8*
  call void @llvm.lifetime.start(i64 432, i8* %109) #1
  %110 = bitcast [54 x i32]* %sizes_packed to i8*
  call void @llvm.lifetime.start(i64 216, i8* %110) #1
  %111 = bitcast [54 x i32]* %ranks_packed to i8*
  call void @llvm.lifetime.start(i64 216, i8* %111) #1
  %112 = bitcast [54 x i32]* %tags_packed to i8*
  call void @llvm.lifetime.start(i64 216, i8* %112) #1
  %113 = bitcast [54 x i32]* %requests_packed to i8*
  call void @llvm.lifetime.start(i64 216, i8* %113) #1
  %114 = bitcast [54 x %struct.MPI_Status]* %status_packed to i8*
  call void @llvm.lifetime.start(i64 1080, i8* %114) #1
  %115 = bitcast [27 x i32]* %sizes_all to i8*
  call void @llvm.lifetime.start(i64 108, i8* %115) #1
  %i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 18, i32 0
  %idxprom36 = sext i32 %level to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %j = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 18, i32 1
  %k = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 18, i32 2
  %116 = bitcast i32* %i to i64*
  %117 = bitcast i32* %i to i64*
  %118 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8
  %levels47.us = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %118, i64 0, i32 5
  %119 = load %struct.box_type*, %struct.box_type** %levels47.us, align 8
  %ghosts.us = getelementptr inbounds %struct.box_type, %struct.box_type* %119, i64 %idxprom36, i32 4
  %120 = load i32, i32* %ghosts.us, align 4
  %j62.us.phi.trans.insert = getelementptr inbounds %struct.box_type, %struct.box_type* %119, i64 %idxprom36, i32 2, i32 1
  %levels59.us = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %118, i64 0, i32 5
  %levels71 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %118, i64 0, i32 5
  %mul66 = mul nsw i32 %120, %120
  br label %for.cond22.preheader

for.cond22.preheader:                             ; preds = %for.inc109, %for.end
  %indvars.iv434 = phi i64 [ -1, %for.end ], [ %indvars.iv.next435, %for.inc109 ]
  %121 = mul nsw i64 %indvars.iv434, 9
  %122 = add nsw i64 %121, 13
  %123 = trunc i64 %indvars.iv434 to i32
  %cmp78 = icmp eq i32 %123, 0
  br label %for.cond25.preheader

for.cond112.preheader:                            ; preds = %for.inc109
  %rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 21
  br label %for.body114

for.cond25.preheader:                             ; preds = %for.inc106, %for.cond22.preheader
  %indvars.iv429 = phi i64 [ -1, %for.cond22.preheader ], [ %indvars.iv.next430, %for.inc106 ]
  %124 = mul nsw i64 %indvars.iv429, 3
  %125 = add nsw i64 %122, %124
  %126 = trunc i64 %indvars.iv429 to i32
  %cmp53 = icmp eq i32 %126, 0
  %127 = add nsw i64 %125, -1
  %arrayidx33.us = getelementptr inbounds [27 x i32], [27 x i32]* %sizes_all, i64 0, i64 %127
  br i1 %cmp53, label %if.end52.us, label %if.end52

if.end52.us:                                      ; preds = %for.cond25.preheader
  %.pre454 = load i32, i32* %j, align 4, !tbaa !36
  %.pre456 = load i32, i32* %j62.us.phi.trans.insert, align 4, !tbaa !37
  %mul63.us = mul nsw i32 %.pre456, %.pre454
  %mul66.us = mul nsw i32 %mul63.us, %120
  store i32 %mul66.us, i32* %arrayidx33.us, align 4, !tbaa !35
  br i1 %cmp78, label %if.then79.us, label %if.else92.us

if.else92.us:                                     ; preds = %if.end52.us
  %128 = load %struct.box_type*, %struct.box_type** %levels59.us, align 8, !tbaa !28
  %ghosts98.us = getelementptr inbounds %struct.box_type, %struct.box_type* %128, i64 %idxprom36, i32 4
  %129 = load i32, i32* %ghosts98.us, align 4, !tbaa !38
  br label %if.end52.us.1

if.then79.us:                                     ; preds = %if.end52.us
  %130 = load i32, i32* %k, align 8, !tbaa !39
  %131 = load %struct.box_type*, %struct.box_type** %levels59.us, align 8, !tbaa !28
  %k87.us = getelementptr inbounds %struct.box_type, %struct.box_type* %131, i64 %idxprom36, i32 2, i32 2
  %132 = load i32, i32* %k87.us, align 4, !tbaa !40
  %mul88.us = mul nsw i32 %132, %130
  br label %if.end52.us.1

if.end52:                                         ; preds = %for.cond25.preheader
  store i32 %mul66, i32* %arrayidx33.us, align 4, !tbaa !35
  br i1 %cmp78, label %if.then79, label %if.else92

if.then79:                                        ; preds = %if.end52
  %133 = load i32, i32* %k, align 8, !tbaa !39
  %134 = load %struct.box_type*, %struct.box_type** %levels71, align 8, !tbaa !28
  %k87 = getelementptr inbounds %struct.box_type, %struct.box_type* %134, i64 %idxprom36, i32 2, i32 2
  %135 = load i32, i32* %k87, align 4, !tbaa !40
  %mul88 = mul nsw i32 %135, %133
  br label %if.end52.1

if.else92:                                        ; preds = %if.end52
  %136 = load %struct.box_type*, %struct.box_type** %levels71, align 8, !tbaa !28
  %ghosts98 = getelementptr inbounds %struct.box_type, %struct.box_type* %136, i64 %idxprom36, i32 4
  %137 = load i32, i32* %ghosts98, align 4, !tbaa !38
  br label %if.end52.1

for.inc106:                                       ; preds = %if.end102.2, %if.end102.us.2
  %indvars.iv.next430 = add nsw i64 %indvars.iv429, 1
  %exitcond433 = icmp eq i64 %indvars.iv.next430, 2
  br i1 %exitcond433, label %for.inc109, label %for.cond25.preheader

for.inc109:                                       ; preds = %for.inc106
  %indvars.iv.next435 = add nsw i64 %indvars.iv434, 1
  %exitcond438 = icmp eq i64 %indvars.iv.next435, 2
  br i1 %exitcond438, label %for.cond112.preheader, label %for.cond22.preheader

for.body114:                                      ; preds = %for.inc143, %for.cond112.preheader
  %indvars.iv417 = phi i64 [ 0, %for.cond112.preheader ], [ %indvars.iv.next418, %for.inc143 ]
  %nMessages.0358 = phi i32 [ 0, %for.cond112.preheader ], [ %nMessages.1, %for.inc143 ]
  %138 = sub nuw nsw i64 26, %indvars.iv417
  %arrayidx116 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 %138
  %139 = load i32, i32* %arrayidx116, align 4, !tbaa !35
  %tobool117 = icmp eq i32 %139, 0
  br i1 %tobool117, label %for.inc143, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body114
  %arrayidx120 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 5, i64 %138
  %140 = load i32, i32* %arrayidx120, align 4, !tbaa !35
  %141 = load i32, i32* %rank, align 4, !tbaa !41
  %cmp121 = icmp eq i32 %140, %141
  br i1 %cmp121, label %for.inc143, label %if.then122

if.then122:                                       ; preds = %land.lhs.true
  %arrayidx125 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 7, i64 %138
  %142 = bitcast double** %arrayidx125 to i64*
  %143 = load i64, i64* %142, align 8, !tbaa !1
  %idxprom126 = sext i32 %nMessages.0358 to i64
  %arrayidx127 = getelementptr inbounds [54 x double*], [54 x double*]* %buffers_packed, i64 0, i64 %idxprom126
  %144 = bitcast double** %arrayidx127 to i64*
  store i64 %143, i64* %144, align 8, !tbaa !1
  %arrayidx130 = getelementptr inbounds [27 x i32], [27 x i32]* %sizes_all, i64 0, i64 %138
  %145 = load i32, i32* %arrayidx130, align 4, !tbaa !35
  %arrayidx132 = getelementptr inbounds [54 x i32], [54 x i32]* %sizes_packed, i64 0, i64 %idxprom126
  store i32 %145, i32* %arrayidx132, align 4, !tbaa !35
  %arrayidx138 = getelementptr inbounds [54 x i32], [54 x i32]* %ranks_packed, i64 0, i64 %idxprom126
  store i32 %140, i32* %arrayidx138, align 4, !tbaa !35
  %arrayidx140 = getelementptr inbounds [54 x i32], [54 x i32]* %tags_packed, i64 0, i64 %idxprom126
  %146 = trunc i64 %indvars.iv417 to i32
  store i32 %146, i32* %arrayidx140, align 4, !tbaa !35
  %inc141 = add nsw i32 %nMessages.0358, 1
  br label %for.inc143

for.inc143:                                       ; preds = %land.lhs.true, %for.body114, %if.then122
  %nMessages.1 = phi i32 [ %inc141, %if.then122 ], [ %nMessages.0358, %land.lhs.true ], [ %nMessages.0358, %for.body114 ]
  %indvars.iv.next418 = add nuw nsw i64 %indvars.iv417, 1
  %exitcond420 = icmp eq i64 %indvars.iv.next418, 27
  br i1 %exitcond420, label %for.body148.preheader, label %for.body114

for.body148.preheader:                            ; preds = %for.inc143
  %nMessages.1.lcssa = phi i32 [ %nMessages.1, %for.inc143 ]
  br label %for.body148

for.body148:                                      ; preds = %for.body148.preheader, %for.inc176
  %indvars.iv414 = phi i64 [ %indvars.iv.next415, %for.inc176 ], [ 0, %for.body148.preheader ]
  %nMessages.2356 = phi i32 [ %nMessages.3, %for.inc176 ], [ %nMessages.1.lcssa, %for.body148.preheader ]
  %arrayidx150 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 %indvars.iv414
  %147 = load i32, i32* %arrayidx150, align 4, !tbaa !35
  %tobool151 = icmp eq i32 %147, 0
  br i1 %tobool151, label %for.inc176, label %land.lhs.true152

land.lhs.true152:                                 ; preds = %for.body148
  %arrayidx155 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 5, i64 %indvars.iv414
  %148 = load i32, i32* %arrayidx155, align 4, !tbaa !35
  %149 = load i32, i32* %rank, align 4, !tbaa !41
  %cmp157 = icmp eq i32 %148, %149
  br i1 %cmp157, label %for.inc176, label %if.then158

if.then158:                                       ; preds = %land.lhs.true152
  %arrayidx160 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 6, i64 %indvars.iv414
  %150 = bitcast double** %arrayidx160 to i64*
  %151 = load i64, i64* %150, align 8, !tbaa !1
  %idxprom161 = sext i32 %nMessages.2356 to i64
  %arrayidx162 = getelementptr inbounds [54 x double*], [54 x double*]* %buffers_packed, i64 0, i64 %idxprom161
  %152 = bitcast double** %arrayidx162 to i64*
  store i64 %151, i64* %152, align 8, !tbaa !1
  %arrayidx164 = getelementptr inbounds [27 x i32], [27 x i32]* %sizes_all, i64 0, i64 %indvars.iv414
  %153 = load i32, i32* %arrayidx164, align 4, !tbaa !35
  %arrayidx166 = getelementptr inbounds [54 x i32], [54 x i32]* %sizes_packed, i64 0, i64 %idxprom161
  store i32 %153, i32* %arrayidx166, align 4, !tbaa !35
  %arrayidx171 = getelementptr inbounds [54 x i32], [54 x i32]* %ranks_packed, i64 0, i64 %idxprom161
  store i32 %148, i32* %arrayidx171, align 4, !tbaa !35
  %arrayidx173 = getelementptr inbounds [54 x i32], [54 x i32]* %tags_packed, i64 0, i64 %idxprom161
  %154 = trunc i64 %indvars.iv414 to i32
  store i32 %154, i32* %arrayidx173, align 4, !tbaa !35
  %inc174 = add nsw i32 %nMessages.2356, 1
  br label %for.inc176

for.inc176:                                       ; preds = %land.lhs.true152, %for.body148, %if.then158
  %nMessages.3 = phi i32 [ %inc174, %if.then158 ], [ %nMessages.2356, %land.lhs.true152 ], [ %nMessages.2356, %for.body148 ]
  %indvars.iv.next415 = add nuw nsw i64 %indvars.iv414, 1
  %exitcond416 = icmp eq i64 %indvars.iv.next415, 27
  br i1 %exitcond416, label %for.end178, label %for.body148

for.end178:                                       ; preds = %for.inc176
  %nMessages.3.lcssa = phi i32 [ %nMessages.3, %for.inc176 ]
  %call179 = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %div = sdiv i32 %nMessages.3.lcssa, 2
  %cmp181353 = icmp sgt i32 %nMessages.3.lcssa, 1
  br i1 %cmp181353, label %for.body182.preheader, label %for.end196

for.body182.preheader:                            ; preds = %for.end178
  %155 = sext i32 %div to i64
  br label %for.body182

for.body182:                                      ; preds = %for.body182.preheader, %for.body182
  %indvars.iv412 = phi i64 [ 0, %for.body182.preheader ], [ %indvars.iv.next413, %for.body182 ]
  %arrayidx184 = getelementptr inbounds [54 x double*], [54 x double*]* %buffers_packed, i64 0, i64 %indvars.iv412
  %156 = bitcast double** %arrayidx184 to i8**
  %157 = load i8*, i8** %156, align 8, !tbaa !1
  %arrayidx186 = getelementptr inbounds [54 x i32], [54 x i32]* %sizes_packed, i64 0, i64 %indvars.iv412
  %158 = load i32, i32* %arrayidx186, align 4, !tbaa !35
  %arrayidx188 = getelementptr inbounds [54 x i32], [54 x i32]* %ranks_packed, i64 0, i64 %indvars.iv412
  %159 = load i32, i32* %arrayidx188, align 4, !tbaa !35
  %arrayidx190 = getelementptr inbounds [54 x i32], [54 x i32]* %tags_packed, i64 0, i64 %indvars.iv412
  %160 = load i32, i32* %arrayidx190, align 4, !tbaa !35
  %arrayidx192 = getelementptr inbounds [54 x i32], [54 x i32]* %requests_packed, i64 0, i64 %indvars.iv412
  %call193 = call i32 @MPI_Irecv(i8* %157, i32 %158, i32 1275070475, i32 %159, i32 %160, i32 1140850688, i32* %arrayidx192) #1
  %indvars.iv.next413 = add nuw nsw i64 %indvars.iv412, 1
  %cmp181 = icmp slt i64 %indvars.iv.next413, %155
  br i1 %cmp181, label %for.body182, label %for.end196.loopexit

for.end196.loopexit:                              ; preds = %for.body182
  %.pre457 = load i32, i32* %level.addr, align 4, !tbaa !35
  %.pre458 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  br label %for.end196

for.end196:                                       ; preds = %for.end196.loopexit, %for.end178
  %161 = phi %struct.domain_type* [ %.pre458, %for.end196.loopexit ], [ %domain, %for.end178 ]
  %162 = phi i32 [ %.pre457, %for.end196.loopexit ], [ %level, %for.end178 ]
  %call197 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub198 = sub i64 %call197, %call179
  %idxprom199 = sext i32 %162 to i64
  %arrayidx200 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %161, i64 0, i32 0, i32 9, i64 %idxprom199
  %163 = load i64, i64* %arrayidx200, align 8, !tbaa !42
  %add201 = add i64 %sub198, %163
  store i64 %add201, i64* %arrayidx200, align 8, !tbaa !42
  %call202 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 7, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, i32*)* @.omp_outlined. to void (i32*, i32*, ...)*), i32* nonnull %buffer, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %exchange_faces.addr, i32* nonnull %exchange_edges.addr, i32* nonnull %exchange_corners.addr, i32* nonnull %grid_id.addr) #1
  %call203 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub204 = sub i64 %call203, %call202
  %164 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom205 = sext i32 %164 to i64
  %165 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx207 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %165, i64 0, i32 0, i32 6, i64 %idxprom205
  %166 = load i64, i64* %arrayidx207, align 8, !tbaa !42
  %add208 = add i64 %sub204, %166
  store i64 %add208, i64* %arrayidx207, align 8, !tbaa !42
  %call209 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %cmp212351 = icmp slt i32 %div, %nMessages.3.lcssa
  br i1 %cmp212351, label %for.body213.preheader, label %for.end227

for.body213.preheader:                            ; preds = %for.end196
  %167 = sext i32 %div to i64
  br label %for.body213

for.body213:                                      ; preds = %for.body213, %for.body213.preheader
  %indvars.iv = phi i64 [ %167, %for.body213.preheader ], [ %indvars.iv.next, %for.body213 ]
  %arrayidx215 = getelementptr inbounds [54 x double*], [54 x double*]* %buffers_packed, i64 0, i64 %indvars.iv
  %168 = bitcast double** %arrayidx215 to i8**
  %169 = load i8*, i8** %168, align 8, !tbaa !1
  %arrayidx217 = getelementptr inbounds [54 x i32], [54 x i32]* %sizes_packed, i64 0, i64 %indvars.iv
  %170 = load i32, i32* %arrayidx217, align 4, !tbaa !35
  %arrayidx219 = getelementptr inbounds [54 x i32], [54 x i32]* %ranks_packed, i64 0, i64 %indvars.iv
  %171 = load i32, i32* %arrayidx219, align 4, !tbaa !35
  %arrayidx221 = getelementptr inbounds [54 x i32], [54 x i32]* %tags_packed, i64 0, i64 %indvars.iv
  %172 = load i32, i32* %arrayidx221, align 4, !tbaa !35
  %arrayidx223 = getelementptr inbounds [54 x i32], [54 x i32]* %requests_packed, i64 0, i64 %indvars.iv
  %call224 = call i32 @MPI_Isend(i8* %169, i32 %170, i32 1275070475, i32 %171, i32 %172, i32 1140850688, i32* %arrayidx223) #1
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %nMessages.3.lcssa
  br i1 %exitcond, label %for.end227.loopexit, label %for.body213

for.end227.loopexit:                              ; preds = %for.body213
  br label %for.end227

for.end227:                                       ; preds = %for.end227.loopexit, %for.end196
  %call228 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub229 = sub i64 %call228, %call209
  %173 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom230 = sext i32 %173 to i64
  %174 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx232 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %174, i64 0, i32 0, i32 10, i64 %idxprom230
  %175 = load i64, i64* %arrayidx232, align 8, !tbaa !42
  %add233 = add i64 %sub229, %175
  store i64 %add233, i64* %arrayidx232, align 8, !tbaa !42
  %call234 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 7, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, i32*)* @.omp_outlined..2 to void (i32*, i32*, ...)*), i32* nonnull %buffer, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %exchange_faces.addr, i32* nonnull %exchange_edges.addr, i32* nonnull %exchange_corners.addr, i32* nonnull %grid_id.addr) #1
  %call235 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub236 = sub i64 %call235, %call234
  %176 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom237 = sext i32 %176 to i64
  %177 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx239 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %177, i64 0, i32 0, i32 7, i64 %idxprom237
  %178 = load i64, i64* %arrayidx239, align 8, !tbaa !42
  %add240 = add i64 %sub236, %178
  store i64 %add240, i64* %arrayidx239, align 8, !tbaa !42
  
  %call241 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %arraydecay = getelementptr inbounds [54 x i32], [54 x i32]* %requests_packed, i64 0, i64 0
  %arraydecay242 = getelementptr inbounds [54 x %struct.MPI_Status], [54 x %struct.MPI_Status]* %status_packed, i64 0, i64 0
  %call243 = call i32 @MPI_Waitall(i32 %nMessages.3.lcssa, i32* %arraydecay, %struct.MPI_Status* %arraydecay242) #1
  %call244 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub245 = sub i64 %call244, %call241
  %179 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom246 = sext i32 %179 to i64
  %180 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx248 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %180, i64 0, i32 0, i32 11, i64 %idxprom246
  %181 = load i64, i64* %arrayidx248, align 8, !tbaa !42
  %add249 = add i64 %sub245, %181
  store i64 %add249, i64* %arrayidx248, align 8, !tbaa !42
  %call250 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 7, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, i32*)* @.omp_outlined..3 to void (i32*, i32*, ...)*), i32* nonnull %buffer, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %exchange_faces.addr, i32* nonnull %exchange_edges.addr, i32* nonnull %exchange_corners.addr, i32* nonnull %grid_id.addr) #1
  %call251 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub252 = sub i64 %call251, %call250
  %182 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom253 = sext i32 %182 to i64
  %183 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx255 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %183, i64 0, i32 0, i32 8, i64 %idxprom253
  %184 = load i64, i64* %arrayidx255, align 8, !tbaa !42
  %add256 = add i64 %sub252, %184
  store i64 %add256, i64* %arrayidx255, align 8, !tbaa !42
  %call257 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub258 = sub i64 %call257, %call
  %185 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom259 = sext i32 %185 to i64
  %186 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx261 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %186, i64 0, i32 0, i32 5, i64 %idxprom259
  %187 = load i64, i64* %arrayidx261, align 8, !tbaa !42
  %add262 = add i64 %sub258, %187
  store i64 %add262, i64* %arrayidx261, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 108, i8* %115) #1
  call void @llvm.lifetime.end(i64 1080, i8* %114) #1
  call void @llvm.lifetime.end(i64 216, i8* %113) #1
  call void @llvm.lifetime.end(i64 216, i8* %112) #1
  call void @llvm.lifetime.end(i64 216, i8* %111) #1
  call void @llvm.lifetime.end(i64 216, i8* %110) #1
  call void @llvm.lifetime.end(i64 432, i8* %109) #1
  call void @llvm.lifetime.end(i64 108, i8* %8) #1
  call void @llvm.lifetime.end(i64 108, i8* %1) #1
  call void @llvm.lifetime.end(i64 4, i8* %0) #1
  ret void

if.end52.1:                                       ; preds = %if.else92, %if.then79
  %188 = phi %struct.box_type* [ %134, %if.then79 ], [ %136, %if.else92 ]
  %mul88.sink = phi i32 [ %mul88, %if.then79 ], [ %137, %if.else92 ]
  %mul91 = mul nsw i32 %mul88.sink, %mul66
  store i32 %mul91, i32* %arrayidx33.us, align 4, !tbaa !35
  %arrayidx33.1 = getelementptr inbounds [27 x i32], [27 x i32]* %sizes_all, i64 0, i64 %125
  %189 = load i64, i64* %117, align 8
  %190 = trunc i64 %189 to i32
  %i39.1 = getelementptr inbounds %struct.box_type, %struct.box_type* %188, i64 %idxprom36, i32 2, i32 0
  %191 = load i32, i32* %i39.1, align 4, !tbaa !43
  %mul40.1 = mul nsw i32 %191, %190
  %ghosts73.1 = getelementptr inbounds %struct.box_type, %struct.box_type* %188, i64 %idxprom36, i32 4
  %192 = load i32, i32* %ghosts73.1, align 4, !tbaa !38
  %mul66.1 = mul nsw i32 %192, %mul40.1
  store i32 %mul66.1, i32* %arrayidx33.1, align 4, !tbaa !35
  br i1 %cmp78, label %if.then79.1, label %if.end52.2

if.then79.1:                                      ; preds = %if.end52.1
  %193 = load i32, i32* %k, align 8, !tbaa !39
  %k87.1 = getelementptr inbounds %struct.box_type, %struct.box_type* %188, i64 %idxprom36, i32 2, i32 2
  %194 = load i32, i32* %k87.1, align 4, !tbaa !40
  %mul88.1 = mul nsw i32 %194, %193
  br label %if.end52.2

if.end52.2:                                       ; preds = %if.end52.1, %if.then79.1
  %mul88.sink.1 = phi i32 [ %mul88.1, %if.then79.1 ], [ %192, %if.end52.1 ]
  %mul91.1 = mul nsw i32 %mul88.sink.1, %mul66.1
  store i32 %mul91.1, i32* %arrayidx33.1, align 4, !tbaa !35
  %195 = add nsw i64 %125, 1
  %arrayidx33.2 = getelementptr inbounds [27 x i32], [27 x i32]* %sizes_all, i64 0, i64 %195
  %mul66.2 = mul nsw i32 %192, %192
  store i32 %mul66.2, i32* %arrayidx33.2, align 4, !tbaa !35
  br i1 %cmp78, label %if.then79.2, label %if.end102.2

if.then79.2:                                      ; preds = %if.end52.2
  %196 = load i32, i32* %k, align 8, !tbaa !39
  %k87.2 = getelementptr inbounds %struct.box_type, %struct.box_type* %188, i64 %idxprom36, i32 2, i32 2
  %197 = load i32, i32* %k87.2, align 4, !tbaa !40
  %mul88.2 = mul nsw i32 %197, %196
  br label %if.end102.2

if.end102.2:                                      ; preds = %if.end52.2, %if.then79.2
  %mul88.sink.2 = phi i32 [ %mul88.2, %if.then79.2 ], [ %192, %if.end52.2 ]
  %mul91.2 = mul nsw i32 %mul88.sink.2, %mul66.2
  store i32 %mul91.2, i32* %arrayidx33.2, align 4, !tbaa !35
  br label %for.inc106

if.end52.us.1:                                    ; preds = %if.then79.us, %if.else92.us
  %198 = phi %struct.box_type* [ %131, %if.then79.us ], [ %128, %if.else92.us ]
  %mul88.sink.us = phi i32 [ %mul88.us, %if.then79.us ], [ %129, %if.else92.us ]
  %mul91.us = mul nsw i32 %mul88.sink.us, %mul66.us
  store i32 %mul91.us, i32* %arrayidx33.us, align 4, !tbaa !35
  %arrayidx33.us.1 = getelementptr inbounds [27 x i32], [27 x i32]* %sizes_all, i64 0, i64 %125
  %199 = load i64, i64* %116, align 8
  %200 = trunc i64 %199 to i32
  %i39.us.1 = getelementptr inbounds %struct.box_type, %struct.box_type* %198, i64 %idxprom36, i32 2, i32 0
  %201 = load i32, i32* %i39.us.1, align 4, !tbaa !43
  %mul40.us.1 = mul nsw i32 %201, %200
  %202 = lshr i64 %199, 32
  %203 = trunc i64 %202 to i32
  %j62.us.1 = getelementptr inbounds %struct.box_type, %struct.box_type* %198, i64 %idxprom36, i32 2, i32 1
  %204 = load i32, i32* %j62.us.1, align 4, !tbaa !37
  %mul63.us.1 = mul nsw i32 %204, %203
  %mul66.us.1 = mul nsw i32 %mul63.us.1, %mul40.us.1
  store i32 %mul66.us.1, i32* %arrayidx33.us.1, align 4, !tbaa !35
  br i1 %cmp78, label %if.then79.us.1, label %if.else92.us.1

if.else92.us.1:                                   ; preds = %if.end52.us.1
  %ghosts98.us.1 = getelementptr inbounds %struct.box_type, %struct.box_type* %198, i64 %idxprom36, i32 4
  %205 = load i32, i32* %ghosts98.us.1, align 4, !tbaa !38
  br label %if.end52.us.2

if.then79.us.1:                                   ; preds = %if.end52.us.1
  %206 = load i32, i32* %k, align 8, !tbaa !39
  %k87.us.1 = getelementptr inbounds %struct.box_type, %struct.box_type* %198, i64 %idxprom36, i32 2, i32 2
  %207 = load i32, i32* %k87.us.1, align 4, !tbaa !40
  %mul88.us.1 = mul nsw i32 %207, %206
  br label %if.end52.us.2

if.end52.us.2:                                    ; preds = %if.then79.us.1, %if.else92.us.1
  %mul88.sink.us.1 = phi i32 [ %mul88.us.1, %if.then79.us.1 ], [ %205, %if.else92.us.1 ]
  %mul91.us.1 = mul nsw i32 %mul88.sink.us.1, %mul66.us.1
  store i32 %mul91.us.1, i32* %arrayidx33.us.1, align 4, !tbaa !35
  %208 = add nsw i64 %125, 1
  %arrayidx33.us.2 = getelementptr inbounds [27 x i32], [27 x i32]* %sizes_all, i64 0, i64 %208
  %ghosts.us.2 = getelementptr inbounds %struct.box_type, %struct.box_type* %198, i64 %idxprom36, i32 4
  %209 = load i32, i32* %ghosts.us.2, align 4, !tbaa !38
  %mul63.us.2 = mul nsw i32 %204, %203
  %mul66.us.2 = mul nsw i32 %mul63.us.2, %209
  store i32 %mul66.us.2, i32* %arrayidx33.us.2, align 4, !tbaa !35
  br i1 %cmp78, label %if.then79.us.2, label %if.else92.us.2

if.else92.us.2:                                   ; preds = %if.end52.us.2
  %ghosts98.us.2 = getelementptr inbounds %struct.box_type, %struct.box_type* %198, i64 %idxprom36, i32 4
  %210 = load i32, i32* %ghosts98.us.2, align 4, !tbaa !38
  br label %if.end102.us.2

if.then79.us.2:                                   ; preds = %if.end52.us.2
  %211 = load i32, i32* %k, align 8, !tbaa !39
  %k87.us.2 = getelementptr inbounds %struct.box_type, %struct.box_type* %198, i64 %idxprom36, i32 2, i32 2
  %212 = load i32, i32* %k87.us.2, align 4, !tbaa !40
  %mul88.us.2 = mul nsw i32 %212, %211
  br label %if.end102.us.2

if.end102.us.2:                                   ; preds = %if.then79.us.2, %if.else92.us.2
  %mul88.sink.us.2 = phi i32 [ %mul88.us.2, %if.then79.us.2 ], [ %210, %if.else92.us.2 ]
  %mul91.us.2 = mul nsw i32 %mul88.sink.us.2, %mul66.us.2
  store i32 %mul91.us.2, i32* %arrayidx33.us.2, align 4, !tbaa !35
  br label %for.inc106

if.then12.us.us.1:                                ; preds = %for.inc.us.us
  %arrayidx14.us.us.1 = getelementptr inbounds [27 x i32], [27 x i32]* @exchange_boundary.corners, i64 0, i64 %indvars.iv.next440
  %213 = load i32, i32* %arrayidx14.us.us.1, align 4, !tbaa !35
  %arrayidx16.us.us.1 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 %indvars.iv.next440
  %214 = load i32, i32* %arrayidx16.us.us.1, align 4, !tbaa !35
  %or17.us.us.1 = or i32 %214, %213
  store i32 %or17.us.us.1, i32* %arrayidx16.us.us.1, align 4, !tbaa !35
  br label %for.inc.us.us.1

for.inc.us.us.1:                                  ; preds = %if.then12.us.us.1, %for.inc.us.us
  %indvars.iv.next440.1 = add nsw i64 %indvars.iv439, 2
  br i1 %tobool11, label %for.inc.us.us.2, label %if.then12.us.us.2

if.then12.us.us.2:                                ; preds = %for.inc.us.us.1
  %arrayidx14.us.us.2 = getelementptr inbounds [27 x i32], [27 x i32]* @exchange_boundary.corners, i64 0, i64 %indvars.iv.next440.1
  %215 = load i32, i32* %arrayidx14.us.us.2, align 4, !tbaa !35
  %arrayidx16.us.us.2 = getelementptr inbounds [27 x i32], [27 x i32]* %exchange, i64 0, i64 %indvars.iv.next440.1
  %216 = load i32, i32* %arrayidx16.us.us.2, align 4, !tbaa !35
  %or17.us.us.2 = or i32 %216, %215
  store i32 %or17.us.us.2, i32* %arrayidx16.us.us.2, align 4, !tbaa !35
  br label %for.inc.us.us.2

for.inc.us.us.2:                                  ; preds = %if.then12.us.us.2, %for.inc.us.us.1
  %indvars.iv.next440.2 = add nsw i64 %indvars.iv439, 3
  %exitcond441.2 = icmp eq i64 %indvars.iv.next440.2, 27
  br i1 %exitcond441.2, label %for.end.loopexit, label %if.end10.us.us
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

declare i32 @MPI_Irecv(i8*, i32, i32, i32, i32, i32, i32*) #5

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined.(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readnone dereferenceable(4) %buffer, %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %exchange_faces, i32* nocapture readonly dereferenceable(4) %exchange_edges, i32* nocapture readonly dereferenceable(4) %exchange_corners, i32* nocapture readonly dereferenceable(4) %grid_id) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %bufferCopy_Pack_End = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 11
  %1 = load i32, i32* %bufferCopy_Pack_End, align 4, !tbaa !44
  %bufferCopy_Pack_Start = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 10
  %2 = load i32, i32* %bufferCopy_Pack_Start, align 8, !tbaa !45
  %sub = sub nsw i32 %1, %2
  %sub1 = add nsw i32 %sub, -1
  %cmp = icmp sgt i32 %1, %2
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre56 = bitcast i32* %.omp.is_last to i8*
  %.pre57 = bitcast i32* %.omp.stride to i8*
  %.pre59 = bitcast i32* %.omp.ub to i8*
  %.pre61 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %3 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %6 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %7 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %7, i32 33, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %8 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp853 = icmp sgt i32 %8, %sub1
  %cond54 = select i1 %cmp853, i32 %sub1, i32 %8
  store i32 %cond54, i32* %.omp.ub, align 4, !tbaa !35
  %9 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp955 = icmp sgt i32 %9, %cond54
  br i1 %cmp955, label %omp.dispatch.end, label %omp.inner.for.cond.preheader.preheader

omp.inner.for.cond.preheader.preheader:           ; preds = %omp.precond.then
  br label %omp.inner.for.cond.preheader

omp.inner.for.cond.preheader:                     ; preds = %omp.inner.for.cond.preheader.preheader, %omp.dispatch.inc
  %10 = phi i32 [ %cond, %omp.dispatch.inc ], [ %cond54, %omp.inner.for.cond.preheader.preheader ]
  %11 = phi i32 [ %add34, %omp.dispatch.inc ], [ %9, %omp.inner.for.cond.preheader.preheader ]
  %cmp1051 = icmp sgt i32 %11, %10
  br i1 %cmp1051, label %omp.dispatch.inc, label %omp.inner.for.body.preheader

omp.inner.for.body.preheader:                     ; preds = %omp.inner.for.cond.preheader
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body.preheader, %omp.inner.for.inc
  %12 = phi i32 [ %24, %omp.inner.for.inc ], [ %10, %omp.inner.for.body.preheader ]
  %.omp.iv.052 = phi i32 [ %add33, %omp.inner.for.inc ], [ %11, %omp.inner.for.body.preheader ]
  %13 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %bufferCopy_Pack_Start11 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %13, i64 0, i32 10
  %14 = load i32, i32* %bufferCopy_Pack_Start11, align 8, !tbaa !45
  %add12 = add nsw i32 %14, %.omp.iv.052
  %idxprom = sext i32 %add12 to i64
  %15 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom13 = sext i32 %15 to i64
  %arrayidx = getelementptr inbounds %struct.domain_type, %struct.domain_type* %13, i64 0, i32 9, i64 %idxprom13
  %16 = load %struct.bufferCopy_type*, %struct.bufferCopy_type** %arrayidx, align 8, !tbaa !1
  %isFace = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %16, i64 %idxprom, i32 0
  %17 = load i32, i32* %isFace, align 8, !tbaa !46
  %tobool = icmp eq i32 %17, 0
  %18 = load i32, i32* %exchange_faces, align 4
  %tobool15 = icmp eq i32 %18, 0
  %or.cond = or i1 %tobool, %tobool15
  br i1 %or.cond, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %omp.inner.for.body
  %isEdge = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %16, i64 %idxprom, i32 1
  %19 = load i32, i32* %isEdge, align 4, !tbaa !47
  %tobool21 = icmp eq i32 %19, 0
  %20 = load i32, i32* %exchange_edges, align 4
  %tobool23 = icmp eq i32 %20, 0
  %or.cond49 = or i1 %tobool21, %tobool23
  br i1 %or.cond49, label %lor.lhs.false24, label %if.then

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %isCorner = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %16, i64 %idxprom, i32 2
  %21 = load i32, i32* %isCorner, align 8, !tbaa !48
  %tobool30 = icmp eq i32 %21, 0
  %22 = load i32, i32* %exchange_corners, align 4
  %tobool32 = icmp eq i32 %22, 0
  %or.cond50 = or i1 %tobool30, %tobool32
  br i1 %or.cond50, label %omp.inner.for.inc, label %if.then

if.then:                                          ; preds = %lor.lhs.false24, %lor.lhs.false, %omp.inner.for.body
  %23 = load i32, i32* %grid_id, align 4, !tbaa !35
  call void @DoBufferCopy(%struct.domain_type* %13, i32 %15, i32 %23, i32 %add12)
  %.pre = load i32, i32* %.omp.ub, align 4, !tbaa !35
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %lor.lhs.false24, %if.then
  %24 = phi i32 [ %12, %lor.lhs.false24 ], [ %.pre, %if.then ]
  %add33 = add nsw i32 %.omp.iv.052, 1
  %cmp10 = icmp slt i32 %.omp.iv.052, %24
  br i1 %cmp10, label %omp.inner.for.body, label %omp.dispatch.inc.loopexit

omp.dispatch.inc.loopexit:                        ; preds = %omp.inner.for.inc
  %.lcssa = phi i32 [ %24, %omp.inner.for.inc ]
  br label %omp.dispatch.inc

omp.dispatch.inc:                                 ; preds = %omp.dispatch.inc.loopexit, %omp.inner.for.cond.preheader
  %25 = phi i32 [ %10, %omp.inner.for.cond.preheader ], [ %.lcssa, %omp.dispatch.inc.loopexit ]
  %26 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %27 = load i32, i32* %.omp.stride, align 4, !tbaa !35
  %add34 = add nsw i32 %27, %26
  store i32 %add34, i32* %.omp.lb, align 4, !tbaa !35
  %add35 = add nsw i32 %25, %27
  %cmp8 = icmp sgt i32 %add35, %sub1
  %cond = select i1 %cmp8, i32 %sub1, i32 %add35
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %cmp9 = icmp sgt i32 %add34, %cond
  br i1 %cmp9, label %omp.dispatch.end.loopexit, label %omp.inner.for.cond.preheader

omp.dispatch.end.loopexit:                        ; preds = %omp.dispatch.inc
  br label %omp.dispatch.end

omp.dispatch.end:                                 ; preds = %omp.dispatch.end.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %7) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.dispatch.end
  %.pre-phi62 = phi i8* [ %.pre61, %entry.omp.precond.end_crit_edge ], [ %3, %omp.dispatch.end ]
  %.pre-phi60 = phi i8* [ %.pre59, %entry.omp.precond.end_crit_edge ], [ %4, %omp.dispatch.end ]
  %.pre-phi58 = phi i8* [ %.pre57, %entry.omp.precond.end_crit_edge ], [ %5, %omp.dispatch.end ]
  %.pre-phi = phi i8* [ %.pre56, %entry.omp.precond.end_crit_edge ], [ %6, %omp.dispatch.end ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi58) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi60) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi62) #1
  ret void
}

declare void @__kmpc_for_static_init_4(%ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32)

declare void @__kmpc_for_static_fini(%ident_t*, i32)

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #4

declare void @__kmpc_fork_call(%ident_t*, i32, void (i32*, i32*, ...)*, ...)

declare i32 @MPI_Isend(i8*, i32, i32, i32, i32, i32, i32*) #5

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..2(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readnone dereferenceable(4) %buffer, %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %exchange_faces, i32* nocapture readonly dereferenceable(4) %exchange_edges, i32* nocapture readonly dereferenceable(4) %exchange_corners, i32* nocapture readonly dereferenceable(4) %grid_id) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %bufferCopy_Local_End = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 13
  %1 = load i32, i32* %bufferCopy_Local_End, align 4, !tbaa !49
  %bufferCopy_Local_Start = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 12
  %2 = load i32, i32* %bufferCopy_Local_Start, align 8, !tbaa !50
  %sub = sub nsw i32 %1, %2
  %sub1 = add nsw i32 %sub, -1
  %cmp = icmp sgt i32 %1, %2
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre56 = bitcast i32* %.omp.is_last to i8*
  %.pre57 = bitcast i32* %.omp.stride to i8*
  %.pre59 = bitcast i32* %.omp.ub to i8*
  %.pre61 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %3 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %6 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %7 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %7, i32 33, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %8 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp853 = icmp sgt i32 %8, %sub1
  %cond54 = select i1 %cmp853, i32 %sub1, i32 %8
  store i32 %cond54, i32* %.omp.ub, align 4, !tbaa !35
  %9 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp955 = icmp sgt i32 %9, %cond54
  br i1 %cmp955, label %omp.dispatch.end, label %omp.inner.for.cond.preheader.preheader

omp.inner.for.cond.preheader.preheader:           ; preds = %omp.precond.then
  br label %omp.inner.for.cond.preheader

omp.inner.for.cond.preheader:                     ; preds = %omp.inner.for.cond.preheader.preheader, %omp.dispatch.inc
  %10 = phi i32 [ %cond, %omp.dispatch.inc ], [ %cond54, %omp.inner.for.cond.preheader.preheader ]
  %11 = phi i32 [ %add34, %omp.dispatch.inc ], [ %9, %omp.inner.for.cond.preheader.preheader ]
  %cmp1051 = icmp sgt i32 %11, %10
  br i1 %cmp1051, label %omp.dispatch.inc, label %omp.inner.for.body.preheader

omp.inner.for.body.preheader:                     ; preds = %omp.inner.for.cond.preheader
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body.preheader, %omp.inner.for.inc
  %12 = phi i32 [ %24, %omp.inner.for.inc ], [ %10, %omp.inner.for.body.preheader ]
  %.omp.iv.052 = phi i32 [ %add33, %omp.inner.for.inc ], [ %11, %omp.inner.for.body.preheader ]
  %13 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %bufferCopy_Local_Start11 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %13, i64 0, i32 12
  %14 = load i32, i32* %bufferCopy_Local_Start11, align 8, !tbaa !50
  %add12 = add nsw i32 %14, %.omp.iv.052
  %idxprom = sext i32 %add12 to i64
  %15 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom13 = sext i32 %15 to i64
  %arrayidx = getelementptr inbounds %struct.domain_type, %struct.domain_type* %13, i64 0, i32 9, i64 %idxprom13
  %16 = load %struct.bufferCopy_type*, %struct.bufferCopy_type** %arrayidx, align 8, !tbaa !1
  %isFace = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %16, i64 %idxprom, i32 0
  %17 = load i32, i32* %isFace, align 8, !tbaa !46
  %tobool = icmp eq i32 %17, 0
  %18 = load i32, i32* %exchange_faces, align 4
  %tobool15 = icmp eq i32 %18, 0
  %or.cond = or i1 %tobool, %tobool15
  br i1 %or.cond, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %omp.inner.for.body
  %isEdge = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %16, i64 %idxprom, i32 1
  %19 = load i32, i32* %isEdge, align 4, !tbaa !47
  %tobool21 = icmp eq i32 %19, 0
  %20 = load i32, i32* %exchange_edges, align 4
  %tobool23 = icmp eq i32 %20, 0
  %or.cond49 = or i1 %tobool21, %tobool23
  br i1 %or.cond49, label %lor.lhs.false24, label %if.then

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %isCorner = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %16, i64 %idxprom, i32 2
  %21 = load i32, i32* %isCorner, align 8, !tbaa !48
  %tobool30 = icmp eq i32 %21, 0
  %22 = load i32, i32* %exchange_corners, align 4
  %tobool32 = icmp eq i32 %22, 0
  %or.cond50 = or i1 %tobool30, %tobool32
  br i1 %or.cond50, label %omp.inner.for.inc, label %if.then

if.then:                                          ; preds = %lor.lhs.false24, %lor.lhs.false, %omp.inner.for.body
  %23 = load i32, i32* %grid_id, align 4, !tbaa !35
  call void @DoBufferCopy(%struct.domain_type* %13, i32 %15, i32 %23, i32 %add12)
  %.pre = load i32, i32* %.omp.ub, align 4, !tbaa !35
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %lor.lhs.false24, %if.then
  %24 = phi i32 [ %12, %lor.lhs.false24 ], [ %.pre, %if.then ]
  %add33 = add nsw i32 %.omp.iv.052, 1
  %cmp10 = icmp slt i32 %.omp.iv.052, %24
  br i1 %cmp10, label %omp.inner.for.body, label %omp.dispatch.inc.loopexit

omp.dispatch.inc.loopexit:                        ; preds = %omp.inner.for.inc
  %.lcssa = phi i32 [ %24, %omp.inner.for.inc ]
  br label %omp.dispatch.inc

omp.dispatch.inc:                                 ; preds = %omp.dispatch.inc.loopexit, %omp.inner.for.cond.preheader
  %25 = phi i32 [ %10, %omp.inner.for.cond.preheader ], [ %.lcssa, %omp.dispatch.inc.loopexit ]
  %26 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %27 = load i32, i32* %.omp.stride, align 4, !tbaa !35
  %add34 = add nsw i32 %27, %26
  store i32 %add34, i32* %.omp.lb, align 4, !tbaa !35
  %add35 = add nsw i32 %25, %27
  %cmp8 = icmp sgt i32 %add35, %sub1
  %cond = select i1 %cmp8, i32 %sub1, i32 %add35
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %cmp9 = icmp sgt i32 %add34, %cond
  br i1 %cmp9, label %omp.dispatch.end.loopexit, label %omp.inner.for.cond.preheader

omp.dispatch.end.loopexit:                        ; preds = %omp.dispatch.inc
  br label %omp.dispatch.end

omp.dispatch.end:                                 ; preds = %omp.dispatch.end.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %7) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.dispatch.end
  %.pre-phi62 = phi i8* [ %.pre61, %entry.omp.precond.end_crit_edge ], [ %3, %omp.dispatch.end ]
  %.pre-phi60 = phi i8* [ %.pre59, %entry.omp.precond.end_crit_edge ], [ %4, %omp.dispatch.end ]
  %.pre-phi58 = phi i8* [ %.pre57, %entry.omp.precond.end_crit_edge ], [ %5, %omp.dispatch.end ]
  %.pre-phi = phi i8* [ %.pre56, %entry.omp.precond.end_crit_edge ], [ %6, %omp.dispatch.end ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi58) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi60) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi62) #1
  ret void
}

declare i32 @MPI_Waitall(i32, i32*, %struct.MPI_Status*) #5

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..3(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readnone dereferenceable(4) %buffer, %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %exchange_faces, i32* nocapture readonly dereferenceable(4) %exchange_edges, i32* nocapture readonly dereferenceable(4) %exchange_corners, i32* nocapture readonly dereferenceable(4) %grid_id) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %bufferCopy_Unpack_End = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 15
  %1 = load i32, i32* %bufferCopy_Unpack_End, align 4, !tbaa !51
  %bufferCopy_Unpack_Start = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 14
  %2 = load i32, i32* %bufferCopy_Unpack_Start, align 8, !tbaa !52
  %sub = sub nsw i32 %1, %2
  %sub1 = add nsw i32 %sub, -1
  %cmp = icmp sgt i32 %1, %2
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre56 = bitcast i32* %.omp.is_last to i8*
  %.pre57 = bitcast i32* %.omp.stride to i8*
  %.pre59 = bitcast i32* %.omp.ub to i8*
  %.pre61 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %3 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %6 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %7 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %7, i32 33, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %8 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp853 = icmp sgt i32 %8, %sub1
  %cond54 = select i1 %cmp853, i32 %sub1, i32 %8
  store i32 %cond54, i32* %.omp.ub, align 4, !tbaa !35
  %9 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp955 = icmp sgt i32 %9, %cond54
  br i1 %cmp955, label %omp.dispatch.end, label %omp.inner.for.cond.preheader.preheader

omp.inner.for.cond.preheader.preheader:           ; preds = %omp.precond.then
  br label %omp.inner.for.cond.preheader

omp.inner.for.cond.preheader:                     ; preds = %omp.inner.for.cond.preheader.preheader, %omp.dispatch.inc
  %10 = phi i32 [ %cond, %omp.dispatch.inc ], [ %cond54, %omp.inner.for.cond.preheader.preheader ]
  %11 = phi i32 [ %add34, %omp.dispatch.inc ], [ %9, %omp.inner.for.cond.preheader.preheader ]
  %cmp1051 = icmp sgt i32 %11, %10
  br i1 %cmp1051, label %omp.dispatch.inc, label %omp.inner.for.body.preheader

omp.inner.for.body.preheader:                     ; preds = %omp.inner.for.cond.preheader
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body.preheader, %omp.inner.for.inc
  %12 = phi i32 [ %24, %omp.inner.for.inc ], [ %10, %omp.inner.for.body.preheader ]
  %.omp.iv.052 = phi i32 [ %add33, %omp.inner.for.inc ], [ %11, %omp.inner.for.body.preheader ]
  %13 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %bufferCopy_Unpack_Start11 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %13, i64 0, i32 14
  %14 = load i32, i32* %bufferCopy_Unpack_Start11, align 8, !tbaa !52
  %add12 = add nsw i32 %14, %.omp.iv.052
  %idxprom = sext i32 %add12 to i64
  %15 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom13 = sext i32 %15 to i64
  %arrayidx = getelementptr inbounds %struct.domain_type, %struct.domain_type* %13, i64 0, i32 9, i64 %idxprom13
  %16 = load %struct.bufferCopy_type*, %struct.bufferCopy_type** %arrayidx, align 8, !tbaa !1
  %isFace = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %16, i64 %idxprom, i32 0
  %17 = load i32, i32* %isFace, align 8, !tbaa !46
  %tobool = icmp eq i32 %17, 0
  %18 = load i32, i32* %exchange_faces, align 4
  %tobool15 = icmp eq i32 %18, 0
  %or.cond = or i1 %tobool, %tobool15
  br i1 %or.cond, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %omp.inner.for.body
  %isEdge = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %16, i64 %idxprom, i32 1
  %19 = load i32, i32* %isEdge, align 4, !tbaa !47
  %tobool21 = icmp eq i32 %19, 0
  %20 = load i32, i32* %exchange_edges, align 4
  %tobool23 = icmp eq i32 %20, 0
  %or.cond49 = or i1 %tobool21, %tobool23
  br i1 %or.cond49, label %lor.lhs.false24, label %if.then

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %isCorner = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %16, i64 %idxprom, i32 2
  %21 = load i32, i32* %isCorner, align 8, !tbaa !48
  %tobool30 = icmp eq i32 %21, 0
  %22 = load i32, i32* %exchange_corners, align 4
  %tobool32 = icmp eq i32 %22, 0
  %or.cond50 = or i1 %tobool30, %tobool32
  br i1 %or.cond50, label %omp.inner.for.inc, label %if.then

if.then:                                          ; preds = %lor.lhs.false24, %lor.lhs.false, %omp.inner.for.body
  %23 = load i32, i32* %grid_id, align 4, !tbaa !35
  call void @DoBufferCopy(%struct.domain_type* %13, i32 %15, i32 %23, i32 %add12)
  %.pre = load i32, i32* %.omp.ub, align 4, !tbaa !35
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %lor.lhs.false24, %if.then
  %24 = phi i32 [ %12, %lor.lhs.false24 ], [ %.pre, %if.then ]
  %add33 = add nsw i32 %.omp.iv.052, 1
  %cmp10 = icmp slt i32 %.omp.iv.052, %24
  br i1 %cmp10, label %omp.inner.for.body, label %omp.dispatch.inc.loopexit

omp.dispatch.inc.loopexit:                        ; preds = %omp.inner.for.inc
  %.lcssa = phi i32 [ %24, %omp.inner.for.inc ]
  br label %omp.dispatch.inc

omp.dispatch.inc:                                 ; preds = %omp.dispatch.inc.loopexit, %omp.inner.for.cond.preheader
  %25 = phi i32 [ %10, %omp.inner.for.cond.preheader ], [ %.lcssa, %omp.dispatch.inc.loopexit ]
  %26 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %27 = load i32, i32* %.omp.stride, align 4, !tbaa !35
  %add34 = add nsw i32 %27, %26
  store i32 %add34, i32* %.omp.lb, align 4, !tbaa !35
  %add35 = add nsw i32 %25, %27
  %cmp8 = icmp sgt i32 %add35, %sub1
  %cond = select i1 %cmp8, i32 %sub1, i32 %add35
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %cmp9 = icmp sgt i32 %add34, %cond
  br i1 %cmp9, label %omp.dispatch.end.loopexit, label %omp.inner.for.cond.preheader

omp.dispatch.end.loopexit:                        ; preds = %omp.dispatch.inc
  br label %omp.dispatch.end

omp.dispatch.end:                                 ; preds = %omp.dispatch.end.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %7) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.dispatch.end
  %.pre-phi62 = phi i8* [ %.pre61, %entry.omp.precond.end_crit_edge ], [ %3, %omp.dispatch.end ]
  %.pre-phi60 = phi i8* [ %.pre59, %entry.omp.precond.end_crit_edge ], [ %4, %omp.dispatch.end ]
  %.pre-phi58 = phi i8* [ %.pre57, %entry.omp.precond.end_crit_edge ], [ %5, %omp.dispatch.end ]
  %.pre-phi = phi i8* [ %.pre56, %entry.omp.precond.end_crit_edge ], [ %6, %omp.dispatch.end ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi58) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi60) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi62) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @rebuild_lambda(%struct.domain_type* %domain, i32 %level, double %a, double %b) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  %omp_within_a_box = alloca i32, align 4
  %dominant_eigenvalue = alloca double, align 8
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  %send = alloca double, align 8
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store double %a, double* %a.addr, align 8, !tbaa !34
  store double %b, double* %b.addr, align 8, !tbaa !34
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  %5 = bitcast double* %dominant_eigenvalue to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #1
  store double -1.000000e+00, double* %dominant_eigenvalue, align 8, !tbaa !34
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 6, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, double*, double*, double*)* @.omp_outlined..4 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %omp_within_a_box, double* nonnull %b.addr, double* nonnull %a.addr, double* nonnull %dominant_eigenvalue) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..4(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %omp_within_a_box, double* nonnull %b.addr, double* nonnull %a.addr, double* nonnull %dominant_eigenvalue)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %6 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %6 to i64
  %7 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %7, i64 0, i32 0, i32 12, i64 %idxprom12
  %8 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %8
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  %call14 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %9 = bitcast double* %send to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #1
  %10 = bitcast double* %dominant_eigenvalue to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !34
  %12 = bitcast double* %send to i64*
  store i64 %11, i64* %12, align 8, !tbaa !34
  %call15 = call i32 @MPI_Allreduce(i8* %9, i8* %5, i32 1, i32 1275070475, i32 1476395009, i32 1140850688) #1
  %call16 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub17 = sub i64 %call16, %call14
  %13 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom18 = sext i32 %13 to i64
  %14 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx20 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %14, i64 0, i32 0, i32 14, i64 %idxprom18
  %15 = load i64, i64* %arrayidx20, align 8, !tbaa !42
  %add21 = add i64 %15, %sub17
  store i64 %add21, i64* %arrayidx20, align 8, !tbaa !42
  %arrayidx25 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %14, i64 0, i32 0, i32 5, i64 %idxprom18
  %16 = load i64, i64* %arrayidx25, align 8, !tbaa !42
  %add26 = add i64 %16, %sub17
  store i64 %add26, i64* %arrayidx25, align 8, !tbaa !42
  %rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %14, i64 0, i32 21
  %17 = load i32, i32* %rank, align 4, !tbaa !41
  %cmp27 = icmp eq i32 %17, 0
  br i1 %cmp27, label %if.then, label %if.end35

if.then:                                          ; preds = %omp_if.end
  %cmp29 = icmp eq i32 %13, 0
  br i1 %cmp29, label %if.then31, label %if.end

if.then31:                                        ; preds = %if.then
  %putchar = call i32 @putchar(i32 10) #1
  %.pre = load i32, i32* %level.addr, align 4, !tbaa !35
  br label %if.end

if.end:                                           ; preds = %if.then31, %if.then
  %18 = phi i32 [ %.pre, %if.then31 ], [ %13, %if.then ]
  %19 = load double, double* %dominant_eigenvalue, align 8, !tbaa !34
  %call33 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8, i64 0, i64 0), i32 %18, double %19)
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call34 = call i32 @fflush(%struct._IO_FILE* %20)
  %.pre47 = load i32, i32* %level.addr, align 4, !tbaa !35
  %.pre48 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  br label %if.end35

if.end35:                                         ; preds = %if.end, %omp_if.end
  %21 = phi %struct.domain_type* [ %.pre48, %if.end ], [ %14, %omp_if.end ]
  %22 = phi i32 [ %.pre47, %if.end ], [ %13, %omp_if.end ]
  %23 = load i64, i64* %10, align 8, !tbaa !34
  %idxprom36 = sext i32 %22 to i64
  %arrayidx37 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %21, i64 0, i32 27, i64 %idxprom36
  %24 = bitcast double* %arrayidx37 to i64*
  store i64 %23, i64* %24, align 8, !tbaa !34
  call void @llvm.lifetime.end(i64 8, i8* %9) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %5) #1
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret void
}

declare i32 @__kmpc_global_thread_num(%ident_t*)

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..4(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double* dereferenceable(8) %b, double* dereferenceable(8) %a, double* dereferenceable(8) %dominant_eigenvalue) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %dominant_eigenvalue5 = alloca double, align 8
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %dim_k = alloca i32, align 4
  %dim_j = alloca i32, align 4
  %dim_i = alloca i32, align 4
  %h2inv = alloca double, align 8
  %alpha = alloca double*, align 8
  %beta_i = alloca double*, align 8
  %beta_j = alloca double*, align 8
  %beta_k = alloca double*, align 8
  %lambda = alloca double*, align 8
  %box_eigenvalue = alloca double, align 8
  %.zero.addr = alloca i32, align 4
  %.omp.reduction.red_list = alloca [1 x i8*], align 8
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre165 = bitcast i32* %.omp.stride to i8*
  %.pre167 = bitcast i32* %.omp.ub to i8*
  %.pre169 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = bitcast double* %dominant_eigenvalue5 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #1
  store double 0xFFEFFFFFFFFFFFFF, double* %dominant_eigenvalue5, align 8, !tbaa !34
  %7 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %7, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %8 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp7 = icmp sgt i32 %8, %sub1
  %cond = select i1 %cmp7, i32 %sub1, i32 %8
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %9 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp8163 = icmp sgt i32 %9, %cond
  br i1 %cmp8163, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %10 = bitcast i32* %pencil to i8*
  %11 = bitcast i32* %plane to i8*
  %12 = bitcast i32* %dim_k to i8*
  %13 = bitcast i32* %dim_j to i8*
  %14 = bitcast i32* %dim_i to i8*
  %15 = bitcast double* %h2inv to i8*
  %16 = bitcast double** %alpha to i8*
  %17 = bitcast double** %beta_i to i8*
  %18 = bitcast double** %beta_j to i8*
  %19 = bitcast double** %beta_k to i8*
  %20 = bitcast double** %lambda to i8*
  %21 = bitcast double* %box_eigenvalue to i8*
  %22 = sext i32 %9 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %if.end ], [ %22, %omp.inner.for.body.lr.ph ]
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %23 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %23 to i64
  %24 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %24, i64 0, i32 28
  %25 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %25, i64 %indvars.iv, i32 5
  %26 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil12 = getelementptr inbounds %struct.box_type, %struct.box_type* %26, i64 %idxprom, i32 5
  %27 = load i32, i32* %pencil12, align 8, !tbaa !54
  store i32 %27, i32* %pencil, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %plane19 = getelementptr inbounds %struct.box_type, %struct.box_type* %26, i64 %idxprom, i32 6
  %28 = load i32, i32* %plane19, align 4, !tbaa !55
  store i32 %28, i32* %plane, align 4, !tbaa !35
  %ghosts26 = getelementptr inbounds %struct.box_type, %struct.box_type* %26, i64 %idxprom, i32 4
  %29 = load i32, i32* %ghosts26, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %k33 = getelementptr inbounds %struct.box_type, %struct.box_type* %26, i64 %idxprom, i32 2, i32 2
  %30 = load i32, i32* %k33, align 4, !tbaa !40
  store i32 %30, i32* %dim_k, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %j41 = getelementptr inbounds %struct.box_type, %struct.box_type* %26, i64 %idxprom, i32 2, i32 1
  %31 = load i32, i32* %j41, align 4, !tbaa !37
  store i32 %31, i32* %dim_j, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %14) #1
  %i49 = getelementptr inbounds %struct.box_type, %struct.box_type* %26, i64 %idxprom, i32 2, i32 0
  %32 = load i32, i32* %i49, align 4, !tbaa !43
  store i32 %32, i32* %dim_i, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %arrayidx51 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %24, i64 0, i32 26, i64 %idxprom
  %33 = load double, double* %arrayidx51, align 8, !tbaa !34
  %mul55 = fmul double %33, %33
  %div56 = fdiv double 1.000000e+00, %mul55
  store double %div56, double* %h2inv, align 8, !tbaa !34
  call void @llvm.lifetime.start(i64 8, i8* %16) #1
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %26, i64 %idxprom, i32 10
  %34 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx63 = getelementptr inbounds double*, double** %34, i64 2
  %35 = load double*, double** %arrayidx63, align 8, !tbaa !1
  %add64 = add nsw i32 %27, 1
  %add65 = add nsw i32 %add64, %28
  %mul66 = mul nsw i32 %add65, %29
  %idx.ext = sext i32 %mul66 to i64
  %add.ptr = getelementptr inbounds double, double* %35, i64 %idx.ext
  store double* %add.ptr, double** %alpha, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %17) #1
  %36 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels71 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %36, i64 %indvars.iv, i32 5
  %37 = load %struct.box_type*, %struct.box_type** %levels71, align 8, !tbaa !28
  %grids73 = getelementptr inbounds %struct.box_type, %struct.box_type* %37, i64 %idxprom, i32 10
  %38 = load double**, double*** %grids73, align 8, !tbaa !30
  %arrayidx74 = getelementptr inbounds double*, double** %38, i64 5
  %39 = load double*, double** %arrayidx74, align 8, !tbaa !1
  %add.ptr79 = getelementptr inbounds double, double* %39, i64 %idx.ext
  store double* %add.ptr79, double** %beta_i, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %18) #1
  %40 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels84 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %40, i64 %indvars.iv, i32 5
  %41 = load %struct.box_type*, %struct.box_type** %levels84, align 8, !tbaa !28
  %grids86 = getelementptr inbounds %struct.box_type, %struct.box_type* %41, i64 %idxprom, i32 10
  %42 = load double**, double*** %grids86, align 8, !tbaa !30
  %arrayidx87 = getelementptr inbounds double*, double** %42, i64 6
  %43 = load double*, double** %arrayidx87, align 8, !tbaa !1
  %add.ptr92 = getelementptr inbounds double, double* %43, i64 %idx.ext
  store double* %add.ptr92, double** %beta_j, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %19) #1
  %44 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels97 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %44, i64 %indvars.iv, i32 5
  %45 = load %struct.box_type*, %struct.box_type** %levels97, align 8, !tbaa !28
  %grids99 = getelementptr inbounds %struct.box_type, %struct.box_type* %45, i64 %idxprom, i32 10
  %46 = load double**, double*** %grids99, align 8, !tbaa !30
  %arrayidx100 = getelementptr inbounds double*, double** %46, i64 7
  %47 = load double*, double** %arrayidx100, align 8, !tbaa !1
  %add.ptr105 = getelementptr inbounds double, double* %47, i64 %idx.ext
  store double* %add.ptr105, double** %beta_k, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %20) #1
  %48 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels110 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %48, i64 %indvars.iv, i32 5
  %49 = load %struct.box_type*, %struct.box_type** %levels110, align 8, !tbaa !28
  %grids112 = getelementptr inbounds %struct.box_type, %struct.box_type* %49, i64 %idxprom, i32 10
  %50 = load double**, double*** %grids112, align 8, !tbaa !30
  %arrayidx113 = getelementptr inbounds double*, double** %50, i64 4
  %51 = load double*, double** %arrayidx113, align 8, !tbaa !1
  %add.ptr118 = getelementptr inbounds double, double* %51, i64 %idx.ext
  store double* %add.ptr118, double** %lambda, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %21) #1
  store double -1.000000e+00, double* %box_eigenvalue, align 8, !tbaa !34
  %52 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %52, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 14, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, double*, double*, double**, double**, double**, double*, double**, double**, double*)* @.omp_outlined..5 to void (i32*, i32*, ...)*), i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double* nonnull %b, double* nonnull %h2inv, double** nonnull %beta_i, double** nonnull %beta_j, double** nonnull %beta_k, double* nonnull %a, double** nonnull %alpha, double** nonnull %lambda, double* nonnull %box_eigenvalue) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %7) #1
  call void @.omp_outlined..5(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double* nonnull %b, double* nonnull %h2inv, double** nonnull %beta_i, double** nonnull %beta_j, double** nonnull %beta_k, double* nonnull %a, double** nonnull %alpha, double** nonnull %lambda, double* nonnull %box_eigenvalue)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %7) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %53 = load double, double* %box_eigenvalue, align 8, !tbaa !34
  %54 = load double, double* %dominant_eigenvalue5, align 8, !tbaa !34
  %cmp119 = fcmp ogt double %53, %54
  br i1 %cmp119, label %if.then, label %if.end

if.then:                                          ; preds = %omp_if.end
  store double %53, double* %dominant_eigenvalue5, align 8, !tbaa !34
  br label %if.end

if.end:                                           ; preds = %if.then, %omp_if.end
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %20) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %19) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  %55 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %56 = sext i32 %55 to i64
  %cmp8 = icmp slt i64 %indvars.iv, %56
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp8, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %if.end
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %7) #1
  %57 = bitcast [1 x i8*]* %.omp.reduction.red_list to double**
  store double* %dominant_eigenvalue5, double** %57, align 8
  %58 = bitcast [1 x i8*]* %.omp.reduction.red_list to i8*
  %59 = call i32 @__kmpc_reduce_nowait(%ident_t* nonnull @1, i32 %7, i32 1, i64 8, i8* %58, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func.6, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  switch i32 %59, label %.omp.reduction.default [
    i32 1, label %.omp.reduction.case1
    i32 2, label %.omp.reduction.case2
  ]

.omp.reduction.case1:                             ; preds = %omp.loop.exit
  %60 = load double, double* %dominant_eigenvalue, align 8, !tbaa !34
  %61 = load double, double* %dominant_eigenvalue5, align 8, !tbaa !34
  %cmp121 = fcmp ogt double %60, %61
  %. = select i1 %cmp121, double %60, double %61
  store double %., double* %dominant_eigenvalue, align 8, !tbaa !34
  call void @__kmpc_end_reduce_nowait(%ident_t* nonnull @1, i32 %7, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  br label %.omp.reduction.default

.omp.reduction.case2:                             ; preds = %omp.loop.exit
  %62 = bitcast double* %dominant_eigenvalue to i64*
  %atomic-load = load atomic i64, i64* %62 monotonic, align 8, !tbaa !34
  %63 = load double, double* %dominant_eigenvalue5, align 8
  br label %atomic_cont

atomic_cont:                                      ; preds = %atomic_cont, %.omp.reduction.case2
  %64 = phi i64 [ %atomic-load, %.omp.reduction.case2 ], [ %68, %atomic_cont ]
  %65 = bitcast i64 %64 to double
  %cmp126 = fcmp ogt double %65, %63
  %cond130 = select i1 %cmp126, double %65, double %63
  %66 = bitcast double %cond130 to i64
  %67 = cmpxchg i64* %62, i64 %64, i64 %66 monotonic monotonic
  %68 = extractvalue { i64, i1 } %67, 0
  %69 = extractvalue { i64, i1 } %67, 1
  br i1 %69, label %.omp.reduction.default.loopexit, label %atomic_cont

.omp.reduction.default.loopexit:                  ; preds = %atomic_cont
  br label %.omp.reduction.default

.omp.reduction.default:                           ; preds = %.omp.reduction.default.loopexit, %.omp.reduction.case1, %omp.loop.exit
  call void @llvm.lifetime.end(i64 8, i8* %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %.omp.reduction.default
  %.pre-phi170 = phi i8* [ %.pre169, %entry.omp.precond.end_crit_edge ], [ %2, %.omp.reduction.default ]
  %.pre-phi168 = phi i8* [ %.pre167, %entry.omp.precond.end_crit_edge ], [ %3, %.omp.reduction.default ]
  %.pre-phi166 = phi i8* [ %.pre165, %entry.omp.precond.end_crit_edge ], [ %4, %.omp.reduction.default ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %.omp.reduction.default ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi166) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi168) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi170) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..5(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k, i32* nocapture readonly dereferenceable(4) %dim_j, i32* nocapture readonly dereferenceable(4) %dim_i, i32* nocapture readonly dereferenceable(4) %pencil, i32* nocapture readonly dereferenceable(4) %plane, double* nocapture readonly dereferenceable(8) %b, double* nocapture readonly dereferenceable(8) %h2inv, double** nocapture readonly dereferenceable(8) %beta_i, double** nocapture readonly dereferenceable(8) %beta_j, double** nocapture readonly dereferenceable(8) %beta_k, double* nocapture readonly dereferenceable(8) %a, double** nocapture readonly dereferenceable(8) %alpha, double** nocapture readonly dereferenceable(8) %lambda, double* dereferenceable(8) %box_eigenvalue) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %box_eigenvalue15 = alloca double, align 8
  %.omp.reduction.red_list = alloca [1 x i8*], align 8
  %0 = load i32, i32* %dim_k, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre172 = bitcast i64* %.omp.stride to i8*
  %.pre174 = bitcast i64* %.omp.ub to i8*
  %.pre176 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = bitcast double* %box_eigenvalue15 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #1
  store double 0xFFEFFFFFFFFFFFFF, double* %box_eigenvalue15, align 8, !tbaa !34
  %7 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %7, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %8 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp18 = icmp sgt i64 %8, %sub7
  %cond = select i1 %cmp18, i64 %sub7, i64 %8
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %9 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp20168 = icmp sgt i64 %9, %cond
  br i1 %cmp20168, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %10 = load i32, i32* %dim_j, align 4
  %conv26 = sext i32 %10 to i64
  %11 = load i32, i32* %dim_i, align 4
  %cmp39166 = icmp sgt i32 %11, 0
  %12 = load i32, i32* %pencil, align 4
  %13 = load i32, i32* %plane, align 4
  %14 = load double*, double** %beta_i, align 8
  %15 = load double*, double** %beta_j, align 8
  %16 = load double*, double** %beta_k, align 8
  %17 = load double*, double** %alpha, align 8
  %18 = load double*, double** %lambda, align 8
  br i1 %cmp39166, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %19 = sext i32 %11 to i64
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %.omp.iv.0169.us = phi i64 [ %add114.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %9, %omp.inner.for.body.us.preheader ]
  %div27.us = sdiv i64 %.omp.iv.0169.us, %conv26
  %conv30.us = trunc i64 %div27.us to i32
  %rem.us = srem i64 %.omp.iv.0169.us, %conv26
  %conv38.us = trunc i64 %rem.us to i32
  %mul41.us = mul nsw i32 %12, %conv38.us
  %mul43.us = mul nsw i32 %13, %conv30.us
  br label %for.body.us

for.body.us:                                      ; preds = %omp.inner.for.body.us, %if.end.us
  %indvars.iv = phi i64 [ 0, %omp.inner.for.body.us ], [ %indvars.iv.next, %if.end.us ]
  %i.0167.us = phi i32 [ 0, %omp.inner.for.body.us ], [ %inc.us, %if.end.us ]
  %add42.us = add nsw i32 %mul41.us, %i.0167.us
  %add44.us = add nsw i32 %add42.us, %mul43.us
  %20 = load double, double* %b, align 8, !tbaa !34
  %21 = load double, double* %h2inv, align 8, !tbaa !34
  %mul45.us = fmul double %20, %21
  %idxprom.us = sext i32 %add44.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %14, i64 %idxprom.us
  %22 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %mul46.us = fmul double %mul45.us, %22
  %call.us = call double @fabs(double %mul46.us) #11
  %add48.us = add nsw i32 %add44.us, 1
  %idxprom49.us = sext i32 %add48.us to i64
  %arrayidx50.us = getelementptr inbounds double, double* %14, i64 %idxprom49.us
  %23 = load double, double* %arrayidx50.us, align 8, !tbaa !34
  %mul51.us = fmul double %mul45.us, %23
  %call52.us = call double @fabs(double %mul51.us) #11
  %add53.us = fadd double %call.us, %call52.us
  %arrayidx56.us = getelementptr inbounds double, double* %15, i64 %idxprom.us
  %24 = load double, double* %arrayidx56.us, align 8, !tbaa !34
  %mul57.us = fmul double %mul45.us, %24
  %call58.us = call double @fabs(double %mul57.us) #11
  %add59.us = fadd double %add53.us, %call58.us
  %add61.us = add nsw i32 %add44.us, %12
  %idxprom62.us = sext i32 %add61.us to i64
  %arrayidx63.us = getelementptr inbounds double, double* %15, i64 %idxprom62.us
  %25 = load double, double* %arrayidx63.us, align 8, !tbaa !34
  %mul64.us = fmul double %mul45.us, %25
  %call65.us = call double @fabs(double %mul64.us) #11
  %add66.us = fadd double %add59.us, %call65.us
  %arrayidx69.us = getelementptr inbounds double, double* %16, i64 %idxprom.us
  %26 = load double, double* %arrayidx69.us, align 8, !tbaa !34
  %mul70.us = fmul double %mul45.us, %26
  %call71.us = call double @fabs(double %mul70.us) #11
  %add72.us = fadd double %add66.us, %call71.us
  %add74.us = add nsw i32 %add44.us, %13
  %idxprom75.us = sext i32 %add74.us to i64
  %arrayidx76.us = getelementptr inbounds double, double* %16, i64 %idxprom75.us
  %27 = load double, double* %arrayidx76.us, align 8, !tbaa !34
  %mul77.us = fmul double %mul45.us, %27
  %call78.us = call double @fabs(double %mul77.us) #11
  %add79.us = fadd double %add72.us, %call78.us
  %28 = load double, double* %a, align 8, !tbaa !34
  %arrayidx81.us = getelementptr inbounds double, double* %17, i64 %idxprom.us
  %29 = load double, double* %arrayidx81.us, align 8, !tbaa !34
  %mul82.us = fmul double %28, %29
  %sub86.us = fsub double -0.000000e+00, %22
  %sub90.us = fsub double %sub86.us, %23
  %sub93.us = fsub double %sub90.us, %24
  %sub97.us = fsub double %sub93.us, %25
  %sub100.us = fsub double %sub97.us, %26
  %sub104.us = fsub double %sub100.us, %27
  %mul105.us = fmul double %mul45.us, %sub104.us
  %sub106.us = fsub double %mul82.us, %mul105.us
  %div107.us = fdiv double 1.000000e+00, %sub106.us
  %arrayidx109.us = getelementptr inbounds double, double* %18, i64 %idxprom.us
  store double %div107.us, double* %arrayidx109.us, align 8, !tbaa !34
  %add110.us = fadd double %add79.us, %sub106.us
  %div111.us = fdiv double %add110.us, %sub106.us
  %30 = load double, double* %box_eigenvalue15, align 8, !tbaa !34
  %cmp112.us = fcmp ogt double %div111.us, %30
  br i1 %cmp112.us, label %if.then.us, label %if.end.us

if.then.us:                                       ; preds = %for.body.us
  store double %div111.us, double* %box_eigenvalue15, align 8, !tbaa !34
  br label %if.end.us

if.end.us:                                        ; preds = %if.then.us, %for.body.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %inc.us = add nuw nsw i32 %i.0167.us, 1
  %cmp39.us = icmp slt i64 %indvars.iv.next, %19
  br i1 %cmp39.us, label %for.body.us, label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %if.end.us
  %add114.us = add nsw i64 %.omp.iv.0169.us, 1
  %cmp20.us = icmp slt i64 %.omp.iv.0169.us, %cond
  br i1 %cmp20.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %7) #1
  %31 = bitcast [1 x i8*]* %.omp.reduction.red_list to double**
  store double* %box_eigenvalue15, double** %31, align 8
  %32 = bitcast [1 x i8*]* %.omp.reduction.red_list to i8*
  %33 = call i32 @__kmpc_reduce_nowait(%ident_t* nonnull @1, i32 %7, i32 1, i64 8, i8* %32, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  switch i32 %33, label %.omp.reduction.default [
    i32 1, label %.omp.reduction.case1
    i32 2, label %.omp.reduction.case2
  ]

.omp.reduction.case1:                             ; preds = %omp.loop.exit
  %34 = load double, double* %box_eigenvalue, align 8, !tbaa !34
  %35 = load double, double* %box_eigenvalue15, align 8, !tbaa !34
  %cmp115 = fcmp ogt double %34, %35
  %. = select i1 %cmp115, double %34, double %35
  store double %., double* %box_eigenvalue, align 8, !tbaa !34
  call void @__kmpc_end_reduce_nowait(%ident_t* nonnull @1, i32 %7, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  br label %.omp.reduction.default

.omp.reduction.case2:                             ; preds = %omp.loop.exit
  %36 = bitcast double* %box_eigenvalue to i64*
  %atomic-load = load atomic i64, i64* %36 monotonic, align 8, !tbaa !34
  %37 = load double, double* %box_eigenvalue15, align 8
  br label %atomic_cont

atomic_cont:                                      ; preds = %atomic_cont, %.omp.reduction.case2
  %38 = phi i64 [ %atomic-load, %.omp.reduction.case2 ], [ %42, %atomic_cont ]
  %39 = bitcast i64 %38 to double
  %cmp121 = fcmp ogt double %39, %37
  %cond126 = select i1 %cmp121, double %39, double %37
  %40 = bitcast double %cond126 to i64
  %41 = cmpxchg i64* %36, i64 %38, i64 %40 monotonic monotonic
  %42 = extractvalue { i64, i1 } %41, 0
  %43 = extractvalue { i64, i1 } %41, 1
  br i1 %43, label %.omp.reduction.default.loopexit, label %atomic_cont

.omp.reduction.default.loopexit:                  ; preds = %atomic_cont
  br label %.omp.reduction.default

.omp.reduction.default:                           ; preds = %.omp.reduction.default.loopexit, %.omp.reduction.case1, %omp.loop.exit
  call void @llvm.lifetime.end(i64 8, i8* %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %.omp.reduction.default
  %.pre-phi177 = phi i8* [ %.pre176, %entry.omp.precond.end_crit_edge ], [ %2, %.omp.reduction.default ]
  %.pre-phi175 = phi i8* [ %.pre174, %entry.omp.precond.end_crit_edge ], [ %3, %.omp.reduction.default ]
  %.pre-phi173 = phi i8* [ %.pre172, %entry.omp.precond.end_crit_edge ], [ %4, %.omp.reduction.default ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %.omp.reduction.default ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi173) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi175) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi177) #1
  ret void
}

declare void @__kmpc_for_static_init_8(%ident_t*, i32, i32, i32*, i64*, i64*, i64*, i64, i64)

; Function Attrs: nounwind readnone
declare double @fabs(double) #6

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp.reduction.reduction_func(i8* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %2 = bitcast i8* %1 to double**
  %3 = load double*, double** %2, align 8
  %4 = bitcast i8* %0 to double**
  %5 = load double*, double** %4, align 8
  %6 = load double, double* %5, align 8, !tbaa !34
  %7 = load double, double* %3, align 8, !tbaa !34
  %cmp = fcmp ogt double %6, %7
  %. = select i1 %cmp, double %6, double %7
  store double %., double* %5, align 8, !tbaa !34
  ret void
}

declare i32 @__kmpc_reduce_nowait(%ident_t*, i32, i32, i64, i8*, void (i8*, i8*)*, [8 x i32]*)

declare void @__kmpc_end_reduce_nowait(%ident_t*, i32, [8 x i32]*)

declare void @__kmpc_serialized_parallel(%ident_t*, i32)

declare void @__kmpc_end_serialized_parallel(%ident_t*, i32)

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp.reduction.reduction_func.6(i8* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %2 = bitcast i8* %1 to double**
  %3 = load double*, double** %2, align 8
  %4 = bitcast i8* %0 to double**
  %5 = load double*, double** %4, align 8
  %6 = load double, double* %5, align 8, !tbaa !34
  %7 = load double, double* %3, align 8, !tbaa !34
  %cmp = fcmp ogt double %6, %7
  %. = select i1 %cmp, double %6, double %7
  store double %., double* %5, align 8, !tbaa !34
  ret void
}

declare i32 @MPI_Allreduce(i8*, i8*, i32, i32, i32, i32) #5

declare i32 @putchar(i32)

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #7

; Function Attrs: nounwind
declare i32 @fflush(%struct._IO_FILE* nocapture) #7

; Function Attrs: nounwind uwtable
define void @__box_smooth_GSRB_multiple(%struct.box_type* %box, i32 %phi_id, i32 %rhs_id, double %a, double %b, i32 %s) #3 {
entry:
  %box.addr = alloca %struct.box_type*, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  %jj = alloca i32, align 4
  %kk = alloca i32, align 4
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %h2inv = alloca double, align 8
  %phi = alloca double*, align 8
  %phi_new = alloca double*, align 8
  %rhs = alloca double*, align 8
  %alpha = alloca double*, align 8
  %beta_i = alloca double*, align 8
  %beta_j = alloca double*, align 8
  %beta_k = alloca double*, align 8
  %lambda = alloca double*, align 8
  %ghostsToOperateOn = alloca i32, align 4
  %ss = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  store %struct.box_type* %box, %struct.box_type** %box.addr, align 8, !tbaa !1
  store double %a, double* %a.addr, align 8, !tbaa !34
  store double %b, double* %b.addr, align 8, !tbaa !34
  %1 = bitcast i32* %jj to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  %2 = bitcast i32* %kk to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  %3 = bitcast i32* %pencil to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  %pencil1 = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 5
  %4 = bitcast i32* %pencil1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  store i32 %6, i32* %pencil, align 4, !tbaa !35
  %7 = bitcast i32* %plane to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #1
  %8 = lshr i64 %5, 32
  %9 = trunc i64 %8 to i32
  store i32 %9, i32* %plane, align 4, !tbaa !35
  %ghosts3 = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 4
  %10 = load i32, i32* %ghosts3, align 4, !tbaa !38
  %11 = bitcast double* %h2inv to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #1
  %h = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 0
  %12 = load double, double* %h, align 8, !tbaa !56
  %mul = fmul double %12, %12
  %div = fdiv double 1.000000e+00, %mul
  store double %div, double* %h2inv, align 8, !tbaa !34
  %13 = bitcast double** %phi to i8*
  call void @llvm.lifetime.start(i64 8, i8* %13) #1
  %idxprom = sext i32 %phi_id to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 10
  %14 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx = getelementptr inbounds double*, double** %14, i64 %idxprom
  %15 = load double*, double** %arrayidx, align 8, !tbaa !1
  %mul5 = mul nsw i32 %9, %10
  %idx.ext = sext i32 %mul5 to i64
  %add.ptr = getelementptr inbounds double, double* %15, i64 %idx.ext
  %mul6 = mul nsw i32 %6, %10
  %idx.ext7 = sext i32 %mul6 to i64
  %add.ptr8 = getelementptr inbounds double, double* %add.ptr, i64 %idx.ext7
  %idx.ext9 = sext i32 %10 to i64
  %add.ptr10 = getelementptr inbounds double, double* %add.ptr8, i64 %idx.ext9
  store double* %add.ptr10, double** %phi, align 8, !tbaa !1
  %16 = bitcast double** %phi_new to i8*
  call void @llvm.lifetime.start(i64 8, i8* %16) #1
  %17 = load double*, double** %arrayidx, align 8, !tbaa !1
  %add.ptr16 = getelementptr inbounds double, double* %17, i64 %idx.ext
  %add.ptr19 = getelementptr inbounds double, double* %add.ptr16, i64 %idx.ext7
  %add.ptr21 = getelementptr inbounds double, double* %add.ptr19, i64 %idx.ext9
  store double* %add.ptr21, double** %phi_new, align 8, !tbaa !1
  %18 = bitcast double** %rhs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %18) #1
  %idxprom22 = sext i32 %rhs_id to i64
  %arrayidx24 = getelementptr inbounds double*, double** %14, i64 %idxprom22
  %19 = load double*, double** %arrayidx24, align 8, !tbaa !1
  %add.ptr27 = getelementptr inbounds double, double* %19, i64 %idx.ext
  %add.ptr30 = getelementptr inbounds double, double* %add.ptr27, i64 %idx.ext7
  %add.ptr32 = getelementptr inbounds double, double* %add.ptr30, i64 %idx.ext9
  store double* %add.ptr32, double** %rhs, align 8, !tbaa !1
  %20 = bitcast double** %alpha to i8*
  call void @llvm.lifetime.start(i64 8, i8* %20) #1
  %arrayidx34 = getelementptr inbounds double*, double** %14, i64 2
  %21 = load double*, double** %arrayidx34, align 8, !tbaa !1
  %add.ptr37 = getelementptr inbounds double, double* %21, i64 %idx.ext
  %add.ptr40 = getelementptr inbounds double, double* %add.ptr37, i64 %idx.ext7
  %add.ptr42 = getelementptr inbounds double, double* %add.ptr40, i64 %idx.ext9
  store double* %add.ptr42, double** %alpha, align 8, !tbaa !1
  %22 = bitcast double** %beta_i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %22) #1
  %arrayidx44 = getelementptr inbounds double*, double** %14, i64 5
  %23 = load double*, double** %arrayidx44, align 8, !tbaa !1
  %add.ptr47 = getelementptr inbounds double, double* %23, i64 %idx.ext
  %add.ptr50 = getelementptr inbounds double, double* %add.ptr47, i64 %idx.ext7
  %add.ptr52 = getelementptr inbounds double, double* %add.ptr50, i64 %idx.ext9
  store double* %add.ptr52, double** %beta_i, align 8, !tbaa !1
  %24 = bitcast double** %beta_j to i8*
  call void @llvm.lifetime.start(i64 8, i8* %24) #1
  %arrayidx54 = getelementptr inbounds double*, double** %14, i64 6
  %25 = load double*, double** %arrayidx54, align 8, !tbaa !1
  %add.ptr57 = getelementptr inbounds double, double* %25, i64 %idx.ext
  %add.ptr60 = getelementptr inbounds double, double* %add.ptr57, i64 %idx.ext7
  %add.ptr62 = getelementptr inbounds double, double* %add.ptr60, i64 %idx.ext9
  store double* %add.ptr62, double** %beta_j, align 8, !tbaa !1
  %26 = bitcast double** %beta_k to i8*
  call void @llvm.lifetime.start(i64 8, i8* %26) #1
  %arrayidx64 = getelementptr inbounds double*, double** %14, i64 7
  %27 = load double*, double** %arrayidx64, align 8, !tbaa !1
  %add.ptr67 = getelementptr inbounds double, double* %27, i64 %idx.ext
  %add.ptr70 = getelementptr inbounds double, double* %add.ptr67, i64 %idx.ext7
  %add.ptr72 = getelementptr inbounds double, double* %add.ptr70, i64 %idx.ext9
  store double* %add.ptr72, double** %beta_k, align 8, !tbaa !1
  %28 = bitcast double** %lambda to i8*
  call void @llvm.lifetime.start(i64 8, i8* %28) #1
  %arrayidx74 = getelementptr inbounds double*, double** %14, i64 4
  %29 = load double*, double** %arrayidx74, align 8, !tbaa !1
  %add.ptr77 = getelementptr inbounds double, double* %29, i64 %idx.ext
  %add.ptr80 = getelementptr inbounds double, double* %add.ptr77, i64 %idx.ext7
  %add.ptr82 = getelementptr inbounds double, double* %add.ptr80, i64 %idx.ext9
  store double* %add.ptr82, double** %lambda, align 8, !tbaa !1
  %30 = bitcast i32* %ghostsToOperateOn to i8*
  call void @llvm.lifetime.start(i64 4, i8* %30) #1
  %sub = add nsw i32 %10, -1
  store i32 %sub, i32* %ghostsToOperateOn, align 4, !tbaa !35
  %31 = bitcast i32* %ss to i8*
  call void @llvm.lifetime.start(i64 4, i8* %31) #1
  %32 = load %struct.box_type*, %struct.box_type** %box.addr, align 8, !tbaa !1
  %k = getelementptr inbounds %struct.box_type, %struct.box_type* %32, i64 0, i32 2, i32 2
  %33 = load i32, i32* %k, align 4, !tbaa !40
  %j = getelementptr inbounds %struct.box_type, %struct.box_type* %32, i64 0, i32 2, i32 1
  %34 = load i32, i32* %j, align 4, !tbaa !37
  store i32 %s, i32* %ss, align 4, !tbaa !35
  %add = add nsw i32 %10, %s
  %cmp87177 = icmp sgt i32 %10, 0
  br i1 %cmp87177, label %for.body.lr.ph, label %for.end127

for.body.lr.ph:                                   ; preds = %entry
  %cmp84 = icmp sgt i32 %34, 8
  %cmp = icmp sgt i32 %33, 8
  %tobool = or i1 %cmp, %cmp84
  %35 = bitcast %struct.box_type** %box.addr to i64*
  br label %for.body

for.body:                                         ; preds = %for.inc126.for.body_crit_edge, %for.body.lr.ph
  %36 = phi %struct.box_type* [ %32, %for.body.lr.ph ], [ %.pre, %for.inc126.for.body_crit_edge ]
  %37 = phi i32 [ %sub, %for.body.lr.ph ], [ %dec, %for.inc126.for.body_crit_edge ]
  %sub88 = sub nsw i32 0, %37
  store i32 %sub88, i32* %kk, align 4, !tbaa !35
  %k91174 = getelementptr inbounds %struct.box_type, %struct.box_type* %36, i64 0, i32 2, i32 2
  %38 = load i32, i32* %k91174, align 4, !tbaa !40
  %add92175 = add nsw i32 %38, %37
  %cmp93176 = icmp sgt i32 %add92175, %sub88
  br i1 %cmp93176, label %for.body94.preheader, label %for.end122

for.body94.preheader:                             ; preds = %for.body
  br label %for.body94

for.body94:                                       ; preds = %for.body94.preheader, %for.inc120
  %39 = phi i32 [ %add121, %for.inc120 ], [ %sub88, %for.body94.preheader ]
  %40 = phi %struct.box_type* [ %120, %for.inc120 ], [ %36, %for.body94.preheader ]
  %41 = phi i32 [ %.pr, %for.inc120 ], [ %37, %for.body94.preheader ]
  %sub95 = sub nsw i32 0, %41
  store i32 %sub95, i32* %jj, align 4, !tbaa !35
  %j98171 = getelementptr inbounds %struct.box_type, %struct.box_type* %40, i64 0, i32 2, i32 1
  %42 = load i32, i32* %j98171, align 4, !tbaa !37
  %add99172 = add nsw i32 %41, %42
  %cmp100173 = icmp sgt i32 %add99172, %sub95
  br i1 %cmp100173, label %for.body101.preheader, label %for.inc120

for.body101.preheader:                            ; preds = %for.body94
  br label %for.body101

for.body101:                                      ; preds = %for.body101.preheader, %for.inc
  %43 = call i8* @__kmpc_omp_task_alloc(%ident_t* nonnull @0, i32 %0, i32 1, i64 152, i64 144, i32 (i32, i8*)* nonnull bitcast (i32 (i32, %struct.kmp_task_t_with_privates*)* @.omp_task_entry. to i32 (i32, i8*)*)) #1
  %44 = bitcast i8* %43 to i8**
  %45 = load i8*, i8** %44, align 8, !tbaa !57
  %agg.captured.sroa.0.0..sroa_cast = bitcast i8* %45 to i32**
  store i32* %kk, i32** %agg.captured.sroa.0.0..sroa_cast, align 8
  %agg.captured.sroa.2.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 8
  %agg.captured.sroa.2.0..sroa_cast = bitcast i8* %agg.captured.sroa.2.0..sroa_idx to %struct.box_type***
  store %struct.box_type** %box.addr, %struct.box_type*** %agg.captured.sroa.2.0..sroa_cast, align 8
  %agg.captured.sroa.3.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 16
  %agg.captured.sroa.3.0..sroa_cast = bitcast i8* %agg.captured.sroa.3.0..sroa_idx to i32**
  store i32* %ghostsToOperateOn, i32** %agg.captured.sroa.3.0..sroa_cast, align 8
  %agg.captured.sroa.4.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 24
  %agg.captured.sroa.4.0..sroa_cast = bitcast i8* %agg.captured.sroa.4.0..sroa_idx to i32**
  store i32* %jj, i32** %agg.captured.sroa.4.0..sroa_cast, align 8
  %agg.captured.sroa.5.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 32
  %agg.captured.sroa.5.0..sroa_cast = bitcast i8* %agg.captured.sroa.5.0..sroa_idx to i32**
  store i32* %ss, i32** %agg.captured.sroa.5.0..sroa_cast, align 8
  %agg.captured.sroa.6.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 40
  %agg.captured.sroa.6.0..sroa_cast = bitcast i8* %agg.captured.sroa.6.0..sroa_idx to i32**
  store i32* %pencil, i32** %agg.captured.sroa.6.0..sroa_cast, align 8
  %agg.captured.sroa.7.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 48
  %agg.captured.sroa.7.0..sroa_cast = bitcast i8* %agg.captured.sroa.7.0..sroa_idx to i32**
  store i32* %plane, i32** %agg.captured.sroa.7.0..sroa_cast, align 8
  %agg.captured.sroa.8.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 56
  %agg.captured.sroa.8.0..sroa_cast = bitcast i8* %agg.captured.sroa.8.0..sroa_idx to double**
  store double* %a.addr, double** %agg.captured.sroa.8.0..sroa_cast, align 8
  %agg.captured.sroa.9.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 64
  %agg.captured.sroa.9.0..sroa_cast = bitcast i8* %agg.captured.sroa.9.0..sroa_idx to double***
  store double** %alpha, double*** %agg.captured.sroa.9.0..sroa_cast, align 8
  %agg.captured.sroa.10.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 72
  %agg.captured.sroa.10.0..sroa_cast = bitcast i8* %agg.captured.sroa.10.0..sroa_idx to double***
  store double** %phi, double*** %agg.captured.sroa.10.0..sroa_cast, align 8
  %agg.captured.sroa.11.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 80
  %agg.captured.sroa.11.0..sroa_cast = bitcast i8* %agg.captured.sroa.11.0..sroa_idx to double**
  store double* %b.addr, double** %agg.captured.sroa.11.0..sroa_cast, align 8
  %agg.captured.sroa.12.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 88
  %agg.captured.sroa.12.0..sroa_cast = bitcast i8* %agg.captured.sroa.12.0..sroa_idx to double**
  store double* %h2inv, double** %agg.captured.sroa.12.0..sroa_cast, align 8
  %agg.captured.sroa.13.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 96
  %agg.captured.sroa.13.0..sroa_cast = bitcast i8* %agg.captured.sroa.13.0..sroa_idx to double***
  store double** %beta_i, double*** %agg.captured.sroa.13.0..sroa_cast, align 8
  %agg.captured.sroa.14.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 104
  %agg.captured.sroa.14.0..sroa_cast = bitcast i8* %agg.captured.sroa.14.0..sroa_idx to double***
  store double** %beta_j, double*** %agg.captured.sroa.14.0..sroa_cast, align 8
  %agg.captured.sroa.15.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 112
  %agg.captured.sroa.15.0..sroa_cast = bitcast i8* %agg.captured.sroa.15.0..sroa_idx to double***
  store double** %beta_k, double*** %agg.captured.sroa.15.0..sroa_cast, align 8
  %agg.captured.sroa.16.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 120
  %agg.captured.sroa.16.0..sroa_cast = bitcast i8* %agg.captured.sroa.16.0..sroa_idx to double***
  store double** %phi_new, double*** %agg.captured.sroa.16.0..sroa_cast, align 8
  %agg.captured.sroa.17.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 128
  %agg.captured.sroa.17.0..sroa_cast = bitcast i8* %agg.captured.sroa.17.0..sroa_idx to double***
  store double** %lambda, double*** %agg.captured.sroa.17.0..sroa_cast, align 8
  %agg.captured.sroa.18.0..sroa_idx = getelementptr inbounds i8, i8* %45, i64 136
  %agg.captured.sroa.18.0..sroa_cast = bitcast i8* %agg.captured.sroa.18.0..sroa_idx to double***
  store double** %rhs, double*** %agg.captured.sroa.18.0..sroa_cast, align 8
  %46 = getelementptr inbounds i8, i8* %43, i64 32
  %47 = load i64, i64* %35, align 8, !tbaa !1
  %48 = bitcast i8* %46 to i64*
  store i64 %47, i64* %48, align 8, !tbaa !61
  %49 = getelementptr inbounds i8, i8* %43, i64 40
  %50 = bitcast i8* %agg.captured.sroa.8.0..sroa_idx to i64**
  %ref102159 = load i64*, i64** %50, align 8, !tbaa !62
  %51 = load i64, i64* %ref102159, align 8, !tbaa !34
  %52 = bitcast i8* %49 to i64*
  store i64 %51, i64* %52, align 8, !tbaa !63
  %53 = getelementptr inbounds i8, i8* %43, i64 48
  %54 = bitcast i8* %agg.captured.sroa.9.0..sroa_idx to i64**
  %ref103160 = load i64*, i64** %54, align 8, !tbaa !62
  %55 = load i64, i64* %ref103160, align 8, !tbaa !1
  %56 = bitcast i8* %53 to i64*
  store i64 %55, i64* %56, align 8, !tbaa !64
  %57 = getelementptr inbounds i8, i8* %43, i64 56
  %58 = bitcast i8* %agg.captured.sroa.10.0..sroa_idx to i64**
  %ref104161 = load i64*, i64** %58, align 8, !tbaa !62
  %59 = load i64, i64* %ref104161, align 8, !tbaa !1
  %60 = bitcast i8* %57 to i64*
  store i64 %59, i64* %60, align 8, !tbaa !65
  %61 = getelementptr inbounds i8, i8* %43, i64 64
  %62 = bitcast i8* %agg.captured.sroa.11.0..sroa_idx to i64**
  %ref105162 = load i64*, i64** %62, align 8, !tbaa !62
  %63 = load i64, i64* %ref105162, align 8, !tbaa !34
  %64 = bitcast i8* %61 to i64*
  store i64 %63, i64* %64, align 8, !tbaa !66
  %65 = getelementptr inbounds i8, i8* %43, i64 72
  %66 = bitcast i8* %agg.captured.sroa.12.0..sroa_idx to i64**
  %ref106163 = load i64*, i64** %66, align 8, !tbaa !62
  %67 = load i64, i64* %ref106163, align 8, !tbaa !34
  %68 = bitcast i8* %65 to i64*
  store i64 %67, i64* %68, align 8, !tbaa !67
  %69 = getelementptr inbounds i8, i8* %43, i64 80
  %70 = bitcast i8* %agg.captured.sroa.13.0..sroa_idx to i64**
  %ref107164 = load i64*, i64** %70, align 8, !tbaa !62
  %71 = load i64, i64* %ref107164, align 8, !tbaa !1
  %72 = bitcast i8* %69 to i64*
  store i64 %71, i64* %72, align 8, !tbaa !68
  %73 = getelementptr inbounds i8, i8* %43, i64 88
  %74 = bitcast i8* %agg.captured.sroa.14.0..sroa_idx to i64**
  %ref108165 = load i64*, i64** %74, align 8, !tbaa !62
  %75 = load i64, i64* %ref108165, align 8, !tbaa !1
  %76 = bitcast i8* %73 to i64*
  store i64 %75, i64* %76, align 8, !tbaa !69
  %77 = getelementptr inbounds i8, i8* %43, i64 96
  %78 = bitcast i8* %agg.captured.sroa.15.0..sroa_idx to i64**
  %ref109166 = load i64*, i64** %78, align 8, !tbaa !62
  %79 = load i64, i64* %ref109166, align 8, !tbaa !1
  %80 = bitcast i8* %77 to i64*
  store i64 %79, i64* %80, align 8, !tbaa !70
  %81 = getelementptr inbounds i8, i8* %43, i64 104
  %82 = bitcast i8* %agg.captured.sroa.16.0..sroa_idx to i64**
  %ref110167 = load i64*, i64** %82, align 8, !tbaa !62
  %83 = load i64, i64* %ref110167, align 8, !tbaa !1
  %84 = bitcast i8* %81 to i64*
  store i64 %83, i64* %84, align 8, !tbaa !71
  %85 = getelementptr inbounds i8, i8* %43, i64 112
  %86 = bitcast i8* %agg.captured.sroa.17.0..sroa_idx to i64**
  %ref111168 = load i64*, i64** %86, align 8, !tbaa !62
  %87 = load i64, i64* %ref111168, align 8, !tbaa !1
  %88 = bitcast i8* %85 to i64*
  store i64 %87, i64* %88, align 8, !tbaa !72
  %89 = getelementptr inbounds i8, i8* %43, i64 120
  %90 = bitcast i8* %agg.captured.sroa.18.0..sroa_idx to i64**
  %ref112169 = load i64*, i64** %90, align 8, !tbaa !62
  %91 = load i64, i64* %ref112169, align 8, !tbaa !1
  %92 = bitcast i8* %89 to i64*
  store i64 %91, i64* %92, align 8, !tbaa !73
  %93 = getelementptr inbounds i8, i8* %43, i64 128
  %94 = bitcast i8* %93 to i32*
  %ref113 = load i32*, i32** %agg.captured.sroa.0.0..sroa_cast, align 8, !tbaa !62
  %95 = load i32, i32* %ref113, align 4, !tbaa !35
  store i32 %95, i32* %94, align 8, !tbaa !74
  %96 = getelementptr inbounds i8, i8* %43, i64 132
  %97 = bitcast i8* %96 to i32*
  %ref114 = load i32*, i32** %agg.captured.sroa.3.0..sroa_cast, align 8, !tbaa !62
  %98 = load i32, i32* %ref114, align 4, !tbaa !35
  store i32 %98, i32* %97, align 4, !tbaa !75
  %99 = getelementptr inbounds i8, i8* %43, i64 136
  %100 = bitcast i8* %99 to i32*
  %ref115 = load i32*, i32** %agg.captured.sroa.4.0..sroa_cast, align 8, !tbaa !62
  %101 = load i32, i32* %ref115, align 4, !tbaa !35
  store i32 %101, i32* %100, align 8, !tbaa !76
  %102 = getelementptr inbounds i8, i8* %43, i64 140
  %103 = bitcast i8* %102 to i32*
  %ref116 = load i32*, i32** %agg.captured.sroa.5.0..sroa_cast, align 8, !tbaa !62
  %104 = load i32, i32* %ref116, align 4, !tbaa !35
  store i32 %104, i32* %103, align 4, !tbaa !77
  %105 = getelementptr inbounds i8, i8* %43, i64 144
  %106 = bitcast i8* %105 to i32*
  %ref117 = load i32*, i32** %agg.captured.sroa.6.0..sroa_cast, align 8, !tbaa !62
  %107 = load i32, i32* %ref117, align 4, !tbaa !35
  store i32 %107, i32* %106, align 8, !tbaa !78
  %108 = getelementptr inbounds i8, i8* %43, i64 148
  %109 = bitcast i8* %108 to i32*
  %ref118 = load i32*, i32** %agg.captured.sroa.7.0..sroa_cast, align 8, !tbaa !62
  %110 = load i32, i32* %ref118, align 4, !tbaa !35
  store i32 %110, i32* %109, align 4, !tbaa !79
  %111 = getelementptr inbounds i8, i8* %43, i64 24
  %112 = bitcast i8* %111 to i32 (i32, i8*)**
  store i32 (i32, i8*)* null, i32 (i32, i8*)** %112, align 8, !tbaa !80
  br i1 %tobool, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %for.body101
  %113 = call i32 @__kmpc_omp_task(%ident_t* nonnull @0, i32 %0, i8* %43) #1
  br label %for.inc

omp_if.else:                                      ; preds = %for.body101
  %114 = bitcast i8* %43 to %struct.kmp_task_t_with_privates*
  call void @__kmpc_omp_task_begin_if0(%ident_t* nonnull @0, i32 %0, i8* %43) #1
  %115 = call i32 @.omp_task_entry.(i32 %0, %struct.kmp_task_t_with_privates* %114)
  call void @__kmpc_omp_task_complete_if0(%ident_t* nonnull @0, i32 %0, i8* %43) #1
  br label %for.inc

for.inc:                                          ; preds = %omp_if.then, %omp_if.else
  %116 = load i32, i32* %jj, align 4, !tbaa !35
  %add119 = add nsw i32 %116, 16
  store i32 %add119, i32* %jj, align 4, !tbaa !35
  %117 = load %struct.box_type*, %struct.box_type** %box.addr, align 8, !tbaa !1
  %j98 = getelementptr inbounds %struct.box_type, %struct.box_type* %117, i64 0, i32 2, i32 1
  %118 = load i32, i32* %j98, align 4, !tbaa !37
  %119 = load i32, i32* %ghostsToOperateOn, align 4, !tbaa !35
  %add99 = add nsw i32 %119, %118
  %cmp100 = icmp slt i32 %add119, %add99
  br i1 %cmp100, label %for.body101, label %for.inc120.loopexit

for.inc120.loopexit:                              ; preds = %for.inc
  %.lcssa188 = phi i32 [ %119, %for.inc ]
  %.lcssa187 = phi %struct.box_type* [ %117, %for.inc ]
  %.pre178 = load i32, i32* %kk, align 4, !tbaa !35
  br label %for.inc120

for.inc120:                                       ; preds = %for.inc120.loopexit, %for.body94
  %120 = phi %struct.box_type* [ %.lcssa187, %for.inc120.loopexit ], [ %40, %for.body94 ]
  %.pr = phi i32 [ %.lcssa188, %for.inc120.loopexit ], [ %41, %for.body94 ]
  %121 = phi i32 [ %.pre178, %for.inc120.loopexit ], [ %39, %for.body94 ]
  %add121 = add nsw i32 %121, 4
  store i32 %add121, i32* %kk, align 4, !tbaa !35
  %k91 = getelementptr inbounds %struct.box_type, %struct.box_type* %120, i64 0, i32 2, i32 2
  %122 = load i32, i32* %k91, align 4, !tbaa !40
  %add92 = add nsw i32 %122, %.pr
  %cmp93 = icmp slt i32 %add121, %add92
  br i1 %cmp93, label %for.body94, label %for.end122.loopexit

for.end122.loopexit:                              ; preds = %for.inc120
  %.pr.lcssa = phi i32 [ %.pr, %for.inc120 ]
  br label %for.end122

for.end122:                                       ; preds = %for.end122.loopexit, %for.body
  %.lcssa = phi i32 [ %37, %for.body ], [ %.pr.lcssa, %for.end122.loopexit ]
  %cmp123 = icmp sgt i32 %.lcssa, 0
  br i1 %cmp123, label %if.then124, label %for.inc126

if.then124:                                       ; preds = %for.end122
  %123 = call i32 @__kmpc_omp_taskwait(%ident_t* nonnull @0, i32 %0) #1
  %.pre180 = load i32, i32* %ghostsToOperateOn, align 4, !tbaa !35
  br label %for.inc126

for.inc126:                                       ; preds = %for.end122, %if.then124
  %124 = phi i32 [ %.lcssa, %for.end122 ], [ %.pre180, %if.then124 ]
  %125 = load i32, i32* %ss, align 4, !tbaa !35
  %inc = add nsw i32 %125, 1
  store i32 %inc, i32* %ss, align 4, !tbaa !35
  %dec = add nsw i32 %124, -1
  store i32 %dec, i32* %ghostsToOperateOn, align 4, !tbaa !35
  %cmp87 = icmp slt i32 %inc, %add
  br i1 %cmp87, label %for.inc126.for.body_crit_edge, label %for.end127.loopexit

for.inc126.for.body_crit_edge:                    ; preds = %for.inc126
  %.pre = load %struct.box_type*, %struct.box_type** %box.addr, align 8, !tbaa !1
  br label %for.body

for.end127.loopexit:                              ; preds = %for.inc126
  br label %for.end127

for.end127:                                       ; preds = %for.end127.loopexit, %entry
  call void @llvm.lifetime.end(i64 4, i8* nonnull %31) #1
  call void @llvm.lifetime.end(i64 4, i8* %30) #1
  call void @llvm.lifetime.end(i64 8, i8* %28) #1
  call void @llvm.lifetime.end(i64 8, i8* %26) #1
  call void @llvm.lifetime.end(i64 8, i8* %24) #1
  call void @llvm.lifetime.end(i64 8, i8* %22) #1
  call void @llvm.lifetime.end(i64 8, i8* %20) #1
  call void @llvm.lifetime.end(i64 8, i8* %18) #1
  call void @llvm.lifetime.end(i64 8, i8* %16) #1
  call void @llvm.lifetime.end(i64 8, i8* %13) #1
  call void @llvm.lifetime.end(i64 8, i8* %11) #1
  call void @llvm.lifetime.end(i64 4, i8* %7) #1
  call void @llvm.lifetime.end(i64 4, i8* %3) #1
  call void @llvm.lifetime.end(i64 4, i8* %2) #1
  call void @llvm.lifetime.end(i64 4, i8* %1) #1
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal i32 @.omp_task_entry.(i32, %struct.kmp_task_t_with_privates* noalias nocapture readonly) #2 {
entry:
  %2 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 0
  %3 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 1
  %4 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 2
  %5 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 3
  %6 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 4
  %7 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 5
  %8 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 6
  %9 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 7
  %10 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 8
  %11 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 9
  %12 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 10
  %13 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 11
  %14 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 12
  %15 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 13
  %16 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 14
  %17 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 15
  %18 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 16
  %19 = getelementptr inbounds %struct.kmp_task_t_with_privates, %struct.kmp_task_t_with_privates* %1, i64 0, i32 1, i32 17
  %20 = load i32, i32* %14, align 4, !tbaa !35, !alias.scope !81
  %add.i = add nsw i32 %20, 4
  %21 = load %struct.box_type*, %struct.box_type** %2, align 8, !tbaa !1, !alias.scope !81
  %k23.i = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 0, i32 2, i32 2
  %22 = load i32, i32* %k23.i, align 4, !tbaa !40, !noalias !81
  %23 = load i32, i32* %15, align 4, !tbaa !35, !alias.scope !81
  %add24.i = add nsw i32 %23, %22
  %cmp.i = icmp slt i32 %add.i, %add24.i
  %add.add24.i = select i1 %cmp.i, i32 %add.i, i32 %add24.i
  %24 = load i32, i32* %16, align 4, !tbaa !35, !alias.scope !81
  %add29.i = add nsw i32 %24, 16
  %j31.i = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 0, i32 2, i32 1
  %25 = load i32, i32* %j31.i, align 4, !tbaa !37, !noalias !81
  %add32.i = add nsw i32 %25, %23
  %cmp33.i = icmp slt i32 %add29.i, %add32.i
  %cond41.i = select i1 %cmp33.i, i32 %add29.i, i32 %add32.i
  %cmp428.i = icmp slt i32 %20, %add.add24.i
  br i1 %cmp428.i, label %for.body.lr.ph.i, label %.omp_outlined..9.exit

for.body.lr.ph.i:                                 ; preds = %entry
  %cmp445.i = icmp slt i32 %24, %cond41.i
  %sub.i = sub nsw i32 0, %23
  %i481.i = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 0, i32 2, i32 0
  br i1 %cmp445.i, label %for.body45.lr.ph.i.us.preheader, label %.omp_outlined..9.exit

for.body45.lr.ph.i.us.preheader:                  ; preds = %for.body.lr.ph.i
  br label %for.body45.lr.ph.i.us

for.body45.lr.ph.i.us:                            ; preds = %for.body45.lr.ph.i.us.preheader, %for.inc143.i.us
  %k.09.i.us = phi i32 [ %inc144.i.us, %for.inc143.i.us ], [ %20, %for.body45.lr.ph.i.us.preheader ]
  %26 = load i32, i32* %i481.i, align 4, !noalias !81
  %add492.i.us = add nsw i32 %26, %23
  %cmp503.i.us = icmp sgt i32 %add492.i.us, %sub.i
  br i1 %cmp503.i.us, label %for.body51.lr.ph.us.preheader.i.us, label %for.inc143.i.us

for.body51.lr.ph.us.preheader.i.us:               ; preds = %for.body45.lr.ph.i.us
  %.pre.i.us = load i32, i32* %17, align 4, !alias.scope !81
  %xor.us.i.us = xor i32 %.pre.i.us, %k.09.i.us
  br label %for.body51.lr.ph.us.i.us

for.body51.lr.ph.us.i.us:                         ; preds = %for.cond46.for.inc140_crit_edge.us.for.body51.lr.ph.us_crit_edge.i.us, %for.body51.lr.ph.us.preheader.i.us
  %27 = phi i32 [ %.pre12.i.us, %for.cond46.for.inc140_crit_edge.us.for.body51.lr.ph.us_crit_edge.i.us ], [ %26, %for.body51.lr.ph.us.preheader.i.us ]
  %j.06.us.i.us = phi i32 [ %inc141.us.i.us, %for.cond46.for.inc140_crit_edge.us.for.body51.lr.ph.us_crit_edge.i.us ], [ %24, %for.body51.lr.ph.us.preheader.i.us ]
  %add49.us.i.us = add nsw i32 %27, %23
  %xor52.us.i.us = xor i32 %xor.us.i.us, %j.06.us.i.us
  br label %for.body51.us.i.us

for.body51.us.i.us:                               ; preds = %for.inc.us.i.us, %for.body51.lr.ph.us.i.us
  %i.04.us.i.us = phi i32 [ %sub.i, %for.body51.lr.ph.us.i.us ], [ %inc.us.i.us, %for.inc.us.i.us ]
  %xor53.us.i.us = xor i32 %xor52.us.i.us, %i.04.us.i.us
  %xor54.us.i.us = and i32 %xor53.us.i.us, 1
  %tobool.us.i.us = icmp eq i32 %xor54.us.i.us, 0
  br i1 %tobool.us.i.us, label %if.then.us.i.us, label %for.inc.us.i.us

if.then.us.i.us:                                  ; preds = %for.body51.us.i.us
  %28 = load i32, i32* %18, align 4, !tbaa !35, !alias.scope !81
  %mul.us.i.us = mul nsw i32 %28, %j.06.us.i.us
  %add56.us.i.us = add nsw i32 %mul.us.i.us, %i.04.us.i.us
  %29 = load i32, i32* %19, align 4, !tbaa !35, !alias.scope !81
  %mul57.us.i.us = mul nsw i32 %29, %k.09.i.us
  %add58.us.i.us = add nsw i32 %add56.us.i.us, %mul57.us.i.us
  %30 = load double, double* %3, align 8, !tbaa !34, !alias.scope !81
  %idxprom.us.i.us = sext i32 %add58.us.i.us to i64
  %31 = load double*, double** %4, align 8, !tbaa !1, !alias.scope !81
  %arrayidx.us.i.us = getelementptr inbounds double, double* %31, i64 %idxprom.us.i.us
  %32 = load double, double* %arrayidx.us.i.us, align 8, !tbaa !34, !noalias !81
  %mul60.us.i.us = fmul double %30, %32
  %33 = load double*, double** %5, align 8, !tbaa !1, !alias.scope !81
  %arrayidx62.us.i.us = getelementptr inbounds double, double* %33, i64 %idxprom.us.i.us
  %34 = load double, double* %arrayidx62.us.i.us, align 8, !tbaa !34, !noalias !81
  %mul63.us.i.us = fmul double %mul60.us.i.us, %34
  %35 = load double, double* %6, align 8, !tbaa !34, !alias.scope !81
  %36 = load double, double* %7, align 8, !tbaa !34, !alias.scope !81
  %mul64.us.i.us = fmul double %35, %36
  %add65.us.i.us = add nsw i32 %add58.us.i.us, 1
  %idxprom66.us.i.us = sext i32 %add65.us.i.us to i64
  %37 = load double*, double** %8, align 8, !tbaa !1, !alias.scope !81
  %arrayidx67.us.i.us = getelementptr inbounds double, double* %37, i64 %idxprom66.us.i.us
  %38 = load double, double* %arrayidx67.us.i.us, align 8, !tbaa !34, !noalias !81
  %arrayidx70.us.i.us = getelementptr inbounds double, double* %33, i64 %idxprom66.us.i.us
  %39 = load double, double* %arrayidx70.us.i.us, align 8, !tbaa !34, !noalias !81
  %sub73.us.i.us = fsub double %39, %34
  %mul74.us.i.us = fmul double %38, %sub73.us.i.us
  %arrayidx76.us.i.us = getelementptr inbounds double, double* %37, i64 %idxprom.us.i.us
  %40 = load double, double* %arrayidx76.us.i.us, align 8, !tbaa !34, !noalias !81
  %sub79.us.i.us = add nsw i32 %add58.us.i.us, -1
  %idxprom80.us.i.us = sext i32 %sub79.us.i.us to i64
  %arrayidx81.us.i.us = getelementptr inbounds double, double* %33, i64 %idxprom80.us.i.us
  %41 = load double, double* %arrayidx81.us.i.us, align 8, !tbaa !34, !noalias !81
  %sub82.us.i.us = fsub double %34, %41
  %mul83.us.i.us = fmul double %40, %sub82.us.i.us
  %sub84.us.i.us = fsub double %mul74.us.i.us, %mul83.us.i.us
  %add85.us.i.us = add nsw i32 %add58.us.i.us, %28
  %idxprom86.us.i.us = sext i32 %add85.us.i.us to i64
  %42 = load double*, double** %9, align 8, !tbaa !1, !alias.scope !81
  %arrayidx87.us.i.us = getelementptr inbounds double, double* %42, i64 %idxprom86.us.i.us
  %43 = load double, double* %arrayidx87.us.i.us, align 8, !tbaa !34, !noalias !81
  %arrayidx90.us.i.us = getelementptr inbounds double, double* %33, i64 %idxprom86.us.i.us
  %44 = load double, double* %arrayidx90.us.i.us, align 8, !tbaa !34, !noalias !81
  %sub93.us.i.us = fsub double %44, %34
  %mul94.us.i.us = fmul double %43, %sub93.us.i.us
  %add95.us.i.us = fadd double %sub84.us.i.us, %mul94.us.i.us
  %arrayidx97.us.i.us = getelementptr inbounds double, double* %42, i64 %idxprom.us.i.us
  %45 = load double, double* %arrayidx97.us.i.us, align 8, !tbaa !34, !noalias !81
  %sub100.us.i.us = sub nsw i32 %add58.us.i.us, %28
  %idxprom101.us.i.us = sext i32 %sub100.us.i.us to i64
  %arrayidx102.us.i.us = getelementptr inbounds double, double* %33, i64 %idxprom101.us.i.us
  %46 = load double, double* %arrayidx102.us.i.us, align 8, !tbaa !34, !noalias !81
  %sub103.us.i.us = fsub double %34, %46
  %mul104.us.i.us = fmul double %45, %sub103.us.i.us
  %sub105.us.i.us = fsub double %add95.us.i.us, %mul104.us.i.us
  %add106.us.i.us = add nsw i32 %add58.us.i.us, %29
  %idxprom107.us.i.us = sext i32 %add106.us.i.us to i64
  %47 = load double*, double** %10, align 8, !tbaa !1, !alias.scope !81
  %arrayidx108.us.i.us = getelementptr inbounds double, double* %47, i64 %idxprom107.us.i.us
  %48 = load double, double* %arrayidx108.us.i.us, align 8, !tbaa !34, !noalias !81
  %arrayidx111.us.i.us = getelementptr inbounds double, double* %33, i64 %idxprom107.us.i.us
  %49 = load double, double* %arrayidx111.us.i.us, align 8, !tbaa !34, !noalias !81
  %sub114.us.i.us = fsub double %49, %34
  %mul115.us.i.us = fmul double %48, %sub114.us.i.us
  %add116.us.i.us = fadd double %sub105.us.i.us, %mul115.us.i.us
  %arrayidx118.us.i.us = getelementptr inbounds double, double* %47, i64 %idxprom.us.i.us
  %50 = load double, double* %arrayidx118.us.i.us, align 8, !tbaa !34, !noalias !81
  %sub121.us.i.us = sub nsw i32 %add58.us.i.us, %29
  %idxprom122.us.i.us = sext i32 %sub121.us.i.us to i64
  %arrayidx123.us.i.us = getelementptr inbounds double, double* %33, i64 %idxprom122.us.i.us
  %51 = load double, double* %arrayidx123.us.i.us, align 8, !tbaa !34, !noalias !81
  %sub124.us.i.us = fsub double %34, %51
  %mul125.us.i.us = fmul double %50, %sub124.us.i.us
  %sub126.us.i.us = fsub double %add116.us.i.us, %mul125.us.i.us
  %mul127.us.i.us = fmul double %mul64.us.i.us, %sub126.us.i.us
  %sub128.us.i.us = fsub double %mul63.us.i.us, %mul127.us.i.us
  %52 = load double*, double** %12, align 8, !tbaa !1, !alias.scope !81
  %arrayidx132.us.i.us = getelementptr inbounds double, double* %52, i64 %idxprom.us.i.us
  %53 = load double, double* %arrayidx132.us.i.us, align 8, !tbaa !34, !noalias !81
  %54 = load double*, double** %13, align 8, !tbaa !1, !alias.scope !81
  %arrayidx134.us.i.us = getelementptr inbounds double, double* %54, i64 %idxprom.us.i.us
  %55 = load double, double* %arrayidx134.us.i.us, align 8, !tbaa !34, !noalias !81
  %sub135.us.i.us = fsub double %sub128.us.i.us, %55
  %mul136.us.i.us = fmul double %53, %sub135.us.i.us
  %sub137.us.i.us = fsub double %34, %mul136.us.i.us
  %56 = load double*, double** %11, align 8, !tbaa !1, !alias.scope !81
  %arrayidx139.us.i.us = getelementptr inbounds double, double* %56, i64 %idxprom.us.i.us
  store double %sub137.us.i.us, double* %arrayidx139.us.i.us, align 8, !tbaa !34, !noalias !81
  br label %for.inc.us.i.us

for.inc.us.i.us:                                  ; preds = %if.then.us.i.us, %for.body51.us.i.us
  %inc.us.i.us = add nsw i32 %i.04.us.i.us, 1
  %cmp50.us.i.us = icmp slt i32 %inc.us.i.us, %add49.us.i.us
  br i1 %cmp50.us.i.us, label %for.body51.us.i.us, label %for.cond46.for.inc140_crit_edge.us.i.us

for.cond46.for.inc140_crit_edge.us.i.us:          ; preds = %for.inc.us.i.us
  %inc141.us.i.us = add nsw i32 %j.06.us.i.us, 1
  %cmp44.us.i.us = icmp slt i32 %inc141.us.i.us, %cond41.i
  br i1 %cmp44.us.i.us, label %for.cond46.for.inc140_crit_edge.us.for.body51.lr.ph.us_crit_edge.i.us, label %for.inc143.i.us.loopexit

for.inc143.i.us.loopexit:                         ; preds = %for.cond46.for.inc140_crit_edge.us.i.us
  br label %for.inc143.i.us

for.inc143.i.us:                                  ; preds = %for.inc143.i.us.loopexit, %for.body45.lr.ph.i.us
  %inc144.i.us = add nsw i32 %k.09.i.us, 1
  %cmp42.i.us = icmp slt i32 %inc144.i.us, %add.add24.i
  br i1 %cmp42.i.us, label %for.body45.lr.ph.i.us, label %.omp_outlined..9.exit.loopexit

for.cond46.for.inc140_crit_edge.us.for.body51.lr.ph.us_crit_edge.i.us: ; preds = %for.cond46.for.inc140_crit_edge.us.i.us
  %.pre12.i.us = load i32, i32* %i481.i, align 4, !noalias !81
  br label %for.body51.lr.ph.us.i.us

.omp_outlined..9.exit.loopexit:                   ; preds = %for.inc143.i.us
  br label %.omp_outlined..9.exit

.omp_outlined..9.exit:                            ; preds = %.omp_outlined..9.exit.loopexit, %for.body.lr.ph.i, %entry
  ret i32 0
}

declare i8* @__kmpc_omp_task_alloc(%ident_t*, i32, i32, i64, i64, i32 (i32, i8*)*)

declare i32 @__kmpc_omp_task(%ident_t*, i32, i8*)

declare void @__kmpc_omp_task_begin_if0(%ident_t*, i32, i8*)

declare void @__kmpc_omp_task_complete_if0(%ident_t*, i32, i8*)

declare i32 @__kmpc_omp_taskwait(%ident_t*, i32)

; Function Attrs: nounwind uwtable
define void @smooth(%struct.domain_type* %domain, i32 %level, i32 %phi_id, i32 %rhs_id, double %a, double %b) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %phi_id.addr = alloca i32, align 4
  %rhs_id.addr = alloca i32, align 4
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  %s = alloca i32, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store i32 %phi_id, i32* %phi_id.addr, align 4, !tbaa !35
  store i32 %rhs_id, i32* %rhs_id.addr, align 4, !tbaa !35
  store double %a, double* %a.addr, align 8, !tbaa !34
  store double %b, double* %b.addr, align 8, !tbaa !34
  %0 = bitcast i32* %s to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  %ghosts1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 25
  %1 = load i32, i32* %ghosts1, align 4, !tbaa !84
  %cmp = icmp sgt i32 %1, 1
  br i1 %cmp, label %if.then, label %for.cond.preheader

if.then:                                          ; preds = %entry
  tail call void @exchange_boundary(%struct.domain_type* nonnull %domain, i32 %level, i32 %rhs_id, i32 1, i32 1, i32 1)
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.then, %entry
  store i32 0, i32* %s, align 4, !tbaa !35
  %conv = zext i1 %cmp to i32
  br label %for.body

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.cond.preheader
  %2 = phi i32 [ %phi_id, %for.cond.preheader ], [ %.pre, %for.body.for.body_crit_edge ]
  %3 = phi i32 [ %level, %for.cond.preheader ], [ %5, %for.body.for.body_crit_edge ]
  %4 = phi %struct.domain_type* [ %domain, %for.cond.preheader ], [ %6, %for.body.for.body_crit_edge ]
  call void @exchange_boundary(%struct.domain_type* %4, i32 %3, i32 %2, i32 1, i32 %conv, i32 %conv)
  %call = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 7, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, double*, double*, i32*)* @.omp_outlined..10 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %phi_id.addr, i32* nonnull %rhs_id.addr, double* nonnull %a.addr, double* nonnull %b.addr, i32* nonnull %s) #1
  %call6 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call6, %call
  %5 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom = sext i32 %5 to i64
  %6 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds %struct.domain_type, %struct.domain_type* %6, i64 0, i32 0, i32 0, i64 %idxprom
  %7 = load i64, i64* %arrayidx, align 8, !tbaa !42
  %add = add i64 %sub, %7
  store i64 %add, i64* %arrayidx, align 8, !tbaa !42
  %8 = load i32, i32* %s, align 4, !tbaa !35
  %add7 = add nsw i32 %8, %1
  store i32 %add7, i32* %s, align 4, !tbaa !35
  %cmp2 = icmp slt i32 %add7, 4
  br i1 %cmp2, label %for.body.for.body_crit_edge, label %for.end

for.body.for.body_crit_edge:                      ; preds = %for.body
  %.pre = load i32, i32* %phi_id.addr, align 4, !tbaa !35
  br label %for.body

for.end:                                          ; preds = %for.body
  call void @llvm.lifetime.end(i64 4, i8* nonnull %0) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..10(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %phi_id, i32* nocapture readonly dereferenceable(4) %rhs_id, double* nocapture readonly dereferenceable(8) %a, double* nocapture readonly dereferenceable(8) %b, i32* nocapture readonly dereferenceable(4) %s) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre26 = bitcast i32* %.omp.stride to i8*
  %.pre28 = bitcast i32* %.omp.ub to i8*
  %.pre30 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp7 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp7, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp824 = icmp sgt i32 %8, %cond
  br i1 %cmp824, label %omp.loop.exit, label %omp.inner.for.body.preheader

omp.inner.for.body.preheader:                     ; preds = %omp.precond.then
  %9 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body.preheader, %omp.inner.for.body
  %indvars.iv = phi i64 [ %9, %omp.inner.for.body.preheader ], [ %indvars.iv.next, %omp.inner.for.body ]
  %10 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %10 to i64
  %11 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %11, i64 0, i32 28
  %12 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %12, i64 %indvars.iv, i32 5
  %13 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %arrayidx11 = getelementptr inbounds %struct.box_type, %struct.box_type* %13, i64 %idxprom
  %14 = load i32, i32* %phi_id, align 4, !tbaa !35
  %15 = load i32, i32* %rhs_id, align 4, !tbaa !35
  %16 = load double, double* %a, align 8, !tbaa !34
  %17 = load double, double* %b, align 8, !tbaa !34
  %18 = load i32, i32* %s, align 4, !tbaa !35
  call void @__box_smooth_GSRB_multiple(%struct.box_type* %arrayidx11, i32 %14, i32 %15, double %16, double %17, i32 %18)
  %19 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %20 = sext i32 %19 to i64
  %cmp8 = icmp slt i64 %indvars.iv, %20
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp8, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp.inner.for.body
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi31 = phi i8* [ %.pre30, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi29 = phi i8* [ %.pre28, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi27 = phi i8* [ %.pre26, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi27) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi29) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi31) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %Ax_id, i32 %x_id, double %a, double %b) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %Ax_id.addr = alloca i32, align 4
  %x_id.addr = alloca i32, align 4
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store i32 %Ax_id, i32* %Ax_id.addr, align 4, !tbaa !35
  store i32 %x_id, i32* %x_id.addr, align 4, !tbaa !35
  store double %a, double* %a.addr, align 8, !tbaa !34
  store double %b, double* %b.addr, align 8, !tbaa !34
  tail call void @exchange_boundary(%struct.domain_type* %domain, i32 %level, i32 %x_id, i32 1, i32 0, i32 0)
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 7, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, double*, double*)* @.omp_outlined..11 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %x_id.addr, i32* nonnull %Ax_id.addr, i32* nonnull %omp_within_a_box, double* nonnull %a.addr, double* nonnull %b.addr) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..11(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %x_id.addr, i32* nonnull %Ax_id.addr, i32* nonnull %omp_within_a_box, double* nonnull %a.addr, double* nonnull %b.addr)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %5 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %5 to i64
  %6 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %6, i64 0, i32 0, i32 1, i64 %idxprom12
  %7 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %7
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..11(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %x_id, i32* nocapture readonly dereferenceable(4) %Ax_id, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double* dereferenceable(8) %a, double* dereferenceable(8) %b) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %dim_k = alloca i32, align 4
  %dim_j = alloca i32, align 4
  %dim_i = alloca i32, align 4
  %h2inv = alloca double, align 8
  %x = alloca double*, align 8
  %Ax = alloca double*, align 8
  %alpha = alloca double*, align 8
  %beta_i = alloca double*, align 8
  %beta_j = alloca double*, align 8
  %beta_k = alloca double*, align 8
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre185 = bitcast i32* %.omp.is_last to i8*
  %.pre186 = bitcast i32* %.omp.stride to i8*
  %.pre188 = bitcast i32* %.omp.ub to i8*
  %.pre190 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp6 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp6, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp7183 = icmp sgt i32 %8, %cond
  br i1 %cmp7183, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil to i8*
  %10 = bitcast i32* %plane to i8*
  %11 = bitcast i32* %dim_k to i8*
  %12 = bitcast i32* %dim_j to i8*
  %13 = bitcast i32* %dim_i to i8*
  %14 = bitcast double* %h2inv to i8*
  %15 = bitcast double** %x to i8*
  %16 = bitcast double** %Ax to i8*
  %17 = bitcast double** %alpha to i8*
  %18 = bitcast double** %beta_i to i8*
  %19 = bitcast double** %beta_j to i8*
  %20 = bitcast double** %beta_k to i8*
  %21 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %21, %omp.inner.for.body.lr.ph ]
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %22 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %22 to i64
  %23 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %23, i64 0, i32 28
  %24 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %24, i64 %indvars.iv, i32 5
  %25 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil11 = getelementptr inbounds %struct.box_type, %struct.box_type* %25, i64 %idxprom, i32 5
  %26 = load i32, i32* %pencil11, align 8, !tbaa !54
  store i32 %26, i32* %pencil, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane18 = getelementptr inbounds %struct.box_type, %struct.box_type* %25, i64 %idxprom, i32 6
  %27 = load i32, i32* %plane18, align 4, !tbaa !55
  store i32 %27, i32* %plane, align 4, !tbaa !35
  %ghosts25 = getelementptr inbounds %struct.box_type, %struct.box_type* %25, i64 %idxprom, i32 4
  %28 = load i32, i32* %ghosts25, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %k32 = getelementptr inbounds %struct.box_type, %struct.box_type* %25, i64 %idxprom, i32 2, i32 2
  %29 = load i32, i32* %k32, align 4, !tbaa !40
  store i32 %29, i32* %dim_k, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %j40 = getelementptr inbounds %struct.box_type, %struct.box_type* %25, i64 %idxprom, i32 2, i32 1
  %30 = load i32, i32* %j40, align 4, !tbaa !37
  store i32 %30, i32* %dim_j, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %i48 = getelementptr inbounds %struct.box_type, %struct.box_type* %25, i64 %idxprom, i32 2, i32 0
  %31 = load i32, i32* %i48, align 4, !tbaa !43
  store i32 %31, i32* %dim_i, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %14) #1
  %arrayidx50 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %23, i64 0, i32 26, i64 %idxprom
  %32 = load double, double* %arrayidx50, align 8, !tbaa !34
  %mul54 = fmul double %32, %32
  %div55 = fdiv double 1.000000e+00, %mul54
  store double %div55, double* %h2inv, align 8, !tbaa !34
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %33 = load i32, i32* %x_id, align 4, !tbaa !35
  %idxprom56 = sext i32 %33 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %25, i64 %idxprom, i32 10
  %34 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx63 = getelementptr inbounds double*, double** %34, i64 %idxprom56
  %35 = load double*, double** %arrayidx63, align 8, !tbaa !1
  %add64 = add nsw i32 %26, 1
  %add65 = add nsw i32 %add64, %27
  %mul66 = mul nsw i32 %add65, %28
  %idx.ext = sext i32 %mul66 to i64
  %add.ptr = getelementptr inbounds double, double* %35, i64 %idx.ext
  store double* %add.ptr, double** %x, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %16) #1
  %36 = load i32, i32* %Ax_id, align 4, !tbaa !35
  %idxprom67 = sext i32 %36 to i64
  %37 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels72 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %37, i64 %indvars.iv, i32 5
  %38 = load %struct.box_type*, %struct.box_type** %levels72, align 8, !tbaa !28
  %grids74 = getelementptr inbounds %struct.box_type, %struct.box_type* %38, i64 %idxprom, i32 10
  %39 = load double**, double*** %grids74, align 8, !tbaa !30
  %arrayidx75 = getelementptr inbounds double*, double** %39, i64 %idxprom67
  %40 = load double*, double** %arrayidx75, align 8, !tbaa !1
  %add.ptr80 = getelementptr inbounds double, double* %40, i64 %idx.ext
  store double* %add.ptr80, double** %Ax, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %17) #1
  %41 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels85 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %41, i64 %indvars.iv, i32 5
  %42 = load %struct.box_type*, %struct.box_type** %levels85, align 8, !tbaa !28
  %grids87 = getelementptr inbounds %struct.box_type, %struct.box_type* %42, i64 %idxprom, i32 10
  %43 = load double**, double*** %grids87, align 8, !tbaa !30
  %arrayidx88 = getelementptr inbounds double*, double** %43, i64 2
  %44 = load double*, double** %arrayidx88, align 8, !tbaa !1
  %add.ptr93 = getelementptr inbounds double, double* %44, i64 %idx.ext
  store double* %add.ptr93, double** %alpha, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %18) #1
  %45 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels98 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %45, i64 %indvars.iv, i32 5
  %46 = load %struct.box_type*, %struct.box_type** %levels98, align 8, !tbaa !28
  %grids100 = getelementptr inbounds %struct.box_type, %struct.box_type* %46, i64 %idxprom, i32 10
  %47 = load double**, double*** %grids100, align 8, !tbaa !30
  %arrayidx101 = getelementptr inbounds double*, double** %47, i64 5
  %48 = load double*, double** %arrayidx101, align 8, !tbaa !1
  %add.ptr106 = getelementptr inbounds double, double* %48, i64 %idx.ext
  store double* %add.ptr106, double** %beta_i, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %19) #1
  %49 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels111 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %49, i64 %indvars.iv, i32 5
  %50 = load %struct.box_type*, %struct.box_type** %levels111, align 8, !tbaa !28
  %grids113 = getelementptr inbounds %struct.box_type, %struct.box_type* %50, i64 %idxprom, i32 10
  %51 = load double**, double*** %grids113, align 8, !tbaa !30
  %arrayidx114 = getelementptr inbounds double*, double** %51, i64 6
  %52 = load double*, double** %arrayidx114, align 8, !tbaa !1
  %add.ptr119 = getelementptr inbounds double, double* %52, i64 %idx.ext
  store double* %add.ptr119, double** %beta_j, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %20) #1
  %53 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels124 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %53, i64 %indvars.iv, i32 5
  %54 = load %struct.box_type*, %struct.box_type** %levels124, align 8, !tbaa !28
  %grids126 = getelementptr inbounds %struct.box_type, %struct.box_type* %54, i64 %idxprom, i32 10
  %55 = load double**, double*** %grids126, align 8, !tbaa !30
  %arrayidx127 = getelementptr inbounds double*, double** %55, i64 7
  %56 = load double*, double** %arrayidx127, align 8, !tbaa !1
  %add.ptr132 = getelementptr inbounds double, double* %56, i64 %idx.ext
  store double* %add.ptr132, double** %beta_k, align 8, !tbaa !1
  %57 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %57, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 14, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, double*, double**, double**, double*, double*, double**, double**, double**, double**)* @.omp_outlined..12 to void (i32*, i32*, ...)*), i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double* nonnull %a, double** nonnull %alpha, double** nonnull %x, double* nonnull %b, double* nonnull %h2inv, double** nonnull %beta_i, double** nonnull %beta_j, double** nonnull %beta_k, double** nonnull %Ax) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  %58 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %58) #1
  call void @.omp_outlined..12(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double* nonnull %a, double** nonnull %alpha, double** nonnull %x, double* nonnull %b, double* nonnull %h2inv, double** nonnull %beta_i, double** nonnull %beta_j, double** nonnull %beta_k, double** nonnull %Ax)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %58) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  call void @llvm.lifetime.end(i64 8, i8* nonnull %20) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %19) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9) #1
  %59 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %60 = sext i32 %59 to i64
  %cmp7 = icmp slt i64 %indvars.iv, %60
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp7, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  %.pre = load i32, i32* %.global_tid., align 4, !tbaa !35
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  %61 = phi i32 [ %.pre, %omp.loop.exit.loopexit ], [ %6, %omp.precond.then ]
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %61) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi191 = phi i8* [ %.pre190, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi189 = phi i8* [ %.pre188, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi187 = phi i8* [ %.pre186, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre185, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi187) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi189) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi191) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..12(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k, i32* nocapture readonly dereferenceable(4) %dim_j, i32* nocapture readonly dereferenceable(4) %dim_i, i32* nocapture readonly dereferenceable(4) %pencil, i32* nocapture readonly dereferenceable(4) %plane, double* nocapture readonly dereferenceable(8) %a, double** nocapture readonly dereferenceable(8) %alpha, double** nocapture readonly dereferenceable(8) %x, double* nocapture readonly dereferenceable(8) %b, double* nocapture readonly dereferenceable(8) %h2inv, double** nocapture readonly dereferenceable(8) %beta_i, double** nocapture readonly dereferenceable(8) %beta_j, double** nocapture readonly dereferenceable(8) %beta_k, double** nocapture readonly dereferenceable(8) %Ax) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre161 = bitcast i64* %.omp.stride to i8*
  %.pre163 = bitcast i64* %.omp.ub to i8*
  %.pre165 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %7 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp17 = icmp sgt i64 %7, %sub7
  %cond = select i1 %cmp17, i64 %sub7, i64 %7
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %8 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp19157 = icmp sgt i64 %8, %cond
  br i1 %cmp19157, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = load i32, i32* %dim_j, align 4
  %conv25 = sext i32 %9 to i64
  %10 = load i32, i32* %dim_i, align 4
  %cmp38155 = icmp sgt i32 %10, 0
  %11 = load i32, i32* %pencil, align 4
  %12 = load i32, i32* %plane, align 4
  %13 = load double*, double** %alpha, align 8
  %14 = load double*, double** %x, align 8
  %15 = load double*, double** %beta_i, align 8
  %16 = load double*, double** %beta_j, align 8
  %17 = load double*, double** %beta_k, align 8
  %18 = load double*, double** %Ax, align 8
  br i1 %cmp38155, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %19 = sext i32 %10 to i64
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %.omp.iv.0158.us = phi i64 [ %add115.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %8, %omp.inner.for.body.us.preheader ]
  %div26.us = sdiv i64 %.omp.iv.0158.us, %conv25
  %conv29.us = trunc i64 %div26.us to i32
  %rem.us = srem i64 %.omp.iv.0158.us, %conv25
  %conv37.us = trunc i64 %rem.us to i32
  %mul40.us = mul nsw i32 %11, %conv37.us
  %mul42.us = mul nsw i32 %12, %conv29.us
  br label %for.body.us

for.body.us:                                      ; preds = %omp.inner.for.body.us, %for.body.us
  %indvars.iv = phi i64 [ 0, %omp.inner.for.body.us ], [ %indvars.iv.next, %for.body.us ]
  %i.0156.us = phi i32 [ 0, %omp.inner.for.body.us ], [ %inc.us, %for.body.us ]
  %add41.us = add nsw i32 %mul40.us, %i.0156.us
  %add43.us = add nsw i32 %add41.us, %mul42.us
  %20 = load double, double* %a, align 8, !tbaa !34
  %idxprom.us = sext i32 %add43.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %13, i64 %idxprom.us
  %21 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %mul44.us = fmul double %20, %21
  %arrayidx46.us = getelementptr inbounds double, double* %14, i64 %idxprom.us
  %22 = load double, double* %arrayidx46.us, align 8, !tbaa !34
  %mul47.us = fmul double %mul44.us, %22
  %23 = load double, double* %b, align 8, !tbaa !34
  %24 = load double, double* %h2inv, align 8, !tbaa !34
  %mul48.us = fmul double %23, %24
  %add49.us = add nsw i32 %add43.us, 1
  %idxprom50.us = sext i32 %add49.us to i64
  %arrayidx51.us = getelementptr inbounds double, double* %15, i64 %idxprom50.us
  %25 = load double, double* %arrayidx51.us, align 8, !tbaa !34
  %arrayidx54.us = getelementptr inbounds double, double* %14, i64 %idxprom50.us
  %26 = load double, double* %arrayidx54.us, align 8, !tbaa !34
  %sub57.us = fsub double %26, %22
  %mul58.us = fmul double %25, %sub57.us
  %arrayidx60.us = getelementptr inbounds double, double* %15, i64 %idxprom.us
  %27 = load double, double* %arrayidx60.us, align 8, !tbaa !34
  %sub63.us = add nsw i32 %add43.us, -1
  %idxprom64.us = sext i32 %sub63.us to i64
  %arrayidx65.us = getelementptr inbounds double, double* %14, i64 %idxprom64.us
  %28 = load double, double* %arrayidx65.us, align 8, !tbaa !34
  %sub66.us = fsub double %22, %28
  %mul67.us = fmul double %27, %sub66.us
  %sub68.us = fsub double %mul58.us, %mul67.us
  %add69.us = add nsw i32 %add43.us, %11
  %idxprom70.us = sext i32 %add69.us to i64
  %arrayidx71.us = getelementptr inbounds double, double* %16, i64 %idxprom70.us
  %29 = load double, double* %arrayidx71.us, align 8, !tbaa !34
  %arrayidx74.us = getelementptr inbounds double, double* %14, i64 %idxprom70.us
  %30 = load double, double* %arrayidx74.us, align 8, !tbaa !34
  %sub77.us = fsub double %30, %22
  %mul78.us = fmul double %29, %sub77.us
  %add79.us = fadd double %sub68.us, %mul78.us
  %arrayidx81.us = getelementptr inbounds double, double* %16, i64 %idxprom.us
  %31 = load double, double* %arrayidx81.us, align 8, !tbaa !34
  %sub84.us = sub nsw i32 %add43.us, %11
  %idxprom85.us = sext i32 %sub84.us to i64
  %arrayidx86.us = getelementptr inbounds double, double* %14, i64 %idxprom85.us
  %32 = load double, double* %arrayidx86.us, align 8, !tbaa !34
  %sub87.us = fsub double %22, %32
  %mul88.us = fmul double %31, %sub87.us
  %sub89.us = fsub double %add79.us, %mul88.us
  %add90.us = add nsw i32 %add43.us, %12
  %idxprom91.us = sext i32 %add90.us to i64
  %arrayidx92.us = getelementptr inbounds double, double* %17, i64 %idxprom91.us
  %33 = load double, double* %arrayidx92.us, align 8, !tbaa !34
  %arrayidx95.us = getelementptr inbounds double, double* %14, i64 %idxprom91.us
  %34 = load double, double* %arrayidx95.us, align 8, !tbaa !34
  %sub98.us = fsub double %34, %22
  %mul99.us = fmul double %33, %sub98.us
  %add100.us = fadd double %sub89.us, %mul99.us
  %arrayidx102.us = getelementptr inbounds double, double* %17, i64 %idxprom.us
  %35 = load double, double* %arrayidx102.us, align 8, !tbaa !34
  %sub105.us = sub nsw i32 %add43.us, %12
  %idxprom106.us = sext i32 %sub105.us to i64
  %arrayidx107.us = getelementptr inbounds double, double* %14, i64 %idxprom106.us
  %36 = load double, double* %arrayidx107.us, align 8, !tbaa !34
  %sub108.us = fsub double %22, %36
  %mul109.us = fmul double %35, %sub108.us
  %sub110.us = fsub double %add100.us, %mul109.us
  %mul111.us = fmul double %mul48.us, %sub110.us
  %sub112.us = fsub double %mul47.us, %mul111.us
  %arrayidx114.us = getelementptr inbounds double, double* %18, i64 %idxprom.us
  store double %sub112.us, double* %arrayidx114.us, align 8, !tbaa !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %inc.us = add nuw nsw i32 %i.0156.us, 1
  %cmp38.us = icmp slt i64 %indvars.iv.next, %19
  br i1 %cmp38.us, label %for.body.us, label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %for.body.us
  %add115.us = add nsw i64 %.omp.iv.0158.us, 1
  %cmp19.us = icmp slt i64 %.omp.iv.0158.us, %cond
  br i1 %cmp19.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi166 = phi i8* [ %.pre165, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi164 = phi i8* [ %.pre163, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi162 = phi i8* [ %.pre161, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi162) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi164) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi166) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @residual(%struct.domain_type* %domain, i32 %level, i32 %res_id, i32 %phi_id, i32 %rhs_id, double %a, double %b) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %res_id.addr = alloca i32, align 4
  %phi_id.addr = alloca i32, align 4
  %rhs_id.addr = alloca i32, align 4
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store i32 %res_id, i32* %res_id.addr, align 4, !tbaa !35
  store i32 %phi_id, i32* %phi_id.addr, align 4, !tbaa !35
  store i32 %rhs_id, i32* %rhs_id.addr, align 4, !tbaa !35
  store double %a, double* %a.addr, align 8, !tbaa !34
  store double %b, double* %b.addr, align 8, !tbaa !34
  tail call void @exchange_boundary(%struct.domain_type* %domain, i32 %level, i32 %phi_id, i32 1, i32 0, i32 0)
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 8, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, i32*, double*, double*)* @.omp_outlined..13 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %phi_id.addr, i32* nonnull %rhs_id.addr, i32* nonnull %res_id.addr, i32* nonnull %omp_within_a_box, double* nonnull %a.addr, double* nonnull %b.addr) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..13(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %phi_id.addr, i32* nonnull %rhs_id.addr, i32* nonnull %res_id.addr, i32* nonnull %omp_within_a_box, double* nonnull %a.addr, double* nonnull %b.addr)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %5 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %5 to i64
  %6 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %6, i64 0, i32 0, i32 2, i64 %idxprom12
  %7 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %7
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..13(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %phi_id, i32* nocapture readonly dereferenceable(4) %rhs_id, i32* nocapture readonly dereferenceable(4) %res_id, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double* dereferenceable(8) %a, double* dereferenceable(8) %b) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %dim_k = alloca i32, align 4
  %dim_j = alloca i32, align 4
  %dim_i = alloca i32, align 4
  %h2inv = alloca double, align 8
  %phi = alloca double*, align 8
  %rhs = alloca double*, align 8
  %alpha = alloca double*, align 8
  %beta_i = alloca double*, align 8
  %beta_j = alloca double*, align 8
  %beta_k = alloca double*, align 8
  %res = alloca double*, align 8
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre184 = bitcast i32* %.omp.is_last to i8*
  %.pre185 = bitcast i32* %.omp.stride to i8*
  %.pre187 = bitcast i32* %.omp.ub to i8*
  %.pre189 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp6 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp6, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp7182 = icmp sgt i32 %8, %cond
  br i1 %cmp7182, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil to i8*
  %10 = bitcast i32* %plane to i8*
  %11 = bitcast i32* %dim_k to i8*
  %12 = bitcast i32* %dim_j to i8*
  %13 = bitcast i32* %dim_i to i8*
  %14 = bitcast double* %h2inv to i8*
  %15 = bitcast double** %phi to i8*
  %16 = bitcast double** %rhs to i8*
  %17 = bitcast double** %alpha to i8*
  %18 = bitcast double** %beta_i to i8*
  %19 = bitcast double** %beta_j to i8*
  %20 = bitcast double** %beta_k to i8*
  %21 = bitcast double** %res to i8*
  %22 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %22, %omp.inner.for.body.lr.ph ]
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %23 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %23 to i64
  %24 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %24, i64 0, i32 28
  %25 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %25, i64 %indvars.iv, i32 5
  %26 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil11 = getelementptr inbounds %struct.box_type, %struct.box_type* %26, i64 %idxprom, i32 5
  %27 = load i32, i32* %pencil11, align 8, !tbaa !54
  store i32 %27, i32* %pencil, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane18 = getelementptr inbounds %struct.box_type, %struct.box_type* %26, i64 %idxprom, i32 6
  %28 = load i32, i32* %plane18, align 4, !tbaa !55
  store i32 %28, i32* %plane, align 4, !tbaa !35
  %ghosts25 = getelementptr inbounds %struct.box_type, %struct.box_type* %26, i64 %idxprom, i32 4
  %29 = load i32, i32* %ghosts25, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %k32 = getelementptr inbounds %struct.box_type, %struct.box_type* %26, i64 %idxprom, i32 2, i32 2
  %30 = load i32, i32* %k32, align 4, !tbaa !40
  store i32 %30, i32* %dim_k, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %j40 = getelementptr inbounds %struct.box_type, %struct.box_type* %26, i64 %idxprom, i32 2, i32 1
  %31 = load i32, i32* %j40, align 4, !tbaa !37
  store i32 %31, i32* %dim_j, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %i48 = getelementptr inbounds %struct.box_type, %struct.box_type* %26, i64 %idxprom, i32 2, i32 0
  %32 = load i32, i32* %i48, align 4, !tbaa !43
  store i32 %32, i32* %dim_i, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %14) #1
  %arrayidx50 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %24, i64 0, i32 26, i64 %idxprom
  %33 = load double, double* %arrayidx50, align 8, !tbaa !34
  %mul54 = fmul double %33, %33
  %div55 = fdiv double 1.000000e+00, %mul54
  store double %div55, double* %h2inv, align 8, !tbaa !34
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %34 = load i32, i32* %phi_id, align 4, !tbaa !35
  %idxprom56 = sext i32 %34 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %26, i64 %idxprom, i32 10
  %35 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx63 = getelementptr inbounds double*, double** %35, i64 %idxprom56
  %36 = load double*, double** %arrayidx63, align 8, !tbaa !1
  %add64 = add nsw i32 %27, 1
  %add65 = add nsw i32 %add64, %28
  %mul66 = mul nsw i32 %add65, %29
  %idx.ext = sext i32 %mul66 to i64
  %add.ptr = getelementptr inbounds double, double* %36, i64 %idx.ext
  store double* %add.ptr, double** %phi, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %16) #1
  %37 = load i32, i32* %rhs_id, align 4, !tbaa !35
  %idxprom67 = sext i32 %37 to i64
  %38 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels72 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %38, i64 %indvars.iv, i32 5
  %39 = load %struct.box_type*, %struct.box_type** %levels72, align 8, !tbaa !28
  %grids74 = getelementptr inbounds %struct.box_type, %struct.box_type* %39, i64 %idxprom, i32 10
  %40 = load double**, double*** %grids74, align 8, !tbaa !30
  %arrayidx75 = getelementptr inbounds double*, double** %40, i64 %idxprom67
  %41 = load double*, double** %arrayidx75, align 8, !tbaa !1
  %add.ptr80 = getelementptr inbounds double, double* %41, i64 %idx.ext
  store double* %add.ptr80, double** %rhs, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %17) #1
  %42 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels85 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %42, i64 %indvars.iv, i32 5
  %43 = load %struct.box_type*, %struct.box_type** %levels85, align 8, !tbaa !28
  %grids87 = getelementptr inbounds %struct.box_type, %struct.box_type* %43, i64 %idxprom, i32 10
  %44 = load double**, double*** %grids87, align 8, !tbaa !30
  %arrayidx88 = getelementptr inbounds double*, double** %44, i64 2
  %45 = load double*, double** %arrayidx88, align 8, !tbaa !1
  %add.ptr93 = getelementptr inbounds double, double* %45, i64 %idx.ext
  store double* %add.ptr93, double** %alpha, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %18) #1
  %46 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels98 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %46, i64 %indvars.iv, i32 5
  %47 = load %struct.box_type*, %struct.box_type** %levels98, align 8, !tbaa !28
  %grids100 = getelementptr inbounds %struct.box_type, %struct.box_type* %47, i64 %idxprom, i32 10
  %48 = load double**, double*** %grids100, align 8, !tbaa !30
  %arrayidx101 = getelementptr inbounds double*, double** %48, i64 5
  %49 = load double*, double** %arrayidx101, align 8, !tbaa !1
  %add.ptr106 = getelementptr inbounds double, double* %49, i64 %idx.ext
  store double* %add.ptr106, double** %beta_i, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %19) #1
  %50 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels111 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %50, i64 %indvars.iv, i32 5
  %51 = load %struct.box_type*, %struct.box_type** %levels111, align 8, !tbaa !28
  %grids113 = getelementptr inbounds %struct.box_type, %struct.box_type* %51, i64 %idxprom, i32 10
  %52 = load double**, double*** %grids113, align 8, !tbaa !30
  %arrayidx114 = getelementptr inbounds double*, double** %52, i64 6
  %53 = load double*, double** %arrayidx114, align 8, !tbaa !1
  %add.ptr119 = getelementptr inbounds double, double* %53, i64 %idx.ext
  store double* %add.ptr119, double** %beta_j, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %20) #1
  %54 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels124 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %54, i64 %indvars.iv, i32 5
  %55 = load %struct.box_type*, %struct.box_type** %levels124, align 8, !tbaa !28
  %grids126 = getelementptr inbounds %struct.box_type, %struct.box_type* %55, i64 %idxprom, i32 10
  %56 = load double**, double*** %grids126, align 8, !tbaa !30
  %arrayidx127 = getelementptr inbounds double*, double** %56, i64 7
  %57 = load double*, double** %arrayidx127, align 8, !tbaa !1
  %add.ptr132 = getelementptr inbounds double, double* %57, i64 %idx.ext
  store double* %add.ptr132, double** %beta_k, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %21) #1
  %58 = load i32, i32* %res_id, align 4, !tbaa !35
  %idxprom133 = sext i32 %58 to i64
  %59 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom134 = sext i32 %59 to i64
  %60 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains136 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %60, i64 0, i32 28
  %61 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains136, align 8, !tbaa !24
  %levels138 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %61, i64 %indvars.iv, i32 5
  %62 = load %struct.box_type*, %struct.box_type** %levels138, align 8, !tbaa !28
  %grids140 = getelementptr inbounds %struct.box_type, %struct.box_type* %62, i64 %idxprom134, i32 10
  %63 = load double**, double*** %grids140, align 8, !tbaa !30
  %arrayidx141 = getelementptr inbounds double*, double** %63, i64 %idxprom133
  %64 = load double*, double** %arrayidx141, align 8, !tbaa !1
  %65 = load i32, i32* %pencil, align 4, !tbaa !35
  %add142 = add nsw i32 %65, 1
  %66 = load i32, i32* %plane, align 4, !tbaa !35
  %add143 = add nsw i32 %add142, %66
  %mul144 = mul nsw i32 %add143, %29
  %idx.ext145 = sext i32 %mul144 to i64
  %add.ptr146 = getelementptr inbounds double, double* %64, i64 %idx.ext145
  store double* %add.ptr146, double** %res, align 8, !tbaa !1
  %67 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %67, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 15, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, double*, double**, double**, double*, double*, double**, double**, double**, double**, double**)* @.omp_outlined..14 to void (i32*, i32*, ...)*), i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double* nonnull %a, double** nonnull %alpha, double** nonnull %phi, double* nonnull %b, double* nonnull %h2inv, double** nonnull %beta_i, double** nonnull %beta_j, double** nonnull %beta_k, double** nonnull %res, double** nonnull %rhs) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  %68 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %68) #1
  call void @.omp_outlined..14(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double* nonnull %a, double** nonnull %alpha, double** nonnull %phi, double* nonnull %b, double* nonnull %h2inv, double** nonnull %beta_i, double** nonnull %beta_j, double** nonnull %beta_k, double** nonnull %res, double** nonnull %rhs)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %68) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %20) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %19) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9) #1
  %69 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %70 = sext i32 %69 to i64
  %cmp7 = icmp slt i64 %indvars.iv, %70
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp7, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  %.pre = load i32, i32* %.global_tid., align 4, !tbaa !35
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  %71 = phi i32 [ %.pre, %omp.loop.exit.loopexit ], [ %6, %omp.precond.then ]
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %71) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi190 = phi i8* [ %.pre189, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi188 = phi i8* [ %.pre187, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi186 = phi i8* [ %.pre185, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre184, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi186) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi188) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi190) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..14(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k, i32* nocapture readonly dereferenceable(4) %dim_j, i32* nocapture readonly dereferenceable(4) %dim_i, i32* nocapture readonly dereferenceable(4) %pencil, i32* nocapture readonly dereferenceable(4) %plane, double* nocapture readonly dereferenceable(8) %a, double** nocapture readonly dereferenceable(8) %alpha, double** nocapture readonly dereferenceable(8) %phi, double* nocapture readonly dereferenceable(8) %b, double* nocapture readonly dereferenceable(8) %h2inv, double** nocapture readonly dereferenceable(8) %beta_i, double** nocapture readonly dereferenceable(8) %beta_j, double** nocapture readonly dereferenceable(8) %beta_k, double** nocapture readonly dereferenceable(8) %res, double** nocapture readonly dereferenceable(8) %rhs) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre165 = bitcast i64* %.omp.stride to i8*
  %.pre167 = bitcast i64* %.omp.ub to i8*
  %.pre169 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %7 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp17 = icmp sgt i64 %7, %sub7
  %cond = select i1 %cmp17, i64 %sub7, i64 %7
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %8 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp19161 = icmp sgt i64 %8, %cond
  br i1 %cmp19161, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = load i32, i32* %dim_j, align 4
  %conv25 = sext i32 %9 to i64
  %10 = load i32, i32* %dim_i, align 4
  %cmp38159 = icmp sgt i32 %10, 0
  %11 = load i32, i32* %pencil, align 4
  %12 = load i32, i32* %plane, align 4
  %13 = load double*, double** %alpha, align 8
  %14 = load double*, double** %phi, align 8
  %15 = load double*, double** %beta_i, align 8
  %16 = load double*, double** %beta_j, align 8
  %17 = load double*, double** %beta_k, align 8
  %18 = load double*, double** %rhs, align 8
  %19 = load double*, double** %res, align 8
  br i1 %cmp38159, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %20 = sext i32 %10 to i64
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %.omp.iv.0162.us = phi i64 [ %add118.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %8, %omp.inner.for.body.us.preheader ]
  %div26.us = sdiv i64 %.omp.iv.0162.us, %conv25
  %conv29.us = trunc i64 %div26.us to i32
  %rem.us = srem i64 %.omp.iv.0162.us, %conv25
  %conv37.us = trunc i64 %rem.us to i32
  %mul40.us = mul nsw i32 %11, %conv37.us
  %mul42.us = mul nsw i32 %12, %conv29.us
  br label %for.body.us

for.body.us:                                      ; preds = %omp.inner.for.body.us, %for.body.us
  %indvars.iv = phi i64 [ 0, %omp.inner.for.body.us ], [ %indvars.iv.next, %for.body.us ]
  %i.0160.us = phi i32 [ 0, %omp.inner.for.body.us ], [ %inc.us, %for.body.us ]
  %add41.us = add nsw i32 %mul40.us, %i.0160.us
  %add43.us = add nsw i32 %add41.us, %mul42.us
  %21 = load double, double* %a, align 8, !tbaa !34
  %idxprom.us = sext i32 %add43.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %13, i64 %idxprom.us
  %22 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %mul44.us = fmul double %21, %22
  %arrayidx46.us = getelementptr inbounds double, double* %14, i64 %idxprom.us
  %23 = load double, double* %arrayidx46.us, align 8, !tbaa !34
  %mul47.us = fmul double %mul44.us, %23
  %24 = load double, double* %b, align 8, !tbaa !34
  %25 = load double, double* %h2inv, align 8, !tbaa !34
  %mul48.us = fmul double %24, %25
  %add49.us = add nsw i32 %add43.us, 1
  %idxprom50.us = sext i32 %add49.us to i64
  %arrayidx51.us = getelementptr inbounds double, double* %15, i64 %idxprom50.us
  %26 = load double, double* %arrayidx51.us, align 8, !tbaa !34
  %arrayidx54.us = getelementptr inbounds double, double* %14, i64 %idxprom50.us
  %27 = load double, double* %arrayidx54.us, align 8, !tbaa !34
  %sub57.us = fsub double %27, %23
  %mul58.us = fmul double %26, %sub57.us
  %arrayidx60.us = getelementptr inbounds double, double* %15, i64 %idxprom.us
  %28 = load double, double* %arrayidx60.us, align 8, !tbaa !34
  %sub63.us = add nsw i32 %add43.us, -1
  %idxprom64.us = sext i32 %sub63.us to i64
  %arrayidx65.us = getelementptr inbounds double, double* %14, i64 %idxprom64.us
  %29 = load double, double* %arrayidx65.us, align 8, !tbaa !34
  %sub66.us = fsub double %23, %29
  %mul67.us = fmul double %28, %sub66.us
  %sub68.us = fsub double %mul58.us, %mul67.us
  %add69.us = add nsw i32 %add43.us, %11
  %idxprom70.us = sext i32 %add69.us to i64
  %arrayidx71.us = getelementptr inbounds double, double* %16, i64 %idxprom70.us
  %30 = load double, double* %arrayidx71.us, align 8, !tbaa !34
  %arrayidx74.us = getelementptr inbounds double, double* %14, i64 %idxprom70.us
  %31 = load double, double* %arrayidx74.us, align 8, !tbaa !34
  %sub77.us = fsub double %31, %23
  %mul78.us = fmul double %30, %sub77.us
  %add79.us = fadd double %sub68.us, %mul78.us
  %arrayidx81.us = getelementptr inbounds double, double* %16, i64 %idxprom.us
  %32 = load double, double* %arrayidx81.us, align 8, !tbaa !34
  %sub84.us = sub nsw i32 %add43.us, %11
  %idxprom85.us = sext i32 %sub84.us to i64
  %arrayidx86.us = getelementptr inbounds double, double* %14, i64 %idxprom85.us
  %33 = load double, double* %arrayidx86.us, align 8, !tbaa !34
  %sub87.us = fsub double %23, %33
  %mul88.us = fmul double %32, %sub87.us
  %sub89.us = fsub double %add79.us, %mul88.us
  %add90.us = add nsw i32 %add43.us, %12
  %idxprom91.us = sext i32 %add90.us to i64
  %arrayidx92.us = getelementptr inbounds double, double* %17, i64 %idxprom91.us
  %34 = load double, double* %arrayidx92.us, align 8, !tbaa !34
  %arrayidx95.us = getelementptr inbounds double, double* %14, i64 %idxprom91.us
  %35 = load double, double* %arrayidx95.us, align 8, !tbaa !34
  %sub98.us = fsub double %35, %23
  %mul99.us = fmul double %34, %sub98.us
  %add100.us = fadd double %sub89.us, %mul99.us
  %arrayidx102.us = getelementptr inbounds double, double* %17, i64 %idxprom.us
  %36 = load double, double* %arrayidx102.us, align 8, !tbaa !34
  %sub105.us = sub nsw i32 %add43.us, %12
  %idxprom106.us = sext i32 %sub105.us to i64
  %arrayidx107.us = getelementptr inbounds double, double* %14, i64 %idxprom106.us
  %37 = load double, double* %arrayidx107.us, align 8, !tbaa !34
  %sub108.us = fsub double %23, %37
  %mul109.us = fmul double %36, %sub108.us
  %sub110.us = fsub double %add100.us, %mul109.us
  %mul111.us = fmul double %mul48.us, %sub110.us
  %sub112.us = fsub double %mul47.us, %mul111.us
  %arrayidx114.us = getelementptr inbounds double, double* %18, i64 %idxprom.us
  %38 = load double, double* %arrayidx114.us, align 8, !tbaa !34
  %sub115.us = fsub double %38, %sub112.us
  %arrayidx117.us = getelementptr inbounds double, double* %19, i64 %idxprom.us
  store double %sub115.us, double* %arrayidx117.us, align 8, !tbaa !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %inc.us = add nuw nsw i32 %i.0160.us, 1
  %cmp38.us = icmp slt i64 %indvars.iv.next, %20
  br i1 %cmp38.us, label %for.body.us, label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %for.body.us
  %add118.us = add nsw i64 %.omp.iv.0162.us, 1
  %cmp19.us = icmp slt i64 %.omp.iv.0162.us, %cond
  br i1 %cmp19.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi170 = phi i8* [ %.pre169, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi168 = phi i8* [ %.pre167, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi166 = phi i8* [ %.pre165, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi166) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi168) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi170) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @residual_and_restriction(%struct.domain_type* %domain, i32 %level_f, i32 %phi_id, i32 %rhs_id, i32 %level_c, i32 %res_id, double %a, double %b) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level_f.addr = alloca i32, align 4
  %phi_id.addr = alloca i32, align 4
  %rhs_id.addr = alloca i32, align 4
  %level_c.addr = alloca i32, align 4
  %res_id.addr = alloca i32, align 4
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level_f, i32* %level_f.addr, align 4, !tbaa !35
  store i32 %phi_id, i32* %phi_id.addr, align 4, !tbaa !35
  store i32 %rhs_id, i32* %rhs_id.addr, align 4, !tbaa !35
  store i32 %level_c, i32* %level_c.addr, align 4, !tbaa !35
  store i32 %res_id, i32* %res_id.addr, align 4, !tbaa !35
  store double %a, double* %a.addr, align 8, !tbaa !34
  store double %b, double* %b.addr, align 8, !tbaa !34
  tail call void @exchange_boundary(%struct.domain_type* %domain, i32 %level_f, i32 %phi_id, i32 1, i32 0, i32 0)
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level_f to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 9, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, i32*, i32*, double*, double*)* @.omp_outlined..15 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level_c.addr, i32* nonnull %level_f.addr, i32* nonnull %phi_id.addr, i32* nonnull %rhs_id.addr, i32* nonnull %res_id.addr, i32* nonnull %omp_within_a_box, double* nonnull %a.addr, double* nonnull %b.addr) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..15(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level_c.addr, i32* nonnull %level_f.addr, i32* nonnull %phi_id.addr, i32* nonnull %rhs_id.addr, i32* nonnull %res_id.addr, i32* nonnull %omp_within_a_box, double* nonnull %a.addr, double* nonnull %b.addr)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %5 = load i32, i32* %level_f.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %5 to i64
  %6 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %6, i64 0, i32 0, i32 2, i64 %idxprom12
  %7 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %7
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..15(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level_c, i32* nocapture readonly dereferenceable(4) %level_f, i32* nocapture readonly dereferenceable(4) %phi_id, i32* nocapture readonly dereferenceable(4) %rhs_id, i32* nocapture readonly dereferenceable(4) %res_id, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double* dereferenceable(8) %a, double* dereferenceable(8) %b) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %pencil_c = alloca i32, align 4
  %plane_c = alloca i32, align 4
  %dim_i_c = alloca i32, align 4
  %pencil_f = alloca i32, align 4
  %plane_f = alloca i32, align 4
  %dim_k_f = alloca i32, align 4
  %dim_j_f = alloca i32, align 4
  %dim_i_f = alloca i32, align 4
  %h2inv = alloca double, align 8
  %phi = alloca double*, align 8
  %rhs = alloca double*, align 8
  %alpha = alloca double*, align 8
  %beta_i = alloca double*, align 8
  %beta_j = alloca double*, align 8
  %beta_k = alloca double*, align 8
  %res = alloca double*, align 8
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre230 = bitcast i32* %.omp.is_last to i8*
  %.pre231 = bitcast i32* %.omp.stride to i8*
  %.pre233 = bitcast i32* %.omp.ub to i8*
  %.pre235 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp6 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp6, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp7228 = icmp sgt i32 %8, %cond
  br i1 %cmp7228, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil_c to i8*
  %10 = bitcast i32* %plane_c to i8*
  %11 = bitcast i32* %dim_i_c to i8*
  %12 = bitcast i32* %pencil_f to i8*
  %13 = bitcast i32* %plane_f to i8*
  %14 = bitcast i32* %dim_k_f to i8*
  %15 = bitcast i32* %dim_j_f to i8*
  %16 = bitcast i32* %dim_i_f to i8*
  %17 = bitcast double* %h2inv to i8*
  %18 = bitcast double** %phi to i8*
  %19 = bitcast double** %rhs to i8*
  %20 = bitcast double** %alpha to i8*
  %21 = bitcast double** %beta_i to i8*
  %22 = bitcast double** %beta_j to i8*
  %23 = bitcast double** %beta_k to i8*
  %24 = bitcast double** %res to i8*
  %25 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %25, %omp.inner.for.body.lr.ph ]
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %26 = load i32, i32* %level_c, align 4, !tbaa !35
  %idxprom = sext i32 %26 to i64
  %27 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %27, i64 0, i32 28
  %28 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %28, i64 %indvars.iv, i32 5
  %29 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil = getelementptr inbounds %struct.box_type, %struct.box_type* %29, i64 %idxprom, i32 5
  %30 = load i32, i32* %pencil, align 8, !tbaa !54
  store i32 %30, i32* %pencil_c, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane = getelementptr inbounds %struct.box_type, %struct.box_type* %29, i64 %idxprom, i32 6
  %31 = load i32, i32* %plane, align 4, !tbaa !55
  store i32 %31, i32* %plane_c, align 4, !tbaa !35
  %ghosts = getelementptr inbounds %struct.box_type, %struct.box_type* %29, i64 %idxprom, i32 4
  %32 = load i32, i32* %ghosts, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %29, i64 %idxprom, i32 2, i32 0
  %33 = load i32, i32* %i, align 4, !tbaa !43
  store i32 %33, i32* %dim_i_c, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %34 = load i32, i32* %level_f, align 4, !tbaa !35
  %idxprom43 = sext i32 %34 to i64
  %pencil49 = getelementptr inbounds %struct.box_type, %struct.box_type* %29, i64 %idxprom43, i32 5
  %35 = load i32, i32* %pencil49, align 8, !tbaa !54
  store i32 %35, i32* %pencil_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %plane56 = getelementptr inbounds %struct.box_type, %struct.box_type* %29, i64 %idxprom43, i32 6
  %36 = load i32, i32* %plane56, align 4, !tbaa !55
  store i32 %36, i32* %plane_f, align 4, !tbaa !35
  %ghosts63 = getelementptr inbounds %struct.box_type, %struct.box_type* %29, i64 %idxprom43, i32 4
  %37 = load i32, i32* %ghosts63, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %14) #1
  %k71 = getelementptr inbounds %struct.box_type, %struct.box_type* %29, i64 %idxprom43, i32 2, i32 2
  %38 = load i32, i32* %k71, align 4, !tbaa !40
  store i32 %38, i32* %dim_k_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %15) #1
  %j79 = getelementptr inbounds %struct.box_type, %struct.box_type* %29, i64 %idxprom43, i32 2, i32 1
  %39 = load i32, i32* %j79, align 4, !tbaa !37
  store i32 %39, i32* %dim_j_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %16) #1
  %i87 = getelementptr inbounds %struct.box_type, %struct.box_type* %29, i64 %idxprom43, i32 2, i32 0
  %40 = load i32, i32* %i87, align 4, !tbaa !43
  store i32 %40, i32* %dim_i_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %17) #1
  %arrayidx89 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %27, i64 0, i32 26, i64 %idxprom43
  %41 = load double, double* %arrayidx89, align 8, !tbaa !34
  %mul93 = fmul double %41, %41
  %div94 = fdiv double 1.000000e+00, %mul93
  store double %div94, double* %h2inv, align 8, !tbaa !34
  call void @llvm.lifetime.start(i64 8, i8* %18) #1
  %42 = load i32, i32* %phi_id, align 4, !tbaa !35
  %idxprom95 = sext i32 %42 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %29, i64 %idxprom43, i32 10
  %43 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx102 = getelementptr inbounds double*, double** %43, i64 %idxprom95
  %44 = load double*, double** %arrayidx102, align 8, !tbaa !1
  %add103 = add nsw i32 %35, 1
  %add104 = add nsw i32 %add103, %36
  %mul105 = mul nsw i32 %add104, %37
  %idx.ext = sext i32 %mul105 to i64
  %add.ptr = getelementptr inbounds double, double* %44, i64 %idx.ext
  store double* %add.ptr, double** %phi, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %19) #1
  %45 = load i32, i32* %rhs_id, align 4, !tbaa !35
  %idxprom106 = sext i32 %45 to i64
  %46 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels111 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %46, i64 %indvars.iv, i32 5
  %47 = load %struct.box_type*, %struct.box_type** %levels111, align 8, !tbaa !28
  %grids113 = getelementptr inbounds %struct.box_type, %struct.box_type* %47, i64 %idxprom43, i32 10
  %48 = load double**, double*** %grids113, align 8, !tbaa !30
  %arrayidx114 = getelementptr inbounds double*, double** %48, i64 %idxprom106
  %49 = load double*, double** %arrayidx114, align 8, !tbaa !1
  %add.ptr119 = getelementptr inbounds double, double* %49, i64 %idx.ext
  store double* %add.ptr119, double** %rhs, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %20) #1
  %50 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels124 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %50, i64 %indvars.iv, i32 5
  %51 = load %struct.box_type*, %struct.box_type** %levels124, align 8, !tbaa !28
  %grids126 = getelementptr inbounds %struct.box_type, %struct.box_type* %51, i64 %idxprom43, i32 10
  %52 = load double**, double*** %grids126, align 8, !tbaa !30
  %arrayidx127 = getelementptr inbounds double*, double** %52, i64 2
  %53 = load double*, double** %arrayidx127, align 8, !tbaa !1
  %add.ptr132 = getelementptr inbounds double, double* %53, i64 %idx.ext
  store double* %add.ptr132, double** %alpha, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %21) #1
  %54 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels137 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %54, i64 %indvars.iv, i32 5
  %55 = load %struct.box_type*, %struct.box_type** %levels137, align 8, !tbaa !28
  %grids139 = getelementptr inbounds %struct.box_type, %struct.box_type* %55, i64 %idxprom43, i32 10
  %56 = load double**, double*** %grids139, align 8, !tbaa !30
  %arrayidx140 = getelementptr inbounds double*, double** %56, i64 5
  %57 = load double*, double** %arrayidx140, align 8, !tbaa !1
  %add.ptr145 = getelementptr inbounds double, double* %57, i64 %idx.ext
  store double* %add.ptr145, double** %beta_i, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %22) #1
  %58 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels150 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %58, i64 %indvars.iv, i32 5
  %59 = load %struct.box_type*, %struct.box_type** %levels150, align 8, !tbaa !28
  %grids152 = getelementptr inbounds %struct.box_type, %struct.box_type* %59, i64 %idxprom43, i32 10
  %60 = load double**, double*** %grids152, align 8, !tbaa !30
  %arrayidx153 = getelementptr inbounds double*, double** %60, i64 6
  %61 = load double*, double** %arrayidx153, align 8, !tbaa !1
  %add.ptr158 = getelementptr inbounds double, double* %61, i64 %idx.ext
  store double* %add.ptr158, double** %beta_j, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %23) #1
  %62 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains161 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %62, i64 0, i32 28
  %63 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains161, align 8, !tbaa !24
  %levels163 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %63, i64 %indvars.iv, i32 5
  %64 = load %struct.box_type*, %struct.box_type** %levels163, align 8, !tbaa !28
  %grids165 = getelementptr inbounds %struct.box_type, %struct.box_type* %64, i64 %idxprom43, i32 10
  %65 = load double**, double*** %grids165, align 8, !tbaa !30
  %arrayidx166 = getelementptr inbounds double*, double** %65, i64 7
  %66 = load double*, double** %arrayidx166, align 8, !tbaa !1
  %add.ptr171 = getelementptr inbounds double, double* %66, i64 %idx.ext
  store double* %add.ptr171, double** %beta_k, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %24) #1
  %67 = load i32, i32* %res_id, align 4, !tbaa !35
  %idxprom172 = sext i32 %67 to i64
  %68 = load i32, i32* %level_c, align 4, !tbaa !35
  %idxprom173 = sext i32 %68 to i64
  %69 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains161, align 8, !tbaa !24
  %levels177 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %69, i64 %indvars.iv, i32 5
  %70 = load %struct.box_type*, %struct.box_type** %levels177, align 8, !tbaa !28
  %grids179 = getelementptr inbounds %struct.box_type, %struct.box_type* %70, i64 %idxprom173, i32 10
  %71 = load double**, double*** %grids179, align 8, !tbaa !30
  %arrayidx180 = getelementptr inbounds double*, double** %71, i64 %idxprom172
  %72 = load double*, double** %arrayidx180, align 8, !tbaa !1
  %73 = load i32, i32* %pencil_c, align 4, !tbaa !35
  %add181 = add nsw i32 %73, 1
  %74 = load i32, i32* %plane_c, align 4, !tbaa !35
  %add182 = add nsw i32 %add181, %74
  %mul183 = mul nsw i32 %add182, %32
  %idx.ext184 = sext i32 %mul183 to i64
  %add.ptr185 = getelementptr inbounds double, double* %72, i64 %idx.ext184
  store double* %add.ptr185, double** %res, align 8, !tbaa !1
  %75 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %75, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 18, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**, i32*, i32*, i32*, double*, double**, double**, double*, double*, double**, double**, double**, double**)* @.omp_outlined..16 to void (i32*, i32*, ...)*), i32* nonnull %dim_k_f, i32* nonnull %dim_j_f, i32* nonnull %dim_i_c, i32* nonnull %pencil_c, i32* nonnull %plane_c, double** nonnull %res, i32* nonnull %dim_i_f, i32* nonnull %pencil_f, i32* nonnull %plane_f, double* nonnull %a, double** nonnull %alpha, double** nonnull %phi, double* nonnull %b, double* nonnull %h2inv, double** nonnull %beta_i, double** nonnull %beta_j, double** nonnull %beta_k, double** nonnull %rhs) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  %76 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %76) #1
  call void @.omp_outlined..16(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k_f, i32* nonnull %dim_j_f, i32* nonnull %dim_i_c, i32* nonnull %pencil_c, i32* nonnull %plane_c, double** nonnull %res, i32* nonnull %dim_i_f, i32* nonnull %pencil_f, i32* nonnull %plane_f, double* nonnull %a, double** nonnull %alpha, double** nonnull %phi, double* nonnull %b, double* nonnull %h2inv, double** nonnull %beta_i, double** nonnull %beta_j, double** nonnull %beta_k, double** nonnull %rhs)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %76) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  call void @llvm.lifetime.end(i64 8, i8* nonnull %24) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %23) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %22) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %21) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %20) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %19) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %18) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %16) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9) #1
  %77 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %78 = sext i32 %77 to i64
  %cmp7 = icmp slt i64 %indvars.iv, %78
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp7, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  %.pre = load i32, i32* %.global_tid., align 4, !tbaa !35
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  %79 = phi i32 [ %.pre, %omp.loop.exit.loopexit ], [ %6, %omp.precond.then ]
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %79) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi236 = phi i8* [ %.pre235, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi234 = phi i8* [ %.pre233, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi232 = phi i8* [ %.pre231, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre230, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi232) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi234) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi236) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..16(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k_f, i32* nocapture readonly dereferenceable(4) %dim_j_f, i32* nocapture readonly dereferenceable(4) %dim_i_c, i32* nocapture readonly dereferenceable(4) %pencil_c, i32* nocapture readonly dereferenceable(4) %plane_c, double** nocapture readonly dereferenceable(8) %res, i32* nocapture readonly dereferenceable(4) %dim_i_f, i32* nocapture readonly dereferenceable(4) %pencil_f, i32* nocapture readonly dereferenceable(4) %plane_f, double* nocapture readonly dereferenceable(8) %a, double** nocapture readonly dereferenceable(8) %alpha, double** nocapture readonly dereferenceable(8) %phi, double* nocapture readonly dereferenceable(8) %b, double* nocapture readonly dereferenceable(8) %h2inv, double** nocapture readonly dereferenceable(8) %beta_i, double** nocapture readonly dereferenceable(8) %beta_j, double** nocapture readonly dereferenceable(8) %beta_k, double** nocapture readonly dereferenceable(8) %rhs) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k_f, align 4, !tbaa !35
  %add = add nsw i32 %0, 1
  %div = sdiv i32 %add, 2
  %conv = sext i32 %div to i64
  %1 = load i32, i32* %dim_j_f, align 4, !tbaa !35
  %add4 = add nsw i32 %1, 1
  %div5 = sdiv i32 %add4, 2
  %conv6 = sext i32 %div5 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre235 = bitcast i64* %.omp.stride to i8*
  %.pre237 = bitcast i64* %.omp.ub to i8*
  %.pre239 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %7 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp17 = icmp sgt i64 %7, %sub7
  %cond = select i1 %cmp17, i64 %sub7, i64 %7
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %8 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp19223 = icmp sgt i64 %8, %cond
  br i1 %cmp19223, label %omp.loop.exit, label %omp.inner.for.body.preheader

omp.inner.for.body.preheader:                     ; preds = %omp.precond.then
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body.preheader, %for.end157
  %.omp.iv.0224 = phi i64 [ %add158, %for.end157 ], [ %8, %omp.inner.for.body.preheader ]
  %9 = load i32, i32* %dim_j_f, align 4, !tbaa !35
  %add23 = add nsw i32 %9, 1
  %div24 = sdiv i32 %add23, 2
  %conv25 = sext i32 %div24 to i64
  %div26 = sdiv i64 %.omp.iv.0224, %conv25
  %mul27 = shl nsw i64 %div26, 1
  %conv29 = trunc i64 %mul27 to i32
  %rem = srem i64 %.omp.iv.0224, %conv25
  %10 = load i32, i32* %dim_i_c, align 4, !tbaa !35
  %cmp38216 = icmp sgt i32 %10, 0
  br i1 %cmp38216, label %for.body.lr.ph, label %for.cond45.preheader

for.body.lr.ph:                                   ; preds = %omp.inner.for.body
  %mul35 = shl i64 %rem, 1
  %conv37 = trunc i64 %mul35 to i32
  %shr = ashr exact i32 %conv37, 1
  %11 = load i32, i32* %pencil_c, align 4
  %mul40 = mul i32 %11, %shr
  %shr42 = ashr exact i32 %conv29, 1
  %12 = load i32, i32* %plane_c, align 4
  %mul43 = mul nsw i32 %12, %shr42
  %13 = load double*, double** %res, align 8
  %14 = add i32 %mul40, %mul43
  %15 = sext i32 %14 to i64
  %scevgep = getelementptr double, double* %13, i64 %15
  %scevgep234 = bitcast double* %scevgep to i8*
  %16 = icmp sgt i32 %10, 1
  %smax = select i1 %16, i32 %10, i32 1
  %17 = add i32 %smax, -1
  %18 = zext i32 %17 to i64
  %19 = shl nuw nsw i64 %18, 3
  %20 = add nuw nsw i64 %19, 8
  call void @llvm.memset.p0i8.i64(i8* %scevgep234, i8 0, i64 %20, i32 8, i1 false)
  br label %for.cond45.preheader

for.cond45.preheader:                             ; preds = %for.body.lr.ph, %omp.inner.for.body
  %sext = shl i64 %rem, 33
  %21 = ashr exact i64 %sext, 32
  %22 = trunc i64 %21 to i32
  %shr65.us = ashr exact i32 %22, 1
  %indvars.iv.next231 = or i64 %21, 1
  %lftr.wideiv = trunc i64 %21 to i32
  %shr65.us.1 = ashr exact i32 %lftr.wideiv, 1
  br label %for.cond50.preheader

for.cond50.preheader:                             ; preds = %for.inc155, %for.cond45.preheader
  %k.0222 = phi i32 [ %conv29, %for.cond45.preheader ], [ %inc156, %for.inc155 ]
  %23 = load i32, i32* %dim_i_f, align 4
  %cmp56218 = icmp sgt i32 %23, 0
  %24 = load i32, i32* %pencil_f, align 4
  %25 = load i32, i32* %plane_f, align 4
  %mul61 = mul nsw i32 %25, %k.0222
  %26 = load i32, i32* %pencil_c, align 4
  %shr68 = ashr i32 %k.0222, 1
  %27 = load i32, i32* %plane_c, align 4
  %mul69 = mul nsw i32 %27, %shr68
  %28 = load double*, double** %alpha, align 8
  %29 = load double*, double** %phi, align 8
  %30 = load double*, double** %beta_i, align 8
  %31 = load double*, double** %beta_j, align 8
  %32 = load double*, double** %beta_k, align 8
  %33 = load double*, double** %rhs, align 8
  %34 = load double*, double** %res, align 8
  br i1 %cmp56218, label %for.body58.lr.ph.us.preheader, label %for.inc155

for.body58.lr.ph.us.preheader:                    ; preds = %for.cond50.preheader
  %35 = sext i32 %23 to i64
  %36 = sext i32 %24 to i64
  %37 = mul nsw i64 %36, %21
  %mul66.us = mul nsw i32 %26, %shr65.us
  %38 = trunc i64 %37 to i32
  br label %for.body58.us

for.body58.us:                                    ; preds = %for.body58.lr.ph.us.preheader, %for.body58.us
  %indvars.iv227 = phi i64 [ 0, %for.body58.lr.ph.us.preheader ], [ %indvars.iv.next228, %for.body58.us ]
  %i.1219.us = phi i32 [ 0, %for.body58.lr.ph.us.preheader ], [ %inc150.us, %for.body58.us ]
  %add60.us = add nsw i32 %38, %i.1219.us
  %add62.us = add nsw i32 %add60.us, %mul61
  %39 = trunc i64 %indvars.iv227 to i32
  %shr64.us = ashr i32 %39, 1
  %add67.us = add nsw i32 %mul66.us, %shr64.us
  %add70.us = add nsw i32 %add67.us, %mul69
  %40 = load double, double* %a, align 8, !tbaa !34
  %idxprom71.us = sext i32 %add62.us to i64
  %arrayidx72.us = getelementptr inbounds double, double* %28, i64 %idxprom71.us
  %41 = load double, double* %arrayidx72.us, align 8, !tbaa !34
  %mul73.us = fmul double %40, %41
  %arrayidx75.us = getelementptr inbounds double, double* %29, i64 %idxprom71.us
  %42 = load double, double* %arrayidx75.us, align 8, !tbaa !34
  %mul76.us = fmul double %mul73.us, %42
  %43 = load double, double* %b, align 8, !tbaa !34
  %44 = load double, double* %h2inv, align 8, !tbaa !34
  %mul77.us = fmul double %43, %44
  %add78.us = add nsw i32 %add62.us, 1
  %idxprom79.us = sext i32 %add78.us to i64
  %arrayidx80.us = getelementptr inbounds double, double* %30, i64 %idxprom79.us
  %45 = load double, double* %arrayidx80.us, align 8, !tbaa !34
  %arrayidx83.us = getelementptr inbounds double, double* %29, i64 %idxprom79.us
  %46 = load double, double* %arrayidx83.us, align 8, !tbaa !34
  %sub86.us = fsub double %46, %42
  %mul87.us = fmul double %45, %sub86.us
  %arrayidx89.us = getelementptr inbounds double, double* %30, i64 %idxprom71.us
  %47 = load double, double* %arrayidx89.us, align 8, !tbaa !34
  %sub92.us = add nsw i32 %add62.us, -1
  %idxprom93.us = sext i32 %sub92.us to i64
  %arrayidx94.us = getelementptr inbounds double, double* %29, i64 %idxprom93.us
  %48 = load double, double* %arrayidx94.us, align 8, !tbaa !34
  %sub95.us = fsub double %42, %48
  %mul96.us = fmul double %47, %sub95.us
  %sub97.us = fsub double %mul87.us, %mul96.us
  %add98.us = add nsw i32 %add62.us, %24
  %idxprom99.us = sext i32 %add98.us to i64
  %arrayidx100.us = getelementptr inbounds double, double* %31, i64 %idxprom99.us
  %49 = load double, double* %arrayidx100.us, align 8, !tbaa !34
  %arrayidx103.us = getelementptr inbounds double, double* %29, i64 %idxprom99.us
  %50 = load double, double* %arrayidx103.us, align 8, !tbaa !34
  %sub106.us = fsub double %50, %42
  %mul107.us = fmul double %49, %sub106.us
  %add108.us = fadd double %sub97.us, %mul107.us
  %arrayidx110.us = getelementptr inbounds double, double* %31, i64 %idxprom71.us
  %51 = load double, double* %arrayidx110.us, align 8, !tbaa !34
  %sub113.us = sub nsw i32 %add62.us, %24
  %idxprom114.us = sext i32 %sub113.us to i64
  %arrayidx115.us = getelementptr inbounds double, double* %29, i64 %idxprom114.us
  %52 = load double, double* %arrayidx115.us, align 8, !tbaa !34
  %sub116.us = fsub double %42, %52
  %mul117.us = fmul double %51, %sub116.us
  %sub118.us = fsub double %add108.us, %mul117.us
  %add119.us = add nsw i32 %add62.us, %25
  %idxprom120.us = sext i32 %add119.us to i64
  %arrayidx121.us = getelementptr inbounds double, double* %32, i64 %idxprom120.us
  %53 = load double, double* %arrayidx121.us, align 8, !tbaa !34
  %arrayidx124.us = getelementptr inbounds double, double* %29, i64 %idxprom120.us
  %54 = load double, double* %arrayidx124.us, align 8, !tbaa !34
  %sub127.us = fsub double %54, %42
  %mul128.us = fmul double %53, %sub127.us
  %add129.us = fadd double %sub118.us, %mul128.us
  %arrayidx131.us = getelementptr inbounds double, double* %32, i64 %idxprom71.us
  %55 = load double, double* %arrayidx131.us, align 8, !tbaa !34
  %sub134.us = sub nsw i32 %add62.us, %25
  %idxprom135.us = sext i32 %sub134.us to i64
  %arrayidx136.us = getelementptr inbounds double, double* %29, i64 %idxprom135.us
  %56 = load double, double* %arrayidx136.us, align 8, !tbaa !34
  %sub137.us = fsub double %42, %56
  %mul138.us = fmul double %55, %sub137.us
  %sub139.us = fsub double %add129.us, %mul138.us
  %mul140.us = fmul double %mul77.us, %sub139.us
  %sub141.us = fsub double %mul76.us, %mul140.us
  %arrayidx143.us = getelementptr inbounds double, double* %33, i64 %idxprom71.us
  %57 = load double, double* %arrayidx143.us, align 8, !tbaa !34
  %sub144.us = fsub double %57, %sub141.us
  %mul145.us = fmul double %sub144.us, 1.250000e-01
  %idxprom146.us = sext i32 %add70.us to i64
  %arrayidx147.us = getelementptr inbounds double, double* %34, i64 %idxprom146.us
  %58 = load double, double* %arrayidx147.us, align 8, !tbaa !34
  %add148.us = fadd double %58, %mul145.us
  store double %add148.us, double* %arrayidx147.us, align 8, !tbaa !34
  %indvars.iv.next228 = add nuw nsw i64 %indvars.iv227, 1
  %inc150.us = add nuw nsw i32 %i.1219.us, 1
  %cmp56.us = icmp slt i64 %indvars.iv.next228, %35
  br i1 %cmp56.us, label %for.body58.us, label %for.cond55.for.inc152_crit_edge.us

for.cond55.for.inc152_crit_edge.us:               ; preds = %for.body58.us
  %59 = mul nsw i64 %36, %indvars.iv.next231
  %mul66.us.1 = mul nsw i32 %26, %shr65.us.1
  %60 = trunc i64 %59 to i32
  br label %for.body58.us.1

for.inc155.loopexit:                              ; preds = %for.body58.us.1
  br label %for.inc155

for.inc155:                                       ; preds = %for.inc155.loopexit, %for.cond50.preheader
  %inc156 = add nsw i32 %k.0222, 1
  %cmp47 = icmp sgt i32 %k.0222, %conv29
  br i1 %cmp47, label %for.end157, label %for.cond50.preheader

for.end157:                                       ; preds = %for.inc155
  %add158 = add nsw i64 %.omp.iv.0224, 1
  %cmp19 = icmp slt i64 %.omp.iv.0224, %cond
  br i1 %cmp19, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.end157
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi240 = phi i8* [ %.pre239, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi238 = phi i8* [ %.pre237, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi236 = phi i8* [ %.pre235, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi236) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi238) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi240) #1
  ret void

for.body58.us.1:                                  ; preds = %for.body58.us.1, %for.cond55.for.inc152_crit_edge.us
  %indvars.iv227.1 = phi i64 [ 0, %for.cond55.for.inc152_crit_edge.us ], [ %indvars.iv.next228.1, %for.body58.us.1 ]
  %i.1219.us.1 = phi i32 [ 0, %for.cond55.for.inc152_crit_edge.us ], [ %inc150.us.1, %for.body58.us.1 ]
  %add60.us.1 = add nsw i32 %60, %i.1219.us.1
  %add62.us.1 = add nsw i32 %add60.us.1, %mul61
  %61 = trunc i64 %indvars.iv227.1 to i32
  %shr64.us.1 = ashr i32 %61, 1
  %add67.us.1 = add nsw i32 %mul66.us.1, %shr64.us.1
  %add70.us.1 = add nsw i32 %add67.us.1, %mul69
  %62 = load double, double* %a, align 8, !tbaa !34
  %idxprom71.us.1 = sext i32 %add62.us.1 to i64
  %arrayidx72.us.1 = getelementptr inbounds double, double* %28, i64 %idxprom71.us.1
  %63 = load double, double* %arrayidx72.us.1, align 8, !tbaa !34
  %mul73.us.1 = fmul double %62, %63
  %arrayidx75.us.1 = getelementptr inbounds double, double* %29, i64 %idxprom71.us.1
  %64 = load double, double* %arrayidx75.us.1, align 8, !tbaa !34
  %mul76.us.1 = fmul double %mul73.us.1, %64
  %65 = load double, double* %b, align 8, !tbaa !34
  %66 = load double, double* %h2inv, align 8, !tbaa !34
  %mul77.us.1 = fmul double %65, %66
  %add78.us.1 = add nsw i32 %add62.us.1, 1
  %idxprom79.us.1 = sext i32 %add78.us.1 to i64
  %arrayidx80.us.1 = getelementptr inbounds double, double* %30, i64 %idxprom79.us.1
  %67 = load double, double* %arrayidx80.us.1, align 8, !tbaa !34
  %arrayidx83.us.1 = getelementptr inbounds double, double* %29, i64 %idxprom79.us.1
  %68 = load double, double* %arrayidx83.us.1, align 8, !tbaa !34
  %sub86.us.1 = fsub double %68, %64
  %mul87.us.1 = fmul double %67, %sub86.us.1
  %arrayidx89.us.1 = getelementptr inbounds double, double* %30, i64 %idxprom71.us.1
  %69 = load double, double* %arrayidx89.us.1, align 8, !tbaa !34
  %sub92.us.1 = add nsw i32 %add62.us.1, -1
  %idxprom93.us.1 = sext i32 %sub92.us.1 to i64
  %arrayidx94.us.1 = getelementptr inbounds double, double* %29, i64 %idxprom93.us.1
  %70 = load double, double* %arrayidx94.us.1, align 8, !tbaa !34
  %sub95.us.1 = fsub double %64, %70
  %mul96.us.1 = fmul double %69, %sub95.us.1
  %sub97.us.1 = fsub double %mul87.us.1, %mul96.us.1
  %add98.us.1 = add nsw i32 %add62.us.1, %24
  %idxprom99.us.1 = sext i32 %add98.us.1 to i64
  %arrayidx100.us.1 = getelementptr inbounds double, double* %31, i64 %idxprom99.us.1
  %71 = load double, double* %arrayidx100.us.1, align 8, !tbaa !34
  %arrayidx103.us.1 = getelementptr inbounds double, double* %29, i64 %idxprom99.us.1
  %72 = load double, double* %arrayidx103.us.1, align 8, !tbaa !34
  %sub106.us.1 = fsub double %72, %64
  %mul107.us.1 = fmul double %71, %sub106.us.1
  %add108.us.1 = fadd double %sub97.us.1, %mul107.us.1
  %arrayidx110.us.1 = getelementptr inbounds double, double* %31, i64 %idxprom71.us.1
  %73 = load double, double* %arrayidx110.us.1, align 8, !tbaa !34
  %sub113.us.1 = sub nsw i32 %add62.us.1, %24
  %idxprom114.us.1 = sext i32 %sub113.us.1 to i64
  %arrayidx115.us.1 = getelementptr inbounds double, double* %29, i64 %idxprom114.us.1
  %74 = load double, double* %arrayidx115.us.1, align 8, !tbaa !34
  %sub116.us.1 = fsub double %64, %74
  %mul117.us.1 = fmul double %73, %sub116.us.1
  %sub118.us.1 = fsub double %add108.us.1, %mul117.us.1
  %add119.us.1 = add nsw i32 %add62.us.1, %25
  %idxprom120.us.1 = sext i32 %add119.us.1 to i64
  %arrayidx121.us.1 = getelementptr inbounds double, double* %32, i64 %idxprom120.us.1
  %75 = load double, double* %arrayidx121.us.1, align 8, !tbaa !34
  %arrayidx124.us.1 = getelementptr inbounds double, double* %29, i64 %idxprom120.us.1
  %76 = load double, double* %arrayidx124.us.1, align 8, !tbaa !34
  %sub127.us.1 = fsub double %76, %64
  %mul128.us.1 = fmul double %75, %sub127.us.1
  %add129.us.1 = fadd double %sub118.us.1, %mul128.us.1
  %arrayidx131.us.1 = getelementptr inbounds double, double* %32, i64 %idxprom71.us.1
  %77 = load double, double* %arrayidx131.us.1, align 8, !tbaa !34
  %sub134.us.1 = sub nsw i32 %add62.us.1, %25
  %idxprom135.us.1 = sext i32 %sub134.us.1 to i64
  %arrayidx136.us.1 = getelementptr inbounds double, double* %29, i64 %idxprom135.us.1
  %78 = load double, double* %arrayidx136.us.1, align 8, !tbaa !34
  %sub137.us.1 = fsub double %64, %78
  %mul138.us.1 = fmul double %77, %sub137.us.1
  %sub139.us.1 = fsub double %add129.us.1, %mul138.us.1
  %mul140.us.1 = fmul double %mul77.us.1, %sub139.us.1
  %sub141.us.1 = fsub double %mul76.us.1, %mul140.us.1
  %arrayidx143.us.1 = getelementptr inbounds double, double* %33, i64 %idxprom71.us.1
  %79 = load double, double* %arrayidx143.us.1, align 8, !tbaa !34
  %sub144.us.1 = fsub double %79, %sub141.us.1
  %mul145.us.1 = fmul double %sub144.us.1, 1.250000e-01
  %idxprom146.us.1 = sext i32 %add70.us.1 to i64
  %arrayidx147.us.1 = getelementptr inbounds double, double* %34, i64 %idxprom146.us.1
  %80 = load double, double* %arrayidx147.us.1, align 8, !tbaa !34
  %add148.us.1 = fadd double %80, %mul145.us.1
  store double %add148.us.1, double* %arrayidx147.us.1, align 8, !tbaa !34
  %indvars.iv.next228.1 = add nuw nsw i64 %indvars.iv227.1, 1
  %inc150.us.1 = add nuw nsw i32 %i.1219.us.1, 1
  %cmp56.us.1 = icmp slt i64 %indvars.iv.next228.1, %35
  br i1 %cmp56.us.1, label %for.body58.us.1, label %for.inc155.loopexit
}

; Function Attrs: nounwind uwtable
define void @restriction(%struct.domain_type* %domain, i32 %level_f, i32 %id_c, i32 %id_f) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level_f.addr = alloca i32, align 4
  %id_c.addr = alloca i32, align 4
  %id_f.addr = alloca i32, align 4
  %level_c = alloca i32, align 4
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level_f, i32* %level_f.addr, align 4, !tbaa !35
  store i32 %id_c, i32* %id_c.addr, align 4, !tbaa !35
  store i32 %id_f, i32* %id_f.addr, align 4, !tbaa !35
  %1 = bitcast i32* %level_c to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  %add = add nsw i32 %level_f, 1
  store i32 %add, i32* %level_c, align 4, !tbaa !35
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %add to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %2 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %2, i64 0, i32 5
  %3 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %3, i64 %idxprom, i32 2, i32 0
  %4 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %4, 64
  %5 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  %cmp9 = icmp sgt i32 %4, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 6, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, i32*)* @.omp_outlined..17 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level_c, i32* nonnull %level_f.addr, i32* nonnull %id_f.addr, i32* nonnull %id_c.addr, i32* nonnull %omp_within_a_box) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..17(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level_c, i32* nonnull %level_f.addr, i32* nonnull %id_f.addr, i32* nonnull %id_c.addr, i32* nonnull %omp_within_a_box)
  tail call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %6 = load i32, i32* %level_f.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %6 to i64
  %7 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %7, i64 0, i32 0, i32 3, i64 %idxprom12
  %8 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add14 = add i64 %sub, %8
  store i64 %add14, i64* %arrayidx13, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 4, i8* %5) #1
  call void @llvm.lifetime.end(i64 4, i8* %1) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..17(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level_c, i32* nocapture readonly dereferenceable(4) %level_f, i32* nocapture readonly dereferenceable(4) %id_f, i32* nocapture readonly dereferenceable(4) %id_c, i32* nocapture readonly dereferenceable(4) %omp_within_a_box) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %pencil_c = alloca i32, align 4
  %plane_c = alloca i32, align 4
  %dim_i_c = alloca i32, align 4
  %dim_j_c = alloca i32, align 4
  %dim_k_c = alloca i32, align 4
  %pencil_f = alloca i32, align 4
  %plane_f = alloca i32, align 4
  %grid_f = alloca double*, align 8
  %grid_c = alloca double*, align 8
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre122 = bitcast i32* %.omp.stride to i8*
  %.pre124 = bitcast i32* %.omp.ub to i8*
  %.pre126 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp6 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp6, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp7120 = icmp sgt i32 %8, %cond
  br i1 %cmp7120, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil_c to i8*
  %10 = bitcast i32* %plane_c to i8*
  %11 = bitcast i32* %dim_i_c to i8*
  %12 = bitcast i32* %dim_j_c to i8*
  %13 = bitcast i32* %dim_k_c to i8*
  %14 = bitcast i32* %pencil_f to i8*
  %15 = bitcast i32* %plane_f to i8*
  %16 = bitcast double** %grid_f to i8*
  %17 = bitcast double** %grid_c to i8*
  %18 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %18, %omp.inner.for.body.lr.ph ]
  %19 = load i32, i32* %level_c, align 4, !tbaa !35
  %idxprom = sext i32 %19 to i64
  %20 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %20, i64 0, i32 28
  %21 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %21, i64 %indvars.iv, i32 5
  %22 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %ghosts = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 4
  %23 = load i32, i32* %ghosts, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %pencil = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 5
  %24 = load i32, i32* %pencil, align 8, !tbaa !54
  store i32 %24, i32* %pencil_c, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 6
  %25 = load i32, i32* %plane, align 4, !tbaa !55
  store i32 %25, i32* %plane_c, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %i29 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 2, i32 0
  %26 = load i32, i32* %i29, align 4, !tbaa !43
  store i32 %26, i32* %dim_i_c, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %j37 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 2, i32 1
  %27 = load i32, i32* %j37, align 4, !tbaa !37
  store i32 %27, i32* %dim_j_c, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %k45 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 2, i32 2
  %28 = load i32, i32* %k45, align 4, !tbaa !40
  store i32 %28, i32* %dim_k_c, align 4, !tbaa !35
  %29 = load i32, i32* %level_f, align 4, !tbaa !35
  %idxprom46 = sext i32 %29 to i64
  %ghosts52 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 4
  %30 = load i32, i32* %ghosts52, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %14) #1
  %pencil59 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 5
  %31 = load i32, i32* %pencil59, align 8, !tbaa !54
  store i32 %31, i32* %pencil_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %15) #1
  %plane66 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 6
  %32 = load i32, i32* %plane66, align 4, !tbaa !55
  store i32 %32, i32* %plane_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %16) #1
  %33 = load i32, i32* %id_f, align 4, !tbaa !35
  %idxprom67 = sext i32 %33 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 10
  %34 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx74 = getelementptr inbounds double*, double** %34, i64 %idxprom67
  %35 = load double*, double** %arrayidx74, align 8, !tbaa !1
  %add75 = add nsw i32 %31, 1
  %add76 = add nsw i32 %add75, %32
  %mul77 = mul nsw i32 %add76, %30
  %idx.ext = sext i32 %mul77 to i64
  %add.ptr = getelementptr inbounds double, double* %35, i64 %idx.ext
  store double* %add.ptr, double** %grid_f, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %17) #1
  %36 = load i32, i32* %id_c, align 4, !tbaa !35
  %idxprom78 = sext i32 %36 to i64
  %37 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels83 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %37, i64 %indvars.iv, i32 5
  %38 = load %struct.box_type*, %struct.box_type** %levels83, align 8, !tbaa !28
  %grids85 = getelementptr inbounds %struct.box_type, %struct.box_type* %38, i64 %idxprom, i32 10
  %39 = load double**, double*** %grids85, align 8, !tbaa !30
  %arrayidx86 = getelementptr inbounds double*, double** %39, i64 %idxprom78
  %40 = load double*, double** %arrayidx86, align 8, !tbaa !1
  %add87 = add nsw i32 %24, 1
  %add88 = add nsw i32 %add87, %25
  %mul89 = mul nsw i32 %add88, %23
  %idx.ext90 = sext i32 %mul89 to i64
  %add.ptr91 = getelementptr inbounds double, double* %40, i64 %idx.ext90
  store double* %add.ptr91, double** %grid_c, align 8, !tbaa !1
  %41 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %41, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 9, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**, double**)* @.omp_outlined..18 to void (i32*, i32*, ...)*), i32* nonnull %dim_k_c, i32* nonnull %dim_j_c, i32* nonnull %dim_i_c, i32* nonnull %pencil_c, i32* nonnull %plane_c, i32* nonnull %pencil_f, i32* nonnull %plane_f, double** nonnull %grid_c, double** nonnull %grid_f) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  call void @.omp_outlined..18(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k_c, i32* nonnull %dim_j_c, i32* nonnull %dim_i_c, i32* nonnull %pencil_c, i32* nonnull %plane_c, i32* nonnull %pencil_f, i32* nonnull %plane_f, double** nonnull %grid_c, double** nonnull %grid_f)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9) #1
  %42 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %43 = sext i32 %42 to i64
  %cmp7 = icmp slt i64 %indvars.iv, %43
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp7, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi127 = phi i8* [ %.pre126, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi125 = phi i8* [ %.pre124, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi123 = phi i8* [ %.pre122, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi123) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi125) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi127) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..18(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k_c, i32* nocapture readonly dereferenceable(4) %dim_j_c, i32* nocapture readonly dereferenceable(4) %dim_i_c, i32* nocapture readonly dereferenceable(4) %pencil_c, i32* nocapture readonly dereferenceable(4) %plane_c, i32* nocapture readonly dereferenceable(4) %pencil_f, i32* nocapture readonly dereferenceable(4) %plane_f, double** nocapture readonly dereferenceable(8) %grid_c, double** nocapture readonly dereferenceable(8) %grid_f) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k_c, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j_c, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre124 = bitcast i64* %.omp.stride to i8*
  %.pre126 = bitcast i64* %.omp.ub to i8*
  %.pre128 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %7 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp17 = icmp sgt i64 %7, %sub7
  %cond = select i1 %cmp17, i64 %sub7, i64 %7
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %8 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp19120 = icmp sgt i64 %8, %cond
  br i1 %cmp19120, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = load i32, i32* %dim_j_c, align 4
  %conv25 = sext i32 %9 to i64
  %10 = load i32, i32* %dim_i_c, align 4
  %cmp38118 = icmp sgt i32 %10, 0
  %11 = load i32, i32* %pencil_c, align 4
  %12 = load i32, i32* %plane_c, align 4
  %13 = load i32, i32* %pencil_f, align 4
  %14 = load i32, i32* %plane_f, align 4
  %15 = load double*, double** %grid_f, align 8
  %16 = load double*, double** %grid_c, align 8
  br i1 %cmp38118, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %17 = sext i32 %10 to i64
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %.omp.iv.0121.us = phi i64 [ %add86.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %8, %omp.inner.for.body.us.preheader ]
  %div26.us = sdiv i64 %.omp.iv.0121.us, %conv25
  %conv29.us = trunc i64 %div26.us to i32
  %rem.us = srem i64 %.omp.iv.0121.us, %conv25
  %conv37.us = trunc i64 %rem.us to i32
  %mul40.us = mul nsw i32 %11, %conv37.us
  %mul42.us = mul nsw i32 %12, %conv29.us
  %mul45.us = mul i32 %13, %conv37.us
  %mul48.us = mul i32 %14, %conv29.us
  br label %for.body.us

for.body.us:                                      ; preds = %omp.inner.for.body.us, %for.body.us
  %indvars.iv = phi i64 [ 0, %omp.inner.for.body.us ], [ %indvars.iv.next, %for.body.us ]
  %i.0119.us = phi i32 [ 0, %omp.inner.for.body.us ], [ %inc.us, %for.body.us ]
  %add41.us = add nsw i32 %mul40.us, %i.0119.us
  %add43.us = add nsw i32 %add41.us, %mul42.us
  %18 = trunc i64 %indvars.iv to i32
  %tmp.us = add i32 %mul45.us, %18
  %tmp116.us = add i32 %tmp.us, %mul48.us
  %tmp117.us = shl i32 %tmp116.us, 1
  %idxprom.us = sext i32 %tmp117.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %15, i64 %idxprom.us
  %19 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %add50.us = or i32 %tmp117.us, 1
  %idxprom51.us = sext i32 %add50.us to i64
  %arrayidx52.us = getelementptr inbounds double, double* %15, i64 %idxprom51.us
  %20 = load double, double* %arrayidx52.us, align 8, !tbaa !34
  %add53.us = fadd double %19, %20
  %add54.us = add nsw i32 %tmp117.us, %13
  %idxprom55.us = sext i32 %add54.us to i64
  %arrayidx56.us = getelementptr inbounds double, double* %15, i64 %idxprom55.us
  %21 = load double, double* %arrayidx56.us, align 8, !tbaa !34
  %add57.us = fadd double %add53.us, %21
  %add59.us = add nsw i32 %add50.us, %13
  %idxprom60.us = sext i32 %add59.us to i64
  %arrayidx61.us = getelementptr inbounds double, double* %15, i64 %idxprom60.us
  %22 = load double, double* %arrayidx61.us, align 8, !tbaa !34
  %add62.us = fadd double %add57.us, %22
  %add63.us = add nsw i32 %tmp117.us, %14
  %idxprom64.us = sext i32 %add63.us to i64
  %arrayidx65.us = getelementptr inbounds double, double* %15, i64 %idxprom64.us
  %23 = load double, double* %arrayidx65.us, align 8, !tbaa !34
  %add66.us = fadd double %add62.us, %23
  %add68.us = add nsw i32 %add50.us, %14
  %idxprom69.us = sext i32 %add68.us to i64
  %arrayidx70.us = getelementptr inbounds double, double* %15, i64 %idxprom69.us
  %24 = load double, double* %arrayidx70.us, align 8, !tbaa !34
  %add71.us = fadd double %add66.us, %24
  %add73.us = add nsw i32 %add54.us, %14
  %idxprom74.us = sext i32 %add73.us to i64
  %arrayidx75.us = getelementptr inbounds double, double* %15, i64 %idxprom74.us
  %25 = load double, double* %arrayidx75.us, align 8, !tbaa !34
  %add76.us = fadd double %add71.us, %25
  %add79.us = add nsw i32 %add59.us, %14
  %idxprom80.us = sext i32 %add79.us to i64
  %arrayidx81.us = getelementptr inbounds double, double* %15, i64 %idxprom80.us
  %26 = load double, double* %arrayidx81.us, align 8, !tbaa !34
  %add82.us = fadd double %add76.us, %26
  %mul83.us = fmul double %add82.us, 1.250000e-01
  %idxprom84.us = sext i32 %add43.us to i64
  %arrayidx85.us = getelementptr inbounds double, double* %16, i64 %idxprom84.us
  store double %mul83.us, double* %arrayidx85.us, align 8, !tbaa !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %inc.us = add nuw nsw i32 %i.0119.us, 1
  %cmp38.us = icmp slt i64 %indvars.iv.next, %17
  br i1 %cmp38.us, label %for.body.us, label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %for.body.us
  %add86.us = add nsw i64 %.omp.iv.0121.us, 1
  %cmp19.us = icmp slt i64 %.omp.iv.0121.us, %cond
  br i1 %cmp19.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi129 = phi i8* [ %.pre128, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi127 = phi i8* [ %.pre126, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi125 = phi i8* [ %.pre124, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi125) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi127) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi129) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @restriction_betas(%struct.domain_type* %domain, i32 %level_f, i32 %level_c) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level_f.addr = alloca i32, align 4
  %level_c.addr = alloca i32, align 4
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level_f, i32* %level_f.addr, align 4, !tbaa !35
  store i32 %level_c, i32* %level_c.addr, align 4, !tbaa !35
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level_c to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 4, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*)* @.omp_outlined..19 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level_c.addr, i32* nonnull %level_f.addr, i32* nonnull %omp_within_a_box) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..19(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level_c.addr, i32* nonnull %level_f.addr, i32* nonnull %omp_within_a_box)
  tail call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %5 = load i32, i32* %level_f.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %5 to i64
  %6 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %6, i64 0, i32 0, i32 3, i64 %idxprom12
  %7 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %7
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..19(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level_c, i32* nocapture readonly dereferenceable(4) %level_f, i32* nocapture readonly dereferenceable(4) %omp_within_a_box) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %pencil_c = alloca i32, align 4
  %plane_c = alloca i32, align 4
  %dim_i_c = alloca i32, align 4
  %dim_j_c = alloca i32, align 4
  %dim_k_c = alloca i32, align 4
  %pencil_f = alloca i32, align 4
  %plane_f = alloca i32, align 4
  %beta_f = alloca double*, align 8
  %beta_c = alloca double*, align 8
  %.zero.addr = alloca i32, align 4
  %.zero.addr131 = alloca i32, align 4
  %.zero.addr168 = alloca i32, align 4
  store i32 0, i32* %.zero.addr168, align 4
  store i32 0, i32* %.zero.addr131, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre224 = bitcast i32* %.omp.stride to i8*
  %.pre226 = bitcast i32* %.omp.ub to i8*
  %.pre228 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp6 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp6, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp7222 = icmp sgt i32 %8, %cond
  br i1 %cmp7222, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil_c to i8*
  %10 = bitcast i32* %plane_c to i8*
  %11 = bitcast i32* %dim_i_c to i8*
  %12 = bitcast i32* %dim_j_c to i8*
  %13 = bitcast i32* %dim_k_c to i8*
  %14 = bitcast i32* %pencil_f to i8*
  %15 = bitcast i32* %plane_f to i8*
  %16 = bitcast double** %beta_f to i8*
  %17 = bitcast double** %beta_c to i8*
  %18 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end169, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end169 ], [ %18, %omp.inner.for.body.lr.ph ]
  %19 = load i32, i32* %level_c, align 4, !tbaa !35
  %idxprom = sext i32 %19 to i64
  %20 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %20, i64 0, i32 28
  %21 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %21, i64 %indvars.iv, i32 5
  %22 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %ghosts = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 4
  %23 = load i32, i32* %ghosts, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %pencil = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 5
  %24 = load i32, i32* %pencil, align 8, !tbaa !54
  store i32 %24, i32* %pencil_c, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 6
  %25 = load i32, i32* %plane, align 4, !tbaa !55
  store i32 %25, i32* %plane_c, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %i29 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 2, i32 0
  %26 = load i32, i32* %i29, align 4, !tbaa !43
  store i32 %26, i32* %dim_i_c, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %j37 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 2, i32 1
  %27 = load i32, i32* %j37, align 4, !tbaa !37
  store i32 %27, i32* %dim_j_c, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %k45 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 2, i32 2
  %28 = load i32, i32* %k45, align 4, !tbaa !40
  store i32 %28, i32* %dim_k_c, align 4, !tbaa !35
  %29 = load i32, i32* %level_f, align 4, !tbaa !35
  %idxprom46 = sext i32 %29 to i64
  %ghosts52 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 4
  %30 = load i32, i32* %ghosts52, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %14) #1
  %pencil59 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 5
  %31 = load i32, i32* %pencil59, align 8, !tbaa !54
  store i32 %31, i32* %pencil_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %15) #1
  %plane66 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 6
  %32 = load i32, i32* %plane66, align 4, !tbaa !55
  store i32 %32, i32* %plane_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %16) #1
  call void @llvm.lifetime.start(i64 8, i8* %17) #1
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 10
  %33 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx73 = getelementptr inbounds double*, double** %33, i64 5
  %34 = load double*, double** %arrayidx73, align 8, !tbaa !1
  %mul74 = mul nsw i32 %32, %30
  %idx.ext = sext i32 %mul74 to i64
  %add.ptr = getelementptr inbounds double, double* %34, i64 %idx.ext
  %mul75 = mul nsw i32 %31, %30
  %idx.ext76 = sext i32 %mul75 to i64
  %add.ptr77 = getelementptr inbounds double, double* %add.ptr, i64 %idx.ext76
  %idx.ext78 = sext i32 %30 to i64
  %add.ptr79 = getelementptr inbounds double, double* %add.ptr77, i64 %idx.ext78
  store double* %add.ptr79, double** %beta_f, align 8, !tbaa !1
  %35 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels84 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %35, i64 %indvars.iv, i32 5
  %36 = load %struct.box_type*, %struct.box_type** %levels84, align 8, !tbaa !28
  %grids86 = getelementptr inbounds %struct.box_type, %struct.box_type* %36, i64 %idxprom, i32 10
  %37 = load double**, double*** %grids86, align 8, !tbaa !30
  %arrayidx87 = getelementptr inbounds double*, double** %37, i64 5
  %38 = load double*, double** %arrayidx87, align 8, !tbaa !1
  %mul88 = mul nsw i32 %25, %23
  %idx.ext89 = sext i32 %mul88 to i64
  %add.ptr90 = getelementptr inbounds double, double* %38, i64 %idx.ext89
  %mul91 = mul nsw i32 %24, %23
  %idx.ext92 = sext i32 %mul91 to i64
  %add.ptr93 = getelementptr inbounds double, double* %add.ptr90, i64 %idx.ext92
  %idx.ext94 = sext i32 %23 to i64
  %add.ptr95 = getelementptr inbounds double, double* %add.ptr93, i64 %idx.ext94
  store double* %add.ptr95, double** %beta_c, align 8, !tbaa !1
  %39 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %39, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 9, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**, double**)* @.omp_outlined..20 to void (i32*, i32*, ...)*), i32* nonnull %dim_k_c, i32* nonnull %dim_j_c, i32* nonnull %dim_i_c, i32* nonnull %pencil_c, i32* nonnull %plane_c, i32* nonnull %pencil_f, i32* nonnull %plane_f, double** nonnull %beta_c, double** nonnull %beta_f) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  call void @.omp_outlined..20(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k_c, i32* nonnull %dim_j_c, i32* nonnull %dim_i_c, i32* nonnull %pencil_c, i32* nonnull %plane_c, i32* nonnull %pencil_f, i32* nonnull %plane_f, double** nonnull %beta_c, double** nonnull %beta_f)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %40 = load i32, i32* %level_f, align 4, !tbaa !35
  %idxprom96 = sext i32 %40 to i64
  %41 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains98 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %41, i64 0, i32 28
  %42 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains98, align 8, !tbaa !24
  %levels100 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %42, i64 %indvars.iv, i32 5
  %43 = load %struct.box_type*, %struct.box_type** %levels100, align 8, !tbaa !28
  %grids102 = getelementptr inbounds %struct.box_type, %struct.box_type* %43, i64 %idxprom96, i32 10
  %44 = load double**, double*** %grids102, align 8, !tbaa !30
  %arrayidx103 = getelementptr inbounds double*, double** %44, i64 6
  %45 = load double*, double** %arrayidx103, align 8, !tbaa !1
  %46 = load i32, i32* %plane_f, align 4, !tbaa !35
  %mul104 = mul nsw i32 %46, %30
  %idx.ext105 = sext i32 %mul104 to i64
  %add.ptr106 = getelementptr inbounds double, double* %45, i64 %idx.ext105
  %47 = load i32, i32* %pencil_f, align 4, !tbaa !35
  %mul107 = mul nsw i32 %47, %30
  %idx.ext108 = sext i32 %mul107 to i64
  %add.ptr109 = getelementptr inbounds double, double* %add.ptr106, i64 %idx.ext108
  %add.ptr111 = getelementptr inbounds double, double* %add.ptr109, i64 %idx.ext78
  store double* %add.ptr111, double** %beta_f, align 8, !tbaa !1
  %48 = load i32, i32* %level_c, align 4, !tbaa !35
  %idxprom112 = sext i32 %48 to i64
  %49 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains98, align 8, !tbaa !24
  %levels116 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %49, i64 %indvars.iv, i32 5
  %50 = load %struct.box_type*, %struct.box_type** %levels116, align 8, !tbaa !28
  %grids118 = getelementptr inbounds %struct.box_type, %struct.box_type* %50, i64 %idxprom112, i32 10
  %51 = load double**, double*** %grids118, align 8, !tbaa !30
  %arrayidx119 = getelementptr inbounds double*, double** %51, i64 6
  %52 = load double*, double** %arrayidx119, align 8, !tbaa !1
  %53 = load i32, i32* %plane_c, align 4, !tbaa !35
  %mul120 = mul nsw i32 %53, %23
  %idx.ext121 = sext i32 %mul120 to i64
  %add.ptr122 = getelementptr inbounds double, double* %52, i64 %idx.ext121
  %54 = load i32, i32* %pencil_c, align 4, !tbaa !35
  %mul123 = mul nsw i32 %54, %23
  %idx.ext124 = sext i32 %mul123 to i64
  %add.ptr125 = getelementptr inbounds double, double* %add.ptr122, i64 %idx.ext124
  %add.ptr127 = getelementptr inbounds double, double* %add.ptr125, i64 %idx.ext94
  store double* %add.ptr127, double** %beta_c, align 8, !tbaa !1
  %55 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool128 = icmp eq i32 %55, 0
  br i1 %tobool128, label %omp_if.else130, label %omp_if.then129

omp_if.then129:                                   ; preds = %omp_if.end
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 9, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**, double**)* @.omp_outlined..21 to void (i32*, i32*, ...)*), i32* nonnull %dim_k_c, i32* nonnull %dim_j_c, i32* nonnull %dim_i_c, i32* nonnull %pencil_c, i32* nonnull %plane_c, i32* nonnull %pencil_f, i32* nonnull %plane_f, double** nonnull %beta_c, double** nonnull %beta_f) #1
  br label %omp_if.end132

omp_if.else130:                                   ; preds = %omp_if.end
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  call void @.omp_outlined..21(i32* %.global_tid., i32* nonnull %.zero.addr131, i32* nonnull %dim_k_c, i32* nonnull %dim_j_c, i32* nonnull %dim_i_c, i32* nonnull %pencil_c, i32* nonnull %plane_c, i32* nonnull %pencil_f, i32* nonnull %plane_f, double** nonnull %beta_c, double** nonnull %beta_f)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  br label %omp_if.end132

omp_if.end132:                                    ; preds = %omp_if.else130, %omp_if.then129
  %56 = load i32, i32* %level_f, align 4, !tbaa !35
  %idxprom133 = sext i32 %56 to i64
  %57 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains135 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %57, i64 0, i32 28
  %58 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains135, align 8, !tbaa !24
  %levels137 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %58, i64 %indvars.iv, i32 5
  %59 = load %struct.box_type*, %struct.box_type** %levels137, align 8, !tbaa !28
  %grids139 = getelementptr inbounds %struct.box_type, %struct.box_type* %59, i64 %idxprom133, i32 10
  %60 = load double**, double*** %grids139, align 8, !tbaa !30
  %arrayidx140 = getelementptr inbounds double*, double** %60, i64 7
  %61 = load double*, double** %arrayidx140, align 8, !tbaa !1
  %62 = load i32, i32* %plane_f, align 4, !tbaa !35
  %mul141 = mul nsw i32 %62, %30
  %idx.ext142 = sext i32 %mul141 to i64
  %add.ptr143 = getelementptr inbounds double, double* %61, i64 %idx.ext142
  %63 = load i32, i32* %pencil_f, align 4, !tbaa !35
  %mul144 = mul nsw i32 %63, %30
  %idx.ext145 = sext i32 %mul144 to i64
  %add.ptr146 = getelementptr inbounds double, double* %add.ptr143, i64 %idx.ext145
  %add.ptr148 = getelementptr inbounds double, double* %add.ptr146, i64 %idx.ext78
  store double* %add.ptr148, double** %beta_f, align 8, !tbaa !1
  %64 = load i32, i32* %level_c, align 4, !tbaa !35
  %idxprom149 = sext i32 %64 to i64
  %65 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains135, align 8, !tbaa !24
  %levels153 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %65, i64 %indvars.iv, i32 5
  %66 = load %struct.box_type*, %struct.box_type** %levels153, align 8, !tbaa !28
  %grids155 = getelementptr inbounds %struct.box_type, %struct.box_type* %66, i64 %idxprom149, i32 10
  %67 = load double**, double*** %grids155, align 8, !tbaa !30
  %arrayidx156 = getelementptr inbounds double*, double** %67, i64 7
  %68 = load double*, double** %arrayidx156, align 8, !tbaa !1
  %69 = load i32, i32* %plane_c, align 4, !tbaa !35
  %mul157 = mul nsw i32 %69, %23
  %idx.ext158 = sext i32 %mul157 to i64
  %add.ptr159 = getelementptr inbounds double, double* %68, i64 %idx.ext158
  %70 = load i32, i32* %pencil_c, align 4, !tbaa !35
  %mul160 = mul nsw i32 %70, %23
  %idx.ext161 = sext i32 %mul160 to i64
  %add.ptr162 = getelementptr inbounds double, double* %add.ptr159, i64 %idx.ext161
  %add.ptr164 = getelementptr inbounds double, double* %add.ptr162, i64 %idx.ext94
  store double* %add.ptr164, double** %beta_c, align 8, !tbaa !1
  %71 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool165 = icmp eq i32 %71, 0
  br i1 %tobool165, label %omp_if.else167, label %omp_if.then166

omp_if.then166:                                   ; preds = %omp_if.end132
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 9, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**, double**)* @.omp_outlined..22 to void (i32*, i32*, ...)*), i32* nonnull %dim_k_c, i32* nonnull %dim_j_c, i32* nonnull %dim_i_c, i32* nonnull %pencil_c, i32* nonnull %plane_c, i32* nonnull %pencil_f, i32* nonnull %plane_f, double** nonnull %beta_c, double** nonnull %beta_f) #1
  br label %omp_if.end169

omp_if.else167:                                   ; preds = %omp_if.end132
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  call void @.omp_outlined..22(i32* %.global_tid., i32* nonnull %.zero.addr168, i32* nonnull %dim_k_c, i32* nonnull %dim_j_c, i32* nonnull %dim_i_c, i32* nonnull %pencil_c, i32* nonnull %plane_c, i32* nonnull %pencil_f, i32* nonnull %plane_f, double** nonnull %beta_c, double** nonnull %beta_f)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  br label %omp_if.end169

omp_if.end169:                                    ; preds = %omp_if.else167, %omp_if.then166
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9) #1
  %72 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %73 = sext i32 %72 to i64
  %cmp7 = icmp slt i64 %indvars.iv, %73
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp7, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end169
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi229 = phi i8* [ %.pre228, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi227 = phi i8* [ %.pre226, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi225 = phi i8* [ %.pre224, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi225) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi227) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi229) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..20(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k_c, i32* nocapture readonly dereferenceable(4) %dim_j_c, i32* nocapture readonly dereferenceable(4) %dim_i_c, i32* nocapture readonly dereferenceable(4) %pencil_c, i32* nocapture readonly dereferenceable(4) %plane_c, i32* nocapture readonly dereferenceable(4) %pencil_f, i32* nocapture readonly dereferenceable(4) %plane_f, double** nocapture readonly dereferenceable(8) %beta_c, double** nocapture readonly dereferenceable(8) %beta_f) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k_c, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j_c, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre100 = bitcast i64* %.omp.stride to i8*
  %.pre102 = bitcast i64* %.omp.ub to i8*
  %.pre104 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %7 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp17 = icmp sgt i64 %7, %sub7
  %cond = select i1 %cmp17, i64 %sub7, i64 %7
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %8 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp1996 = icmp sgt i64 %8, %cond
  br i1 %cmp1996, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = load i32, i32* %dim_j_c, align 4
  %conv25 = sext i32 %9 to i64
  %10 = load i32, i32* %dim_i_c, align 4
  %cmp3894 = icmp sgt i32 %10, 0
  %11 = load i32, i32* %pencil_c, align 4
  %12 = load i32, i32* %plane_c, align 4
  %13 = load i32, i32* %pencil_f, align 4
  %14 = load i32, i32* %plane_f, align 4
  %15 = load double*, double** %beta_f, align 8
  %16 = load double*, double** %beta_c, align 8
  br i1 %cmp3894, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %17 = sext i32 %10 to i64
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %.omp.iv.097.us = phi i64 [ %add66.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %8, %omp.inner.for.body.us.preheader ]
  %div26.us = sdiv i64 %.omp.iv.097.us, %conv25
  %conv29.us = trunc i64 %div26.us to i32
  %rem.us = srem i64 %.omp.iv.097.us, %conv25
  %conv37.us = trunc i64 %rem.us to i32
  %mul40.us = mul nsw i32 %11, %conv37.us
  %mul42.us = mul nsw i32 %12, %conv29.us
  %mul45.us = mul i32 %13, %conv37.us
  %mul48.us = mul i32 %14, %conv29.us
  br label %for.body.us

for.body.us:                                      ; preds = %omp.inner.for.body.us, %for.body.us
  %indvars.iv = phi i64 [ 0, %omp.inner.for.body.us ], [ %indvars.iv.next, %for.body.us ]
  %i.095.us = phi i32 [ 0, %omp.inner.for.body.us ], [ %inc.us, %for.body.us ]
  %add41.us = add nsw i32 %mul40.us, %i.095.us
  %add43.us = add nsw i32 %add41.us, %mul42.us
  %18 = trunc i64 %indvars.iv to i32
  %tmp.us = add i32 %mul45.us, %18
  %tmp92.us = add i32 %tmp.us, %mul48.us
  %tmp93.us = shl i32 %tmp92.us, 1
  %idxprom.us = sext i32 %tmp93.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %15, i64 %idxprom.us
  %19 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %add50.us = add nsw i32 %tmp93.us, %13
  %idxprom51.us = sext i32 %add50.us to i64
  %arrayidx52.us = getelementptr inbounds double, double* %15, i64 %idxprom51.us
  %20 = load double, double* %arrayidx52.us, align 8, !tbaa !34
  %add53.us = fadd double %19, %20
  %add54.us = add nsw i32 %tmp93.us, %14
  %idxprom55.us = sext i32 %add54.us to i64
  %arrayidx56.us = getelementptr inbounds double, double* %15, i64 %idxprom55.us
  %21 = load double, double* %arrayidx56.us, align 8, !tbaa !34
  %add57.us = fadd double %add53.us, %21
  %add59.us = add nsw i32 %add50.us, %14
  %idxprom60.us = sext i32 %add59.us to i64
  %arrayidx61.us = getelementptr inbounds double, double* %15, i64 %idxprom60.us
  %22 = load double, double* %arrayidx61.us, align 8, !tbaa !34
  %add62.us = fadd double %add57.us, %22
  %mul63.us = fmul double %add62.us, 2.500000e-01
  %idxprom64.us = sext i32 %add43.us to i64
  %arrayidx65.us = getelementptr inbounds double, double* %16, i64 %idxprom64.us
  store double %mul63.us, double* %arrayidx65.us, align 8, !tbaa !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %inc.us = add nuw nsw i32 %i.095.us, 1
  %cmp38.us = icmp slt i64 %indvars.iv.next, %17
  br i1 %cmp38.us, label %for.body.us, label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %for.body.us
  %add66.us = add nsw i64 %.omp.iv.097.us, 1
  %cmp19.us = icmp slt i64 %.omp.iv.097.us, %cond
  br i1 %cmp19.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi105 = phi i8* [ %.pre104, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi103 = phi i8* [ %.pre102, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi101 = phi i8* [ %.pre100, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi101) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi103) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi105) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..21(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k_c, i32* nocapture readonly dereferenceable(4) %dim_j_c, i32* nocapture readonly dereferenceable(4) %dim_i_c, i32* nocapture readonly dereferenceable(4) %pencil_c, i32* nocapture readonly dereferenceable(4) %plane_c, i32* nocapture readonly dereferenceable(4) %pencil_f, i32* nocapture readonly dereferenceable(4) %plane_f, double** nocapture readonly dereferenceable(8) %beta_c, double** nocapture readonly dereferenceable(8) %beta_f) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k_c, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j_c, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre100 = bitcast i64* %.omp.stride to i8*
  %.pre102 = bitcast i64* %.omp.ub to i8*
  %.pre104 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %7 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp17 = icmp sgt i64 %7, %sub7
  %cond = select i1 %cmp17, i64 %sub7, i64 %7
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %8 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp1996 = icmp sgt i64 %8, %cond
  br i1 %cmp1996, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = load i32, i32* %dim_j_c, align 4
  %conv25 = sext i32 %9 to i64
  %10 = load i32, i32* %dim_i_c, align 4
  %cmp3894 = icmp sgt i32 %10, 0
  %11 = load i32, i32* %pencil_c, align 4
  %12 = load i32, i32* %plane_c, align 4
  %13 = load i32, i32* %pencil_f, align 4
  %14 = load i32, i32* %plane_f, align 4
  %15 = load double*, double** %beta_f, align 8
  %16 = load double*, double** %beta_c, align 8
  br i1 %cmp3894, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %17 = sext i32 %10 to i64
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %.omp.iv.097.us = phi i64 [ %add66.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %8, %omp.inner.for.body.us.preheader ]
  %div26.us = sdiv i64 %.omp.iv.097.us, %conv25
  %conv29.us = trunc i64 %div26.us to i32
  %rem.us = srem i64 %.omp.iv.097.us, %conv25
  %conv37.us = trunc i64 %rem.us to i32
  %mul40.us = mul nsw i32 %11, %conv37.us
  %mul42.us = mul nsw i32 %12, %conv29.us
  %mul45.us = mul i32 %13, %conv37.us
  %mul48.us = mul i32 %14, %conv29.us
  br label %for.body.us

for.body.us:                                      ; preds = %omp.inner.for.body.us, %for.body.us
  %indvars.iv = phi i64 [ 0, %omp.inner.for.body.us ], [ %indvars.iv.next, %for.body.us ]
  %i.095.us = phi i32 [ 0, %omp.inner.for.body.us ], [ %inc.us, %for.body.us ]
  %add41.us = add nsw i32 %mul40.us, %i.095.us
  %add43.us = add nsw i32 %add41.us, %mul42.us
  %18 = trunc i64 %indvars.iv to i32
  %tmp.us = add i32 %mul45.us, %18
  %tmp92.us = add i32 %tmp.us, %mul48.us
  %tmp93.us = shl i32 %tmp92.us, 1
  %idxprom.us = sext i32 %tmp93.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %15, i64 %idxprom.us
  %19 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %add50.us = or i32 %tmp93.us, 1
  %idxprom51.us = sext i32 %add50.us to i64
  %arrayidx52.us = getelementptr inbounds double, double* %15, i64 %idxprom51.us
  %20 = load double, double* %arrayidx52.us, align 8, !tbaa !34
  %add53.us = fadd double %19, %20
  %add54.us = add nsw i32 %tmp93.us, %14
  %idxprom55.us = sext i32 %add54.us to i64
  %arrayidx56.us = getelementptr inbounds double, double* %15, i64 %idxprom55.us
  %21 = load double, double* %arrayidx56.us, align 8, !tbaa !34
  %add57.us = fadd double %add53.us, %21
  %add59.us = add nsw i32 %add50.us, %14
  %idxprom60.us = sext i32 %add59.us to i64
  %arrayidx61.us = getelementptr inbounds double, double* %15, i64 %idxprom60.us
  %22 = load double, double* %arrayidx61.us, align 8, !tbaa !34
  %add62.us = fadd double %add57.us, %22
  %mul63.us = fmul double %add62.us, 2.500000e-01
  %idxprom64.us = sext i32 %add43.us to i64
  %arrayidx65.us = getelementptr inbounds double, double* %16, i64 %idxprom64.us
  store double %mul63.us, double* %arrayidx65.us, align 8, !tbaa !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %inc.us = add nuw nsw i32 %i.095.us, 1
  %cmp38.us = icmp slt i64 %indvars.iv.next, %17
  br i1 %cmp38.us, label %for.body.us, label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %for.body.us
  %add66.us = add nsw i64 %.omp.iv.097.us, 1
  %cmp19.us = icmp slt i64 %.omp.iv.097.us, %cond
  br i1 %cmp19.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi105 = phi i8* [ %.pre104, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi103 = phi i8* [ %.pre102, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi101 = phi i8* [ %.pre100, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi101) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi103) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi105) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..22(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k_c, i32* nocapture readonly dereferenceable(4) %dim_j_c, i32* nocapture readonly dereferenceable(4) %dim_i_c, i32* nocapture readonly dereferenceable(4) %pencil_c, i32* nocapture readonly dereferenceable(4) %plane_c, i32* nocapture readonly dereferenceable(4) %pencil_f, i32* nocapture readonly dereferenceable(4) %plane_f, double** nocapture readonly dereferenceable(8) %beta_c, double** nocapture readonly dereferenceable(8) %beta_f) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k_c, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j_c, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre100 = bitcast i64* %.omp.stride to i8*
  %.pre102 = bitcast i64* %.omp.ub to i8*
  %.pre104 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %7 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp17 = icmp sgt i64 %7, %sub7
  %cond = select i1 %cmp17, i64 %sub7, i64 %7
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %8 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp1996 = icmp sgt i64 %8, %cond
  br i1 %cmp1996, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = load i32, i32* %dim_j_c, align 4
  %conv25 = sext i32 %9 to i64
  %10 = load i32, i32* %dim_i_c, align 4
  %cmp3894 = icmp sgt i32 %10, 0
  %11 = load i32, i32* %pencil_c, align 4
  %12 = load i32, i32* %plane_c, align 4
  %13 = load i32, i32* %pencil_f, align 4
  %14 = load i32, i32* %plane_f, align 4
  %15 = load double*, double** %beta_f, align 8
  %16 = load double*, double** %beta_c, align 8
  br i1 %cmp3894, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %17 = sext i32 %10 to i64
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %.omp.iv.097.us = phi i64 [ %add66.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %8, %omp.inner.for.body.us.preheader ]
  %div26.us = sdiv i64 %.omp.iv.097.us, %conv25
  %conv29.us = trunc i64 %div26.us to i32
  %rem.us = srem i64 %.omp.iv.097.us, %conv25
  %conv37.us = trunc i64 %rem.us to i32
  %mul40.us = mul nsw i32 %11, %conv37.us
  %mul42.us = mul nsw i32 %12, %conv29.us
  %mul45.us = mul i32 %13, %conv37.us
  %mul48.us = mul i32 %14, %conv29.us
  br label %for.body.us

for.body.us:                                      ; preds = %omp.inner.for.body.us, %for.body.us
  %indvars.iv = phi i64 [ 0, %omp.inner.for.body.us ], [ %indvars.iv.next, %for.body.us ]
  %i.095.us = phi i32 [ 0, %omp.inner.for.body.us ], [ %inc.us, %for.body.us ]
  %add41.us = add nsw i32 %mul40.us, %i.095.us
  %add43.us = add nsw i32 %add41.us, %mul42.us
  %18 = trunc i64 %indvars.iv to i32
  %tmp.us = add i32 %mul45.us, %18
  %tmp92.us = add i32 %tmp.us, %mul48.us
  %tmp93.us = shl i32 %tmp92.us, 1
  %idxprom.us = sext i32 %tmp93.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %15, i64 %idxprom.us
  %19 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %add50.us = or i32 %tmp93.us, 1
  %idxprom51.us = sext i32 %add50.us to i64
  %arrayidx52.us = getelementptr inbounds double, double* %15, i64 %idxprom51.us
  %20 = load double, double* %arrayidx52.us, align 8, !tbaa !34
  %add53.us = fadd double %19, %20
  %add54.us = add nsw i32 %tmp93.us, %13
  %idxprom55.us = sext i32 %add54.us to i64
  %arrayidx56.us = getelementptr inbounds double, double* %15, i64 %idxprom55.us
  %21 = load double, double* %arrayidx56.us, align 8, !tbaa !34
  %add57.us = fadd double %add53.us, %21
  %add59.us = add nsw i32 %add50.us, %13
  %idxprom60.us = sext i32 %add59.us to i64
  %arrayidx61.us = getelementptr inbounds double, double* %15, i64 %idxprom60.us
  %22 = load double, double* %arrayidx61.us, align 8, !tbaa !34
  %add62.us = fadd double %add57.us, %22
  %mul63.us = fmul double %add62.us, 2.500000e-01
  %idxprom64.us = sext i32 %add43.us to i64
  %arrayidx65.us = getelementptr inbounds double, double* %16, i64 %idxprom64.us
  store double %mul63.us, double* %arrayidx65.us, align 8, !tbaa !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %inc.us = add nuw nsw i32 %i.095.us, 1
  %cmp38.us = icmp slt i64 %indvars.iv.next, %17
  br i1 %cmp38.us, label %for.body.us, label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %for.body.us
  %add66.us = add nsw i64 %.omp.iv.097.us, 1
  %cmp19.us = icmp slt i64 %.omp.iv.097.us, %cond
  br i1 %cmp19.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi105 = phi i8* [ %.pre104, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi103 = phi i8* [ %.pre102, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi101 = phi i8* [ %.pre100, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi101) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi103) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi105) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @interpolation_constant(%struct.domain_type* %domain, i32 %level_f, double %prescale_f, i32 %id_f, i32 %id_c) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level_f.addr = alloca i32, align 4
  %prescale_f.addr = alloca double, align 8
  %id_f.addr = alloca i32, align 4
  %id_c.addr = alloca i32, align 4
  %level_c = alloca i32, align 4
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level_f, i32* %level_f.addr, align 4, !tbaa !35
  store double %prescale_f, double* %prescale_f.addr, align 8, !tbaa !34
  store i32 %id_f, i32* %id_f.addr, align 4, !tbaa !35
  store i32 %id_c, i32* %id_c.addr, align 4, !tbaa !35
  %1 = bitcast i32* %level_c to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  %add = add nsw i32 %level_f, 1
  store i32 %add, i32* %level_c, align 4, !tbaa !35
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level_f to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %2 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %2, i64 0, i32 5
  %3 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %3, i64 %idxprom, i32 2, i32 0
  %4 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %4, 64
  %5 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  %cmp9 = icmp sgt i32 %4, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 7, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, i32*, double*)* @.omp_outlined..23 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level_c, i32* nonnull %level_f.addr, i32* nonnull %id_f.addr, i32* nonnull %id_c.addr, i32* nonnull %omp_within_a_box, double* nonnull %prescale_f.addr) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..23(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level_c, i32* nonnull %level_f.addr, i32* nonnull %id_f.addr, i32* nonnull %id_c.addr, i32* nonnull %omp_within_a_box, double* nonnull %prescale_f.addr)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %6 = load i32, i32* %level_f.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %6 to i64
  %7 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %7, i64 0, i32 0, i32 4, i64 %idxprom12
  %8 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add14 = add i64 %sub, %8
  store i64 %add14, i64* %arrayidx13, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 4, i8* %5) #1
  call void @llvm.lifetime.end(i64 4, i8* %1) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..23(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level_c, i32* nocapture readonly dereferenceable(4) %level_f, i32* nocapture readonly dereferenceable(4) %id_f, i32* nocapture readonly dereferenceable(4) %id_c, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double* dereferenceable(8) %prescale_f) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %pencil_c = alloca i32, align 4
  %plane_c = alloca i32, align 4
  %pencil_f = alloca i32, align 4
  %plane_f = alloca i32, align 4
  %dim_i_f = alloca i32, align 4
  %dim_j_f = alloca i32, align 4
  %dim_k_f = alloca i32, align 4
  %grid_f = alloca double*, align 8
  %grid_c = alloca double*, align 8
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre122 = bitcast i32* %.omp.stride to i8*
  %.pre124 = bitcast i32* %.omp.ub to i8*
  %.pre126 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp6 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp6, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp7120 = icmp sgt i32 %8, %cond
  br i1 %cmp7120, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil_c to i8*
  %10 = bitcast i32* %plane_c to i8*
  %11 = bitcast i32* %pencil_f to i8*
  %12 = bitcast i32* %plane_f to i8*
  %13 = bitcast i32* %dim_i_f to i8*
  %14 = bitcast i32* %dim_j_f to i8*
  %15 = bitcast i32* %dim_k_f to i8*
  %16 = bitcast double** %grid_f to i8*
  %17 = bitcast double** %grid_c to i8*
  %18 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %18, %omp.inner.for.body.lr.ph ]
  %19 = load i32, i32* %level_c, align 4, !tbaa !35
  %idxprom = sext i32 %19 to i64
  %20 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %20, i64 0, i32 28
  %21 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %21, i64 %indvars.iv, i32 5
  %22 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %ghosts = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 4
  %23 = load i32, i32* %ghosts, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %pencil = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 5
  %24 = load i32, i32* %pencil, align 8, !tbaa !54
  store i32 %24, i32* %pencil_c, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 6
  %25 = load i32, i32* %plane, align 4, !tbaa !55
  store i32 %25, i32* %plane_c, align 4, !tbaa !35
  %26 = load i32, i32* %level_f, align 4, !tbaa !35
  %idxprom23 = sext i32 %26 to i64
  %ghosts29 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom23, i32 4
  %27 = load i32, i32* %ghosts29, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %pencil36 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom23, i32 5
  %28 = load i32, i32* %pencil36, align 8, !tbaa !54
  store i32 %28, i32* %pencil_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %plane43 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom23, i32 6
  %29 = load i32, i32* %plane43, align 4, !tbaa !55
  store i32 %29, i32* %plane_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %i50 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom23, i32 2, i32 0
  %30 = load i32, i32* %i50, align 4, !tbaa !43
  store i32 %30, i32* %dim_i_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %14) #1
  %j58 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom23, i32 2, i32 1
  %31 = load i32, i32* %j58, align 4, !tbaa !37
  store i32 %31, i32* %dim_j_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %15) #1
  %k66 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom23, i32 2, i32 2
  %32 = load i32, i32* %k66, align 4, !tbaa !40
  store i32 %32, i32* %dim_k_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %16) #1
  %33 = load i32, i32* %id_f, align 4, !tbaa !35
  %idxprom67 = sext i32 %33 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom23, i32 10
  %34 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx74 = getelementptr inbounds double*, double** %34, i64 %idxprom67
  %35 = load double*, double** %arrayidx74, align 8, !tbaa !1
  %add75 = add nsw i32 %28, 1
  %add76 = add nsw i32 %add75, %29
  %mul77 = mul nsw i32 %add76, %27
  %idx.ext = sext i32 %mul77 to i64
  %add.ptr = getelementptr inbounds double, double* %35, i64 %idx.ext
  store double* %add.ptr, double** %grid_f, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %17) #1
  %36 = load i32, i32* %id_c, align 4, !tbaa !35
  %idxprom78 = sext i32 %36 to i64
  %37 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels83 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %37, i64 %indvars.iv, i32 5
  %38 = load %struct.box_type*, %struct.box_type** %levels83, align 8, !tbaa !28
  %grids85 = getelementptr inbounds %struct.box_type, %struct.box_type* %38, i64 %idxprom, i32 10
  %39 = load double**, double*** %grids85, align 8, !tbaa !30
  %arrayidx86 = getelementptr inbounds double*, double** %39, i64 %idxprom78
  %40 = load double*, double** %arrayidx86, align 8, !tbaa !1
  %add87 = add nsw i32 %24, 1
  %add88 = add nsw i32 %add87, %25
  %mul89 = mul nsw i32 %add88, %23
  %idx.ext90 = sext i32 %mul89 to i64
  %add.ptr91 = getelementptr inbounds double, double* %40, i64 %idx.ext90
  store double* %add.ptr91, double** %grid_c, align 8, !tbaa !1
  %41 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %41, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 10, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**, double*, double**)* @.omp_outlined..24 to void (i32*, i32*, ...)*), i32* nonnull %dim_k_f, i32* nonnull %dim_j_f, i32* nonnull %dim_i_f, i32* nonnull %pencil_f, i32* nonnull %plane_f, i32* nonnull %pencil_c, i32* nonnull %plane_c, double** nonnull %grid_f, double* nonnull %prescale_f, double** nonnull %grid_c) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  call void @.omp_outlined..24(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k_f, i32* nonnull %dim_j_f, i32* nonnull %dim_i_f, i32* nonnull %pencil_f, i32* nonnull %plane_f, i32* nonnull %pencil_c, i32* nonnull %plane_c, double** nonnull %grid_f, double* nonnull %prescale_f, double** nonnull %grid_c)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9) #1
  %42 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %43 = sext i32 %42 to i64
  %cmp7 = icmp slt i64 %indvars.iv, %43
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp7, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi127 = phi i8* [ %.pre126, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi125 = phi i8* [ %.pre124, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi123 = phi i8* [ %.pre122, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi123) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi125) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi127) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..24(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k_f, i32* nocapture readonly dereferenceable(4) %dim_j_f, i32* nocapture readonly dereferenceable(4) %dim_i_f, i32* nocapture readonly dereferenceable(4) %pencil_f, i32* nocapture readonly dereferenceable(4) %plane_f, i32* nocapture readonly dereferenceable(4) %pencil_c, i32* nocapture readonly dereferenceable(4) %plane_c, double** nocapture readonly dereferenceable(8) %grid_f, double* nocapture readonly dereferenceable(8) %prescale_f, double** nocapture readonly dereferenceable(8) %grid_c) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k_f, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j_f, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre86 = bitcast i64* %.omp.stride to i8*
  %.pre88 = bitcast i64* %.omp.ub to i8*
  %.pre90 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %7 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp17 = icmp sgt i64 %7, %sub7
  %cond = select i1 %cmp17, i64 %sub7, i64 %7
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %8 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp1982 = icmp sgt i64 %8, %cond
  br i1 %cmp1982, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = load i32, i32* %dim_j_f, align 4
  %conv25 = sext i32 %9 to i64
  %10 = load i32, i32* %dim_i_f, align 4
  %cmp3880 = icmp sgt i32 %10, 0
  %11 = load i32, i32* %pencil_f, align 4
  %12 = load i32, i32* %plane_f, align 4
  %13 = load i32, i32* %pencil_c, align 4
  %14 = load i32, i32* %plane_c, align 4
  %15 = load double*, double** %grid_f, align 8
  %16 = load double*, double** %grid_c, align 8
  br i1 %cmp3880, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %17 = sext i32 %10 to i64
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %.omp.iv.083.us = phi i64 [ %add56.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %8, %omp.inner.for.body.us.preheader ]
  %div26.us = sdiv i64 %.omp.iv.083.us, %conv25
  %conv29.us = trunc i64 %div26.us to i32
  %rem.us = srem i64 %.omp.iv.083.us, %conv25
  %conv37.us = trunc i64 %rem.us to i32
  %mul40.us = mul nsw i32 %11, %conv37.us
  %mul42.us = mul nsw i32 %12, %conv29.us
  %shr44.us = ashr i32 %conv37.us, 1
  %mul45.us = mul nsw i32 %13, %shr44.us
  %shr47.us = ashr i32 %conv29.us, 1
  %mul48.us = mul nsw i32 %14, %shr47.us
  br label %for.body.us

for.body.us:                                      ; preds = %omp.inner.for.body.us, %for.body.us
  %indvars.iv = phi i64 [ 0, %omp.inner.for.body.us ], [ %indvars.iv.next, %for.body.us ]
  %i.081.us = phi i32 [ 0, %omp.inner.for.body.us ], [ %inc.us, %for.body.us ]
  %add41.us = add nsw i32 %mul40.us, %i.081.us
  %add43.us = add nsw i32 %add41.us, %mul42.us
  %18 = trunc i64 %indvars.iv to i32
  %shr.us = ashr i32 %18, 1
  %add46.us = add nsw i32 %mul45.us, %shr.us
  %add49.us = add nsw i32 %add46.us, %mul48.us
  %19 = load double, double* %prescale_f, align 8, !tbaa !34
  %idxprom.us = sext i32 %add43.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %15, i64 %idxprom.us
  %20 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %mul50.us = fmul double %19, %20
  %idxprom51.us = sext i32 %add49.us to i64
  %arrayidx52.us = getelementptr inbounds double, double* %16, i64 %idxprom51.us
  %21 = load double, double* %arrayidx52.us, align 8, !tbaa !34
  %add53.us = fadd double %mul50.us, %21
  store double %add53.us, double* %arrayidx.us, align 8, !tbaa !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %inc.us = add nuw nsw i32 %i.081.us, 1
  %cmp38.us = icmp slt i64 %indvars.iv.next, %17
  br i1 %cmp38.us, label %for.body.us, label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %for.body.us
  %add56.us = add nsw i64 %.omp.iv.083.us, 1
  %cmp19.us = icmp slt i64 %.omp.iv.083.us, %cond
  br i1 %cmp19.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi91 = phi i8* [ %.pre90, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi89 = phi i8* [ %.pre88, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi87 = phi i8* [ %.pre86, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi87) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi89) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi91) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @interpolation_linear(%struct.domain_type* %domain, i32 %level_f, double %prescale_f, i32 %id_f, i32 %id_c) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level_f.addr = alloca i32, align 4
  %prescale_f.addr = alloca double, align 8
  %id_f.addr = alloca i32, align 4
  %id_c.addr = alloca i32, align 4
  %level_c = alloca i32, align 4
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level_f, i32* %level_f.addr, align 4, !tbaa !35
  store double %prescale_f, double* %prescale_f.addr, align 8, !tbaa !34
  store i32 %id_f, i32* %id_f.addr, align 4, !tbaa !35
  store i32 %id_c, i32* %id_c.addr, align 4, !tbaa !35
  %1 = bitcast i32* %level_c to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  %add = add nsw i32 %level_f, 1
  store i32 %add, i32* %level_c, align 4, !tbaa !35
  tail call void @exchange_boundary(%struct.domain_type* %domain, i32 %add, i32 %id_c, i32 1, i32 1, i32 1)
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level_f to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %2 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %2, i64 0, i32 5
  %3 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %3, i64 %idxprom, i32 2, i32 0
  %4 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %4, 64
  %5 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  %cmp9 = icmp sgt i32 %4, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 7, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, i32*, double*)* @.omp_outlined..25 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level_c, i32* nonnull %level_f.addr, i32* nonnull %id_f.addr, i32* nonnull %id_c.addr, i32* nonnull %omp_within_a_box, double* nonnull %prescale_f.addr) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..25(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level_c, i32* nonnull %level_f.addr, i32* nonnull %id_f.addr, i32* nonnull %id_c.addr, i32* nonnull %omp_within_a_box, double* nonnull %prescale_f.addr)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %6 = load i32, i32* %level_f.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %6 to i64
  %7 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %7, i64 0, i32 0, i32 4, i64 %idxprom12
  %8 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add14 = add i64 %sub, %8
  store i64 %add14, i64* %arrayidx13, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 4, i8* %5) #1
  call void @llvm.lifetime.end(i64 4, i8* %1) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..25(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level_c, i32* nocapture readonly dereferenceable(4) %level_f, i32* nocapture readonly dereferenceable(4) %id_f, i32* nocapture readonly dereferenceable(4) %id_c, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double* dereferenceable(8) %prescale_f) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %pencil_c = alloca i32, align 4
  %plane_c = alloca i32, align 4
  %pencil_f = alloca i32, align 4
  %plane_f = alloca i32, align 4
  %dim_i_f = alloca i32, align 4
  %dim_j_f = alloca i32, align 4
  %dim_k_f = alloca i32, align 4
  %grid_f = alloca double*, align 8
  %grid_c = alloca double*, align 8
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre152 = bitcast i32* %.omp.stride to i8*
  %.pre154 = bitcast i32* %.omp.ub to i8*
  %.pre156 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp6 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp6, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp7150 = icmp sgt i32 %8, %cond
  br i1 %cmp7150, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil_c to i8*
  %10 = bitcast i32* %plane_c to i8*
  %11 = bitcast i32* %pencil_f to i8*
  %12 = bitcast i32* %plane_f to i8*
  %13 = bitcast i32* %dim_i_f to i8*
  %14 = bitcast i32* %dim_j_f to i8*
  %15 = bitcast i32* %dim_k_f to i8*
  %16 = bitcast double** %grid_f to i8*
  %17 = bitcast double** %grid_c to i8*
  %18 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %18, %omp.inner.for.body.lr.ph ]
  %19 = load i32, i32* %level_c, align 4, !tbaa !35
  %idxprom = sext i32 %19 to i64
  %20 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %20, i64 0, i32 28
  %21 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %21, i64 %indvars.iv, i32 5
  %22 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %ghosts = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 4
  %23 = load i32, i32* %ghosts, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %pencil = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 5
  %24 = load i32, i32* %pencil, align 8, !tbaa !54
  store i32 %24, i32* %pencil_c, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 6
  %25 = load i32, i32* %plane, align 4, !tbaa !55
  store i32 %25, i32* %plane_c, align 4, !tbaa !35
  %26 = load i32, i32* %level_f, align 4, !tbaa !35
  %idxprom46 = sext i32 %26 to i64
  %ghosts52 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 4
  %27 = load i32, i32* %ghosts52, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %pencil59 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 5
  %28 = load i32, i32* %pencil59, align 8, !tbaa !54
  store i32 %28, i32* %pencil_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %plane66 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 6
  %29 = load i32, i32* %plane66, align 4, !tbaa !55
  store i32 %29, i32* %plane_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %i74 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 2, i32 0
  %30 = load i32, i32* %i74, align 4, !tbaa !43
  store i32 %30, i32* %dim_i_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %14) #1
  %j82 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 2, i32 1
  %31 = load i32, i32* %j82, align 4, !tbaa !37
  store i32 %31, i32* %dim_j_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %15) #1
  %k90 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 2, i32 2
  %32 = load i32, i32* %k90, align 4, !tbaa !40
  store i32 %32, i32* %dim_k_f, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %16) #1
  %33 = load i32, i32* %id_f, align 4, !tbaa !35
  %idxprom91 = sext i32 %33 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom46, i32 10
  %34 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx98 = getelementptr inbounds double*, double** %34, i64 %idxprom91
  %35 = load double*, double** %arrayidx98, align 8, !tbaa !1
  %add99 = add nsw i32 %28, 1
  %add100 = add nsw i32 %add99, %29
  %mul101 = mul nsw i32 %add100, %27
  %idx.ext = sext i32 %mul101 to i64
  %add.ptr = getelementptr inbounds double, double* %35, i64 %idx.ext
  store double* %add.ptr, double** %grid_f, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %17) #1
  %36 = load i32, i32* %id_c, align 4, !tbaa !35
  %idxprom102 = sext i32 %36 to i64
  %37 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels107 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %37, i64 %indvars.iv, i32 5
  %38 = load %struct.box_type*, %struct.box_type** %levels107, align 8, !tbaa !28
  %grids109 = getelementptr inbounds %struct.box_type, %struct.box_type* %38, i64 %idxprom, i32 10
  %39 = load double**, double*** %grids109, align 8, !tbaa !30
  %arrayidx110 = getelementptr inbounds double*, double** %39, i64 %idxprom102
  %40 = load double*, double** %arrayidx110, align 8, !tbaa !1
  %add111 = add nsw i32 %24, 1
  %add112 = add nsw i32 %add111, %25
  %mul113 = mul nsw i32 %add112, %23
  %idx.ext114 = sext i32 %mul113 to i64
  %add.ptr115 = getelementptr inbounds double, double* %40, i64 %idx.ext114
  store double* %add.ptr115, double** %grid_c, align 8, !tbaa !1
  %41 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %41, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 10, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**, double*, double**)* @.omp_outlined..26 to void (i32*, i32*, ...)*), i32* nonnull %dim_k_f, i32* nonnull %dim_j_f, i32* nonnull %dim_i_f, i32* nonnull %pencil_f, i32* nonnull %plane_f, i32* nonnull %pencil_c, i32* nonnull %plane_c, double** nonnull %grid_f, double* nonnull %prescale_f, double** nonnull %grid_c) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  call void @.omp_outlined..26(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k_f, i32* nonnull %dim_j_f, i32* nonnull %dim_i_f, i32* nonnull %pencil_f, i32* nonnull %plane_f, i32* nonnull %pencil_c, i32* nonnull %plane_c, double** nonnull %grid_f, double* nonnull %prescale_f, double** nonnull %grid_c)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9) #1
  %42 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %43 = sext i32 %42 to i64
  %cmp7 = icmp slt i64 %indvars.iv, %43
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp7, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi157 = phi i8* [ %.pre156, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi155 = phi i8* [ %.pre154, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi153 = phi i8* [ %.pre152, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi153) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi155) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi157) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..26(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k_f, i32* nocapture readonly dereferenceable(4) %dim_j_f, i32* nocapture readonly dereferenceable(4) %dim_i_f, i32* nocapture readonly dereferenceable(4) %pencil_f, i32* nocapture readonly dereferenceable(4) %plane_f, i32* nocapture readonly dereferenceable(4) %pencil_c, i32* nocapture readonly dereferenceable(4) %plane_c, double** nocapture readonly dereferenceable(8) %grid_f, double* nocapture readonly dereferenceable(8) %prescale_f, double** nocapture readonly dereferenceable(8) %grid_c) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k_f, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j_f, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre419 = bitcast i32* %.omp.is_last to i8*
  %.pre420 = bitcast i64* %.omp.stride to i8*
  %.pre422 = bitcast i64* %.omp.ub to i8*
  %.pre424 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %7 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp17 = icmp sgt i64 %7, %sub7
  %cond = select i1 %cmp17, i64 %sub7, i64 %7
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %8 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp19416 = icmp sgt i64 %8, %cond
  br i1 %cmp19416, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = load i32, i32* %dim_j_f, align 4
  %conv25 = sext i32 %9 to i64
  %10 = load i32, i32* %dim_i_f, align 4
  %cmp38414 = icmp sgt i32 %10, 0
  %11 = load i32, i32* %pencil_f, align 4
  %12 = load i32, i32* %plane_f, align 4
  %13 = load i32, i32* %pencil_c, align 4
  %14 = load i32, i32* %plane_c, align 4
  %15 = load double*, double** %grid_f, align 8
  %16 = load double*, double** %grid_c, align 8
  %17 = sext i32 %10 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.inc, %omp.inner.for.body.lr.ph
  %.omp.iv.0417 = phi i64 [ %8, %omp.inner.for.body.lr.ph ], [ %add277, %omp.inner.for.inc ]
  %div26 = sdiv i64 %.omp.iv.0417, %conv25
  %conv29 = trunc i64 %div26 to i32
  %rem = srem i64 %.omp.iv.0417, %conv25
  %conv37 = trunc i64 %rem to i32
  br i1 %cmp38414, label %for.body.lr.ph, label %omp.inner.for.inc

for.body.lr.ph:                                   ; preds = %omp.inner.for.body
  %mul40 = mul nsw i32 %11, %conv37
  %mul42 = mul nsw i32 %12, %conv29
  %shr44 = ashr i32 %conv37, 1
  %mul45 = mul nsw i32 %13, %shr44
  %shr47 = ashr i32 %conv29, 1
  %mul48 = mul nsw i32 %14, %shr47
  %and50 = and i32 %conv37, 1
  %tobool51 = icmp eq i32 %and50, 0
  %ym.0 = select i1 %tobool51, double 1.562500e-01, double -9.375000e-02
  %yp.0 = select i1 %tobool51, double -9.375000e-02, double 1.562500e-01
  %and54 = and i32 %conv29, 1
  %tobool55 = icmp eq i32 %and54, 0
  %.412 = select i1 %tobool55, double 1.562500e-01, double -9.375000e-02
  %.413 = select i1 %tobool55, double -9.375000e-02, double 1.562500e-01
  %mul59 = fmul double %.412, %ym.0
  %mul69 = fmul double %mul59, 9.375000e-01
  %mul85 = fmul double %.412, 9.375000e-01
  %mul94 = fmul double %mul85, 9.375000e-01
  %mul108 = fmul double %.412, %yp.0
  %mul118 = fmul double %mul108, 9.375000e-01
  %mul134 = fmul double %ym.0, 9.375000e-01
  %mul143 = fmul double %mul134, 9.375000e-01
  %mul177 = fmul double %yp.0, 9.375000e-01
  %mul186 = fmul double %mul177, 9.375000e-01
  %mul200 = fmul double %.413, %ym.0
  %mul210 = fmul double %mul200, 9.375000e-01
  %mul226 = fmul double %.413, 9.375000e-01
  %mul235 = fmul double %mul226, 9.375000e-01
  %mul249 = fmul double %.413, %yp.0
  %mul259 = fmul double %mul249, 9.375000e-01
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %i.0415 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %add41 = add nsw i32 %mul40, %i.0415
  %add43 = add nsw i32 %add41, %mul42
  %18 = trunc i64 %indvars.iv to i32
  %shr = ashr i32 %18, 1
  %add46 = add nsw i32 %mul45, %shr
  %add49 = add nsw i32 %add46, %mul48
  %and = and i32 %18, 1
  %tobool = icmp eq i32 %and, 0
  %. = select i1 %tobool, double 1.562500e-01, double -9.375000e-02
  %.411 = select i1 %tobool, double -9.375000e-02, double 1.562500e-01
  %19 = load double, double* %prescale_f, align 8, !tbaa !34
  %idxprom = sext i32 %add43 to i64
  %arrayidx = getelementptr inbounds double, double* %15, i64 %idxprom
  %20 = load double, double* %arrayidx, align 8, !tbaa !34
  %mul58 = fmul double %19, %20
  %mul60 = fmul double %mul59, %.
  %sub61 = add nsw i32 %add49, -1
  %sub62 = sub nsw i32 %sub61, %13
  %sub63 = sub nsw i32 %sub62, %14
  %idxprom64 = sext i32 %sub63 to i64
  %arrayidx65 = getelementptr inbounds double, double* %16, i64 %idxprom64
  %21 = load double, double* %arrayidx65, align 8, !tbaa !34
  %mul66 = fmul double %mul60, %21
  %add67 = fadd double %mul58, %mul66
  %sub70 = sub nsw i32 %add49, %13
  %sub71 = sub nsw i32 %sub70, %14
  %idxprom72 = sext i32 %sub71 to i64
  %arrayidx73 = getelementptr inbounds double, double* %16, i64 %idxprom72
  %22 = load double, double* %arrayidx73, align 8, !tbaa !34
  %mul74 = fmul double %mul69, %22
  %add75 = fadd double %add67, %mul74
  %mul77 = fmul double %mul59, %.411
  %add78 = add nsw i32 %add49, 1
  %sub79 = sub nsw i32 %add78, %13
  %sub80 = sub nsw i32 %sub79, %14
  %idxprom81 = sext i32 %sub80 to i64
  %arrayidx82 = getelementptr inbounds double, double* %16, i64 %idxprom81
  %23 = load double, double* %arrayidx82, align 8, !tbaa !34
  %mul83 = fmul double %mul77, %23
  %add84 = fadd double %add75, %mul83
  %mul86 = fmul double %mul85, %.
  %sub88 = sub nsw i32 %sub61, %14
  %idxprom89 = sext i32 %sub88 to i64
  %arrayidx90 = getelementptr inbounds double, double* %16, i64 %idxprom89
  %24 = load double, double* %arrayidx90, align 8, !tbaa !34
  %mul91 = fmul double %mul86, %24
  %add92 = fadd double %add84, %mul91
  %sub95 = sub nsw i32 %add49, %14
  %idxprom96 = sext i32 %sub95 to i64
  %arrayidx97 = getelementptr inbounds double, double* %16, i64 %idxprom96
  %25 = load double, double* %arrayidx97, align 8, !tbaa !34
  %mul98 = fmul double %mul94, %25
  %add99 = fadd double %add92, %mul98
  %mul101 = fmul double %mul85, %.411
  %sub103 = sub nsw i32 %add78, %14
  %idxprom104 = sext i32 %sub103 to i64
  %arrayidx105 = getelementptr inbounds double, double* %16, i64 %idxprom104
  %26 = load double, double* %arrayidx105, align 8, !tbaa !34
  %mul106 = fmul double %mul101, %26
  %add107 = fadd double %add99, %mul106
  %mul109 = fmul double %mul108, %.
  %add111 = add nsw i32 %sub61, %13
  %sub112 = sub nsw i32 %add111, %14
  %idxprom113 = sext i32 %sub112 to i64
  %arrayidx114 = getelementptr inbounds double, double* %16, i64 %idxprom113
  %27 = load double, double* %arrayidx114, align 8, !tbaa !34
  %mul115 = fmul double %mul109, %27
  %add116 = fadd double %add107, %mul115
  %add119 = add nsw i32 %add49, %13
  %sub120 = sub nsw i32 %add119, %14
  %idxprom121 = sext i32 %sub120 to i64
  %arrayidx122 = getelementptr inbounds double, double* %16, i64 %idxprom121
  %28 = load double, double* %arrayidx122, align 8, !tbaa !34
  %mul123 = fmul double %mul118, %28
  %add124 = fadd double %add116, %mul123
  %mul126 = fmul double %mul108, %.411
  %add128 = add nsw i32 %add78, %13
  %sub129 = sub nsw i32 %add128, %14
  %idxprom130 = sext i32 %sub129 to i64
  %arrayidx131 = getelementptr inbounds double, double* %16, i64 %idxprom130
  %29 = load double, double* %arrayidx131, align 8, !tbaa !34
  %mul132 = fmul double %mul126, %29
  %add133 = fadd double %add124, %mul132
  %mul135 = fmul double %mul134, %.
  %idxprom138 = sext i32 %sub62 to i64
  %arrayidx139 = getelementptr inbounds double, double* %16, i64 %idxprom138
  %30 = load double, double* %arrayidx139, align 8, !tbaa !34
  %mul140 = fmul double %mul135, %30
  %add141 = fadd double %add133, %mul140
  %idxprom145 = sext i32 %sub70 to i64
  %arrayidx146 = getelementptr inbounds double, double* %16, i64 %idxprom145
  %31 = load double, double* %arrayidx146, align 8, !tbaa !34
  %mul147 = fmul double %mul143, %31
  %add148 = fadd double %add141, %mul147
  %mul150 = fmul double %mul134, %.411
  %idxprom153 = sext i32 %sub79 to i64
  %arrayidx154 = getelementptr inbounds double, double* %16, i64 %idxprom153
  %32 = load double, double* %arrayidx154, align 8, !tbaa !34
  %mul155 = fmul double %mul150, %32
  %add156 = fadd double %add148, %mul155
  %mul158 = fmul double %., 0x3FEC200000000000
  %idxprom160 = sext i32 %sub61 to i64
  %arrayidx161 = getelementptr inbounds double, double* %16, i64 %idxprom160
  %33 = load double, double* %arrayidx161, align 8, !tbaa !34
  %mul162 = fmul double %mul158, %33
  %add163 = fadd double %add156, %mul162
  %idxprom166 = sext i32 %add49 to i64
  %arrayidx167 = getelementptr inbounds double, double* %16, i64 %idxprom166
  %34 = load double, double* %arrayidx167, align 8, !tbaa !34
  %mul168 = fmul double %34, 0x3FEA5E0000000000
  %add169 = fadd double %add163, %mul168
  %mul171 = fmul double %.411, 0x3FEC200000000000
  %idxprom173 = sext i32 %add78 to i64
  %arrayidx174 = getelementptr inbounds double, double* %16, i64 %idxprom173
  %35 = load double, double* %arrayidx174, align 8, !tbaa !34
  %mul175 = fmul double %mul171, %35
  %add176 = fadd double %add169, %mul175
  %mul178 = fmul double %mul177, %.
  %idxprom181 = sext i32 %add111 to i64
  %arrayidx182 = getelementptr inbounds double, double* %16, i64 %idxprom181
  %36 = load double, double* %arrayidx182, align 8, !tbaa !34
  %mul183 = fmul double %mul178, %36
  %add184 = fadd double %add176, %mul183
  %idxprom188 = sext i32 %add119 to i64
  %arrayidx189 = getelementptr inbounds double, double* %16, i64 %idxprom188
  %37 = load double, double* %arrayidx189, align 8, !tbaa !34
  %mul190 = fmul double %mul186, %37
  %add191 = fadd double %add184, %mul190
  %mul193 = fmul double %mul177, %.411
  %idxprom196 = sext i32 %add128 to i64
  %arrayidx197 = getelementptr inbounds double, double* %16, i64 %idxprom196
  %38 = load double, double* %arrayidx197, align 8, !tbaa !34
  %mul198 = fmul double %mul193, %38
  %add199 = fadd double %add191, %mul198
  %mul201 = fmul double %mul200, %.
  %add204 = add nsw i32 %sub62, %14
  %idxprom205 = sext i32 %add204 to i64
  %arrayidx206 = getelementptr inbounds double, double* %16, i64 %idxprom205
  %39 = load double, double* %arrayidx206, align 8, !tbaa !34
  %mul207 = fmul double %mul201, %39
  %add208 = fadd double %add199, %mul207
  %add212 = add nsw i32 %sub70, %14
  %idxprom213 = sext i32 %add212 to i64
  %arrayidx214 = getelementptr inbounds double, double* %16, i64 %idxprom213
  %40 = load double, double* %arrayidx214, align 8, !tbaa !34
  %mul215 = fmul double %mul210, %40
  %add216 = fadd double %add208, %mul215
  %mul218 = fmul double %mul200, %.411
  %add221 = add nsw i32 %sub79, %14
  %idxprom222 = sext i32 %add221 to i64
  %arrayidx223 = getelementptr inbounds double, double* %16, i64 %idxprom222
  %41 = load double, double* %arrayidx223, align 8, !tbaa !34
  %mul224 = fmul double %mul218, %41
  %add225 = fadd double %add216, %mul224
  %mul227 = fmul double %mul226, %.
  %add229 = add nsw i32 %sub61, %14
  %idxprom230 = sext i32 %add229 to i64
  %arrayidx231 = getelementptr inbounds double, double* %16, i64 %idxprom230
  %42 = load double, double* %arrayidx231, align 8, !tbaa !34
  %mul232 = fmul double %mul227, %42
  %add233 = fadd double %add225, %mul232
  %add236 = add nsw i32 %add49, %14
  %idxprom237 = sext i32 %add236 to i64
  %arrayidx238 = getelementptr inbounds double, double* %16, i64 %idxprom237
  %43 = load double, double* %arrayidx238, align 8, !tbaa !34
  %mul239 = fmul double %mul235, %43
  %add240 = fadd double %add233, %mul239
  %mul242 = fmul double %mul226, %.411
  %add244 = add nsw i32 %add78, %14
  %idxprom245 = sext i32 %add244 to i64
  %arrayidx246 = getelementptr inbounds double, double* %16, i64 %idxprom245
  %44 = load double, double* %arrayidx246, align 8, !tbaa !34
  %mul247 = fmul double %mul242, %44
  %add248 = fadd double %add240, %mul247
  %mul250 = fmul double %mul249, %.
  %add253 = add nsw i32 %add111, %14
  %idxprom254 = sext i32 %add253 to i64
  %arrayidx255 = getelementptr inbounds double, double* %16, i64 %idxprom254
  %45 = load double, double* %arrayidx255, align 8, !tbaa !34
  %mul256 = fmul double %mul250, %45
  %add257 = fadd double %add248, %mul256
  %add261 = add nsw i32 %add119, %14
  %idxprom262 = sext i32 %add261 to i64
  %arrayidx263 = getelementptr inbounds double, double* %16, i64 %idxprom262
  %46 = load double, double* %arrayidx263, align 8, !tbaa !34
  %mul264 = fmul double %mul259, %46
  %add265 = fadd double %add257, %mul264
  %mul267 = fmul double %mul249, %.411
  %add270 = add nsw i32 %add128, %14
  %idxprom271 = sext i32 %add270 to i64
  %arrayidx272 = getelementptr inbounds double, double* %16, i64 %idxprom271
  %47 = load double, double* %arrayidx272, align 8, !tbaa !34
  %mul273 = fmul double %mul267, %47
  %add274 = fadd double %add265, %mul273
  store double %add274, double* %arrayidx, align 8, !tbaa !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %inc = add nuw nsw i32 %i.0415, 1
  %cmp38 = icmp slt i64 %indvars.iv.next, %17
  br i1 %cmp38, label %for.body, label %omp.inner.for.inc.loopexit

omp.inner.for.inc.loopexit:                       ; preds = %for.body
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %omp.inner.for.inc.loopexit, %omp.inner.for.body
  %add277 = add nsw i64 %.omp.iv.0417, 1
  %cmp19 = icmp slt i64 %.omp.iv.0417, %cond
  br i1 %cmp19, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp.inner.for.inc
  %.pre = load i32, i32* %.global_tid., align 4, !tbaa !35
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  %48 = phi i32 [ %.pre, %omp.loop.exit.loopexit ], [ %6, %omp.precond.then ]
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %48) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi425 = phi i8* [ %.pre424, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi423 = phi i8* [ %.pre422, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi421 = phi i8* [ %.pre420, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre419, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi421) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi423) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi425) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @zero_grid(%struct.domain_type* %domain, i32 %level, i32 %grid_id) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %grid_id.addr = alloca i32, align 4
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store i32 %grid_id, i32* %grid_id.addr, align 4, !tbaa !35
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 4, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*)* @.omp_outlined..27 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %grid_id.addr, i32* nonnull %omp_within_a_box) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..27(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %grid_id.addr, i32* nonnull %omp_within_a_box)
  tail call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %5 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %5 to i64
  %6 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %6, i64 0, i32 0, i32 12, i64 %idxprom12
  %7 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %7
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..27(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %grid_id, i32* nocapture readonly dereferenceable(4) %omp_within_a_box) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %ghosts = alloca i32, align 4
  %dim_k = alloca i32, align 4
  %dim_j = alloca i32, align 4
  %dim_i = alloca i32, align 4
  %grid = alloca double*, align 8
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre84 = bitcast i32* %.omp.stride to i8*
  %.pre86 = bitcast i32* %.omp.ub to i8*
  %.pre88 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp6 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp6, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp782 = icmp sgt i32 %8, %cond
  br i1 %cmp782, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil to i8*
  %10 = bitcast i32* %plane to i8*
  %11 = bitcast i32* %ghosts to i8*
  %12 = bitcast i32* %dim_k to i8*
  %13 = bitcast i32* %dim_j to i8*
  %14 = bitcast i32* %dim_i to i8*
  %15 = bitcast double** %grid to i8*
  %16 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %16, %omp.inner.for.body.lr.ph ]
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %17 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %17 to i64
  %18 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %18, i64 0, i32 28
  %19 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %19, i64 %indvars.iv, i32 5
  %20 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil11 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 5
  %21 = load i32, i32* %pencil11, align 8, !tbaa !54
  store i32 %21, i32* %pencil, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane18 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 6
  %22 = load i32, i32* %plane18, align 4, !tbaa !55
  store i32 %22, i32* %plane, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %ghosts25 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 4
  %23 = load i32, i32* %ghosts25, align 4, !tbaa !38
  store i32 %23, i32* %ghosts, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %k32 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 2, i32 2
  %24 = load i32, i32* %k32, align 4, !tbaa !40
  store i32 %24, i32* %dim_k, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %j40 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 2, i32 1
  %25 = load i32, i32* %j40, align 4, !tbaa !37
  store i32 %25, i32* %dim_j, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %14) #1
  %i48 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 2, i32 0
  %26 = load i32, i32* %i48, align 4, !tbaa !43
  store i32 %26, i32* %dim_i, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %27 = load i32, i32* %grid_id, align 4, !tbaa !35
  %idxprom49 = sext i32 %27 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 10
  %28 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx56 = getelementptr inbounds double*, double** %28, i64 %idxprom49
  %29 = load double*, double** %arrayidx56, align 8, !tbaa !1
  %add57 = add nsw i32 %21, 1
  %add58 = add nsw i32 %add57, %22
  %mul59 = mul nsw i32 %add58, %23
  %idx.ext = sext i32 %mul59 to i64
  %add.ptr = getelementptr inbounds double, double* %29, i64 %idx.ext
  store double* %add.ptr, double** %grid, align 8, !tbaa !1
  %30 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %30, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 7, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**)* @.omp_outlined..28 to void (i32*, i32*, ...)*), i32* nonnull %ghosts, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  call void @.omp_outlined..28(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %ghosts, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9) #1
  %31 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %32 = sext i32 %31 to i64
  %cmp7 = icmp slt i64 %indvars.iv, %32
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp7, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi89 = phi i8* [ %.pre88, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi87 = phi i8* [ %.pre86, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi85 = phi i8* [ %.pre84, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi85) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi87) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi89) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..28(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %ghosts, i32* nocapture readonly dereferenceable(4) %dim_k, i32* nocapture readonly dereferenceable(4) %dim_j, i32* nocapture readonly dereferenceable(4) %dim_i, i32* nocapture readonly dereferenceable(4) %pencil, i32* nocapture readonly dereferenceable(4) %plane, double** nocapture readonly dereferenceable(8) %grid) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k, align 4, !tbaa !35
  %1 = load i32, i32* %ghosts, align 4, !tbaa !35
  %add = add nsw i32 %1, %0
  %sub = sub nsw i32 0, %1
  %sub1 = add nsw i32 %add, %1
  %conv = sext i32 %sub1 to i64
  %2 = load i32, i32* %dim_j, align 4, !tbaa !35
  %add4 = add nsw i32 %2, %1
  %sub6 = add nsw i32 %add4, %1
  %conv10 = sext i32 %sub6 to i64
  %mul = mul nsw i64 %conv10, %conv
  %sub11 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %add, %sub
  %cmp20 = icmp sgt i32 %add4, %sub
  %or.cond = and i1 %cmp, %cmp20
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre90 = bitcast i64* %.omp.stride to i8*
  %.pre92 = bitcast i64* %.omp.ub to i8*
  %.pre94 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %3 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 %sub11, i64* %.omp.ub, align 8, !tbaa !42
  %5 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %6 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %7 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %7, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %8 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp27 = icmp sgt i64 %8, %sub11
  %cond = select i1 %cmp27, i64 %sub11, i64 %8
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %9 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp2986 = icmp sgt i64 %9, %cond
  br i1 %cmp2986, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %10 = load i32, i32* %ghosts, align 4
  %sub31 = sub i32 0, %10
  %11 = load i32, i32* %dim_j, align 4
  %factor = shl i32 %10, 1
  %sub35 = add i32 %factor, %11
  %conv39 = sext i32 %sub35 to i64
  %12 = load i32, i32* %dim_i, align 4
  %add5783 = add i32 %10, %12
  %cmp5884 = icmp sgt i32 %add5783, %sub31
  %13 = load i32, i32* %pencil, align 4
  %14 = load i32, i32* %plane, align 4
  %15 = load double*, double** %grid, align 8
  br i1 %cmp5884, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %16 = sext i32 %sub31 to i64
  %17 = sub i32 1, %10
  %18 = icmp sgt i32 %add5783, %17
  %smax = select i1 %18, i32 %add5783, i32 %17
  %19 = add i32 %10, %smax
  %20 = add i32 %19, -1
  %21 = zext i32 %20 to i64
  %22 = shl nuw nsw i64 %21, 3
  %23 = add nuw nsw i64 %22, 8
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %omp.inner.for.body.us
  %.omp.iv.087.us = phi i64 [ %add64.us, %omp.inner.for.body.us ], [ %9, %omp.inner.for.body.us.preheader ]
  %div40.us = sdiv i64 %.omp.iv.087.us, %conv39
  %rem.us = srem i64 %.omp.iv.087.us, %conv39
  %24 = add i64 %16, %rem.us
  %25 = trunc i64 %24 to i32
  %26 = mul i32 %13, %25
  %27 = sub i32 %26, %10
  %28 = add i64 %16, %div40.us
  %29 = trunc i64 %28 to i32
  %30 = mul i32 %14, %29
  %31 = add i32 %27, %30
  %32 = sext i32 %31 to i64
  %scevgep = getelementptr double, double* %15, i64 %32
  %scevgep89 = bitcast double* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep89, i8 0, i64 %23, i32 8, i1 false)
  %add64.us = add nsw i64 %.omp.iv.087.us, 1
  %cmp29.us = icmp slt i64 %.omp.iv.087.us, %cond
  br i1 %cmp29.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp.inner.for.body.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %7) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi95 = phi i8* [ %.pre94, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi93 = phi i8* [ %.pre92, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi91 = phi i8* [ %.pre90, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %6, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi91) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi93) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi95) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @initialize_grid_to_scalar(%struct.domain_type* %domain, i32 %level, i32 %grid_id, double %scalar) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %grid_id.addr = alloca i32, align 4
  %scalar.addr = alloca double, align 8
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store i32 %grid_id, i32* %grid_id.addr, align 4, !tbaa !35
  store double %scalar, double* %scalar.addr, align 8, !tbaa !34
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 5, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, double*)* @.omp_outlined..29 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %grid_id.addr, i32* nonnull %omp_within_a_box, double* nonnull %scalar.addr) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..29(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %grid_id.addr, i32* nonnull %omp_within_a_box, double* nonnull %scalar.addr)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %5 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %5 to i64
  %6 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %6, i64 0, i32 0, i32 12, i64 %idxprom12
  %7 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %7
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..29(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %grid_id, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double* dereferenceable(8) %scalar) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %ghosts = alloca i32, align 4
  %dim_k = alloca i32, align 4
  %dim_j = alloca i32, align 4
  %dim_i = alloca i32, align 4
  %grid = alloca double*, align 8
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre84 = bitcast i32* %.omp.stride to i8*
  %.pre86 = bitcast i32* %.omp.ub to i8*
  %.pre88 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp6 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp6, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp782 = icmp sgt i32 %8, %cond
  br i1 %cmp782, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil to i8*
  %10 = bitcast i32* %plane to i8*
  %11 = bitcast i32* %ghosts to i8*
  %12 = bitcast i32* %dim_k to i8*
  %13 = bitcast i32* %dim_j to i8*
  %14 = bitcast i32* %dim_i to i8*
  %15 = bitcast double** %grid to i8*
  %16 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %16, %omp.inner.for.body.lr.ph ]
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %17 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %17 to i64
  %18 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %18, i64 0, i32 28
  %19 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %19, i64 %indvars.iv, i32 5
  %20 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil11 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 5
  %21 = load i32, i32* %pencil11, align 8, !tbaa !54
  store i32 %21, i32* %pencil, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane18 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 6
  %22 = load i32, i32* %plane18, align 4, !tbaa !55
  store i32 %22, i32* %plane, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %ghosts25 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 4
  %23 = load i32, i32* %ghosts25, align 4, !tbaa !38
  store i32 %23, i32* %ghosts, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %k32 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 2, i32 2
  %24 = load i32, i32* %k32, align 4, !tbaa !40
  store i32 %24, i32* %dim_k, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %j40 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 2, i32 1
  %25 = load i32, i32* %j40, align 4, !tbaa !37
  store i32 %25, i32* %dim_j, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %14) #1
  %i48 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 2, i32 0
  %26 = load i32, i32* %i48, align 4, !tbaa !43
  store i32 %26, i32* %dim_i, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %27 = load i32, i32* %grid_id, align 4, !tbaa !35
  %idxprom49 = sext i32 %27 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 10
  %28 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx56 = getelementptr inbounds double*, double** %28, i64 %idxprom49
  %29 = load double*, double** %arrayidx56, align 8, !tbaa !1
  %add57 = add nsw i32 %21, 1
  %add58 = add nsw i32 %add57, %22
  %mul59 = mul nsw i32 %add58, %23
  %idx.ext = sext i32 %mul59 to i64
  %add.ptr = getelementptr inbounds double, double* %29, i64 %idx.ext
  store double* %add.ptr, double** %grid, align 8, !tbaa !1
  %30 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %30, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 8, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**, double*)* @.omp_outlined..30 to void (i32*, i32*, ...)*), i32* nonnull %ghosts, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid, double* nonnull %scalar) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  call void @.omp_outlined..30(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %ghosts, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid, double* nonnull %scalar)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9) #1
  %31 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %32 = sext i32 %31 to i64
  %cmp7 = icmp slt i64 %indvars.iv, %32
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp7, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi89 = phi i8* [ %.pre88, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi87 = phi i8* [ %.pre86, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi85 = phi i8* [ %.pre84, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi85) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi87) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi89) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..30(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %ghosts, i32* nocapture readonly dereferenceable(4) %dim_k, i32* nocapture readonly dereferenceable(4) %dim_j, i32* nocapture readonly dereferenceable(4) %dim_i, i32* nocapture readonly dereferenceable(4) %pencil, i32* nocapture readonly dereferenceable(4) %plane, double** nocapture readonly dereferenceable(8) %grid, double* nocapture readonly dereferenceable(8) %scalar) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k, align 4, !tbaa !35
  %1 = load i32, i32* %ghosts, align 4, !tbaa !35
  %add = add nsw i32 %1, %0
  %sub = sub nsw i32 0, %1
  %sub1 = add nsw i32 %add, %1
  %conv = sext i32 %sub1 to i64
  %2 = load i32, i32* %dim_j, align 4, !tbaa !35
  %add4 = add nsw i32 %2, %1
  %sub6 = add nsw i32 %add4, %1
  %conv10 = sext i32 %sub6 to i64
  %mul = mul nsw i64 %conv10, %conv
  %sub11 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %add, %sub
  %cmp20 = icmp sgt i32 %add4, %sub
  %or.cond = and i1 %cmp, %cmp20
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre119 = bitcast i32* %.omp.is_last to i8*
  %.pre120 = bitcast i64* %.omp.stride to i8*
  %.pre122 = bitcast i64* %.omp.ub to i8*
  %.pre124 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %3 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 %sub11, i64* %.omp.ub, align 8, !tbaa !42
  %5 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %6 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %7 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %7, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %8 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp27 = icmp sgt i64 %8, %sub11
  %cond = select i1 %cmp27, i64 %sub11, i64 %8
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %9 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp29115 = icmp sgt i64 %9, %cond
  br i1 %cmp29115, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %.pre = load i32, i32* %ghosts, align 4, !tbaa !35
  %.pre117 = load i32, i32* %dim_j, align 4, !tbaa !35
  %.pre118 = load i32, i32* %dim_i, align 4, !tbaa !35
  %sub31 = sub nsw i32 0, %.pre
  %conv32 = sext i32 %sub31 to i64
  %factor = shl i32 %.pre, 1
  %add57112 = add nsw i32 %.pre, %.pre118
  %cmp58113 = icmp sgt i32 %add57112, %sub31
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.inc, %omp.inner.for.body.lr.ph
  %10 = phi i32 [ %.pre117, %omp.inner.for.body.lr.ph ], [ %22, %omp.inner.for.inc ]
  %.omp.iv.0116 = phi i64 [ %9, %omp.inner.for.body.lr.ph ], [ %add83, %omp.inner.for.inc ]
  %sub35 = add i32 %factor, %10
  %conv39 = sext i32 %sub35 to i64
  %div40 = sdiv i64 %.omp.iv.0116, %conv39
  %add42 = add nsw i64 %div40, %conv32
  %conv43 = trunc i64 %add42 to i32
  %rem = srem i64 %.omp.iv.0116, %conv39
  %add54 = add nsw i64 %rem, %conv32
  %conv55 = trunc i64 %add54 to i32
  br i1 %cmp58113, label %for.body.lr.ph, label %omp.inner.for.inc

for.body.lr.ph:                                   ; preds = %omp.inner.for.body
  %11 = or i64 %add54, %add42
  %12 = trunc i64 %11 to i32
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %i.0114 = phi i32 [ %sub31, %for.body.lr.ph ], [ %inc, %for.cond ]
  %13 = load i32, i32* %pencil, align 4, !tbaa !35
  %mul60 = mul nsw i32 %13, %conv55
  %add61 = add nsw i32 %mul60, %i.0114
  %14 = load i32, i32* %plane, align 4, !tbaa !35
  %mul62 = mul nsw i32 %14, %conv43
  %add63 = add nsw i32 %add61, %mul62
  %15 = or i32 %12, %i.0114
  %16 = icmp sgt i32 %15, -1
  %cmp72 = icmp slt i32 %i.0114, %.pre118
  %or.cond110 = and i1 %cmp72, %16
  %17 = load i32, i32* %dim_j, align 4
  %cmp75 = icmp slt i32 %conv55, %17
  %or.cond111 = and i1 %or.cond110, %cmp75
  br i1 %or.cond111, label %lor.end, label %lor.end.thread

lor.end:                                          ; preds = %for.body
  %18 = load i32, i32* %dim_k, align 4, !tbaa !35
  %cmp77 = icmp slt i32 %conv43, %18
  %19 = load double, double* %scalar, align 8
  br i1 %cmp77, label %for.cond, label %lor.end.thread

lor.end.thread:                                   ; preds = %lor.end, %for.body
  br label %for.cond

for.cond:                                         ; preds = %lor.end, %lor.end.thread
  %20 = phi double [ 0.000000e+00, %lor.end.thread ], [ %19, %lor.end ]
  %idxprom = sext i32 %add63 to i64
  %21 = load double*, double** %grid, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds double, double* %21, i64 %idxprom
  store double %20, double* %arrayidx, align 8, !tbaa !34
  %inc = add nsw i32 %i.0114, 1
  %cmp58 = icmp slt i32 %inc, %add57112
  br i1 %cmp58, label %for.body, label %omp.inner.for.inc.loopexit

omp.inner.for.inc.loopexit:                       ; preds = %for.cond
  %.lcssa = phi i32 [ %17, %for.cond ]
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %omp.inner.for.inc.loopexit, %omp.inner.for.body
  %22 = phi i32 [ %10, %omp.inner.for.body ], [ %.lcssa, %omp.inner.for.inc.loopexit ]
  %add83 = add nsw i64 %.omp.iv.0116, 1
  %cmp29 = icmp slt i64 %.omp.iv.0116, %cond
  br i1 %cmp29, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp.inner.for.inc
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %7) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi125 = phi i8* [ %.pre124, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi123 = phi i8* [ %.pre122, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi121 = phi i8* [ %.pre120, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre119, %entry.omp.precond.end_crit_edge ], [ %6, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi121) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi123) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi125) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @add_grids(%struct.domain_type* %domain, i32 %level, i32 %id_c, double %scale_a, i32 %id_a, double %scale_b, i32 %id_b) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %id_c.addr = alloca i32, align 4
  %scale_a.addr = alloca double, align 8
  %id_a.addr = alloca i32, align 4
  %scale_b.addr = alloca double, align 8
  %id_b.addr = alloca i32, align 4
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store i32 %id_c, i32* %id_c.addr, align 4, !tbaa !35
  store double %scale_a, double* %scale_a.addr, align 8, !tbaa !34
  store i32 %id_a, i32* %id_a.addr, align 4, !tbaa !35
  store double %scale_b, double* %scale_b.addr, align 8, !tbaa !34
  store i32 %id_b, i32* %id_b.addr, align 4, !tbaa !35
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 8, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, i32*, double*, double*)* @.omp_outlined..31 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %id_c.addr, i32* nonnull %id_a.addr, i32* nonnull %id_b.addr, i32* nonnull %omp_within_a_box, double* nonnull %scale_a.addr, double* nonnull %scale_b.addr) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..31(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %id_c.addr, i32* nonnull %id_a.addr, i32* nonnull %id_b.addr, i32* nonnull %omp_within_a_box, double* nonnull %scale_a.addr, double* nonnull %scale_b.addr)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %5 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %5 to i64
  %6 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %6, i64 0, i32 0, i32 12, i64 %idxprom12
  %7 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %7
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..31(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %id_c, i32* nocapture readonly dereferenceable(4) %id_a, i32* nocapture readonly dereferenceable(4) %id_b, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double* dereferenceable(8) %scale_a, double* dereferenceable(8) %scale_b) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %dim_k = alloca i32, align 4
  %dim_j = alloca i32, align 4
  %dim_i = alloca i32, align 4
  %grid_c = alloca double*, align 8
  %grid_a = alloca double*, align 8
  %grid_b = alloca double*, align 8
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre117 = bitcast i32* %.omp.stride to i8*
  %.pre119 = bitcast i32* %.omp.ub to i8*
  %.pre121 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp6 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp6, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp7115 = icmp sgt i32 %8, %cond
  br i1 %cmp7115, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil to i8*
  %10 = bitcast i32* %plane to i8*
  %11 = bitcast i32* %dim_k to i8*
  %12 = bitcast i32* %dim_j to i8*
  %13 = bitcast i32* %dim_i to i8*
  %14 = bitcast double** %grid_c to i8*
  %15 = bitcast double** %grid_a to i8*
  %16 = bitcast double** %grid_b to i8*
  %17 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %17, %omp.inner.for.body.lr.ph ]
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %18 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %18 to i64
  %19 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %19, i64 0, i32 28
  %20 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %20, i64 %indvars.iv, i32 5
  %21 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil11 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 5
  %22 = load i32, i32* %pencil11, align 8, !tbaa !54
  store i32 %22, i32* %pencil, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane18 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 6
  %23 = load i32, i32* %plane18, align 4, !tbaa !55
  store i32 %23, i32* %plane, align 4, !tbaa !35
  %ghosts25 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 4
  %24 = load i32, i32* %ghosts25, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %k32 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 2
  %25 = load i32, i32* %k32, align 4, !tbaa !40
  store i32 %25, i32* %dim_k, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %j40 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 1
  %26 = load i32, i32* %j40, align 4, !tbaa !37
  store i32 %26, i32* %dim_j, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %i48 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 0
  %27 = load i32, i32* %i48, align 4, !tbaa !43
  store i32 %27, i32* %dim_i, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %14) #1
  %28 = load i32, i32* %id_c, align 4, !tbaa !35
  %idxprom49 = sext i32 %28 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 10
  %29 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx56 = getelementptr inbounds double*, double** %29, i64 %idxprom49
  %30 = load double*, double** %arrayidx56, align 8, !tbaa !1
  %add57 = add nsw i32 %22, 1
  %add58 = add nsw i32 %add57, %23
  %mul59 = mul nsw i32 %add58, %24
  %idx.ext = sext i32 %mul59 to i64
  %add.ptr = getelementptr inbounds double, double* %30, i64 %idx.ext
  store double* %add.ptr, double** %grid_c, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %31 = load i32, i32* %id_a, align 4, !tbaa !35
  %idxprom60 = sext i32 %31 to i64
  %32 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels65 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %32, i64 %indvars.iv, i32 5
  %33 = load %struct.box_type*, %struct.box_type** %levels65, align 8, !tbaa !28
  %grids67 = getelementptr inbounds %struct.box_type, %struct.box_type* %33, i64 %idxprom, i32 10
  %34 = load double**, double*** %grids67, align 8, !tbaa !30
  %arrayidx68 = getelementptr inbounds double*, double** %34, i64 %idxprom60
  %35 = load double*, double** %arrayidx68, align 8, !tbaa !1
  %add.ptr73 = getelementptr inbounds double, double* %35, i64 %idx.ext
  store double* %add.ptr73, double** %grid_a, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %16) #1
  %36 = load i32, i32* %id_b, align 4, !tbaa !35
  %idxprom74 = sext i32 %36 to i64
  %37 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels79 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %37, i64 %indvars.iv, i32 5
  %38 = load %struct.box_type*, %struct.box_type** %levels79, align 8, !tbaa !28
  %grids81 = getelementptr inbounds %struct.box_type, %struct.box_type* %38, i64 %idxprom, i32 10
  %39 = load double**, double*** %grids81, align 8, !tbaa !30
  %arrayidx82 = getelementptr inbounds double*, double** %39, i64 %idxprom74
  %40 = load double*, double** %arrayidx82, align 8, !tbaa !1
  %add.ptr87 = getelementptr inbounds double, double* %40, i64 %idx.ext
  store double* %add.ptr87, double** %grid_b, align 8, !tbaa !1
  %41 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %41, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 10, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**, double*, double**, double*, double**)* @.omp_outlined..32 to void (i32*, i32*, ...)*), i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid_c, double* nonnull %scale_a, double** nonnull %grid_a, double* nonnull %scale_b, double** nonnull %grid_b) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  call void @.omp_outlined..32(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid_c, double* nonnull %scale_a, double** nonnull %grid_a, double* nonnull %scale_b, double** nonnull %grid_b)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9) #1
  %42 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %43 = sext i32 %42 to i64
  %cmp7 = icmp slt i64 %indvars.iv, %43
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp7, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi122 = phi i8* [ %.pre121, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi120 = phi i8* [ %.pre119, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi118 = phi i8* [ %.pre117, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi118) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi120) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi122) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..32(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k, i32* nocapture readonly dereferenceable(4) %dim_j, i32* nocapture readonly dereferenceable(4) %dim_i, i32* nocapture readonly dereferenceable(4) %pencil, i32* nocapture readonly dereferenceable(4) %plane, double** nocapture readonly dereferenceable(8) %grid_c, double* nocapture readonly dereferenceable(8) %scale_a, double** nocapture readonly dereferenceable(8) %grid_a, double* nocapture readonly dereferenceable(8) %scale_b, double** nocapture readonly dereferenceable(8) %grid_b) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre78 = bitcast i64* %.omp.stride to i8*
  %.pre80 = bitcast i64* %.omp.ub to i8*
  %.pre82 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %7 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp17 = icmp sgt i64 %7, %sub7
  %cond = select i1 %cmp17, i64 %sub7, i64 %7
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %8 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp1974 = icmp sgt i64 %8, %cond
  br i1 %cmp1974, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = load i32, i32* %dim_j, align 4
  %conv25 = sext i32 %9 to i64
  %10 = load i32, i32* %dim_i, align 4
  %cmp3872 = icmp sgt i32 %10, 0
  %11 = load i32, i32* %pencil, align 4
  %12 = load i32, i32* %plane, align 4
  %13 = load double*, double** %grid_a, align 8
  %14 = load double*, double** %grid_b, align 8
  %15 = load double*, double** %grid_c, align 8
  br i1 %cmp3872, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %16 = sext i32 %10 to i64
  %xtraiter = and i32 %10, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  %17 = icmp eq i32 %10, 1
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %.omp.iv.075.us = phi i64 [ %add51.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %8, %omp.inner.for.body.us.preheader ]
  %div26.us = sdiv i64 %.omp.iv.075.us, %conv25
  %conv29.us = trunc i64 %div26.us to i32
  %rem.us = srem i64 %.omp.iv.075.us, %conv25
  %conv37.us = trunc i64 %rem.us to i32
  %mul40.us = mul nsw i32 %11, %conv37.us
  %mul42.us = mul nsw i32 %12, %conv29.us
  br i1 %lcmp.mod, label %omp.inner.for.body.us.split, label %for.body.us.prol

for.body.us.prol:                                 ; preds = %omp.inner.for.body.us
  %add43.us.prol = add nsw i32 %mul40.us, %mul42.us
  %18 = load double, double* %scale_a, align 8, !tbaa !34
  %idxprom.us.prol = sext i32 %add43.us.prol to i64
  %arrayidx.us.prol = getelementptr inbounds double, double* %13, i64 %idxprom.us.prol
  %19 = load double, double* %arrayidx.us.prol, align 8, !tbaa !34
  %mul44.us.prol = fmul double %18, %19
  %20 = load double, double* %scale_b, align 8, !tbaa !34
  %arrayidx46.us.prol = getelementptr inbounds double, double* %14, i64 %idxprom.us.prol
  %21 = load double, double* %arrayidx46.us.prol, align 8, !tbaa !34
  %mul47.us.prol = fmul double %20, %21
  %add48.us.prol = fadd double %mul44.us.prol, %mul47.us.prol
  %arrayidx50.us.prol = getelementptr inbounds double, double* %15, i64 %idxprom.us.prol
  store double %add48.us.prol, double* %arrayidx50.us.prol, align 8, !tbaa !34
  br label %omp.inner.for.body.us.split

omp.inner.for.body.us.split:                      ; preds = %omp.inner.for.body.us, %for.body.us.prol
  %indvars.iv.unr = phi i64 [ 0, %omp.inner.for.body.us ], [ 1, %for.body.us.prol ]
  %i.073.us.unr = phi i32 [ 0, %omp.inner.for.body.us ], [ 1, %for.body.us.prol ]
  br i1 %17, label %for.cond.omp.inner.for.inc_crit_edge.us, label %omp.inner.for.body.us.split.split

omp.inner.for.body.us.split.split:                ; preds = %omp.inner.for.body.us.split
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %omp.inner.for.body.us.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %omp.inner.for.body.us.split.split ], [ %indvars.iv.next.1, %for.body.us ]
  %i.073.us = phi i32 [ %i.073.us.unr, %omp.inner.for.body.us.split.split ], [ %inc.us.1, %for.body.us ]
  %add41.us = add nsw i32 %mul40.us, %i.073.us
  %add43.us = add nsw i32 %add41.us, %mul42.us
  %22 = load double, double* %scale_a, align 8, !tbaa !34
  %idxprom.us = sext i32 %add43.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %13, i64 %idxprom.us
  %23 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %mul44.us = fmul double %22, %23
  %24 = load double, double* %scale_b, align 8, !tbaa !34
  %arrayidx46.us = getelementptr inbounds double, double* %14, i64 %idxprom.us
  %25 = load double, double* %arrayidx46.us, align 8, !tbaa !34
  %mul47.us = fmul double %24, %25
  %add48.us = fadd double %mul44.us, %mul47.us
  %arrayidx50.us = getelementptr inbounds double, double* %15, i64 %idxprom.us
  store double %add48.us, double* %arrayidx50.us, align 8, !tbaa !34
  %inc.us = add nuw nsw i32 %i.073.us, 1
  %add41.us.1 = add nsw i32 %mul40.us, %inc.us
  %add43.us.1 = add nsw i32 %add41.us.1, %mul42.us
  %26 = load double, double* %scale_a, align 8, !tbaa !34
  %idxprom.us.1 = sext i32 %add43.us.1 to i64
  %arrayidx.us.1 = getelementptr inbounds double, double* %13, i64 %idxprom.us.1
  %27 = load double, double* %arrayidx.us.1, align 8, !tbaa !34
  %mul44.us.1 = fmul double %26, %27
  %28 = load double, double* %scale_b, align 8, !tbaa !34
  %arrayidx46.us.1 = getelementptr inbounds double, double* %14, i64 %idxprom.us.1
  %29 = load double, double* %arrayidx46.us.1, align 8, !tbaa !34
  %mul47.us.1 = fmul double %28, %29
  %add48.us.1 = fadd double %mul44.us.1, %mul47.us.1
  %arrayidx50.us.1 = getelementptr inbounds double, double* %15, i64 %idxprom.us.1
  store double %add48.us.1, double* %arrayidx50.us.1, align 8, !tbaa !34
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %inc.us.1 = add nsw i32 %i.073.us, 2
  %cmp38.us.1 = icmp slt i64 %indvars.iv.next.1, %16
  br i1 %cmp38.us.1, label %for.body.us, label %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa

for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa: ; preds = %for.body.us
  br label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %omp.inner.for.body.us.split, %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa
  %add51.us = add nsw i64 %.omp.iv.075.us, 1
  %cmp19.us = icmp slt i64 %.omp.iv.075.us, %cond
  br i1 %cmp19.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi83 = phi i8* [ %.pre82, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi81 = phi i8* [ %.pre80, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi79 = phi i8* [ %.pre78, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi79) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi81) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi83) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 %id_c, double %scale, i32 %id_a, i32 %id_b) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %id_c.addr = alloca i32, align 4
  %scale.addr = alloca double, align 8
  %id_a.addr = alloca i32, align 4
  %id_b.addr = alloca i32, align 4
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store i32 %id_c, i32* %id_c.addr, align 4, !tbaa !35
  store double %scale, double* %scale.addr, align 8, !tbaa !34
  store i32 %id_a, i32* %id_a.addr, align 4, !tbaa !35
  store i32 %id_b, i32* %id_b.addr, align 4, !tbaa !35
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 7, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, i32*, double*)* @.omp_outlined..33 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %id_c.addr, i32* nonnull %id_a.addr, i32* nonnull %id_b.addr, i32* nonnull %omp_within_a_box, double* nonnull %scale.addr) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..33(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %id_c.addr, i32* nonnull %id_a.addr, i32* nonnull %id_b.addr, i32* nonnull %omp_within_a_box, double* nonnull %scale.addr)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %5 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %5 to i64
  %6 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %6, i64 0, i32 0, i32 12, i64 %idxprom12
  %7 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %7
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..33(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %id_c, i32* nocapture readonly dereferenceable(4) %id_a, i32* nocapture readonly dereferenceable(4) %id_b, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double* dereferenceable(8) %scale) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %dim_k = alloca i32, align 4
  %dim_j = alloca i32, align 4
  %dim_i = alloca i32, align 4
  %grid_c = alloca double*, align 8
  %grid_a = alloca double*, align 8
  %grid_b = alloca double*, align 8
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre117 = bitcast i32* %.omp.stride to i8*
  %.pre119 = bitcast i32* %.omp.ub to i8*
  %.pre121 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp6 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp6, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp7115 = icmp sgt i32 %8, %cond
  br i1 %cmp7115, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil to i8*
  %10 = bitcast i32* %plane to i8*
  %11 = bitcast i32* %dim_k to i8*
  %12 = bitcast i32* %dim_j to i8*
  %13 = bitcast i32* %dim_i to i8*
  %14 = bitcast double** %grid_c to i8*
  %15 = bitcast double** %grid_a to i8*
  %16 = bitcast double** %grid_b to i8*
  %17 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %17, %omp.inner.for.body.lr.ph ]
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %18 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %18 to i64
  %19 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %19, i64 0, i32 28
  %20 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %20, i64 %indvars.iv, i32 5
  %21 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil11 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 5
  %22 = load i32, i32* %pencil11, align 8, !tbaa !54
  store i32 %22, i32* %pencil, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane18 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 6
  %23 = load i32, i32* %plane18, align 4, !tbaa !55
  store i32 %23, i32* %plane, align 4, !tbaa !35
  %ghosts25 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 4
  %24 = load i32, i32* %ghosts25, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %k32 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 2
  %25 = load i32, i32* %k32, align 4, !tbaa !40
  store i32 %25, i32* %dim_k, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %j40 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 1
  %26 = load i32, i32* %j40, align 4, !tbaa !37
  store i32 %26, i32* %dim_j, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %i48 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 0
  %27 = load i32, i32* %i48, align 4, !tbaa !43
  store i32 %27, i32* %dim_i, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %14) #1
  %28 = load i32, i32* %id_c, align 4, !tbaa !35
  %idxprom49 = sext i32 %28 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 10
  %29 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx56 = getelementptr inbounds double*, double** %29, i64 %idxprom49
  %30 = load double*, double** %arrayidx56, align 8, !tbaa !1
  %add57 = add nsw i32 %22, 1
  %add58 = add nsw i32 %add57, %23
  %mul59 = mul nsw i32 %add58, %24
  %idx.ext = sext i32 %mul59 to i64
  %add.ptr = getelementptr inbounds double, double* %30, i64 %idx.ext
  store double* %add.ptr, double** %grid_c, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %31 = load i32, i32* %id_a, align 4, !tbaa !35
  %idxprom60 = sext i32 %31 to i64
  %32 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels65 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %32, i64 %indvars.iv, i32 5
  %33 = load %struct.box_type*, %struct.box_type** %levels65, align 8, !tbaa !28
  %grids67 = getelementptr inbounds %struct.box_type, %struct.box_type* %33, i64 %idxprom, i32 10
  %34 = load double**, double*** %grids67, align 8, !tbaa !30
  %arrayidx68 = getelementptr inbounds double*, double** %34, i64 %idxprom60
  %35 = load double*, double** %arrayidx68, align 8, !tbaa !1
  %add.ptr73 = getelementptr inbounds double, double* %35, i64 %idx.ext
  store double* %add.ptr73, double** %grid_a, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %16) #1
  %36 = load i32, i32* %id_b, align 4, !tbaa !35
  %idxprom74 = sext i32 %36 to i64
  %37 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels79 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %37, i64 %indvars.iv, i32 5
  %38 = load %struct.box_type*, %struct.box_type** %levels79, align 8, !tbaa !28
  %grids81 = getelementptr inbounds %struct.box_type, %struct.box_type* %38, i64 %idxprom, i32 10
  %39 = load double**, double*** %grids81, align 8, !tbaa !30
  %arrayidx82 = getelementptr inbounds double*, double** %39, i64 %idxprom74
  %40 = load double*, double** %arrayidx82, align 8, !tbaa !1
  %add.ptr87 = getelementptr inbounds double, double* %40, i64 %idx.ext
  store double* %add.ptr87, double** %grid_b, align 8, !tbaa !1
  %41 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %41, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 9, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**, double*, double**, double**)* @.omp_outlined..34 to void (i32*, i32*, ...)*), i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid_c, double* nonnull %scale, double** nonnull %grid_a, double** nonnull %grid_b) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  call void @.omp_outlined..34(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid_c, double* nonnull %scale, double** nonnull %grid_a, double** nonnull %grid_b)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9) #1
  %42 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %43 = sext i32 %42 to i64
  %cmp7 = icmp slt i64 %indvars.iv, %43
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp7, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi122 = phi i8* [ %.pre121, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi120 = phi i8* [ %.pre119, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi118 = phi i8* [ %.pre117, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi118) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi120) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi122) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..34(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k, i32* nocapture readonly dereferenceable(4) %dim_j, i32* nocapture readonly dereferenceable(4) %dim_i, i32* nocapture readonly dereferenceable(4) %pencil, i32* nocapture readonly dereferenceable(4) %plane, double** nocapture readonly dereferenceable(8) %grid_c, double* nocapture readonly dereferenceable(8) %scale, double** nocapture readonly dereferenceable(8) %grid_a, double** nocapture readonly dereferenceable(8) %grid_b) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre77 = bitcast i64* %.omp.stride to i8*
  %.pre79 = bitcast i64* %.omp.ub to i8*
  %.pre81 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %7 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp17 = icmp sgt i64 %7, %sub7
  %cond = select i1 %cmp17, i64 %sub7, i64 %7
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %8 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp1973 = icmp sgt i64 %8, %cond
  br i1 %cmp1973, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = load i32, i32* %dim_j, align 4
  %conv25 = sext i32 %9 to i64
  %10 = load i32, i32* %dim_i, align 4
  %cmp3871 = icmp sgt i32 %10, 0
  %11 = load i32, i32* %pencil, align 4
  %12 = load i32, i32* %plane, align 4
  %13 = load double*, double** %grid_a, align 8
  %14 = load double*, double** %grid_b, align 8
  %15 = load double*, double** %grid_c, align 8
  br i1 %cmp3871, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %16 = sext i32 %10 to i64
  %xtraiter = and i32 %10, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  %17 = icmp eq i32 %10, 1
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %.omp.iv.074.us = phi i64 [ %add50.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %8, %omp.inner.for.body.us.preheader ]
  %div26.us = sdiv i64 %.omp.iv.074.us, %conv25
  %conv29.us = trunc i64 %div26.us to i32
  %rem.us = srem i64 %.omp.iv.074.us, %conv25
  %conv37.us = trunc i64 %rem.us to i32
  %mul40.us = mul nsw i32 %11, %conv37.us
  %mul42.us = mul nsw i32 %12, %conv29.us
  br i1 %lcmp.mod, label %omp.inner.for.body.us.split, label %for.body.us.prol

for.body.us.prol:                                 ; preds = %omp.inner.for.body.us
  %add43.us.prol = add nsw i32 %mul40.us, %mul42.us
  %18 = load double, double* %scale, align 8, !tbaa !34
  %idxprom.us.prol = sext i32 %add43.us.prol to i64
  %arrayidx.us.prol = getelementptr inbounds double, double* %13, i64 %idxprom.us.prol
  %19 = load double, double* %arrayidx.us.prol, align 8, !tbaa !34
  %mul44.us.prol = fmul double %18, %19
  %arrayidx46.us.prol = getelementptr inbounds double, double* %14, i64 %idxprom.us.prol
  %20 = load double, double* %arrayidx46.us.prol, align 8, !tbaa !34
  %mul47.us.prol = fmul double %mul44.us.prol, %20
  %arrayidx49.us.prol = getelementptr inbounds double, double* %15, i64 %idxprom.us.prol
  store double %mul47.us.prol, double* %arrayidx49.us.prol, align 8, !tbaa !34
  br label %omp.inner.for.body.us.split

omp.inner.for.body.us.split:                      ; preds = %omp.inner.for.body.us, %for.body.us.prol
  %indvars.iv.unr = phi i64 [ 0, %omp.inner.for.body.us ], [ 1, %for.body.us.prol ]
  %i.072.us.unr = phi i32 [ 0, %omp.inner.for.body.us ], [ 1, %for.body.us.prol ]
  br i1 %17, label %for.cond.omp.inner.for.inc_crit_edge.us, label %omp.inner.for.body.us.split.split

omp.inner.for.body.us.split.split:                ; preds = %omp.inner.for.body.us.split
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %omp.inner.for.body.us.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %omp.inner.for.body.us.split.split ], [ %indvars.iv.next.1, %for.body.us ]
  %i.072.us = phi i32 [ %i.072.us.unr, %omp.inner.for.body.us.split.split ], [ %inc.us.1, %for.body.us ]
  %add41.us = add nsw i32 %mul40.us, %i.072.us
  %add43.us = add nsw i32 %add41.us, %mul42.us
  %21 = load double, double* %scale, align 8, !tbaa !34
  %idxprom.us = sext i32 %add43.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %13, i64 %idxprom.us
  %22 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %mul44.us = fmul double %21, %22
  %arrayidx46.us = getelementptr inbounds double, double* %14, i64 %idxprom.us
  %23 = load double, double* %arrayidx46.us, align 8, !tbaa !34
  %mul47.us = fmul double %mul44.us, %23
  %arrayidx49.us = getelementptr inbounds double, double* %15, i64 %idxprom.us
  store double %mul47.us, double* %arrayidx49.us, align 8, !tbaa !34
  %inc.us = add nuw nsw i32 %i.072.us, 1
  %add41.us.1 = add nsw i32 %mul40.us, %inc.us
  %add43.us.1 = add nsw i32 %add41.us.1, %mul42.us
  %24 = load double, double* %scale, align 8, !tbaa !34
  %idxprom.us.1 = sext i32 %add43.us.1 to i64
  %arrayidx.us.1 = getelementptr inbounds double, double* %13, i64 %idxprom.us.1
  %25 = load double, double* %arrayidx.us.1, align 8, !tbaa !34
  %mul44.us.1 = fmul double %24, %25
  %arrayidx46.us.1 = getelementptr inbounds double, double* %14, i64 %idxprom.us.1
  %26 = load double, double* %arrayidx46.us.1, align 8, !tbaa !34
  %mul47.us.1 = fmul double %mul44.us.1, %26
  %arrayidx49.us.1 = getelementptr inbounds double, double* %15, i64 %idxprom.us.1
  store double %mul47.us.1, double* %arrayidx49.us.1, align 8, !tbaa !34
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %inc.us.1 = add nsw i32 %i.072.us, 2
  %cmp38.us.1 = icmp slt i64 %indvars.iv.next.1, %16
  br i1 %cmp38.us.1, label %for.body.us, label %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa

for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa: ; preds = %for.body.us
  br label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %omp.inner.for.body.us.split, %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa
  %add50.us = add nsw i64 %.omp.iv.074.us, 1
  %cmp19.us = icmp slt i64 %.omp.iv.074.us, %cond
  br i1 %cmp19.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi82 = phi i8* [ %.pre81, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi80 = phi i8* [ %.pre79, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi78 = phi i8* [ %.pre77, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi78) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi80) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi82) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 %id_c, double %scale_a, i32 %id_a) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %id_c.addr = alloca i32, align 4
  %scale_a.addr = alloca double, align 8
  %id_a.addr = alloca i32, align 4
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store i32 %id_c, i32* %id_c.addr, align 4, !tbaa !35
  store double %scale_a, double* %scale_a.addr, align 8, !tbaa !34
  store i32 %id_a, i32* %id_a.addr, align 4, !tbaa !35
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 6, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, double*)* @.omp_outlined..35 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %id_c.addr, i32* nonnull %id_a.addr, i32* nonnull %omp_within_a_box, double* nonnull %scale_a.addr) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..35(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %id_c.addr, i32* nonnull %id_a.addr, i32* nonnull %omp_within_a_box, double* nonnull %scale_a.addr)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %5 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %5 to i64
  %6 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %6, i64 0, i32 0, i32 12, i64 %idxprom12
  %7 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %7
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..35(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %id_c, i32* nocapture readonly dereferenceable(4) %id_a, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double* dereferenceable(8) %scale_a) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %dim_k = alloca i32, align 4
  %dim_j = alloca i32, align 4
  %dim_i = alloca i32, align 4
  %grid_c = alloca double*, align 8
  %grid_a = alloca double*, align 8
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre101 = bitcast i32* %.omp.stride to i8*
  %.pre103 = bitcast i32* %.omp.ub to i8*
  %.pre105 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp6 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp6, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp799 = icmp sgt i32 %8, %cond
  br i1 %cmp799, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil to i8*
  %10 = bitcast i32* %plane to i8*
  %11 = bitcast i32* %dim_k to i8*
  %12 = bitcast i32* %dim_j to i8*
  %13 = bitcast i32* %dim_i to i8*
  %14 = bitcast double** %grid_c to i8*
  %15 = bitcast double** %grid_a to i8*
  %16 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %16, %omp.inner.for.body.lr.ph ]
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %17 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %17 to i64
  %18 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %18, i64 0, i32 28
  %19 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %19, i64 %indvars.iv, i32 5
  %20 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil11 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 5
  %21 = load i32, i32* %pencil11, align 8, !tbaa !54
  store i32 %21, i32* %pencil, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane18 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 6
  %22 = load i32, i32* %plane18, align 4, !tbaa !55
  store i32 %22, i32* %plane, align 4, !tbaa !35
  %ghosts25 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 4
  %23 = load i32, i32* %ghosts25, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %k32 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 2, i32 2
  %24 = load i32, i32* %k32, align 4, !tbaa !40
  store i32 %24, i32* %dim_k, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %j40 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 2, i32 1
  %25 = load i32, i32* %j40, align 4, !tbaa !37
  store i32 %25, i32* %dim_j, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %i48 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 2, i32 0
  %26 = load i32, i32* %i48, align 4, !tbaa !43
  store i32 %26, i32* %dim_i, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %14) #1
  %27 = load i32, i32* %id_c, align 4, !tbaa !35
  %idxprom49 = sext i32 %27 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 10
  %28 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx56 = getelementptr inbounds double*, double** %28, i64 %idxprom49
  %29 = load double*, double** %arrayidx56, align 8, !tbaa !1
  %add57 = add nsw i32 %21, 1
  %add58 = add nsw i32 %add57, %22
  %mul59 = mul nsw i32 %add58, %23
  %idx.ext = sext i32 %mul59 to i64
  %add.ptr = getelementptr inbounds double, double* %29, i64 %idx.ext
  store double* %add.ptr, double** %grid_c, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %30 = load i32, i32* %id_a, align 4, !tbaa !35
  %idxprom60 = sext i32 %30 to i64
  %31 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels65 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %31, i64 %indvars.iv, i32 5
  %32 = load %struct.box_type*, %struct.box_type** %levels65, align 8, !tbaa !28
  %grids67 = getelementptr inbounds %struct.box_type, %struct.box_type* %32, i64 %idxprom, i32 10
  %33 = load double**, double*** %grids67, align 8, !tbaa !30
  %arrayidx68 = getelementptr inbounds double*, double** %33, i64 %idxprom60
  %34 = load double*, double** %arrayidx68, align 8, !tbaa !1
  %add.ptr73 = getelementptr inbounds double, double* %34, i64 %idx.ext
  store double* %add.ptr73, double** %grid_a, align 8, !tbaa !1
  %35 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %35, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 8, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**, double*, double**)* @.omp_outlined..36 to void (i32*, i32*, ...)*), i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid_c, double* nonnull %scale_a, double** nonnull %grid_a) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  call void @.omp_outlined..36(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid_c, double* nonnull %scale_a, double** nonnull %grid_a)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9) #1
  %36 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %37 = sext i32 %36 to i64
  %cmp7 = icmp slt i64 %indvars.iv, %37
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp7, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi106 = phi i8* [ %.pre105, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi104 = phi i8* [ %.pre103, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi102 = phi i8* [ %.pre101, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi102) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi104) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi106) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..36(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k, i32* nocapture readonly dereferenceable(4) %dim_j, i32* nocapture readonly dereferenceable(4) %dim_i, i32* nocapture readonly dereferenceable(4) %pencil, i32* nocapture readonly dereferenceable(4) %plane, double** nocapture readonly dereferenceable(8) %grid_c, double* nocapture readonly dereferenceable(8) %scale_a, double** nocapture readonly dereferenceable(8) %grid_a) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre73 = bitcast i64* %.omp.stride to i8*
  %.pre75 = bitcast i64* %.omp.ub to i8*
  %.pre77 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %7 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp17 = icmp sgt i64 %7, %sub7
  %cond = select i1 %cmp17, i64 %sub7, i64 %7
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %8 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp1969 = icmp sgt i64 %8, %cond
  br i1 %cmp1969, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = load i32, i32* %dim_j, align 4
  %conv25 = sext i32 %9 to i64
  %10 = load i32, i32* %dim_i, align 4
  %cmp3867 = icmp sgt i32 %10, 0
  %11 = load i32, i32* %pencil, align 4
  %12 = load i32, i32* %plane, align 4
  %13 = load double*, double** %grid_a, align 8
  %14 = load double*, double** %grid_c, align 8
  br i1 %cmp3867, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %15 = sext i32 %10 to i64
  %xtraiter = and i32 %10, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  %16 = icmp eq i32 %10, 1
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %.omp.iv.070.us = phi i64 [ %add47.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %8, %omp.inner.for.body.us.preheader ]
  %div26.us = sdiv i64 %.omp.iv.070.us, %conv25
  %conv29.us = trunc i64 %div26.us to i32
  %rem.us = srem i64 %.omp.iv.070.us, %conv25
  %conv37.us = trunc i64 %rem.us to i32
  %mul40.us = mul nsw i32 %11, %conv37.us
  %mul42.us = mul nsw i32 %12, %conv29.us
  br i1 %lcmp.mod, label %omp.inner.for.body.us.split, label %for.body.us.prol

for.body.us.prol:                                 ; preds = %omp.inner.for.body.us
  %add43.us.prol = add nsw i32 %mul40.us, %mul42.us
  %17 = load double, double* %scale_a, align 8, !tbaa !34
  %idxprom.us.prol = sext i32 %add43.us.prol to i64
  %arrayidx.us.prol = getelementptr inbounds double, double* %13, i64 %idxprom.us.prol
  %18 = load double, double* %arrayidx.us.prol, align 8, !tbaa !34
  %mul44.us.prol = fmul double %17, %18
  %arrayidx46.us.prol = getelementptr inbounds double, double* %14, i64 %idxprom.us.prol
  store double %mul44.us.prol, double* %arrayidx46.us.prol, align 8, !tbaa !34
  br label %omp.inner.for.body.us.split

omp.inner.for.body.us.split:                      ; preds = %omp.inner.for.body.us, %for.body.us.prol
  %indvars.iv.unr = phi i64 [ 0, %omp.inner.for.body.us ], [ 1, %for.body.us.prol ]
  %i.068.us.unr = phi i32 [ 0, %omp.inner.for.body.us ], [ 1, %for.body.us.prol ]
  br i1 %16, label %for.cond.omp.inner.for.inc_crit_edge.us, label %omp.inner.for.body.us.split.split

omp.inner.for.body.us.split.split:                ; preds = %omp.inner.for.body.us.split
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %omp.inner.for.body.us.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %omp.inner.for.body.us.split.split ], [ %indvars.iv.next.1, %for.body.us ]
  %i.068.us = phi i32 [ %i.068.us.unr, %omp.inner.for.body.us.split.split ], [ %inc.us.1, %for.body.us ]
  %add41.us = add nsw i32 %mul40.us, %i.068.us
  %add43.us = add nsw i32 %add41.us, %mul42.us
  %19 = load double, double* %scale_a, align 8, !tbaa !34
  %idxprom.us = sext i32 %add43.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %13, i64 %idxprom.us
  %20 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %mul44.us = fmul double %19, %20
  %arrayidx46.us = getelementptr inbounds double, double* %14, i64 %idxprom.us
  store double %mul44.us, double* %arrayidx46.us, align 8, !tbaa !34
  %inc.us = add nuw nsw i32 %i.068.us, 1
  %add41.us.1 = add nsw i32 %mul40.us, %inc.us
  %add43.us.1 = add nsw i32 %add41.us.1, %mul42.us
  %21 = load double, double* %scale_a, align 8, !tbaa !34
  %idxprom.us.1 = sext i32 %add43.us.1 to i64
  %arrayidx.us.1 = getelementptr inbounds double, double* %13, i64 %idxprom.us.1
  %22 = load double, double* %arrayidx.us.1, align 8, !tbaa !34
  %mul44.us.1 = fmul double %21, %22
  %arrayidx46.us.1 = getelementptr inbounds double, double* %14, i64 %idxprom.us.1
  store double %mul44.us.1, double* %arrayidx46.us.1, align 8, !tbaa !34
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %inc.us.1 = add nsw i32 %i.068.us, 2
  %cmp38.us.1 = icmp slt i64 %indvars.iv.next.1, %15
  br i1 %cmp38.us.1, label %for.body.us, label %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa

for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa: ; preds = %for.body.us
  br label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %omp.inner.for.body.us.split, %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa
  %add47.us = add nsw i64 %.omp.iv.070.us, 1
  %cmp19.us = icmp slt i64 %.omp.iv.070.us, %cond
  br i1 %cmp19.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi78 = phi i8* [ %.pre77, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi76 = phi i8* [ %.pre75, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi74 = phi i8* [ %.pre73, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi74) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi76) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi78) #1
  ret void
}

; Function Attrs: nounwind uwtable
define double @dot(%struct.domain_type* %domain, i32 %level, i32 %id_a, i32 %id_b) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %id_a.addr = alloca i32, align 4
  %id_b.addr = alloca i32, align 4
  %omp_within_a_box = alloca i32, align 4
  %a_dot_b_domain = alloca double, align 8
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  %send = alloca double, align 8
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store i32 %id_a, i32* %id_a.addr, align 4, !tbaa !35
  store i32 %id_b, i32* %id_b.addr, align 4, !tbaa !35
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  %5 = bitcast double* %a_dot_b_domain to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #1
  store double 0.000000e+00, double* %a_dot_b_domain, align 8, !tbaa !34
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 6, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, double*)* @.omp_outlined..37 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %id_a.addr, i32* nonnull %id_b.addr, i32* nonnull %omp_within_a_box, double* nonnull %a_dot_b_domain) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..37(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %id_a.addr, i32* nonnull %id_b.addr, i32* nonnull %omp_within_a_box, double* nonnull %a_dot_b_domain)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %6 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %6 to i64
  %7 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %7, i64 0, i32 0, i32 12, i64 %idxprom12
  %8 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %8
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  %call14 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %9 = bitcast double* %send to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #1
  %10 = bitcast double* %a_dot_b_domain to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !34
  %12 = bitcast double* %send to i64*
  store i64 %11, i64* %12, align 8, !tbaa !34
  %call15 = call i32 @MPI_Allreduce(i8* %9, i8* %5, i32 1, i32 1275070475, i32 1476395011, i32 1140850688) #1
  %call16 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub17 = sub i64 %call16, %call14
  %13 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom18 = sext i32 %13 to i64
  %14 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx20 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %14, i64 0, i32 0, i32 14, i64 %idxprom18
  %15 = load i64, i64* %arrayidx20, align 8, !tbaa !42
  %add21 = add i64 %15, %sub17
  store i64 %add21, i64* %arrayidx20, align 8, !tbaa !42
  %arrayidx25 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %14, i64 0, i32 0, i32 5, i64 %idxprom18
  %16 = load i64, i64* %arrayidx25, align 8, !tbaa !42
  %add26 = add i64 %16, %sub17
  store i64 %add26, i64* %arrayidx25, align 8, !tbaa !42
  %17 = load double, double* %a_dot_b_domain, align 8, !tbaa !34
  call void @llvm.lifetime.end(i64 8, i8* %9) #1
  call void @llvm.lifetime.end(i64 8, i8* %5) #1
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret double %17
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..37(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %id_a, i32* nocapture readonly dereferenceable(4) %id_b, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double* dereferenceable(8) %a_dot_b_domain) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %a_dot_b_domain5 = alloca double, align 8
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %dim_k = alloca i32, align 4
  %dim_j = alloca i32, align 4
  %dim_i = alloca i32, align 4
  %grid_a = alloca double*, align 8
  %grid_b = alloca double*, align 8
  %a_dot_b_box = alloca double, align 8
  %.zero.addr = alloca i32, align 4
  %.omp.reduction.red_list = alloca [1 x i8*], align 8
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre106 = bitcast i32* %.omp.stride to i8*
  %.pre108 = bitcast i32* %.omp.ub to i8*
  %.pre110 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = bitcast double* %a_dot_b_domain5 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #1
  store double 0.000000e+00, double* %a_dot_b_domain5, align 8, !tbaa !34
  %7 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %7, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %8 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp7 = icmp sgt i32 %8, %sub1
  %cond = select i1 %cmp7, i32 %sub1, i32 %8
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %9 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp8104 = icmp sgt i32 %9, %cond
  br i1 %cmp8104, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %10 = bitcast i32* %pencil to i8*
  %11 = bitcast i32* %plane to i8*
  %12 = bitcast i32* %dim_k to i8*
  %13 = bitcast i32* %dim_j to i8*
  %14 = bitcast i32* %dim_i to i8*
  %15 = bitcast double** %grid_a to i8*
  %16 = bitcast double** %grid_b to i8*
  %17 = bitcast double* %a_dot_b_box to i8*
  %18 = sext i32 %9 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %18, %omp.inner.for.body.lr.ph ]
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %19 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %19 to i64
  %20 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %20, i64 0, i32 28
  %21 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %21, i64 %indvars.iv, i32 5
  %22 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil12 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 5
  %23 = load i32, i32* %pencil12, align 8, !tbaa !54
  store i32 %23, i32* %pencil, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %plane19 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 6
  %24 = load i32, i32* %plane19, align 4, !tbaa !55
  store i32 %24, i32* %plane, align 4, !tbaa !35
  %ghosts26 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 4
  %25 = load i32, i32* %ghosts26, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %k33 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 2, i32 2
  %26 = load i32, i32* %k33, align 4, !tbaa !40
  store i32 %26, i32* %dim_k, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %j41 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 2, i32 1
  %27 = load i32, i32* %j41, align 4, !tbaa !37
  store i32 %27, i32* %dim_j, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %14) #1
  %i49 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 2, i32 0
  %28 = load i32, i32* %i49, align 4, !tbaa !43
  store i32 %28, i32* %dim_i, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %29 = load i32, i32* %id_a, align 4, !tbaa !35
  %idxprom50 = sext i32 %29 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom, i32 10
  %30 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx57 = getelementptr inbounds double*, double** %30, i64 %idxprom50
  %31 = load double*, double** %arrayidx57, align 8, !tbaa !1
  %add58 = add nsw i32 %23, 1
  %add59 = add nsw i32 %add58, %24
  %mul60 = mul nsw i32 %add59, %25
  %idx.ext = sext i32 %mul60 to i64
  %add.ptr = getelementptr inbounds double, double* %31, i64 %idx.ext
  store double* %add.ptr, double** %grid_a, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %16) #1
  %32 = load i32, i32* %id_b, align 4, !tbaa !35
  %idxprom61 = sext i32 %32 to i64
  %33 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels66 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %33, i64 %indvars.iv, i32 5
  %34 = load %struct.box_type*, %struct.box_type** %levels66, align 8, !tbaa !28
  %grids68 = getelementptr inbounds %struct.box_type, %struct.box_type* %34, i64 %idxprom, i32 10
  %35 = load double**, double*** %grids68, align 8, !tbaa !30
  %arrayidx69 = getelementptr inbounds double*, double** %35, i64 %idxprom61
  %36 = load double*, double** %arrayidx69, align 8, !tbaa !1
  %add.ptr74 = getelementptr inbounds double, double* %36, i64 %idx.ext
  store double* %add.ptr74, double** %grid_b, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %17) #1
  store double 0.000000e+00, double* %a_dot_b_box, align 8, !tbaa !34
  %37 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %37, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 8, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, double*, double**, double**)* @.omp_outlined..38 to void (i32*, i32*, ...)*), i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double* nonnull %a_dot_b_box, double** nonnull %grid_a, double** nonnull %grid_b) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %7) #1
  call void @.omp_outlined..38(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double* nonnull %a_dot_b_box, double** nonnull %grid_a, double** nonnull %grid_b)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %7) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %38 = load double, double* %a_dot_b_box, align 8, !tbaa !34
  %39 = load double, double* %a_dot_b_domain5, align 8, !tbaa !34
  %add75 = fadd double %38, %39
  store double %add75, double* %a_dot_b_domain5, align 8, !tbaa !34
  call void @llvm.lifetime.end(i64 8, i8* nonnull %17) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  %40 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %41 = sext i32 %40 to i64
  %cmp8 = icmp slt i64 %indvars.iv, %41
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp8, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %7) #1
  %42 = bitcast [1 x i8*]* %.omp.reduction.red_list to double**
  store double* %a_dot_b_domain5, double** %42, align 8
  %43 = bitcast [1 x i8*]* %.omp.reduction.red_list to i8*
  %44 = call i32 @__kmpc_reduce_nowait(%ident_t* nonnull @1, i32 %7, i32 1, i64 8, i8* %43, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func.40, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  switch i32 %44, label %.omp.reduction.default [
    i32 1, label %.omp.reduction.case1
    i32 2, label %.omp.reduction.case2
  ]

.omp.reduction.case1:                             ; preds = %omp.loop.exit
  %45 = load double, double* %a_dot_b_domain, align 8, !tbaa !34
  %46 = load double, double* %a_dot_b_domain5, align 8, !tbaa !34
  %add77 = fadd double %45, %46
  store double %add77, double* %a_dot_b_domain, align 8, !tbaa !34
  call void @__kmpc_end_reduce_nowait(%ident_t* nonnull @1, i32 %7, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  br label %.omp.reduction.default

.omp.reduction.case2:                             ; preds = %omp.loop.exit
  %47 = bitcast double* %a_dot_b_domain to i64*
  %atomic-load = load atomic i64, i64* %47 monotonic, align 8, !tbaa !34
  %48 = load double, double* %a_dot_b_domain5, align 8
  br label %atomic_cont

atomic_cont:                                      ; preds = %atomic_cont, %.omp.reduction.case2
  %49 = phi i64 [ %atomic-load, %.omp.reduction.case2 ], [ %53, %atomic_cont ]
  %50 = bitcast i64 %49 to double
  %add78 = fadd double %50, %48
  %51 = bitcast double %add78 to i64
  %52 = cmpxchg i64* %47, i64 %49, i64 %51 monotonic monotonic
  %53 = extractvalue { i64, i1 } %52, 0
  %54 = extractvalue { i64, i1 } %52, 1
  br i1 %54, label %.omp.reduction.default.loopexit, label %atomic_cont

.omp.reduction.default.loopexit:                  ; preds = %atomic_cont
  br label %.omp.reduction.default

.omp.reduction.default:                           ; preds = %.omp.reduction.default.loopexit, %.omp.reduction.case1, %omp.loop.exit
  call void @llvm.lifetime.end(i64 8, i8* %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %.omp.reduction.default
  %.pre-phi111 = phi i8* [ %.pre110, %entry.omp.precond.end_crit_edge ], [ %2, %.omp.reduction.default ]
  %.pre-phi109 = phi i8* [ %.pre108, %entry.omp.precond.end_crit_edge ], [ %3, %.omp.reduction.default ]
  %.pre-phi107 = phi i8* [ %.pre106, %entry.omp.precond.end_crit_edge ], [ %4, %.omp.reduction.default ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %.omp.reduction.default ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi107) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi109) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi111) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..38(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k, i32* nocapture readonly dereferenceable(4) %dim_j, i32* nocapture readonly dereferenceable(4) %dim_i, i32* nocapture readonly dereferenceable(4) %pencil, i32* nocapture readonly dereferenceable(4) %plane, double* dereferenceable(8) %a_dot_b_box, double** nocapture readonly dereferenceable(8) %grid_a, double** nocapture readonly dereferenceable(8) %grid_b) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %a_dot_b_box15 = alloca double, align 8
  %.omp.reduction.red_list = alloca [1 x i8*], align 8
  %0 = load i32, i32* %dim_k, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre78 = bitcast i64* %.omp.stride to i8*
  %.pre80 = bitcast i64* %.omp.ub to i8*
  %.pre82 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = bitcast double* %a_dot_b_box15 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #1
  store double 0.000000e+00, double* %a_dot_b_box15, align 8, !tbaa !34
  %7 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %7, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %8 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp18 = icmp sgt i64 %8, %sub7
  %cond = select i1 %cmp18, i64 %sub7, i64 %8
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %9 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp2074 = icmp sgt i64 %9, %cond
  br i1 %cmp2074, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %10 = load i32, i32* %dim_j, align 4
  %conv26 = sext i32 %10 to i64
  %11 = load i32, i32* %dim_i, align 4
  %cmp3972 = icmp sgt i32 %11, 0
  %12 = load i32, i32* %pencil, align 4
  %13 = load i32, i32* %plane, align 4
  %14 = load double*, double** %grid_a, align 8
  %15 = load double*, double** %grid_b, align 8
  br i1 %cmp3972, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %16 = sext i32 %11 to i64
  %xtraiter = and i32 %11, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  %17 = icmp eq i32 %11, 1
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %18 = phi double [ %add48.us.lcssa, %for.cond.omp.inner.for.inc_crit_edge.us ], [ 0.000000e+00, %omp.inner.for.body.us.preheader ]
  %.omp.iv.075.us = phi i64 [ %add49.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %9, %omp.inner.for.body.us.preheader ]
  %div27.us = sdiv i64 %.omp.iv.075.us, %conv26
  %conv30.us = trunc i64 %div27.us to i32
  %rem.us = srem i64 %.omp.iv.075.us, %conv26
  %conv38.us = trunc i64 %rem.us to i32
  %mul41.us = mul nsw i32 %12, %conv38.us
  %mul43.us = mul nsw i32 %13, %conv30.us
  br i1 %lcmp.mod, label %omp.inner.for.body.us.split, label %for.body.us.prol

for.body.us.prol:                                 ; preds = %omp.inner.for.body.us
  %add44.us.prol = add nsw i32 %mul41.us, %mul43.us
  %idxprom.us.prol = sext i32 %add44.us.prol to i64
  %arrayidx.us.prol = getelementptr inbounds double, double* %14, i64 %idxprom.us.prol
  %19 = load double, double* %arrayidx.us.prol, align 8, !tbaa !34
  %arrayidx46.us.prol = getelementptr inbounds double, double* %15, i64 %idxprom.us.prol
  %20 = load double, double* %arrayidx46.us.prol, align 8, !tbaa !34
  %mul47.us.prol = fmul double %19, %20
  %add48.us.prol = fadd double %18, %mul47.us.prol
  store double %add48.us.prol, double* %a_dot_b_box15, align 8, !tbaa !34
  br label %omp.inner.for.body.us.split

omp.inner.for.body.us.split:                      ; preds = %omp.inner.for.body.us, %for.body.us.prol
  %.unr = phi double [ %18, %omp.inner.for.body.us ], [ %add48.us.prol, %for.body.us.prol ]
  %indvars.iv.unr = phi i64 [ 0, %omp.inner.for.body.us ], [ 1, %for.body.us.prol ]
  %i.073.us.unr = phi i32 [ 0, %omp.inner.for.body.us ], [ 1, %for.body.us.prol ]
  %add48.us.lcssa.unr = phi double [ undef, %omp.inner.for.body.us ], [ %add48.us.prol, %for.body.us.prol ]
  br i1 %17, label %for.cond.omp.inner.for.inc_crit_edge.us, label %omp.inner.for.body.us.split.split

omp.inner.for.body.us.split.split:                ; preds = %omp.inner.for.body.us.split
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %omp.inner.for.body.us.split.split
  %21 = phi double [ %.unr, %omp.inner.for.body.us.split.split ], [ %add48.us.1, %for.body.us ]
  %indvars.iv = phi i64 [ %indvars.iv.unr, %omp.inner.for.body.us.split.split ], [ %indvars.iv.next.1, %for.body.us ]
  %i.073.us = phi i32 [ %i.073.us.unr, %omp.inner.for.body.us.split.split ], [ %inc.us.1, %for.body.us ]
  %add42.us = add nsw i32 %mul41.us, %i.073.us
  %add44.us = add nsw i32 %add42.us, %mul43.us
  %idxprom.us = sext i32 %add44.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %14, i64 %idxprom.us
  %22 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %arrayidx46.us = getelementptr inbounds double, double* %15, i64 %idxprom.us
  %23 = load double, double* %arrayidx46.us, align 8, !tbaa !34
  %mul47.us = fmul double %22, %23
  %add48.us = fadd double %21, %mul47.us
  store double %add48.us, double* %a_dot_b_box15, align 8, !tbaa !34
  %inc.us = add nuw nsw i32 %i.073.us, 1
  %add42.us.1 = add nsw i32 %mul41.us, %inc.us
  %add44.us.1 = add nsw i32 %add42.us.1, %mul43.us
  %idxprom.us.1 = sext i32 %add44.us.1 to i64
  %arrayidx.us.1 = getelementptr inbounds double, double* %14, i64 %idxprom.us.1
  %24 = load double, double* %arrayidx.us.1, align 8, !tbaa !34
  %arrayidx46.us.1 = getelementptr inbounds double, double* %15, i64 %idxprom.us.1
  %25 = load double, double* %arrayidx46.us.1, align 8, !tbaa !34
  %mul47.us.1 = fmul double %24, %25
  %add48.us.1 = fadd double %add48.us, %mul47.us.1
  store double %add48.us.1, double* %a_dot_b_box15, align 8, !tbaa !34
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %inc.us.1 = add nsw i32 %i.073.us, 2
  %cmp39.us.1 = icmp slt i64 %indvars.iv.next.1, %16
  br i1 %cmp39.us.1, label %for.body.us, label %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa

for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa: ; preds = %for.body.us
  %add48.us.1.lcssa = phi double [ %add48.us.1, %for.body.us ]
  br label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %omp.inner.for.body.us.split, %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa
  %add48.us.lcssa = phi double [ %add48.us.lcssa.unr, %omp.inner.for.body.us.split ], [ %add48.us.1.lcssa, %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa ]
  %add49.us = add nsw i64 %.omp.iv.075.us, 1
  %cmp20.us = icmp slt i64 %.omp.iv.075.us, %cond
  br i1 %cmp20.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %7) #1
  %26 = bitcast [1 x i8*]* %.omp.reduction.red_list to double**
  store double* %a_dot_b_box15, double** %26, align 8
  %27 = bitcast [1 x i8*]* %.omp.reduction.red_list to i8*
  %28 = call i32 @__kmpc_reduce_nowait(%ident_t* nonnull @1, i32 %7, i32 1, i64 8, i8* %27, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func.39, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  switch i32 %28, label %.omp.reduction.default [
    i32 1, label %.omp.reduction.case1
    i32 2, label %.omp.reduction.case2
  ]

.omp.reduction.case1:                             ; preds = %omp.loop.exit
  %29 = load double, double* %a_dot_b_box, align 8, !tbaa !34
  %30 = load double, double* %a_dot_b_box15, align 8, !tbaa !34
  %add50 = fadd double %29, %30
  store double %add50, double* %a_dot_b_box, align 8, !tbaa !34
  call void @__kmpc_end_reduce_nowait(%ident_t* nonnull @1, i32 %7, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  br label %.omp.reduction.default

.omp.reduction.case2:                             ; preds = %omp.loop.exit
  %31 = bitcast double* %a_dot_b_box to i64*
  %atomic-load = load atomic i64, i64* %31 monotonic, align 8, !tbaa !34
  %32 = load double, double* %a_dot_b_box15, align 8
  br label %atomic_cont

atomic_cont:                                      ; preds = %atomic_cont, %.omp.reduction.case2
  %33 = phi i64 [ %atomic-load, %.omp.reduction.case2 ], [ %37, %atomic_cont ]
  %34 = bitcast i64 %33 to double
  %add51 = fadd double %34, %32
  %35 = bitcast double %add51 to i64
  %36 = cmpxchg i64* %31, i64 %33, i64 %35 monotonic monotonic
  %37 = extractvalue { i64, i1 } %36, 0
  %38 = extractvalue { i64, i1 } %36, 1
  br i1 %38, label %.omp.reduction.default.loopexit, label %atomic_cont

.omp.reduction.default.loopexit:                  ; preds = %atomic_cont
  br label %.omp.reduction.default

.omp.reduction.default:                           ; preds = %.omp.reduction.default.loopexit, %.omp.reduction.case1, %omp.loop.exit
  call void @llvm.lifetime.end(i64 8, i8* %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %.omp.reduction.default
  %.pre-phi83 = phi i8* [ %.pre82, %entry.omp.precond.end_crit_edge ], [ %2, %.omp.reduction.default ]
  %.pre-phi81 = phi i8* [ %.pre80, %entry.omp.precond.end_crit_edge ], [ %3, %.omp.reduction.default ]
  %.pre-phi79 = phi i8* [ %.pre78, %entry.omp.precond.end_crit_edge ], [ %4, %.omp.reduction.default ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %.omp.reduction.default ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi79) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi81) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi83) #1
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp.reduction.reduction_func.39(i8* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %2 = bitcast i8* %1 to double**
  %3 = load double*, double** %2, align 8
  %4 = bitcast i8* %0 to double**
  %5 = load double*, double** %4, align 8
  %6 = load double, double* %5, align 8, !tbaa !34
  %7 = load double, double* %3, align 8, !tbaa !34
  %add = fadd double %6, %7
  store double %add, double* %5, align 8, !tbaa !34
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp.reduction.reduction_func.40(i8* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %2 = bitcast i8* %1 to double**
  %3 = load double*, double** %2, align 8
  %4 = bitcast i8* %0 to double**
  %5 = load double*, double** %4, align 8
  %6 = load double, double* %5, align 8, !tbaa !34
  %7 = load double, double* %3, align 8, !tbaa !34
  %add = fadd double %6, %7
  store double %add, double* %5, align 8, !tbaa !34
  ret void
}

; Function Attrs: nounwind uwtable
define double @norm(%struct.domain_type* %domain, i32 %level, i32 %grid_id) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %grid_id.addr = alloca i32, align 4
  %omp_within_a_box = alloca i32, align 4
  %max_norm = alloca double, align 8
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  %send = alloca double, align 8
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store i32 %grid_id, i32* %grid_id.addr, align 4, !tbaa !35
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  %5 = bitcast double* %max_norm to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #1
  store double 0.000000e+00, double* %max_norm, align 8, !tbaa !34
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 5, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, double*)* @.omp_outlined..41 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %grid_id.addr, i32* nonnull %omp_within_a_box, double* nonnull %max_norm) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..41(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %grid_id.addr, i32* nonnull %omp_within_a_box, double* nonnull %max_norm)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %6 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %6 to i64
  %7 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %7, i64 0, i32 0, i32 12, i64 %idxprom12
  %8 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %8
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  %call14 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %9 = bitcast double* %send to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #1
  %10 = bitcast double* %max_norm to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !34
  %12 = bitcast double* %send to i64*
  store i64 %11, i64* %12, align 8, !tbaa !34
  %call15 = call i32 @MPI_Allreduce(i8* %9, i8* %5, i32 1, i32 1275070475, i32 1476395009, i32 1140850688) #1
  %call16 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub17 = sub i64 %call16, %call14
  %13 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom18 = sext i32 %13 to i64
  %14 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx20 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %14, i64 0, i32 0, i32 14, i64 %idxprom18
  %15 = load i64, i64* %arrayidx20, align 8, !tbaa !42
  %add21 = add i64 %15, %sub17
  store i64 %add21, i64* %arrayidx20, align 8, !tbaa !42
  %arrayidx25 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %14, i64 0, i32 0, i32 5, i64 %idxprom18
  %16 = load i64, i64* %arrayidx25, align 8, !tbaa !42
  %add26 = add i64 %16, %sub17
  store i64 %add26, i64* %arrayidx25, align 8, !tbaa !42
  %17 = load double, double* %max_norm, align 8, !tbaa !34
  call void @llvm.lifetime.end(i64 8, i8* %9) #1
  call void @llvm.lifetime.end(i64 8, i8* %5) #1
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret double %17
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..41(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %grid_id, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double* dereferenceable(8) %max_norm) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %max_norm5 = alloca double, align 8
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %dim_k = alloca i32, align 4
  %dim_j = alloca i32, align 4
  %dim_i = alloca i32, align 4
  %grid = alloca double*, align 8
  %box_norm = alloca double, align 8
  %.zero.addr = alloca i32, align 4
  %.omp.reduction.red_list = alloca [1 x i8*], align 8
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre99 = bitcast i32* %.omp.stride to i8*
  %.pre101 = bitcast i32* %.omp.ub to i8*
  %.pre103 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = bitcast double* %max_norm5 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #1
  store double 0xFFEFFFFFFFFFFFFF, double* %max_norm5, align 8, !tbaa !34
  %7 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %7, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %8 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp7 = icmp sgt i32 %8, %sub1
  %cond = select i1 %cmp7, i32 %sub1, i32 %8
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %9 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp897 = icmp sgt i32 %9, %cond
  br i1 %cmp897, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %10 = bitcast i32* %pencil to i8*
  %11 = bitcast i32* %plane to i8*
  %12 = bitcast i32* %dim_k to i8*
  %13 = bitcast i32* %dim_j to i8*
  %14 = bitcast i32* %dim_i to i8*
  %15 = bitcast double** %grid to i8*
  %16 = bitcast double* %box_norm to i8*
  %17 = sext i32 %9 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %if.end ], [ %17, %omp.inner.for.body.lr.ph ]
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %18 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %18 to i64
  %19 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %19, i64 0, i32 28
  %20 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %20, i64 %indvars.iv, i32 5
  %21 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil12 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 5
  %22 = load i32, i32* %pencil12, align 8, !tbaa !54
  store i32 %22, i32* %pencil, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %plane19 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 6
  %23 = load i32, i32* %plane19, align 4, !tbaa !55
  store i32 %23, i32* %plane, align 4, !tbaa !35
  %ghosts26 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 4
  %24 = load i32, i32* %ghosts26, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %k33 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 2
  %25 = load i32, i32* %k33, align 4, !tbaa !40
  store i32 %25, i32* %dim_k, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %j41 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 1
  %26 = load i32, i32* %j41, align 4, !tbaa !37
  store i32 %26, i32* %dim_j, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %14) #1
  %i49 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 0
  %27 = load i32, i32* %i49, align 4, !tbaa !43
  store i32 %27, i32* %dim_i, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %28 = load i32, i32* %grid_id, align 4, !tbaa !35
  %idxprom50 = sext i32 %28 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 10
  %29 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx57 = getelementptr inbounds double*, double** %29, i64 %idxprom50
  %30 = load double*, double** %arrayidx57, align 8, !tbaa !1
  %add58 = add nsw i32 %22, 1
  %add59 = add nsw i32 %add58, %23
  %mul60 = mul nsw i32 %add59, %24
  %idx.ext = sext i32 %mul60 to i64
  %add.ptr = getelementptr inbounds double, double* %30, i64 %idx.ext
  store double* %add.ptr, double** %grid, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %16) #1
  store double 0.000000e+00, double* %box_norm, align 8, !tbaa !34
  %31 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %31, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 7, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**, double*)* @.omp_outlined..42 to void (i32*, i32*, ...)*), i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid, double* nonnull %box_norm) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %7) #1
  call void @.omp_outlined..42(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid, double* nonnull %box_norm)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %7) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %32 = load double, double* %box_norm, align 8, !tbaa !34
  %33 = load double, double* %max_norm5, align 8, !tbaa !34
  %cmp61 = fcmp ogt double %32, %33
  br i1 %cmp61, label %if.then, label %if.end

if.then:                                          ; preds = %omp_if.end
  store double %32, double* %max_norm5, align 8, !tbaa !34
  br label %if.end

if.end:                                           ; preds = %if.then, %omp_if.end
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  %34 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %35 = sext i32 %34 to i64
  %cmp8 = icmp slt i64 %indvars.iv, %35
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp8, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %if.end
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %7) #1
  %36 = bitcast [1 x i8*]* %.omp.reduction.red_list to double**
  store double* %max_norm5, double** %36, align 8
  %37 = bitcast [1 x i8*]* %.omp.reduction.red_list to i8*
  %38 = call i32 @__kmpc_reduce_nowait(%ident_t* nonnull @1, i32 %7, i32 1, i64 8, i8* %37, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func.44, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  switch i32 %38, label %.omp.reduction.default [
    i32 1, label %.omp.reduction.case1
    i32 2, label %.omp.reduction.case2
  ]

.omp.reduction.case1:                             ; preds = %omp.loop.exit
  %39 = load double, double* %max_norm, align 8, !tbaa !34
  %40 = load double, double* %max_norm5, align 8, !tbaa !34
  %cmp63 = fcmp ogt double %39, %40
  %. = select i1 %cmp63, double %39, double %40
  store double %., double* %max_norm, align 8, !tbaa !34
  call void @__kmpc_end_reduce_nowait(%ident_t* nonnull @1, i32 %7, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  br label %.omp.reduction.default

.omp.reduction.case2:                             ; preds = %omp.loop.exit
  %41 = bitcast double* %max_norm to i64*
  %atomic-load = load atomic i64, i64* %41 monotonic, align 8, !tbaa !34
  %42 = load double, double* %max_norm5, align 8
  br label %atomic_cont

atomic_cont:                                      ; preds = %atomic_cont, %.omp.reduction.case2
  %43 = phi i64 [ %atomic-load, %.omp.reduction.case2 ], [ %47, %atomic_cont ]
  %44 = bitcast i64 %43 to double
  %cmp68 = fcmp ogt double %44, %42
  %cond72 = select i1 %cmp68, double %44, double %42
  %45 = bitcast double %cond72 to i64
  %46 = cmpxchg i64* %41, i64 %43, i64 %45 monotonic monotonic
  %47 = extractvalue { i64, i1 } %46, 0
  %48 = extractvalue { i64, i1 } %46, 1
  br i1 %48, label %.omp.reduction.default.loopexit, label %atomic_cont

.omp.reduction.default.loopexit:                  ; preds = %atomic_cont
  br label %.omp.reduction.default

.omp.reduction.default:                           ; preds = %.omp.reduction.default.loopexit, %.omp.reduction.case1, %omp.loop.exit
  call void @llvm.lifetime.end(i64 8, i8* %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %.omp.reduction.default
  %.pre-phi104 = phi i8* [ %.pre103, %entry.omp.precond.end_crit_edge ], [ %2, %.omp.reduction.default ]
  %.pre-phi102 = phi i8* [ %.pre101, %entry.omp.precond.end_crit_edge ], [ %3, %.omp.reduction.default ]
  %.pre-phi100 = phi i8* [ %.pre99, %entry.omp.precond.end_crit_edge ], [ %4, %.omp.reduction.default ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %.omp.reduction.default ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi100) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi102) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi104) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..42(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k, i32* nocapture readonly dereferenceable(4) %dim_j, i32* nocapture readonly dereferenceable(4) %dim_i, i32* nocapture readonly dereferenceable(4) %pencil, i32* nocapture readonly dereferenceable(4) %plane, double** nocapture readonly dereferenceable(8) %grid, double* dereferenceable(8) %box_norm) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %box_norm15 = alloca double, align 8
  %.omp.reduction.red_list = alloca [1 x i8*], align 8
  %0 = load i32, i32* %dim_k, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre88 = bitcast i64* %.omp.stride to i8*
  %.pre90 = bitcast i64* %.omp.ub to i8*
  %.pre92 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = bitcast double* %box_norm15 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #1
  store double 0xFFEFFFFFFFFFFFFF, double* %box_norm15, align 8, !tbaa !34
  %7 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %7, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %8 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp18 = icmp sgt i64 %8, %sub7
  %cond = select i1 %cmp18, i64 %sub7, i64 %8
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %9 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp2084 = icmp sgt i64 %9, %cond
  br i1 %cmp2084, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %10 = load i32, i32* %dim_j, align 4
  %conv26 = sext i32 %10 to i64
  %11 = load i32, i32* %dim_i, align 4
  %cmp3982 = icmp sgt i32 %11, 0
  %12 = load i32, i32* %pencil, align 4
  %13 = load i32, i32* %plane, align 4
  %14 = load double*, double** %grid, align 8
  br i1 %cmp3982, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %xtraiter = and i32 %11, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  %15 = icmp eq i32 %11, 1
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %16 = phi double [ %.lcssa, %for.cond.omp.inner.for.inc_crit_edge.us ], [ 0xFFEFFFFFFFFFFFFF, %omp.inner.for.body.us.preheader ]
  %.omp.iv.085.us = phi i64 [ %add47.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %9, %omp.inner.for.body.us.preheader ]
  %div27.us = sdiv i64 %.omp.iv.085.us, %conv26
  %conv30.us = trunc i64 %div27.us to i32
  %rem.us = srem i64 %.omp.iv.085.us, %conv26
  %conv38.us = trunc i64 %rem.us to i32
  %mul41.us = mul nsw i32 %12, %conv38.us
  %mul43.us = mul nsw i32 %13, %conv30.us
  br i1 %lcmp.mod, label %omp.inner.for.body.us.split, label %for.body.us.prol

for.body.us.prol:                                 ; preds = %omp.inner.for.body.us
  %add44.us.prol = add nsw i32 %mul41.us, %mul43.us
  %idxprom.us.prol = sext i32 %add44.us.prol to i64
  %arrayidx.us.prol = getelementptr inbounds double, double* %14, i64 %idxprom.us.prol
  %17 = load double, double* %arrayidx.us.prol, align 8, !tbaa !34
  %call.us.prol = call double @fabs(double %17) #11
  %cmp45.us.prol = fcmp ogt double %call.us.prol, %16
  br i1 %cmp45.us.prol, label %if.then.us.prol, label %if.end.us.prol

if.then.us.prol:                                  ; preds = %for.body.us.prol
  store double %call.us.prol, double* %box_norm15, align 8, !tbaa !34
  br label %if.end.us.prol

if.end.us.prol:                                   ; preds = %if.then.us.prol, %for.body.us.prol
  %18 = phi double [ %call.us.prol, %if.then.us.prol ], [ %16, %for.body.us.prol ]
  br label %omp.inner.for.body.us.split

omp.inner.for.body.us.split:                      ; preds = %omp.inner.for.body.us, %if.end.us.prol
  %.lcssa.unr = phi double [ undef, %omp.inner.for.body.us ], [ %18, %if.end.us.prol ]
  %.unr = phi double [ %16, %omp.inner.for.body.us ], [ %18, %if.end.us.prol ]
  %indvars.iv.unr = phi i64 [ 0, %omp.inner.for.body.us ], [ 1, %if.end.us.prol ]
  %i.083.us.unr = phi i32 [ 0, %omp.inner.for.body.us ], [ 1, %if.end.us.prol ]
  br i1 %15, label %for.cond.omp.inner.for.inc_crit_edge.us, label %omp.inner.for.body.us.split.split

omp.inner.for.body.us.split.split:                ; preds = %omp.inner.for.body.us.split
  br label %for.body.us

for.body.us:                                      ; preds = %if.end.us.1, %omp.inner.for.body.us.split.split
  %19 = phi double [ %.unr, %omp.inner.for.body.us.split.split ], [ %36, %if.end.us.1 ]
  %indvars.iv = phi i64 [ %indvars.iv.unr, %omp.inner.for.body.us.split.split ], [ %indvars.iv.next.1, %if.end.us.1 ]
  %i.083.us = phi i32 [ %i.083.us.unr, %omp.inner.for.body.us.split.split ], [ %inc.us.1, %if.end.us.1 ]
  %add42.us = add nsw i32 %mul41.us, %i.083.us
  %add44.us = add nsw i32 %add42.us, %mul43.us
  %idxprom.us = sext i32 %add44.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %14, i64 %idxprom.us
  %20 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %call.us = call double @fabs(double %20) #11
  %cmp45.us = fcmp ogt double %call.us, %19
  br i1 %cmp45.us, label %if.then.us, label %if.end.us

if.then.us:                                       ; preds = %for.body.us
  store double %call.us, double* %box_norm15, align 8, !tbaa !34
  br label %if.end.us

if.end.us:                                        ; preds = %if.then.us, %for.body.us
  %21 = phi double [ %call.us, %if.then.us ], [ %19, %for.body.us ]
  %inc.us = add nuw nsw i32 %i.083.us, 1
  %add42.us.1 = add nsw i32 %mul41.us, %inc.us
  %add44.us.1 = add nsw i32 %add42.us.1, %mul43.us
  %idxprom.us.1 = sext i32 %add44.us.1 to i64
  %arrayidx.us.1 = getelementptr inbounds double, double* %14, i64 %idxprom.us.1
  %22 = load double, double* %arrayidx.us.1, align 8, !tbaa !34
  %call.us.1 = call double @fabs(double %22) #11
  %cmp45.us.1 = fcmp ogt double %call.us.1, %21
  br i1 %cmp45.us.1, label %if.then.us.1, label %if.end.us.1

for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa: ; preds = %if.end.us.1
  %.lcssa94 = phi double [ %36, %if.end.us.1 ]
  br label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %omp.inner.for.body.us.split, %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa
  %.lcssa = phi double [ %.lcssa.unr, %omp.inner.for.body.us.split ], [ %.lcssa94, %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa ]
  %add47.us = add nsw i64 %.omp.iv.085.us, 1
  %cmp20.us = icmp slt i64 %.omp.iv.085.us, %cond
  br i1 %cmp20.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %7) #1
  %23 = bitcast [1 x i8*]* %.omp.reduction.red_list to double**
  store double* %box_norm15, double** %23, align 8
  %24 = bitcast [1 x i8*]* %.omp.reduction.red_list to i8*
  %25 = call i32 @__kmpc_reduce_nowait(%ident_t* nonnull @1, i32 %7, i32 1, i64 8, i8* %24, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func.43, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  switch i32 %25, label %.omp.reduction.default [
    i32 1, label %.omp.reduction.case1
    i32 2, label %.omp.reduction.case2
  ]

.omp.reduction.case1:                             ; preds = %omp.loop.exit
  %26 = load double, double* %box_norm, align 8, !tbaa !34
  %27 = load double, double* %box_norm15, align 8, !tbaa !34
  %cmp48 = fcmp ogt double %26, %27
  %. = select i1 %cmp48, double %26, double %27
  store double %., double* %box_norm, align 8, !tbaa !34
  call void @__kmpc_end_reduce_nowait(%ident_t* nonnull @1, i32 %7, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  br label %.omp.reduction.default

.omp.reduction.case2:                             ; preds = %omp.loop.exit
  %28 = bitcast double* %box_norm to i64*
  %atomic-load = load atomic i64, i64* %28 monotonic, align 8, !tbaa !34
  %29 = load double, double* %box_norm15, align 8
  br label %atomic_cont

atomic_cont:                                      ; preds = %atomic_cont, %.omp.reduction.case2
  %30 = phi i64 [ %atomic-load, %.omp.reduction.case2 ], [ %34, %atomic_cont ]
  %31 = bitcast i64 %30 to double
  %cmp54 = fcmp ogt double %31, %29
  %cond59 = select i1 %cmp54, double %31, double %29
  %32 = bitcast double %cond59 to i64
  %33 = cmpxchg i64* %28, i64 %30, i64 %32 monotonic monotonic
  %34 = extractvalue { i64, i1 } %33, 0
  %35 = extractvalue { i64, i1 } %33, 1
  br i1 %35, label %.omp.reduction.default.loopexit, label %atomic_cont

.omp.reduction.default.loopexit:                  ; preds = %atomic_cont
  br label %.omp.reduction.default

.omp.reduction.default:                           ; preds = %.omp.reduction.default.loopexit, %.omp.reduction.case1, %omp.loop.exit
  call void @llvm.lifetime.end(i64 8, i8* %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %.omp.reduction.default
  %.pre-phi93 = phi i8* [ %.pre92, %entry.omp.precond.end_crit_edge ], [ %2, %.omp.reduction.default ]
  %.pre-phi91 = phi i8* [ %.pre90, %entry.omp.precond.end_crit_edge ], [ %3, %.omp.reduction.default ]
  %.pre-phi89 = phi i8* [ %.pre88, %entry.omp.precond.end_crit_edge ], [ %4, %.omp.reduction.default ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %.omp.reduction.default ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi89) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi91) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi93) #1
  ret void

if.then.us.1:                                     ; preds = %if.end.us
  store double %call.us.1, double* %box_norm15, align 8, !tbaa !34
  br label %if.end.us.1

if.end.us.1:                                      ; preds = %if.then.us.1, %if.end.us
  %36 = phi double [ %call.us.1, %if.then.us.1 ], [ %21, %if.end.us ]
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %inc.us.1 = add nsw i32 %i.083.us, 2
  %lftr.wideiv.1 = trunc i64 %indvars.iv.next.1 to i32
  %exitcond.1 = icmp eq i32 %lftr.wideiv.1, %11
  br i1 %exitcond.1, label %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa, label %for.body.us
}

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp.reduction.reduction_func.43(i8* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %2 = bitcast i8* %1 to double**
  %3 = load double*, double** %2, align 8
  %4 = bitcast i8* %0 to double**
  %5 = load double*, double** %4, align 8
  %6 = load double, double* %5, align 8, !tbaa !34
  %7 = load double, double* %3, align 8, !tbaa !34
  %cmp = fcmp ogt double %6, %7
  %. = select i1 %cmp, double %6, double %7
  store double %., double* %5, align 8, !tbaa !34
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp.reduction.reduction_func.44(i8* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %2 = bitcast i8* %1 to double**
  %3 = load double*, double** %2, align 8
  %4 = bitcast i8* %0 to double**
  %5 = load double*, double** %4, align 8
  %6 = load double, double* %5, align 8, !tbaa !34
  %7 = load double, double* %3, align 8, !tbaa !34
  %cmp = fcmp ogt double %6, %7
  %. = select i1 %cmp, double %6, double %7
  store double %., double* %5, align 8, !tbaa !34
  ret void
}

; Function Attrs: nounwind uwtable
define double @mean(%struct.domain_type* %domain, i32 %level, i32 %id_a) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %id_a.addr = alloca i32, align 4
  %omp_within_a_box = alloca i32, align 4
  %sum_domain = alloca double, align 8
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  %send = alloca double, align 8
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store i32 %id_a, i32* %id_a.addr, align 4, !tbaa !35
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  %5 = bitcast double* %sum_domain to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #1
  store double 0.000000e+00, double* %sum_domain, align 8, !tbaa !34
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 5, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, double*)* @.omp_outlined..45 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %id_a.addr, i32* nonnull %omp_within_a_box, double* nonnull %sum_domain) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..45(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %id_a.addr, i32* nonnull %omp_within_a_box, double* nonnull %sum_domain)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %6 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %6 to i64
  %7 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %7, i64 0, i32 0, i32 12, i64 %idxprom12
  %8 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %8
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  %i15 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %7, i64 0, i32 16, i32 0
  %9 = bitcast i32* %i15 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = trunc i64 %10 to i32
  %conv16 = sitofp i32 %11 to double
  %12 = lshr i64 %10, 32
  %13 = trunc i64 %12 to i32
  %conv18 = sitofp i32 %13 to double
  %mul = fmul double %conv16, %conv18
  %k = getelementptr inbounds %struct.domain_type, %struct.domain_type* %7, i64 0, i32 16, i32 2
  %14 = load i32, i32* %k, align 8, !tbaa !85
  %conv20 = sitofp i32 %14 to double
  %mul21 = fmul double %mul, %conv20
  %call22 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %15 = bitcast double* %send to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %16 = bitcast double* %sum_domain to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !34
  %18 = bitcast double* %send to i64*
  store i64 %17, i64* %18, align 8, !tbaa !34
  %call23 = call i32 @MPI_Allreduce(i8* %15, i8* %5, i32 1, i32 1275070475, i32 1476395011, i32 1140850688) #1
  %call24 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub25 = sub i64 %call24, %call22
  %19 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom26 = sext i32 %19 to i64
  %20 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx28 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %20, i64 0, i32 0, i32 14, i64 %idxprom26
  %21 = load i64, i64* %arrayidx28, align 8, !tbaa !42
  %add29 = add i64 %21, %sub25
  store i64 %add29, i64* %arrayidx28, align 8, !tbaa !42
  %arrayidx33 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %20, i64 0, i32 0, i32 5, i64 %idxprom26
  %22 = load i64, i64* %arrayidx33, align 8, !tbaa !42
  %add34 = add i64 %22, %sub25
  store i64 %add34, i64* %arrayidx33, align 8, !tbaa !42
  %23 = load double, double* %sum_domain, align 8, !tbaa !34
  %div = fdiv double %23, %mul21
  call void @llvm.lifetime.end(i64 8, i8* %15) #1
  call void @llvm.lifetime.end(i64 8, i8* %5) #1
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret double %div
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..45(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %id_a, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double* dereferenceable(8) %sum_domain) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %sum_domain5 = alloca double, align 8
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %dim_k = alloca i32, align 4
  %dim_j = alloca i32, align 4
  %dim_i = alloca i32, align 4
  %grid_a = alloca double*, align 8
  %sum_box = alloca double, align 8
  %.zero.addr = alloca i32, align 4
  %.omp.reduction.red_list = alloca [1 x i8*], align 8
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre90 = bitcast i32* %.omp.stride to i8*
  %.pre92 = bitcast i32* %.omp.ub to i8*
  %.pre94 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = bitcast double* %sum_domain5 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #1
  store double 0.000000e+00, double* %sum_domain5, align 8, !tbaa !34
  %7 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %7, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %8 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp7 = icmp sgt i32 %8, %sub1
  %cond = select i1 %cmp7, i32 %sub1, i32 %8
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %9 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp888 = icmp sgt i32 %9, %cond
  br i1 %cmp888, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %10 = bitcast i32* %pencil to i8*
  %11 = bitcast i32* %plane to i8*
  %12 = bitcast i32* %dim_k to i8*
  %13 = bitcast i32* %dim_j to i8*
  %14 = bitcast i32* %dim_i to i8*
  %15 = bitcast double** %grid_a to i8*
  %16 = bitcast double* %sum_box to i8*
  %17 = sext i32 %9 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %17, %omp.inner.for.body.lr.ph ]
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %18 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %18 to i64
  %19 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %19, i64 0, i32 28
  %20 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %20, i64 %indvars.iv, i32 5
  %21 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil12 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 5
  %22 = load i32, i32* %pencil12, align 8, !tbaa !54
  store i32 %22, i32* %pencil, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %plane19 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 6
  %23 = load i32, i32* %plane19, align 4, !tbaa !55
  store i32 %23, i32* %plane, align 4, !tbaa !35
  %ghosts26 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 4
  %24 = load i32, i32* %ghosts26, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %k33 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 2
  %25 = load i32, i32* %k33, align 4, !tbaa !40
  store i32 %25, i32* %dim_k, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %j41 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 1
  %26 = load i32, i32* %j41, align 4, !tbaa !37
  store i32 %26, i32* %dim_j, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %14) #1
  %i49 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 0
  %27 = load i32, i32* %i49, align 4, !tbaa !43
  store i32 %27, i32* %dim_i, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %28 = load i32, i32* %id_a, align 4, !tbaa !35
  %idxprom50 = sext i32 %28 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 10
  %29 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx57 = getelementptr inbounds double*, double** %29, i64 %idxprom50
  %30 = load double*, double** %arrayidx57, align 8, !tbaa !1
  %add58 = add nsw i32 %22, 1
  %add59 = add nsw i32 %add58, %23
  %mul60 = mul nsw i32 %add59, %24
  %idx.ext = sext i32 %mul60 to i64
  %add.ptr = getelementptr inbounds double, double* %30, i64 %idx.ext
  store double* %add.ptr, double** %grid_a, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %16) #1
  store double 0.000000e+00, double* %sum_box, align 8, !tbaa !34
  %31 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %31, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 7, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, double*, double**)* @.omp_outlined..46 to void (i32*, i32*, ...)*), i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double* nonnull %sum_box, double** nonnull %grid_a) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %7) #1
  call void @.omp_outlined..46(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double* nonnull %sum_box, double** nonnull %grid_a)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %7) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %32 = load double, double* %sum_box, align 8, !tbaa !34
  %33 = load double, double* %sum_domain5, align 8, !tbaa !34
  %add61 = fadd double %32, %33
  store double %add61, double* %sum_domain5, align 8, !tbaa !34
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  %34 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %35 = sext i32 %34 to i64
  %cmp8 = icmp slt i64 %indvars.iv, %35
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp8, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %7) #1
  %36 = bitcast [1 x i8*]* %.omp.reduction.red_list to double**
  store double* %sum_domain5, double** %36, align 8
  %37 = bitcast [1 x i8*]* %.omp.reduction.red_list to i8*
  %38 = call i32 @__kmpc_reduce_nowait(%ident_t* nonnull @1, i32 %7, i32 1, i64 8, i8* %37, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func.48, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  switch i32 %38, label %.omp.reduction.default [
    i32 1, label %.omp.reduction.case1
    i32 2, label %.omp.reduction.case2
  ]

.omp.reduction.case1:                             ; preds = %omp.loop.exit
  %39 = load double, double* %sum_domain, align 8, !tbaa !34
  %40 = load double, double* %sum_domain5, align 8, !tbaa !34
  %add63 = fadd double %39, %40
  store double %add63, double* %sum_domain, align 8, !tbaa !34
  call void @__kmpc_end_reduce_nowait(%ident_t* nonnull @1, i32 %7, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  br label %.omp.reduction.default

.omp.reduction.case2:                             ; preds = %omp.loop.exit
  %41 = bitcast double* %sum_domain to i64*
  %atomic-load = load atomic i64, i64* %41 monotonic, align 8, !tbaa !34
  %42 = load double, double* %sum_domain5, align 8
  br label %atomic_cont

atomic_cont:                                      ; preds = %atomic_cont, %.omp.reduction.case2
  %43 = phi i64 [ %atomic-load, %.omp.reduction.case2 ], [ %47, %atomic_cont ]
  %44 = bitcast i64 %43 to double
  %add64 = fadd double %44, %42
  %45 = bitcast double %add64 to i64
  %46 = cmpxchg i64* %41, i64 %43, i64 %45 monotonic monotonic
  %47 = extractvalue { i64, i1 } %46, 0
  %48 = extractvalue { i64, i1 } %46, 1
  br i1 %48, label %.omp.reduction.default.loopexit, label %atomic_cont

.omp.reduction.default.loopexit:                  ; preds = %atomic_cont
  br label %.omp.reduction.default

.omp.reduction.default:                           ; preds = %.omp.reduction.default.loopexit, %.omp.reduction.case1, %omp.loop.exit
  call void @llvm.lifetime.end(i64 8, i8* %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %.omp.reduction.default
  %.pre-phi95 = phi i8* [ %.pre94, %entry.omp.precond.end_crit_edge ], [ %2, %.omp.reduction.default ]
  %.pre-phi93 = phi i8* [ %.pre92, %entry.omp.precond.end_crit_edge ], [ %3, %.omp.reduction.default ]
  %.pre-phi91 = phi i8* [ %.pre90, %entry.omp.precond.end_crit_edge ], [ %4, %.omp.reduction.default ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %.omp.reduction.default ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi91) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi93) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi95) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..46(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k, i32* nocapture readonly dereferenceable(4) %dim_j, i32* nocapture readonly dereferenceable(4) %dim_i, i32* nocapture readonly dereferenceable(4) %pencil, i32* nocapture readonly dereferenceable(4) %plane, double* dereferenceable(8) %sum_box, double** nocapture readonly dereferenceable(8) %grid_a) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %sum_box15 = alloca double, align 8
  %.omp.reduction.red_list = alloca [1 x i8*], align 8
  %0 = load i32, i32* %dim_k, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre74 = bitcast i64* %.omp.stride to i8*
  %.pre76 = bitcast i64* %.omp.ub to i8*
  %.pre78 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = bitcast double* %sum_box15 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #1
  store double 0.000000e+00, double* %sum_box15, align 8, !tbaa !34
  %7 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %7, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %8 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp18 = icmp sgt i64 %8, %sub7
  %cond = select i1 %cmp18, i64 %sub7, i64 %8
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %9 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp2070 = icmp sgt i64 %9, %cond
  br i1 %cmp2070, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %10 = load i32, i32* %dim_j, align 4
  %conv26 = sext i32 %10 to i64
  %11 = load i32, i32* %dim_i, align 4
  %cmp3968 = icmp sgt i32 %11, 0
  %12 = load i32, i32* %pencil, align 4
  %13 = load i32, i32* %plane, align 4
  %14 = load double*, double** %grid_a, align 8
  br i1 %cmp3968, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %xtraiter = and i32 %11, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  %15 = icmp eq i32 %11, 1
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %16 = phi double [ %add45.us.lcssa, %for.cond.omp.inner.for.inc_crit_edge.us ], [ 0.000000e+00, %omp.inner.for.body.us.preheader ]
  %.omp.iv.071.us = phi i64 [ %add46.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %9, %omp.inner.for.body.us.preheader ]
  %div27.us = sdiv i64 %.omp.iv.071.us, %conv26
  %conv30.us = trunc i64 %div27.us to i32
  %rem.us = srem i64 %.omp.iv.071.us, %conv26
  %conv38.us = trunc i64 %rem.us to i32
  %mul41.us = mul nsw i32 %12, %conv38.us
  %mul43.us = mul nsw i32 %13, %conv30.us
  br i1 %lcmp.mod, label %omp.inner.for.body.us.split, label %for.body.us.prol

for.body.us.prol:                                 ; preds = %omp.inner.for.body.us
  %add44.us.prol = add nsw i32 %mul41.us, %mul43.us
  %idxprom.us.prol = sext i32 %add44.us.prol to i64
  %arrayidx.us.prol = getelementptr inbounds double, double* %14, i64 %idxprom.us.prol
  %17 = load double, double* %arrayidx.us.prol, align 8, !tbaa !34
  %add45.us.prol = fadd double %17, %16
  store double %add45.us.prol, double* %sum_box15, align 8, !tbaa !34
  br label %omp.inner.for.body.us.split

omp.inner.for.body.us.split:                      ; preds = %omp.inner.for.body.us, %for.body.us.prol
  %add45.us.lcssa.unr = phi double [ undef, %omp.inner.for.body.us ], [ %add45.us.prol, %for.body.us.prol ]
  %.unr = phi double [ %16, %omp.inner.for.body.us ], [ %add45.us.prol, %for.body.us.prol ]
  %indvars.iv.unr = phi i64 [ 0, %omp.inner.for.body.us ], [ 1, %for.body.us.prol ]
  %i.069.us.unr = phi i32 [ 0, %omp.inner.for.body.us ], [ 1, %for.body.us.prol ]
  br i1 %15, label %for.cond.omp.inner.for.inc_crit_edge.us, label %omp.inner.for.body.us.split.split

omp.inner.for.body.us.split.split:                ; preds = %omp.inner.for.body.us.split
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %omp.inner.for.body.us.split.split
  %18 = phi double [ %.unr, %omp.inner.for.body.us.split.split ], [ %add45.us.1, %for.body.us ]
  %indvars.iv = phi i64 [ %indvars.iv.unr, %omp.inner.for.body.us.split.split ], [ %indvars.iv.next.1, %for.body.us ]
  %i.069.us = phi i32 [ %i.069.us.unr, %omp.inner.for.body.us.split.split ], [ %inc.us.1, %for.body.us ]
  %add42.us = add nsw i32 %mul41.us, %i.069.us
  %add44.us = add nsw i32 %add42.us, %mul43.us
  %idxprom.us = sext i32 %add44.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %14, i64 %idxprom.us
  %19 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %add45.us = fadd double %19, %18
  store double %add45.us, double* %sum_box15, align 8, !tbaa !34
  %inc.us = add nuw nsw i32 %i.069.us, 1
  %add42.us.1 = add nsw i32 %mul41.us, %inc.us
  %add44.us.1 = add nsw i32 %add42.us.1, %mul43.us
  %idxprom.us.1 = sext i32 %add44.us.1 to i64
  %arrayidx.us.1 = getelementptr inbounds double, double* %14, i64 %idxprom.us.1
  %20 = load double, double* %arrayidx.us.1, align 8, !tbaa !34
  %add45.us.1 = fadd double %20, %add45.us
  store double %add45.us.1, double* %sum_box15, align 8, !tbaa !34
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %inc.us.1 = add nsw i32 %i.069.us, 2
  %lftr.wideiv.1 = trunc i64 %indvars.iv.next.1 to i32
  %exitcond.1 = icmp eq i32 %lftr.wideiv.1, %11
  br i1 %exitcond.1, label %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa, label %for.body.us

for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa: ; preds = %for.body.us
  %add45.us.1.lcssa = phi double [ %add45.us.1, %for.body.us ]
  br label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %omp.inner.for.body.us.split, %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa
  %add45.us.lcssa = phi double [ %add45.us.lcssa.unr, %omp.inner.for.body.us.split ], [ %add45.us.1.lcssa, %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa ]
  %add46.us = add nsw i64 %.omp.iv.071.us, 1
  %cmp20.us = icmp slt i64 %.omp.iv.071.us, %cond
  br i1 %cmp20.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %7) #1
  %21 = bitcast [1 x i8*]* %.omp.reduction.red_list to double**
  store double* %sum_box15, double** %21, align 8
  %22 = bitcast [1 x i8*]* %.omp.reduction.red_list to i8*
  %23 = call i32 @__kmpc_reduce_nowait(%ident_t* nonnull @1, i32 %7, i32 1, i64 8, i8* %22, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func.47, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  switch i32 %23, label %.omp.reduction.default [
    i32 1, label %.omp.reduction.case1
    i32 2, label %.omp.reduction.case2
  ]

.omp.reduction.case1:                             ; preds = %omp.loop.exit
  %24 = load double, double* %sum_box, align 8, !tbaa !34
  %25 = load double, double* %sum_box15, align 8, !tbaa !34
  %add47 = fadd double %24, %25
  store double %add47, double* %sum_box, align 8, !tbaa !34
  call void @__kmpc_end_reduce_nowait(%ident_t* nonnull @1, i32 %7, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  br label %.omp.reduction.default

.omp.reduction.case2:                             ; preds = %omp.loop.exit
  %26 = bitcast double* %sum_box to i64*
  %atomic-load = load atomic i64, i64* %26 monotonic, align 8, !tbaa !34
  %27 = load double, double* %sum_box15, align 8
  br label %atomic_cont

atomic_cont:                                      ; preds = %atomic_cont, %.omp.reduction.case2
  %28 = phi i64 [ %atomic-load, %.omp.reduction.case2 ], [ %32, %atomic_cont ]
  %29 = bitcast i64 %28 to double
  %add48 = fadd double %29, %27
  %30 = bitcast double %add48 to i64
  %31 = cmpxchg i64* %26, i64 %28, i64 %30 monotonic monotonic
  %32 = extractvalue { i64, i1 } %31, 0
  %33 = extractvalue { i64, i1 } %31, 1
  br i1 %33, label %.omp.reduction.default.loopexit, label %atomic_cont

.omp.reduction.default.loopexit:                  ; preds = %atomic_cont
  br label %.omp.reduction.default

.omp.reduction.default:                           ; preds = %.omp.reduction.default.loopexit, %.omp.reduction.case1, %omp.loop.exit
  call void @llvm.lifetime.end(i64 8, i8* %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %.omp.reduction.default
  %.pre-phi79 = phi i8* [ %.pre78, %entry.omp.precond.end_crit_edge ], [ %2, %.omp.reduction.default ]
  %.pre-phi77 = phi i8* [ %.pre76, %entry.omp.precond.end_crit_edge ], [ %3, %.omp.reduction.default ]
  %.pre-phi75 = phi i8* [ %.pre74, %entry.omp.precond.end_crit_edge ], [ %4, %.omp.reduction.default ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %.omp.reduction.default ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi75) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi77) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi79) #1
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp.reduction.reduction_func.47(i8* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %2 = bitcast i8* %1 to double**
  %3 = load double*, double** %2, align 8
  %4 = bitcast i8* %0 to double**
  %5 = load double*, double** %4, align 8
  %6 = load double, double* %5, align 8, !tbaa !34
  %7 = load double, double* %3, align 8, !tbaa !34
  %add = fadd double %6, %7
  store double %add, double* %5, align 8, !tbaa !34
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp.reduction.reduction_func.48(i8* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %2 = bitcast i8* %1 to double**
  %3 = load double*, double** %2, align 8
  %4 = bitcast i8* %0 to double**
  %5 = load double*, double** %4, align 8
  %6 = load double, double* %5, align 8, !tbaa !34
  %7 = load double, double* %3, align 8, !tbaa !34
  %add = fadd double %6, %7
  store double %add, double* %5, align 8, !tbaa !34
  ret void
}

; Function Attrs: nounwind uwtable
define void @shift_grid(%struct.domain_type* %domain, i32 %level, i32 %id_c, i32 %id_a, double %shift_a) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %id_c.addr = alloca i32, align 4
  %id_a.addr = alloca i32, align 4
  %shift_a.addr = alloca double, align 8
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store i32 %id_c, i32* %id_c.addr, align 4, !tbaa !35
  store i32 %id_a, i32* %id_a.addr, align 4, !tbaa !35
  store double %shift_a, double* %shift_a.addr, align 8, !tbaa !34
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 6, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, double*)* @.omp_outlined..49 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %id_c.addr, i32* nonnull %id_a.addr, i32* nonnull %omp_within_a_box, double* nonnull %shift_a.addr) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..49(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %id_c.addr, i32* nonnull %id_a.addr, i32* nonnull %omp_within_a_box, double* nonnull %shift_a.addr)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %5 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %5 to i64
  %6 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %6, i64 0, i32 0, i32 12, i64 %idxprom12
  %7 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %7
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..49(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %id_c, i32* nocapture readonly dereferenceable(4) %id_a, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double* dereferenceable(8) %shift_a) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %dim_k = alloca i32, align 4
  %dim_j = alloca i32, align 4
  %dim_i = alloca i32, align 4
  %grid_c = alloca double*, align 8
  %grid_a = alloca double*, align 8
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre101 = bitcast i32* %.omp.stride to i8*
  %.pre103 = bitcast i32* %.omp.ub to i8*
  %.pre105 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp6 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp6, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp799 = icmp sgt i32 %8, %cond
  br i1 %cmp799, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil to i8*
  %10 = bitcast i32* %plane to i8*
  %11 = bitcast i32* %dim_k to i8*
  %12 = bitcast i32* %dim_j to i8*
  %13 = bitcast i32* %dim_i to i8*
  %14 = bitcast double** %grid_c to i8*
  %15 = bitcast double** %grid_a to i8*
  %16 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %16, %omp.inner.for.body.lr.ph ]
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %17 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %17 to i64
  %18 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %18, i64 0, i32 28
  %19 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %19, i64 %indvars.iv, i32 5
  %20 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil11 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 5
  %21 = load i32, i32* %pencil11, align 8, !tbaa !54
  store i32 %21, i32* %pencil, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane18 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 6
  %22 = load i32, i32* %plane18, align 4, !tbaa !55
  store i32 %22, i32* %plane, align 4, !tbaa !35
  %ghosts25 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 4
  %23 = load i32, i32* %ghosts25, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %k32 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 2, i32 2
  %24 = load i32, i32* %k32, align 4, !tbaa !40
  store i32 %24, i32* %dim_k, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %j40 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 2, i32 1
  %25 = load i32, i32* %j40, align 4, !tbaa !37
  store i32 %25, i32* %dim_j, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %i48 = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 2, i32 0
  %26 = load i32, i32* %i48, align 4, !tbaa !43
  store i32 %26, i32* %dim_i, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %14) #1
  %27 = load i32, i32* %id_c, align 4, !tbaa !35
  %idxprom49 = sext i32 %27 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %20, i64 %idxprom, i32 10
  %28 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx56 = getelementptr inbounds double*, double** %28, i64 %idxprom49
  %29 = load double*, double** %arrayidx56, align 8, !tbaa !1
  %add57 = add nsw i32 %21, 1
  %add58 = add nsw i32 %add57, %22
  %mul59 = mul nsw i32 %add58, %23
  %idx.ext = sext i32 %mul59 to i64
  %add.ptr = getelementptr inbounds double, double* %29, i64 %idx.ext
  store double* %add.ptr, double** %grid_c, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %30 = load i32, i32* %id_a, align 4, !tbaa !35
  %idxprom60 = sext i32 %30 to i64
  %31 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels65 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %31, i64 %indvars.iv, i32 5
  %32 = load %struct.box_type*, %struct.box_type** %levels65, align 8, !tbaa !28
  %grids67 = getelementptr inbounds %struct.box_type, %struct.box_type* %32, i64 %idxprom, i32 10
  %33 = load double**, double*** %grids67, align 8, !tbaa !30
  %arrayidx68 = getelementptr inbounds double*, double** %33, i64 %idxprom60
  %34 = load double*, double** %arrayidx68, align 8, !tbaa !1
  %add.ptr73 = getelementptr inbounds double, double* %34, i64 %idx.ext
  store double* %add.ptr73, double** %grid_a, align 8, !tbaa !1
  %35 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %35, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %omp.inner.for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 8, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**, double**, double*)* @.omp_outlined..50 to void (i32*, i32*, ...)*), i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid_c, double** nonnull %grid_a, double* nonnull %shift_a) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %omp.inner.for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  call void @.omp_outlined..50(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid_c, double** nonnull %grid_a, double* nonnull %shift_a)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9) #1
  %36 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %37 = sext i32 %36 to i64
  %cmp7 = icmp slt i64 %indvars.iv, %37
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp7, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi106 = phi i8* [ %.pre105, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi104 = phi i8* [ %.pre103, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi102 = phi i8* [ %.pre101, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi102) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi104) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi106) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..50(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k, i32* nocapture readonly dereferenceable(4) %dim_j, i32* nocapture readonly dereferenceable(4) %dim_i, i32* nocapture readonly dereferenceable(4) %pencil, i32* nocapture readonly dereferenceable(4) %plane, double** nocapture readonly dereferenceable(8) %grid_c, double** nocapture readonly dereferenceable(8) %grid_a, double* nocapture readonly dereferenceable(8) %shift_a) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre73 = bitcast i64* %.omp.stride to i8*
  %.pre75 = bitcast i64* %.omp.ub to i8*
  %.pre77 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %7 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp17 = icmp sgt i64 %7, %sub7
  %cond = select i1 %cmp17, i64 %sub7, i64 %7
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %8 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp1969 = icmp sgt i64 %8, %cond
  br i1 %cmp1969, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = load i32, i32* %dim_j, align 4
  %conv25 = sext i32 %9 to i64
  %10 = load i32, i32* %dim_i, align 4
  %cmp3867 = icmp sgt i32 %10, 0
  %11 = load i32, i32* %pencil, align 4
  %12 = load i32, i32* %plane, align 4
  %13 = load double*, double** %grid_a, align 8
  %14 = load double*, double** %grid_c, align 8
  br i1 %cmp3867, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %15 = sext i32 %10 to i64
  %xtraiter = and i32 %10, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  %16 = icmp eq i32 %10, 1
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %.omp.iv.070.us = phi i64 [ %add47.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %8, %omp.inner.for.body.us.preheader ]
  %div26.us = sdiv i64 %.omp.iv.070.us, %conv25
  %conv29.us = trunc i64 %div26.us to i32
  %rem.us = srem i64 %.omp.iv.070.us, %conv25
  %conv37.us = trunc i64 %rem.us to i32
  %mul40.us = mul nsw i32 %11, %conv37.us
  %mul42.us = mul nsw i32 %12, %conv29.us
  br i1 %lcmp.mod, label %omp.inner.for.body.us.split, label %for.body.us.prol

for.body.us.prol:                                 ; preds = %omp.inner.for.body.us
  %add43.us.prol = add nsw i32 %mul40.us, %mul42.us
  %idxprom.us.prol = sext i32 %add43.us.prol to i64
  %arrayidx.us.prol = getelementptr inbounds double, double* %13, i64 %idxprom.us.prol
  %17 = load double, double* %arrayidx.us.prol, align 8, !tbaa !34
  %18 = load double, double* %shift_a, align 8, !tbaa !34
  %add44.us.prol = fadd double %17, %18
  %arrayidx46.us.prol = getelementptr inbounds double, double* %14, i64 %idxprom.us.prol
  store double %add44.us.prol, double* %arrayidx46.us.prol, align 8, !tbaa !34
  br label %omp.inner.for.body.us.split

omp.inner.for.body.us.split:                      ; preds = %omp.inner.for.body.us, %for.body.us.prol
  %indvars.iv.unr = phi i64 [ 0, %omp.inner.for.body.us ], [ 1, %for.body.us.prol ]
  %i.068.us.unr = phi i32 [ 0, %omp.inner.for.body.us ], [ 1, %for.body.us.prol ]
  br i1 %16, label %for.cond.omp.inner.for.inc_crit_edge.us, label %omp.inner.for.body.us.split.split

omp.inner.for.body.us.split.split:                ; preds = %omp.inner.for.body.us.split
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %omp.inner.for.body.us.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %omp.inner.for.body.us.split.split ], [ %indvars.iv.next.1, %for.body.us ]
  %i.068.us = phi i32 [ %i.068.us.unr, %omp.inner.for.body.us.split.split ], [ %inc.us.1, %for.body.us ]
  %add41.us = add nsw i32 %mul40.us, %i.068.us
  %add43.us = add nsw i32 %add41.us, %mul42.us
  %idxprom.us = sext i32 %add43.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %13, i64 %idxprom.us
  %19 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %20 = load double, double* %shift_a, align 8, !tbaa !34
  %add44.us = fadd double %19, %20
  %arrayidx46.us = getelementptr inbounds double, double* %14, i64 %idxprom.us
  store double %add44.us, double* %arrayidx46.us, align 8, !tbaa !34
  %inc.us = add nuw nsw i32 %i.068.us, 1
  %add41.us.1 = add nsw i32 %mul40.us, %inc.us
  %add43.us.1 = add nsw i32 %add41.us.1, %mul42.us
  %idxprom.us.1 = sext i32 %add43.us.1 to i64
  %arrayidx.us.1 = getelementptr inbounds double, double* %13, i64 %idxprom.us.1
  %21 = load double, double* %arrayidx.us.1, align 8, !tbaa !34
  %22 = load double, double* %shift_a, align 8, !tbaa !34
  %add44.us.1 = fadd double %21, %22
  %arrayidx46.us.1 = getelementptr inbounds double, double* %14, i64 %idxprom.us.1
  store double %add44.us.1, double* %arrayidx46.us.1, align 8, !tbaa !34
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %inc.us.1 = add nsw i32 %i.068.us, 2
  %cmp38.us.1 = icmp slt i64 %indvars.iv.next.1, %15
  br i1 %cmp38.us.1, label %for.body.us, label %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa

for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa: ; preds = %for.body.us
  br label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %omp.inner.for.body.us.split, %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa
  %add47.us = add nsw i64 %.omp.iv.070.us, 1
  %cmp19.us = icmp slt i64 %.omp.iv.070.us, %cond
  br i1 %cmp19.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi78 = phi i8* [ %.pre77, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi76 = phi i8* [ %.pre75, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi74 = phi i8* [ %.pre73, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi74) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi76) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi78) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @project_cell_to_face(%struct.domain_type* %domain, i32 %level, i32 %id_cell, i32 %id_face, i32 %dir) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %id_cell.addr = alloca i32, align 4
  %id_face.addr = alloca i32, align 4
  %dir.addr = alloca i32, align 4
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  %.threadid_temp. = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store i32 %id_cell, i32* %id_cell.addr, align 4, !tbaa !35
  store i32 %id_face, i32* %id_face.addr, align 4, !tbaa !35
  store i32 %dir, i32* %dir.addr, align 4, !tbaa !35
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %idxprom = sext i32 %level to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %1 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %1, i64 0, i32 5
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %idxprom, i32 2, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !43
  %cmp = icmp slt i32 %3, 64
  %4 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %cmp9 = icmp sgt i32 %3, 63
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %omp_within_a_box, align 4, !tbaa !35
  br i1 %cmp, label %omp_if.then, label %omp_if.else

omp_if.then:                                      ; preds = %entry
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 6, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, i32*, i32*, i32*)* @.omp_outlined..51 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %id_cell.addr, i32* nonnull %id_face.addr, i32* nonnull %dir.addr, i32* nonnull %omp_within_a_box) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %entry
  tail call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  store i32 %0, i32* %.threadid_temp., align 4, !tbaa !35
  call void @.omp_outlined..51(i32* nonnull %.threadid_temp., i32* nonnull %.zero.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32* nonnull %id_cell.addr, i32* nonnull %id_face.addr, i32* nonnull %dir.addr, i32* nonnull %omp_within_a_box)
  tail call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %call11 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call11, %call
  %5 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom12 = sext i32 %5 to i64
  %6 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %6, i64 0, i32 0, i32 12, i64 %idxprom12
  %7 = load i64, i64* %arrayidx13, align 8, !tbaa !42
  %add = add i64 %sub, %7
  store i64 %add, i64* %arrayidx13, align 8, !tbaa !42
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..51(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32* nocapture readonly dereferenceable(4) %id_cell, i32* nocapture readonly dereferenceable(4) %id_face, i32* nocapture readonly dereferenceable(4) %dir, i32* nocapture readonly dereferenceable(4) %omp_within_a_box) #3 {
entry:
  %.omp.lb = alloca i32, align 4
  %.omp.ub = alloca i32, align 4
  %.omp.stride = alloca i32, align 4
  %.omp.is_last = alloca i32, align 4
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %dim_k = alloca i32, align 4
  %dim_j = alloca i32, align 4
  %dim_i = alloca i32, align 4
  %grid_cell = alloca double*, align 8
  %grid_face = alloca double*, align 8
  %stride = alloca i32, align 4
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %0, i64 0, i32 22
  %1 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %sub1 = add nsw i32 %1, -1
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre103 = bitcast i32* %.omp.stride to i8*
  %.pre105 = bitcast i32* %.omp.ub to i8*
  %.pre107 = bitcast i32* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i32* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 0, i32* %.omp.lb, align 4, !tbaa !35
  %3 = bitcast i32* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 %sub1, i32* %.omp.ub, align 4, !tbaa !35
  %4 = bitcast i32* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  store i32 1, i32* %.omp.stride, align 4, !tbaa !35
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @0, i32 %6, i32 34, i32* nonnull %.omp.is_last, i32* nonnull %.omp.lb, i32* nonnull %.omp.ub, i32* nonnull %.omp.stride, i32 1, i32 1) #1
  %7 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %cmp6 = icmp sgt i32 %7, %sub1
  %cond = select i1 %cmp6, i32 %sub1, i32 %7
  store i32 %cond, i32* %.omp.ub, align 4, !tbaa !35
  %8 = load i32, i32* %.omp.lb, align 4, !tbaa !35
  %cmp7101 = icmp sgt i32 %8, %cond
  br i1 %cmp7101, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil to i8*
  %10 = bitcast i32* %plane to i8*
  %11 = bitcast i32* %dim_k to i8*
  %12 = bitcast i32* %dim_j to i8*
  %13 = bitcast i32* %dim_i to i8*
  %14 = bitcast double** %grid_cell to i8*
  %15 = bitcast double** %grid_face to i8*
  %16 = bitcast i32* %stride to i8*
  %17 = sext i32 %8 to i64
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp_if.end, %omp.inner.for.body.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %omp_if.end ], [ %17, %omp.inner.for.body.lr.ph ]
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %18 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %18 to i64
  %19 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %19, i64 0, i32 28
  %20 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %20, i64 %indvars.iv, i32 5
  %21 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil11 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 5
  %22 = load i32, i32* %pencil11, align 8, !tbaa !54
  store i32 %22, i32* %pencil, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane18 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 6
  %23 = load i32, i32* %plane18, align 4, !tbaa !55
  store i32 %23, i32* %plane, align 4, !tbaa !35
  %ghosts25 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 4
  %24 = load i32, i32* %ghosts25, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %k32 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 2
  %25 = load i32, i32* %k32, align 4, !tbaa !40
  store i32 %25, i32* %dim_k, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %j40 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 1
  %26 = load i32, i32* %j40, align 4, !tbaa !37
  store i32 %26, i32* %dim_j, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %i48 = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 2, i32 0
  %27 = load i32, i32* %i48, align 4, !tbaa !43
  store i32 %27, i32* %dim_i, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %14) #1
  %28 = load i32, i32* %id_cell, align 4, !tbaa !35
  %idxprom49 = sext i32 %28 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %21, i64 %idxprom, i32 10
  %29 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx56 = getelementptr inbounds double*, double** %29, i64 %idxprom49
  %30 = load double*, double** %arrayidx56, align 8, !tbaa !1
  %add57 = add nsw i32 %22, 1
  %add58 = add nsw i32 %add57, %23
  %mul59 = mul nsw i32 %add58, %24
  %idx.ext = sext i32 %mul59 to i64
  %add.ptr = getelementptr inbounds double, double* %30, i64 %idx.ext
  store double* %add.ptr, double** %grid_cell, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %31 = load i32, i32* %id_face, align 4, !tbaa !35
  %idxprom60 = sext i32 %31 to i64
  %32 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels65 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %32, i64 %indvars.iv, i32 5
  %33 = load %struct.box_type*, %struct.box_type** %levels65, align 8, !tbaa !28
  %grids67 = getelementptr inbounds %struct.box_type, %struct.box_type* %33, i64 %idxprom, i32 10
  %34 = load double**, double*** %grids67, align 8, !tbaa !30
  %arrayidx68 = getelementptr inbounds double*, double** %34, i64 %idxprom60
  %35 = load double*, double** %arrayidx68, align 8, !tbaa !1
  %add.ptr73 = getelementptr inbounds double, double* %35, i64 %idx.ext
  store double* %add.ptr73, double** %grid_face, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 4, i8* %16) #1
  %36 = load i32, i32* %dir, align 4, !tbaa !35
  switch i32 %36, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb74
    i32 2, label %sw.bb75
  ]

sw.bb:                                            ; preds = %omp.inner.for.body
  store i32 1, i32* %stride, align 4, !tbaa !35
  br label %sw.epilog

sw.bb74:                                          ; preds = %omp.inner.for.body
  store i32 %22, i32* %stride, align 4, !tbaa !35
  br label %sw.epilog

sw.bb75:                                          ; preds = %omp.inner.for.body
  store i32 %23, i32* %stride, align 4, !tbaa !35
  br label %sw.epilog

sw.epilog:                                        ; preds = %omp.inner.for.body, %sw.bb75, %sw.bb74, %sw.bb
  %37 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %37, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %sw.epilog
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 8, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, double**, double**, i32*)* @.omp_outlined..52 to void (i32*, i32*, ...)*), i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid_face, double** nonnull %grid_cell, i32* nonnull %stride) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %sw.epilog
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  call void @.omp_outlined..52(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double** nonnull %grid_face, double** nonnull %grid_cell, i32* nonnull %stride)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  call void @llvm.lifetime.end(i64 4, i8* %16) #1
  call void @llvm.lifetime.end(i64 8, i8* %15) #1
  call void @llvm.lifetime.end(i64 8, i8* %14) #1
  call void @llvm.lifetime.end(i64 4, i8* %13) #1
  call void @llvm.lifetime.end(i64 4, i8* %12) #1
  call void @llvm.lifetime.end(i64 4, i8* %11) #1
  call void @llvm.lifetime.end(i64 4, i8* %10) #1
  call void @llvm.lifetime.end(i64 4, i8* %9) #1
  %38 = load i32, i32* %.omp.ub, align 4, !tbaa !35
  %39 = sext i32 %38 to i64
  %cmp7 = icmp slt i64 %indvars.iv, %39
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp7, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp_if.end
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi108 = phi i8* [ %.pre107, %entry.omp.precond.end_crit_edge ], [ %2, %omp.loop.exit ]
  %.pre-phi106 = phi i8* [ %.pre105, %entry.omp.precond.end_crit_edge ], [ %3, %omp.loop.exit ]
  %.pre-phi104 = phi i8* [ %.pre103, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi104) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi106) #1
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi108) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..52(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k, i32* nocapture readonly dereferenceable(4) %dim_j, i32* nocapture readonly dereferenceable(4) %dim_i, i32* nocapture readonly dereferenceable(4) %pencil, i32* nocapture readonly dereferenceable(4) %plane, double** nocapture readonly dereferenceable(8) %grid_face, double** nocapture readonly dereferenceable(8) %grid_cell, i32* nocapture readonly dereferenceable(4) %stride) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %dim_k, align 4, !tbaa !35
  %add = add nsw i32 %0, 1
  %conv = sext i32 %add to i64
  %1 = load i32, i32* %dim_j, align 4, !tbaa !35
  %add2 = add nsw i32 %1, 1
  %conv4 = sext i32 %add2 to i64
  %mul = mul nsw i64 %conv4, %conv
  %sub5 = add nsw i64 %mul, -1
  %2 = or i32 %1, %0
  %3 = icmp sgt i32 %2, -1
  br i1 %3, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre74 = bitcast i64* %.omp.stride to i8*
  %.pre76 = bitcast i64* %.omp.ub to i8*
  %.pre78 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %4 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %5 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #1
  store i64 %sub5, i64* %.omp.ub, align 8, !tbaa !42
  %6 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %7 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %8 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %8, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %9 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp15 = icmp sgt i64 %9, %sub5
  %cond = select i1 %cmp15, i64 %sub5, i64 %9
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %10 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp1770 = icmp sgt i64 %10, %cond
  br i1 %cmp1770, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %11 = load i32, i32* %dim_j, align 4
  %add20 = add nsw i32 %11, 1
  %conv22 = sext i32 %add20 to i64
  %12 = load i32, i32* %dim_i, align 4
  %cmp3468 = icmp slt i32 %12, 0
  %13 = load i32, i32* %pencil, align 4
  %14 = load i32, i32* %plane, align 4
  %15 = load i32, i32* %stride, align 4
  %16 = load double*, double** %grid_cell, align 8
  %17 = load double*, double** %grid_face, align 8
  br i1 %cmp3468, label %omp.loop.exit, label %omp.inner.for.body.preheader

omp.inner.for.body.preheader:                     ; preds = %omp.inner.for.body.lr.ph
  %18 = sext i32 %12 to i64
  %19 = and i32 %12, 1
  %lcmp.mod = icmp eq i32 %19, 0
  %20 = icmp eq i32 %12, 0
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body.preheader, %omp.inner.for.inc
  %.omp.iv.071 = phi i64 [ %add47, %omp.inner.for.inc ], [ %10, %omp.inner.for.body.preheader ]
  %div23 = sdiv i64 %.omp.iv.071, %conv22
  %conv26 = trunc i64 %div23 to i32
  %rem = srem i64 %.omp.iv.071, %conv22
  %conv33 = trunc i64 %rem to i32
  %mul36 = mul nsw i32 %13, %conv33
  %mul38 = mul nsw i32 %14, %conv26
  br i1 %lcmp.mod, label %for.body.prol, label %omp.inner.for.body.split

for.body.prol:                                    ; preds = %omp.inner.for.body
  %add39.prol = add nsw i32 %mul36, %mul38
  %sub40.prol = sub nsw i32 %add39.prol, %15
  %idxprom.prol = sext i32 %sub40.prol to i64
  %arrayidx.prol = getelementptr inbounds double, double* %16, i64 %idxprom.prol
  %21 = load double, double* %arrayidx.prol, align 8, !tbaa !34
  %idxprom41.prol = sext i32 %add39.prol to i64
  %arrayidx42.prol = getelementptr inbounds double, double* %16, i64 %idxprom41.prol
  %22 = load double, double* %arrayidx42.prol, align 8, !tbaa !34
  %add43.prol = fadd double %21, %22
  %mul44.prol = fmul double %add43.prol, 5.000000e-01
  %arrayidx46.prol = getelementptr inbounds double, double* %17, i64 %idxprom41.prol
  store double %mul44.prol, double* %arrayidx46.prol, align 8, !tbaa !34
  br label %omp.inner.for.body.split

omp.inner.for.body.split:                         ; preds = %for.body.prol, %omp.inner.for.body
  %indvars.iv.unr = phi i64 [ 0, %omp.inner.for.body ], [ 1, %for.body.prol ]
  %i.069.unr = phi i32 [ 0, %omp.inner.for.body ], [ 1, %for.body.prol ]
  br i1 %20, label %omp.inner.for.inc, label %omp.inner.for.body.split.split

omp.inner.for.body.split.split:                   ; preds = %omp.inner.for.body.split
  br label %for.body

for.body:                                         ; preds = %for.body, %omp.inner.for.body.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %omp.inner.for.body.split.split ], [ %indvars.iv.next.1, %for.body ]
  %i.069 = phi i32 [ %i.069.unr, %omp.inner.for.body.split.split ], [ %inc.1, %for.body ]
  %add37 = add nsw i32 %mul36, %i.069
  %add39 = add nsw i32 %add37, %mul38
  %sub40 = sub nsw i32 %add39, %15
  %idxprom = sext i32 %sub40 to i64
  %arrayidx = getelementptr inbounds double, double* %16, i64 %idxprom
  %23 = load double, double* %arrayidx, align 8, !tbaa !34
  %idxprom41 = sext i32 %add39 to i64
  %arrayidx42 = getelementptr inbounds double, double* %16, i64 %idxprom41
  %24 = load double, double* %arrayidx42, align 8, !tbaa !34
  %add43 = fadd double %23, %24
  %mul44 = fmul double %add43, 5.000000e-01
  %arrayidx46 = getelementptr inbounds double, double* %17, i64 %idxprom41
  store double %mul44, double* %arrayidx46, align 8, !tbaa !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %inc = add nuw nsw i32 %i.069, 1
  %add37.1 = add nsw i32 %mul36, %inc
  %add39.1 = add nsw i32 %add37.1, %mul38
  %sub40.1 = sub nsw i32 %add39.1, %15
  %idxprom.1 = sext i32 %sub40.1 to i64
  %arrayidx.1 = getelementptr inbounds double, double* %16, i64 %idxprom.1
  %25 = load double, double* %arrayidx.1, align 8, !tbaa !34
  %idxprom41.1 = sext i32 %add39.1 to i64
  %arrayidx42.1 = getelementptr inbounds double, double* %16, i64 %idxprom41.1
  %26 = load double, double* %arrayidx42.1, align 8, !tbaa !34
  %add43.1 = fadd double %25, %26
  %mul44.1 = fmul double %add43.1, 5.000000e-01
  %arrayidx46.1 = getelementptr inbounds double, double* %17, i64 %idxprom41.1
  store double %mul44.1, double* %arrayidx46.1, align 8, !tbaa !34
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %inc.1 = add nsw i32 %i.069, 2
  %cmp34.1 = icmp slt i64 %indvars.iv.next, %18
  br i1 %cmp34.1, label %for.body, label %omp.inner.for.inc.unr-lcssa

omp.inner.for.inc.unr-lcssa:                      ; preds = %for.body
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %omp.inner.for.body.split, %omp.inner.for.inc.unr-lcssa
  %add47 = add nsw i64 %.omp.iv.071, 1
  %cmp17 = icmp slt i64 %.omp.iv.071, %cond
  br i1 %cmp17, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp.inner.for.inc
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %8) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi79 = phi i8* [ %.pre78, %entry.omp.precond.end_crit_edge ], [ %4, %omp.loop.exit ]
  %.pre-phi77 = phi i8* [ %.pre76, %entry.omp.precond.end_crit_edge ], [ %5, %omp.loop.exit ]
  %.pre-phi75 = phi i8* [ %.pre74, %entry.omp.precond.end_crit_edge ], [ %6, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %7, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi75) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi77) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi79) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @matmul_grids(%struct.domain_type* %domain, i32 %level, double* %C, i32* %id_A, i32* %id_B, i32 %rows, i32 %cols, i32 %A_equals_B_transpose) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %C.addr = alloca double*, align 8
  %id_A.addr = alloca i32*, align 8
  %id_B.addr = alloca i32*, align 8
  %rows.addr = alloca i32, align 4
  %cols.addr = alloca i32, align 4
  %omp_within_a_box = alloca i32, align 4
  %0 = tail call i32 @__kmpc_global_thread_num(%ident_t* nonnull @0) #1
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store double* %C, double** %C.addr, align 8, !tbaa !1
  store i32* %id_A, i32** %id_A.addr, align 8, !tbaa !1
  store i32* %id_B, i32** %id_B.addr, align 8, !tbaa !1
  store i32 %rows, i32* %rows.addr, align 4, !tbaa !35
  store i32 %cols, i32* %cols.addr, align 4, !tbaa !35
  %1 = bitcast i32* %omp_within_a_box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  store i32 0, i32* %omp_within_a_box, align 4, !tbaa !35
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 8, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32*, %struct.domain_type**, i32*, i32**, i32**, i32*, double**)* @.omp_outlined..53 to void (i32*, i32*, ...)*), i32* nonnull %rows.addr, i32* nonnull %cols.addr, %struct.domain_type** nonnull %domain.addr, i32* nonnull %level.addr, i32** nonnull %id_A.addr, i32** nonnull %id_B.addr, i32* nonnull %omp_within_a_box, double** nonnull %C.addr) #1
  %call1 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call1, %call
  %2 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom = sext i32 %2 to i64
  %3 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds %struct.domain_type, %struct.domain_type* %3, i64 0, i32 0, i32 13, i64 %idxprom
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !42
  %add = add i64 %sub, %4
  store i64 %add, i64* %arrayidx, align 8, !tbaa !42
  %5 = load i32, i32* %rows.addr, align 4, !tbaa !35
  %6 = load i32, i32* %cols.addr, align 4, !tbaa !35
  %mul = mul nsw i32 %6, %5
  %conv = sext i32 %mul to i64
  %mul2 = shl nsw i64 %conv, 3
  %call3 = call noalias i8* @malloc(i64 %mul2) #1
  %7 = bitcast i8* %call3 to double*
  %cmp52 = icmp sgt i32 %5, 0
  br i1 %cmp52, label %for.cond5.preheader.lr.ph, label %for.end19

for.cond5.preheader.lr.ph:                        ; preds = %entry
  %cmp650 = icmp sgt i32 %6, 0
  %8 = load double*, double** %C.addr, align 8
  br i1 %cmp650, label %for.body8.lr.ph.us.preheader, label %for.end19

for.body8.lr.ph.us.preheader:                     ; preds = %for.cond5.preheader.lr.ph
  %9 = sext i32 %6 to i64
  %10 = sext i32 %5 to i64
  %11 = add i32 %6, -1
  %12 = zext i32 %11 to i64
  %13 = add nuw nsw i64 %12, 1
  %14 = sext i32 %6 to i64
  %15 = shl nsw i64 %14, 3
  %16 = zext i32 %11 to i64
  %17 = shl nuw nsw i64 %16, 3
  %18 = add i32 %6, -1
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 1
  %21 = and i64 %20, 8589934588
  %22 = add nsw i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = add i32 %6, 1
  %min.iters.check = icmp ult i64 %13, 4
  %n.vec = and i64 %13, 8589934588
  %cmp.zero = icmp eq i64 %n.vec, 0
  %xtraiter = and i64 %24, 3
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  %26 = icmp ult i64 %22, 12
  %cmp.n = icmp eq i64 %13, %n.vec
  br label %for.body8.lr.ph.us

for.body8.us:                                     ; preds = %for.body8.us, %for.body8.us.preheader.split.split
  %indvars.iv = phi i64 [ %indvars.iv.unr, %for.body8.us.preheader.split.split ], [ %indvars.iv.next.3, %for.body8.us ]
  %27 = add nsw i64 %47, %indvars.iv
  %arrayidx12.us = getelementptr inbounds double, double* %8, i64 %27
  %28 = bitcast double* %arrayidx12.us to i64*
  %29 = load i64, i64* %28, align 8, !tbaa !34
  %arrayidx16.us = getelementptr inbounds double, double* %7, i64 %27
  %30 = bitcast double* %arrayidx16.us to i64*
  store i64 %29, i64* %30, align 8, !tbaa !34
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %31 = add nsw i64 %47, %indvars.iv.next
  %arrayidx12.us.1 = getelementptr inbounds double, double* %8, i64 %31
  %32 = bitcast double* %arrayidx12.us.1 to i64*
  %33 = load i64, i64* %32, align 8, !tbaa !34
  %arrayidx16.us.1 = getelementptr inbounds double, double* %7, i64 %31
  %34 = bitcast double* %arrayidx16.us.1 to i64*
  store i64 %33, i64* %34, align 8, !tbaa !34
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %35 = add nsw i64 %47, %indvars.iv.next.1
  %arrayidx12.us.2 = getelementptr inbounds double, double* %8, i64 %35
  %36 = bitcast double* %arrayidx12.us.2 to i64*
  %37 = load i64, i64* %36, align 8, !tbaa !34
  %arrayidx16.us.2 = getelementptr inbounds double, double* %7, i64 %35
  %38 = bitcast double* %arrayidx16.us.2 to i64*
  store i64 %37, i64* %38, align 8, !tbaa !34
  %indvars.iv.next.2 = add nsw i64 %indvars.iv, 3
  %39 = add nsw i64 %47, %indvars.iv.next.2
  %arrayidx12.us.3 = getelementptr inbounds double, double* %8, i64 %39
  %40 = bitcast double* %arrayidx12.us.3 to i64*
  %41 = load i64, i64* %40, align 8, !tbaa !34
  %arrayidx16.us.3 = getelementptr inbounds double, double* %7, i64 %39
  %42 = bitcast double* %arrayidx16.us.3 to i64*
  store i64 %41, i64* %42, align 8, !tbaa !34
  %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
  %lftr.wideiv.3 = trunc i64 %indvars.iv.next.3 to i32
  %exitcond.3 = icmp eq i32 %lftr.wideiv.3, %6
  br i1 %exitcond.3, label %for.cond5.for.inc17_crit_edge.us.loopexit.unr-lcssa, label %for.body8.us, !llvm.loop !86

for.body8.lr.ph.us:                               ; preds = %for.body8.lr.ph.us.preheader, %for.cond5.for.inc17_crit_edge.us
  %indvars.iv57 = phi i64 [ 0, %for.body8.lr.ph.us.preheader ], [ %indvars.iv.next58, %for.cond5.for.inc17_crit_edge.us ]
  %43 = mul i64 %15, %indvars.iv57
  %scevgep = getelementptr i8, i8* %call3, i64 %43
  %44 = add i64 %17, %43
  %scevgep60 = getelementptr i8, i8* %call3, i64 %44
  %45 = mul i64 %14, %indvars.iv57
  %scevgep61 = getelementptr double, double* %8, i64 %45
  %scevgep6162 = bitcast double* %scevgep61 to i8*
  %46 = add i64 %16, %45
  %scevgep63 = getelementptr double, double* %8, i64 %46
  %scevgep6364 = bitcast double* %scevgep63 to i8*
  %47 = mul nsw i64 %9, %indvars.iv57
  br i1 %min.iters.check, label %for.body8.us.preheader, label %min.iters.checked

for.body8.us.preheader:                           ; preds = %middle.block, %vector.memcheck, %min.iters.checked, %for.body8.lr.ph.us
  %indvars.iv.ph = phi i64 [ 0, %vector.memcheck ], [ 0, %min.iters.checked ], [ 0, %for.body8.lr.ph.us ], [ %n.vec, %middle.block ]
  %48 = or i64 %indvars.iv.ph, 1
  %49 = trunc i64 %48 to i32
  %50 = sub i32 %25, %49
  %51 = sub i32 %6, %49
  %xtraiter71 = and i32 %50, 3
  %lcmp.mod72 = icmp eq i32 %xtraiter71, 0
  br i1 %lcmp.mod72, label %for.body8.us.preheader.split, label %for.body8.us.prol.preheader

for.body8.us.prol.preheader:                      ; preds = %for.body8.us.preheader
  br label %for.body8.us.prol

for.body8.us.prol:                                ; preds = %for.body8.us.prol, %for.body8.us.prol.preheader
  %indvars.iv.prol = phi i64 [ %indvars.iv.next.prol, %for.body8.us.prol ], [ %indvars.iv.ph, %for.body8.us.prol.preheader ]
  %prol.iter73 = phi i32 [ %prol.iter73.sub, %for.body8.us.prol ], [ %xtraiter71, %for.body8.us.prol.preheader ]
  %52 = add nsw i64 %47, %indvars.iv.prol
  %arrayidx12.us.prol = getelementptr inbounds double, double* %8, i64 %52
  %53 = bitcast double* %arrayidx12.us.prol to i64*
  %54 = load i64, i64* %53, align 8, !tbaa !34
  %arrayidx16.us.prol = getelementptr inbounds double, double* %7, i64 %52
  %55 = bitcast double* %arrayidx16.us.prol to i64*
  store i64 %54, i64* %55, align 8, !tbaa !34
  %indvars.iv.next.prol = add nuw nsw i64 %indvars.iv.prol, 1
  %prol.iter73.sub = add i32 %prol.iter73, -1
  %prol.iter73.cmp = icmp eq i32 %prol.iter73.sub, 0
  br i1 %prol.iter73.cmp, label %for.body8.us.preheader.split.loopexit, label %for.body8.us.prol, !llvm.loop !89

for.body8.us.preheader.split.loopexit:            ; preds = %for.body8.us.prol
  %indvars.iv.next.prol.lcssa = phi i64 [ %indvars.iv.next.prol, %for.body8.us.prol ]
  br label %for.body8.us.preheader.split

for.body8.us.preheader.split:                     ; preds = %for.body8.us.preheader, %for.body8.us.preheader.split.loopexit
  %indvars.iv.unr = phi i64 [ %indvars.iv.ph, %for.body8.us.preheader ], [ %indvars.iv.next.prol.lcssa, %for.body8.us.preheader.split.loopexit ]
  %56 = icmp ult i32 %51, 3
  br i1 %56, label %for.cond5.for.inc17_crit_edge.us.loopexit, label %for.body8.us.preheader.split.split

for.body8.us.preheader.split.split:               ; preds = %for.body8.us.preheader.split
  br label %for.body8.us

min.iters.checked:                                ; preds = %for.body8.lr.ph.us
  br i1 %cmp.zero, label %for.body8.us.preheader, label %vector.memcheck

vector.memcheck:                                  ; preds = %min.iters.checked
  %bound0 = icmp ule i8* %scevgep, %scevgep6364
  %bound1 = icmp ule i8* %scevgep6162, %scevgep60
  %memcheck.conflict = and i1 %bound0, %bound1
  br i1 %memcheck.conflict, label %for.body8.us.preheader, label %vector.body.preheader

vector.body.preheader:                            ; preds = %vector.memcheck
  br i1 %lcmp.mod, label %vector.body.preheader.split, label %vector.body.prol.preheader

vector.body.prol.preheader:                       ; preds = %vector.body.preheader
  br label %vector.body.prol

vector.body.prol:                                 ; preds = %vector.body.prol, %vector.body.prol.preheader
  %index.prol = phi i64 [ %index.next.prol, %vector.body.prol ], [ 0, %vector.body.prol.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %vector.body.prol ], [ %xtraiter, %vector.body.prol.preheader ]
  %57 = add i64 %47, %index.prol
  %58 = getelementptr inbounds double, double* %8, i64 %57
  %59 = bitcast double* %58 to <2 x i64>*
  %wide.load.prol = load <2 x i64>, <2 x i64>* %59, align 8, !tbaa !34
  %60 = getelementptr double, double* %58, i64 2
  %61 = bitcast double* %60 to <2 x i64>*
  %wide.load68.prol = load <2 x i64>, <2 x i64>* %61, align 8, !tbaa !34
  %62 = getelementptr inbounds double, double* %7, i64 %57
  %63 = bitcast double* %62 to <2 x i64>*
  store <2 x i64> %wide.load.prol, <2 x i64>* %63, align 8, !tbaa !34
  %64 = getelementptr double, double* %62, i64 2
  %65 = bitcast double* %64 to <2 x i64>*
  store <2 x i64> %wide.load68.prol, <2 x i64>* %65, align 8, !tbaa !34
  %index.next.prol = add i64 %index.prol, 4
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %vector.body.preheader.split.loopexit, label %vector.body.prol, !llvm.loop !91

vector.body.preheader.split.loopexit:             ; preds = %vector.body.prol
  %index.next.prol.lcssa = phi i64 [ %index.next.prol, %vector.body.prol ]
  br label %vector.body.preheader.split

vector.body.preheader.split:                      ; preds = %vector.body.preheader, %vector.body.preheader.split.loopexit
  %index.unr = phi i64 [ 0, %vector.body.preheader ], [ %index.next.prol.lcssa, %vector.body.preheader.split.loopexit ]
  br i1 %26, label %middle.block, label %vector.body.preheader.split.split

vector.body.preheader.split.split:                ; preds = %vector.body.preheader.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.body.preheader.split.split
  %index = phi i64 [ %index.unr, %vector.body.preheader.split.split ], [ %index.next.3, %vector.body ]
  %66 = add i64 %47, %index
  %67 = getelementptr inbounds double, double* %8, i64 %66
  %68 = bitcast double* %67 to <2 x i64>*
  %wide.load = load <2 x i64>, <2 x i64>* %68, align 8, !tbaa !34
  %69 = getelementptr double, double* %67, i64 2
  %70 = bitcast double* %69 to <2 x i64>*
  %wide.load68 = load <2 x i64>, <2 x i64>* %70, align 8, !tbaa !34
  %71 = getelementptr inbounds double, double* %7, i64 %66
  %72 = bitcast double* %71 to <2 x i64>*
  store <2 x i64> %wide.load, <2 x i64>* %72, align 8, !tbaa !34
  %73 = getelementptr double, double* %71, i64 2
  %74 = bitcast double* %73 to <2 x i64>*
  store <2 x i64> %wide.load68, <2 x i64>* %74, align 8, !tbaa !34
  %index.next = add i64 %index, 4
  %75 = add i64 %47, %index.next
  %76 = getelementptr inbounds double, double* %8, i64 %75
  %77 = bitcast double* %76 to <2 x i64>*
  %wide.load.1 = load <2 x i64>, <2 x i64>* %77, align 8, !tbaa !34
  %78 = getelementptr double, double* %76, i64 2
  %79 = bitcast double* %78 to <2 x i64>*
  %wide.load68.1 = load <2 x i64>, <2 x i64>* %79, align 8, !tbaa !34
  %80 = getelementptr inbounds double, double* %7, i64 %75
  %81 = bitcast double* %80 to <2 x i64>*
  store <2 x i64> %wide.load.1, <2 x i64>* %81, align 8, !tbaa !34
  %82 = getelementptr double, double* %80, i64 2
  %83 = bitcast double* %82 to <2 x i64>*
  store <2 x i64> %wide.load68.1, <2 x i64>* %83, align 8, !tbaa !34
  %index.next.1 = add i64 %index, 8
  %84 = add i64 %47, %index.next.1
  %85 = getelementptr inbounds double, double* %8, i64 %84
  %86 = bitcast double* %85 to <2 x i64>*
  %wide.load.2 = load <2 x i64>, <2 x i64>* %86, align 8, !tbaa !34
  %87 = getelementptr double, double* %85, i64 2
  %88 = bitcast double* %87 to <2 x i64>*
  %wide.load68.2 = load <2 x i64>, <2 x i64>* %88, align 8, !tbaa !34
  %89 = getelementptr inbounds double, double* %7, i64 %84
  %90 = bitcast double* %89 to <2 x i64>*
  store <2 x i64> %wide.load.2, <2 x i64>* %90, align 8, !tbaa !34
  %91 = getelementptr double, double* %89, i64 2
  %92 = bitcast double* %91 to <2 x i64>*
  store <2 x i64> %wide.load68.2, <2 x i64>* %92, align 8, !tbaa !34
  %index.next.2 = add i64 %index, 12
  %93 = add i64 %47, %index.next.2
  %94 = getelementptr inbounds double, double* %8, i64 %93
  %95 = bitcast double* %94 to <2 x i64>*
  %wide.load.3 = load <2 x i64>, <2 x i64>* %95, align 8, !tbaa !34
  %96 = getelementptr double, double* %94, i64 2
  %97 = bitcast double* %96 to <2 x i64>*
  %wide.load68.3 = load <2 x i64>, <2 x i64>* %97, align 8, !tbaa !34
  %98 = getelementptr inbounds double, double* %7, i64 %93
  %99 = bitcast double* %98 to <2 x i64>*
  store <2 x i64> %wide.load.3, <2 x i64>* %99, align 8, !tbaa !34
  %100 = getelementptr double, double* %98, i64 2
  %101 = bitcast double* %100 to <2 x i64>*
  store <2 x i64> %wide.load68.3, <2 x i64>* %101, align 8, !tbaa !34
  %index.next.3 = add i64 %index, 16
  %102 = icmp eq i64 %index.next.3, %n.vec
  br i1 %102, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !92

middle.block.unr-lcssa:                           ; preds = %vector.body
  br label %middle.block

middle.block:                                     ; preds = %vector.body.preheader.split, %middle.block.unr-lcssa
  br i1 %cmp.n, label %for.cond5.for.inc17_crit_edge.us, label %for.body8.us.preheader

for.cond5.for.inc17_crit_edge.us.loopexit.unr-lcssa: ; preds = %for.body8.us
  br label %for.cond5.for.inc17_crit_edge.us.loopexit

for.cond5.for.inc17_crit_edge.us.loopexit:        ; preds = %for.body8.us.preheader.split, %for.cond5.for.inc17_crit_edge.us.loopexit.unr-lcssa
  br label %for.cond5.for.inc17_crit_edge.us

for.cond5.for.inc17_crit_edge.us:                 ; preds = %for.cond5.for.inc17_crit_edge.us.loopexit, %middle.block
  %indvars.iv.next58 = add nuw nsw i64 %indvars.iv57, 1
  %cmp.us = icmp slt i64 %indvars.iv.next58, %10
  br i1 %cmp.us, label %for.body8.lr.ph.us, label %for.end19.loopexit

for.end19.loopexit:                               ; preds = %for.cond5.for.inc17_crit_edge.us
  br label %for.end19

for.end19:                                        ; preds = %for.end19.loopexit, %for.cond5.preheader.lr.ph, %entry
  %call20 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %103 = bitcast double** %C.addr to i8**
  %104 = load i8*, i8** %103, align 8, !tbaa !1
  %105 = load i32, i32* %rows.addr, align 4, !tbaa !35
  %106 = load i32, i32* %cols.addr, align 4, !tbaa !35
  %mul21 = mul nsw i32 %106, %105
  %call22 = call i32 @MPI_Allreduce(i8* %call3, i8* %104, i32 %mul21, i32 1275070475, i32 1476395011, i32 1140850688) #1
  %call23 = call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub24 = sub i64 %call23, %call20
  %107 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom25 = sext i32 %107 to i64
  %108 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %arrayidx27 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %108, i64 0, i32 0, i32 14, i64 %idxprom25
  %109 = load i64, i64* %arrayidx27, align 8, !tbaa !42
  %add28 = add i64 %109, %sub24
  store i64 %add28, i64* %arrayidx27, align 8, !tbaa !42
  %arrayidx32 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %108, i64 0, i32 0, i32 5, i64 %idxprom25
  %110 = load i64, i64* %arrayidx32, align 8, !tbaa !42
  %add33 = add i64 %110, %sub24
  store i64 %add33, i64* %arrayidx32, align 8, !tbaa !42
  call void @free(i8* %call3) #1
  call void @llvm.lifetime.end(i64 4, i8* %1) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..53(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %rows, i32* nocapture readonly dereferenceable(4) %cols, %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %level, i32** nocapture readonly dereferenceable(8) %id_A, i32** nocapture readonly dereferenceable(8) %id_B, i32* nocapture readonly dereferenceable(4) %omp_within_a_box, double** nocapture readonly dereferenceable(8) %C) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %pencil = alloca i32, align 4
  %plane = alloca i32, align 4
  %dim_k = alloca i32, align 4
  %dim_j = alloca i32, align 4
  %dim_i = alloca i32, align 4
  %grid_a = alloca double*, align 8
  %grid_b = alloca double*, align 8
  %a_dot_b_box = alloca double, align 8
  %.zero.addr = alloca i32, align 4
  store i32 0, i32* %.zero.addr, align 4
  %0 = load i32, i32* %rows, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %cols, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre188 = bitcast i32* %.omp.is_last to i8*
  %.pre189 = bitcast i64* %.omp.stride to i8*
  %.pre191 = bitcast i64* %.omp.ub to i8*
  %.pre193 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %6, i32 33, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %7 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp17183 = icmp sgt i64 %7, %sub7
  %cond184 = select i1 %cmp17183, i64 %sub7, i64 %7
  store i64 %cond184, i64* %.omp.ub, align 8, !tbaa !42
  %8 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp19185 = icmp sgt i64 %8, %cond184
  br i1 %cmp19185, label %omp.dispatch.end, label %omp.inner.for.cond.preheader.lr.ph

omp.inner.for.cond.preheader.lr.ph:               ; preds = %omp.precond.then
  %9 = bitcast i32* %pencil to i8*
  %10 = bitcast i32* %plane to i8*
  %11 = bitcast i32* %dim_k to i8*
  %12 = bitcast i32* %dim_j to i8*
  %13 = bitcast i32* %dim_i to i8*
  %14 = bitcast double** %grid_a to i8*
  %15 = bitcast double** %grid_b to i8*
  %16 = bitcast double* %a_dot_b_box to i8*
  br label %omp.inner.for.cond.preheader

omp.inner.for.cond.preheader:                     ; preds = %omp.inner.for.cond.preheader.lr.ph, %omp.dispatch.inc
  %17 = phi i64 [ %cond184, %omp.inner.for.cond.preheader.lr.ph ], [ %cond, %omp.dispatch.inc ]
  %18 = phi i64 [ %8, %omp.inner.for.cond.preheader.lr.ph ], [ %add130, %omp.dispatch.inc ]
  %cmp21181 = icmp sgt i64 %18, %17
  br i1 %cmp21181, label %omp.dispatch.inc, label %omp.inner.for.body.preheader

omp.inner.for.body.preheader:                     ; preds = %omp.inner.for.cond.preheader
  %.pre = load i32, i32* %cols, align 4, !tbaa !35
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body.preheader, %omp.inner.for.inc
  %19 = phi i32 [ %50, %omp.inner.for.inc ], [ %.pre, %omp.inner.for.body.preheader ]
  %.omp.iv.0182 = phi i64 [ %add129, %omp.inner.for.inc ], [ %18, %omp.inner.for.body.preheader ]
  %conv27 = sext i32 %19 to i64
  %div28 = sdiv i64 %.omp.iv.0182, %conv27
  %conv31 = trunc i64 %div28 to i32
  %rem = srem i64 %.omp.iv.0182, %conv27
  %conv39 = trunc i64 %rem to i32
  %cmp40 = icmp slt i32 %conv39, %conv31
  br i1 %cmp40, label %omp.inner.for.inc, label %for.cond.preheader

for.cond.preheader:                               ; preds = %omp.inner.for.body
  %20 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank177 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %20, i64 0, i32 22
  %21 = load i32, i32* %subdomains_per_rank177, align 8, !tbaa !53
  %cmp42178 = icmp sgt i32 %21, 0
  br i1 %cmp42178, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sext = shl i64 %div28, 32
  %idxprom84 = ashr exact i64 %sext, 32
  %sext175 = shl i64 %rem, 32
  %idxprom97 = ashr exact i64 %sext175, 32
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %omp_if.end
  %22 = phi %struct.domain_type* [ %20, %for.body.lr.ph ], [ %44, %omp_if.end ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %omp_if.end ]
  %a_dot_b_domain.0179 = phi double [ 0.000000e+00, %for.body.lr.ph ], [ %add113, %omp_if.end ]
  call void @llvm.lifetime.start(i64 4, i8* %9) #1
  %23 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %23 to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %22, i64 0, i32 28
  %24 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %24, i64 %indvars.iv, i32 5
  %25 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %pencil46 = getelementptr inbounds %struct.box_type, %struct.box_type* %25, i64 %idxprom, i32 5
  %26 = load i32, i32* %pencil46, align 8, !tbaa !54
  store i32 %26, i32* %pencil, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %plane53 = getelementptr inbounds %struct.box_type, %struct.box_type* %25, i64 %idxprom, i32 6
  %27 = load i32, i32* %plane53, align 4, !tbaa !55
  store i32 %27, i32* %plane, align 4, !tbaa !35
  %ghosts60 = getelementptr inbounds %struct.box_type, %struct.box_type* %25, i64 %idxprom, i32 4
  %28 = load i32, i32* %ghosts60, align 4, !tbaa !38
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  %k67 = getelementptr inbounds %struct.box_type, %struct.box_type* %25, i64 %idxprom, i32 2, i32 2
  %29 = load i32, i32* %k67, align 4, !tbaa !40
  store i32 %29, i32* %dim_k, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %12) #1
  %j75 = getelementptr inbounds %struct.box_type, %struct.box_type* %25, i64 %idxprom, i32 2, i32 1
  %30 = load i32, i32* %j75, align 4, !tbaa !37
  store i32 %30, i32* %dim_j, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 4, i8* %13) #1
  %i83 = getelementptr inbounds %struct.box_type, %struct.box_type* %25, i64 %idxprom, i32 2, i32 0
  %31 = load i32, i32* %i83, align 4, !tbaa !43
  store i32 %31, i32* %dim_i, align 4, !tbaa !35
  call void @llvm.lifetime.start(i64 8, i8* %14) #1
  %32 = load i32*, i32** %id_A, align 8, !tbaa !1
  %arrayidx85 = getelementptr inbounds i32, i32* %32, i64 %idxprom84
  %33 = load i32, i32* %arrayidx85, align 4, !tbaa !35
  %idxprom86 = sext i32 %33 to i64
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %25, i64 %idxprom, i32 10
  %34 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx93 = getelementptr inbounds double*, double** %34, i64 %idxprom86
  %35 = load double*, double** %arrayidx93, align 8, !tbaa !1
  %add94 = add nsw i32 %26, 1
  %add95 = add nsw i32 %add94, %27
  %mul96 = mul nsw i32 %add95, %28
  %idx.ext = sext i32 %mul96 to i64
  %add.ptr = getelementptr inbounds double, double* %35, i64 %idx.ext
  store double* %add.ptr, double** %grid_a, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %15) #1
  %36 = load i32*, i32** %id_B, align 8, !tbaa !1
  %arrayidx98 = getelementptr inbounds i32, i32* %36, i64 %idxprom97
  %37 = load i32, i32* %arrayidx98, align 4, !tbaa !35
  %idxprom99 = sext i32 %37 to i64
  %38 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels104 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %38, i64 %indvars.iv, i32 5
  %39 = load %struct.box_type*, %struct.box_type** %levels104, align 8, !tbaa !28
  %grids106 = getelementptr inbounds %struct.box_type, %struct.box_type* %39, i64 %idxprom, i32 10
  %40 = load double**, double*** %grids106, align 8, !tbaa !30
  %arrayidx107 = getelementptr inbounds double*, double** %40, i64 %idxprom99
  %41 = load double*, double** %arrayidx107, align 8, !tbaa !1
  %add.ptr112 = getelementptr inbounds double, double* %41, i64 %idx.ext
  store double* %add.ptr112, double** %grid_b, align 8, !tbaa !1
  call void @llvm.lifetime.start(i64 8, i8* %16) #1
  store double 0.000000e+00, double* %a_dot_b_box, align 8, !tbaa !34
  %42 = load i32, i32* %omp_within_a_box, align 4, !tbaa !35
  %tobool = icmp eq i32 %42, 0
  br i1 %tobool, label %omp_if.else, label %omp_if.then

omp_if.then:                                      ; preds = %for.body
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 8, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, i32*, i32*, i32*, i32*, i32*, double*, double**, double**)* @.omp_outlined..54 to void (i32*, i32*, ...)*), i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double* nonnull %a_dot_b_box, double** nonnull %grid_a, double** nonnull %grid_b) #1
  br label %omp_if.end

omp_if.else:                                      ; preds = %for.body
  call void @__kmpc_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  call void @.omp_outlined..54(i32* %.global_tid., i32* nonnull %.zero.addr, i32* nonnull %dim_k, i32* nonnull %dim_j, i32* nonnull %dim_i, i32* nonnull %pencil, i32* nonnull %plane, double* nonnull %a_dot_b_box, double** nonnull %grid_a, double** nonnull %grid_b)
  call void @__kmpc_end_serialized_parallel(%ident_t* nonnull @0, i32 %6) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %omp_if.else, %omp_if.then
  %43 = load double, double* %a_dot_b_box, align 8, !tbaa !34
  %add113 = fadd double %a_dot_b_domain.0179, %43
  call void @llvm.lifetime.end(i64 8, i8* nonnull %16) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %15) #1
  call void @llvm.lifetime.end(i64 8, i8* nonnull %14) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %13) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %12) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %11) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %10) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %9) #1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %44 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %44, i64 0, i32 22
  %45 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %46 = sext i32 %45 to i64
  %cmp42 = icmp slt i64 %indvars.iv.next, %46
  br i1 %cmp42, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %omp_if.end
  %add113.lcssa = phi double [ %add113, %omp_if.end ]
  %.pre186 = load i32, i32* %cols, align 4, !tbaa !35
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %47 = phi i32 [ %19, %for.cond.preheader ], [ %.pre186, %for.end.loopexit ]
  %a_dot_b_domain.0.lcssa = phi double [ 0.000000e+00, %for.cond.preheader ], [ %add113.lcssa, %for.end.loopexit ]
  %mul114 = mul nsw i32 %47, %conv31
  %add115 = add nsw i32 %mul114, %conv39
  %idxprom116 = sext i32 %add115 to i64
  %48 = load double*, double** %C, align 8, !tbaa !1
  %arrayidx117 = getelementptr inbounds double, double* %48, i64 %idxprom116
  store double %a_dot_b_domain.0.lcssa, double* %arrayidx117, align 8, !tbaa !34
  %cmp118 = icmp slt i32 %conv31, %47
  %49 = load i32, i32* %rows, align 4
  %cmp121 = icmp slt i32 %conv39, %49
  %or.cond176 = and i1 %cmp118, %cmp121
  br i1 %or.cond176, label %if.then123, label %omp.inner.for.inc

if.then123:                                       ; preds = %for.end
  %mul124 = mul nsw i32 %47, %conv39
  %add125 = add nsw i32 %mul124, %conv31
  %idxprom126 = sext i32 %add125 to i64
  %arrayidx127 = getelementptr inbounds double, double* %48, i64 %idxprom126
  store double %a_dot_b_domain.0.lcssa, double* %arrayidx127, align 8, !tbaa !34
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %for.end, %if.then123, %omp.inner.for.body
  %50 = phi i32 [ %47, %for.end ], [ %47, %if.then123 ], [ %19, %omp.inner.for.body ]
  %add129 = add nsw i64 %.omp.iv.0182, 1
  %51 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp21 = icmp slt i64 %.omp.iv.0182, %51
  br i1 %cmp21, label %omp.inner.for.body, label %omp.dispatch.inc.loopexit

omp.dispatch.inc.loopexit:                        ; preds = %omp.inner.for.inc
  %.lcssa = phi i64 [ %51, %omp.inner.for.inc ]
  %.pre187 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  br label %omp.dispatch.inc

omp.dispatch.inc:                                 ; preds = %omp.dispatch.inc.loopexit, %omp.inner.for.cond.preheader
  %52 = phi i64 [ %.lcssa, %omp.dispatch.inc.loopexit ], [ %17, %omp.inner.for.cond.preheader ]
  %53 = phi i64 [ %.pre187, %omp.dispatch.inc.loopexit ], [ %18, %omp.inner.for.cond.preheader ]
  %54 = load i64, i64* %.omp.stride, align 8, !tbaa !42
  %add130 = add nsw i64 %54, %53
  store i64 %add130, i64* %.omp.lb, align 8, !tbaa !42
  %add131 = add nsw i64 %52, %54
  %cmp17 = icmp sgt i64 %add131, %sub7
  %cond = select i1 %cmp17, i64 %sub7, i64 %add131
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %cmp19 = icmp sgt i64 %add130, %cond
  br i1 %cmp19, label %omp.dispatch.end.loopexit, label %omp.inner.for.cond.preheader

omp.dispatch.end.loopexit:                        ; preds = %omp.dispatch.inc
  br label %omp.dispatch.end

omp.dispatch.end:                                 ; preds = %omp.dispatch.end.loopexit, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.dispatch.end
  %.pre-phi194 = phi i8* [ %.pre193, %entry.omp.precond.end_crit_edge ], [ %2, %omp.dispatch.end ]
  %.pre-phi192 = phi i8* [ %.pre191, %entry.omp.precond.end_crit_edge ], [ %3, %omp.dispatch.end ]
  %.pre-phi190 = phi i8* [ %.pre189, %entry.omp.precond.end_crit_edge ], [ %4, %omp.dispatch.end ]
  %.pre-phi = phi i8* [ %.pre188, %entry.omp.precond.end_crit_edge ], [ %5, %omp.dispatch.end ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi190) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi192) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi194) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..54(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture readonly dereferenceable(4) %dim_k, i32* nocapture readonly dereferenceable(4) %dim_j, i32* nocapture readonly dereferenceable(4) %dim_i, i32* nocapture readonly dereferenceable(4) %pencil, i32* nocapture readonly dereferenceable(4) %plane, double* dereferenceable(8) %a_dot_b_box, double** nocapture readonly dereferenceable(8) %grid_a, double** nocapture readonly dereferenceable(8) %grid_b) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %a_dot_b_box15 = alloca double, align 8
  %.omp.reduction.red_list = alloca [1 x i8*], align 8
  %0 = load i32, i32* %dim_k, align 4, !tbaa !35
  %conv = sext i32 %0 to i64
  %1 = load i32, i32* %dim_j, align 4, !tbaa !35
  %conv6 = sext i32 %1 to i64
  %mul = mul nsw i64 %conv6, %conv
  %sub7 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %0, 0
  %cmp10 = icmp sgt i32 %1, 0
  %or.cond = and i1 %cmp, %cmp10
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre = bitcast i32* %.omp.is_last to i8*
  %.pre78 = bitcast i64* %.omp.stride to i8*
  %.pre80 = bitcast i64* %.omp.ub to i8*
  %.pre82 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %2 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %3 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store i64 %sub7, i64* %.omp.ub, align 8, !tbaa !42
  %4 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %5 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %6 = bitcast double* %a_dot_b_box15 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #1
  store double 0.000000e+00, double* %a_dot_b_box15, align 8, !tbaa !34
  %7 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %7, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %8 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp18 = icmp sgt i64 %8, %sub7
  %cond = select i1 %cmp18, i64 %sub7, i64 %8
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %9 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp2074 = icmp sgt i64 %9, %cond
  br i1 %cmp2074, label %omp.loop.exit, label %omp.inner.for.body.lr.ph

omp.inner.for.body.lr.ph:                         ; preds = %omp.precond.then
  %10 = load i32, i32* %dim_j, align 4
  %conv26 = sext i32 %10 to i64
  %11 = load i32, i32* %dim_i, align 4
  %cmp3972 = icmp sgt i32 %11, 0
  %12 = load i32, i32* %pencil, align 4
  %13 = load i32, i32* %plane, align 4
  %14 = load double*, double** %grid_a, align 8
  %15 = load double*, double** %grid_b, align 8
  br i1 %cmp3972, label %omp.inner.for.body.us.preheader, label %omp.loop.exit

omp.inner.for.body.us.preheader:                  ; preds = %omp.inner.for.body.lr.ph
  %16 = sext i32 %11 to i64
  %xtraiter = and i32 %11, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  %17 = icmp eq i32 %11, 1
  br label %omp.inner.for.body.us

omp.inner.for.body.us:                            ; preds = %omp.inner.for.body.us.preheader, %for.cond.omp.inner.for.inc_crit_edge.us
  %18 = phi double [ %add48.us.lcssa, %for.cond.omp.inner.for.inc_crit_edge.us ], [ 0.000000e+00, %omp.inner.for.body.us.preheader ]
  %.omp.iv.075.us = phi i64 [ %add49.us, %for.cond.omp.inner.for.inc_crit_edge.us ], [ %9, %omp.inner.for.body.us.preheader ]
  %div27.us = sdiv i64 %.omp.iv.075.us, %conv26
  %conv30.us = trunc i64 %div27.us to i32
  %rem.us = srem i64 %.omp.iv.075.us, %conv26
  %conv38.us = trunc i64 %rem.us to i32
  %mul41.us = mul nsw i32 %12, %conv38.us
  %mul43.us = mul nsw i32 %13, %conv30.us
  br i1 %lcmp.mod, label %omp.inner.for.body.us.split, label %for.body.us.prol

for.body.us.prol:                                 ; preds = %omp.inner.for.body.us
  %add44.us.prol = add nsw i32 %mul41.us, %mul43.us
  %idxprom.us.prol = sext i32 %add44.us.prol to i64
  %arrayidx.us.prol = getelementptr inbounds double, double* %14, i64 %idxprom.us.prol
  %19 = load double, double* %arrayidx.us.prol, align 8, !tbaa !34
  %arrayidx46.us.prol = getelementptr inbounds double, double* %15, i64 %idxprom.us.prol
  %20 = load double, double* %arrayidx46.us.prol, align 8, !tbaa !34
  %mul47.us.prol = fmul double %19, %20
  %add48.us.prol = fadd double %18, %mul47.us.prol
  store double %add48.us.prol, double* %a_dot_b_box15, align 8, !tbaa !34
  br label %omp.inner.for.body.us.split

omp.inner.for.body.us.split:                      ; preds = %omp.inner.for.body.us, %for.body.us.prol
  %.unr = phi double [ %18, %omp.inner.for.body.us ], [ %add48.us.prol, %for.body.us.prol ]
  %indvars.iv.unr = phi i64 [ 0, %omp.inner.for.body.us ], [ 1, %for.body.us.prol ]
  %i.073.us.unr = phi i32 [ 0, %omp.inner.for.body.us ], [ 1, %for.body.us.prol ]
  %add48.us.lcssa.unr = phi double [ undef, %omp.inner.for.body.us ], [ %add48.us.prol, %for.body.us.prol ]
  br i1 %17, label %for.cond.omp.inner.for.inc_crit_edge.us, label %omp.inner.for.body.us.split.split

omp.inner.for.body.us.split.split:                ; preds = %omp.inner.for.body.us.split
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %omp.inner.for.body.us.split.split
  %21 = phi double [ %.unr, %omp.inner.for.body.us.split.split ], [ %add48.us.1, %for.body.us ]
  %indvars.iv = phi i64 [ %indvars.iv.unr, %omp.inner.for.body.us.split.split ], [ %indvars.iv.next.1, %for.body.us ]
  %i.073.us = phi i32 [ %i.073.us.unr, %omp.inner.for.body.us.split.split ], [ %inc.us.1, %for.body.us ]
  %add42.us = add nsw i32 %mul41.us, %i.073.us
  %add44.us = add nsw i32 %add42.us, %mul43.us
  %idxprom.us = sext i32 %add44.us to i64
  %arrayidx.us = getelementptr inbounds double, double* %14, i64 %idxprom.us
  %22 = load double, double* %arrayidx.us, align 8, !tbaa !34
  %arrayidx46.us = getelementptr inbounds double, double* %15, i64 %idxprom.us
  %23 = load double, double* %arrayidx46.us, align 8, !tbaa !34
  %mul47.us = fmul double %22, %23
  %add48.us = fadd double %21, %mul47.us
  store double %add48.us, double* %a_dot_b_box15, align 8, !tbaa !34
  %inc.us = add nuw nsw i32 %i.073.us, 1
  %add42.us.1 = add nsw i32 %mul41.us, %inc.us
  %add44.us.1 = add nsw i32 %add42.us.1, %mul43.us
  %idxprom.us.1 = sext i32 %add44.us.1 to i64
  %arrayidx.us.1 = getelementptr inbounds double, double* %14, i64 %idxprom.us.1
  %24 = load double, double* %arrayidx.us.1, align 8, !tbaa !34
  %arrayidx46.us.1 = getelementptr inbounds double, double* %15, i64 %idxprom.us.1
  %25 = load double, double* %arrayidx46.us.1, align 8, !tbaa !34
  %mul47.us.1 = fmul double %24, %25
  %add48.us.1 = fadd double %add48.us, %mul47.us.1
  store double %add48.us.1, double* %a_dot_b_box15, align 8, !tbaa !34
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, 2
  %inc.us.1 = add nsw i32 %i.073.us, 2
  %cmp39.us.1 = icmp slt i64 %indvars.iv.next.1, %16
  br i1 %cmp39.us.1, label %for.body.us, label %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa

for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa: ; preds = %for.body.us
  %add48.us.1.lcssa = phi double [ %add48.us.1, %for.body.us ]
  br label %for.cond.omp.inner.for.inc_crit_edge.us

for.cond.omp.inner.for.inc_crit_edge.us:          ; preds = %omp.inner.for.body.us.split, %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa
  %add48.us.lcssa = phi double [ %add48.us.lcssa.unr, %omp.inner.for.body.us.split ], [ %add48.us.1.lcssa, %for.cond.omp.inner.for.inc_crit_edge.us.unr-lcssa ]
  %add49.us = add nsw i64 %.omp.iv.075.us, 1
  %cmp20.us = icmp slt i64 %.omp.iv.075.us, %cond
  br i1 %cmp20.us, label %omp.inner.for.body.us, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %for.cond.omp.inner.for.inc_crit_edge.us
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.inner.for.body.lr.ph, %omp.precond.then
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %7) #1
  %26 = bitcast [1 x i8*]* %.omp.reduction.red_list to double**
  store double* %a_dot_b_box15, double** %26, align 8
  %27 = bitcast [1 x i8*]* %.omp.reduction.red_list to i8*
  %28 = call i32 @__kmpc_reduce_nowait(%ident_t* nonnull @1, i32 %7, i32 1, i64 8, i8* %27, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func.55, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  switch i32 %28, label %.omp.reduction.default [
    i32 1, label %.omp.reduction.case1
    i32 2, label %.omp.reduction.case2
  ]

.omp.reduction.case1:                             ; preds = %omp.loop.exit
  %29 = load double, double* %a_dot_b_box, align 8, !tbaa !34
  %30 = load double, double* %a_dot_b_box15, align 8, !tbaa !34
  %add50 = fadd double %29, %30
  store double %add50, double* %a_dot_b_box, align 8, !tbaa !34
  call void @__kmpc_end_reduce_nowait(%ident_t* nonnull @1, i32 %7, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #1
  br label %.omp.reduction.default

.omp.reduction.case2:                             ; preds = %omp.loop.exit
  %31 = bitcast double* %a_dot_b_box to i64*
  %atomic-load = load atomic i64, i64* %31 monotonic, align 8, !tbaa !34
  %32 = load double, double* %a_dot_b_box15, align 8
  br label %atomic_cont

atomic_cont:                                      ; preds = %atomic_cont, %.omp.reduction.case2
  %33 = phi i64 [ %atomic-load, %.omp.reduction.case2 ], [ %37, %atomic_cont ]
  %34 = bitcast i64 %33 to double
  %add51 = fadd double %34, %32
  %35 = bitcast double %add51 to i64
  %36 = cmpxchg i64* %31, i64 %33, i64 %35 monotonic monotonic
  %37 = extractvalue { i64, i1 } %36, 0
  %38 = extractvalue { i64, i1 } %36, 1
  br i1 %38, label %.omp.reduction.default.loopexit, label %atomic_cont

.omp.reduction.default.loopexit:                  ; preds = %atomic_cont
  br label %.omp.reduction.default

.omp.reduction.default:                           ; preds = %.omp.reduction.default.loopexit, %.omp.reduction.case1, %omp.loop.exit
  call void @llvm.lifetime.end(i64 8, i8* %6) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %.omp.reduction.default
  %.pre-phi83 = phi i8* [ %.pre82, %entry.omp.precond.end_crit_edge ], [ %2, %.omp.reduction.default ]
  %.pre-phi81 = phi i8* [ %.pre80, %entry.omp.precond.end_crit_edge ], [ %3, %.omp.reduction.default ]
  %.pre-phi79 = phi i8* [ %.pre78, %entry.omp.precond.end_crit_edge ], [ %4, %.omp.reduction.default ]
  %.pre-phi = phi i8* [ %.pre, %entry.omp.precond.end_crit_edge ], [ %5, %.omp.reduction.default ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi79) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi81) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi83) #1
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp.reduction.reduction_func.55(i8* nocapture readonly, i8* nocapture readonly) #2 {
entry:
  %2 = bitcast i8* %1 to double**
  %3 = load double*, double** %2, align 8
  %4 = bitcast i8* %0 to double**
  %5 = load double*, double** %4, align 8
  %6 = load double, double* %5, align 8, !tbaa !34
  %7 = load double, double* %3, align 8, !tbaa !34
  %add = fadd double %6, %7
  store double %add, double* %5, align 8, !tbaa !34
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #7

; Function Attrs: nounwind
declare void @free(i8* nocapture) #7

; Function Attrs: nounwind uwtable
define void @initialize_problem(%struct.domain_type* %domain, i32 %level, double %hLevel, double %a, double %b) #3 {
entry:
  %domain.addr = alloca %struct.domain_type*, align 8
  %level.addr = alloca i32, align 4
  %hLevel.addr = alloca double, align 8
  %a.addr = alloca double, align 8
  %b.addr = alloca double, align 8
  %NPi = alloca double, align 8
  %c2 = alloca double, align 8
  %c1 = alloca double, align 8
  %c3 = alloca double, align 8
  %c4 = alloca double, align 8
  %box = alloca i32, align 4
  store %struct.domain_type* %domain, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  store i32 %level, i32* %level.addr, align 4, !tbaa !35
  store double %hLevel, double* %hLevel.addr, align 8, !tbaa !34
  store double %a, double* %a.addr, align 8, !tbaa !34
  store double %b, double* %b.addr, align 8, !tbaa !34
  %0 = bitcast double* %NPi to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #1
  store double 0x401921FB54442D18, double* %NPi, align 8, !tbaa !34
  %1 = bitcast double* %c2 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #1
  store double 4.500000e+00, double* %c2, align 8, !tbaa !34
  %2 = bitcast double* %c1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #1
  store double 5.500000e+00, double* %c1, align 8, !tbaa !34
  %3 = bitcast double* %c3 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  store double 1.000000e+01, double* %c3, align 8, !tbaa !34
  %4 = bitcast double* %c4 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #1
  store double -2.000000e+01, double* %c4, align 8, !tbaa !34
  %5 = bitcast i32* %box to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 0, i32* %box, align 4, !tbaa !35
  %subdomains_per_rank50 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 22
  %6 = load i32, i32* %subdomains_per_rank50, align 8, !tbaa !53
  %cmp51 = icmp sgt i32 %6, 0
  br i1 %cmp51, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %7 = phi i32 [ %27, %for.body ], [ %level, %for.body.preheader ]
  %8 = phi %struct.domain_type* [ %25, %for.body ], [ %domain, %for.body.preheader ]
  %storemerge52 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %idxprom = sext i32 %7 to i64
  %idxprom2 = sext i32 %storemerge52 to i64
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %8, i64 0, i32 28
  %9 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %9, i64 %idxprom2, i32 5
  %10 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %10, i64 %idxprom, i32 10
  %11 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx4 = getelementptr inbounds double*, double** %11, i64 11
  %12 = bitcast double** %arrayidx4 to i8**
  %13 = load i8*, i8** %12, align 8, !tbaa !1
  %volume = getelementptr inbounds %struct.box_type, %struct.box_type* %10, i64 %idxprom, i32 7
  %14 = load i32, i32* %volume, align 8, !tbaa !93
  %conv = sext i32 %14 to i64
  %mul = shl nsw i64 %conv, 3
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 %mul, i32 8, i1 false)
  %15 = load i32, i32* %level.addr, align 4, !tbaa !35
  %idxprom11 = sext i32 %15 to i64
  %16 = load i32, i32* %box, align 4, !tbaa !35
  %idxprom12 = sext i32 %16 to i64
  %17 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %subdomains13 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %17, i64 0, i32 28
  %18 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains13, align 8, !tbaa !24
  %levels15 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %18, i64 %idxprom12, i32 5
  %19 = load %struct.box_type*, %struct.box_type** %levels15, align 8, !tbaa !28
  %grids17 = getelementptr inbounds %struct.box_type, %struct.box_type* %19, i64 %idxprom11, i32 10
  %20 = load double**, double*** %grids17, align 8, !tbaa !30
  %arrayidx18 = getelementptr inbounds double*, double** %20, i64 1
  %21 = bitcast double** %arrayidx18 to i8**
  %22 = load i8*, i8** %21, align 8, !tbaa !1
  %volume25 = getelementptr inbounds %struct.box_type, %struct.box_type* %19, i64 %idxprom11, i32 7
  %23 = load i32, i32* %volume25, align 8, !tbaa !93
  %conv26 = sext i32 %23 to i64
  %mul27 = shl nsw i64 %conv26, 3
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 %mul27, i32 8, i1 false)
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 11, void (i32*, i32*, ...)* nonnull bitcast (void (i32*, i32*, %struct.domain_type**, i32*, i32*, double*, double*, double*, double*, double*, double*, double*, double*)* @.omp_outlined..56 to void (i32*, i32*, ...)*), %struct.domain_type** nonnull %domain.addr, i32* nonnull %box, i32* nonnull %level.addr, double* nonnull %hLevel.addr, double* nonnull %c1, double* nonnull %c2, double* nonnull %c3, double* nonnull %c4, double* nonnull %NPi, double* nonnull %a.addr, double* nonnull %b.addr) #1
  %24 = load i32, i32* %box, align 4, !tbaa !35
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %box, align 4, !tbaa !35
  %25 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %25, i64 0, i32 22
  %26 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %cmp = icmp slt i32 %inc, %26
  %27 = load i32, i32* %level.addr, align 4, !tbaa !35
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  %.lcssa63 = phi i32 [ %27, %for.body ]
  %.lcssa62 = phi %struct.domain_type* [ %25, %for.body ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %.lcssa49 = phi i32 [ %level, %entry ], [ %.lcssa63, %for.end.loopexit ]
  %.lcssa = phi %struct.domain_type* [ %domain, %entry ], [ %.lcssa62, %for.end.loopexit ]
  %call = call double @mean(%struct.domain_type* %.lcssa, i32 %.lcssa49, i32 1)
  %28 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %28, i64 0, i32 21
  %29 = load i32, i32* %rank, align 4, !tbaa !41
  %cmp28 = icmp eq i32 %29, 0
  br i1 %cmp28, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  %call30 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.57, i64 0, i64 0), double %call)
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call31 = call i32 @fflush(%struct._IO_FILE* %30)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end
  %31 = load double, double* %a.addr, align 8, !tbaa !34
  %cmp32 = fcmp une double %31, 0.000000e+00
  br i1 %cmp32, label %if.then34, label %if.end38

if.then34:                                        ; preds = %if.end
  %32 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %33 = load i32, i32* %level.addr, align 4, !tbaa !35
  %sub35 = fsub double -0.000000e+00, %call
  call void @shift_grid(%struct.domain_type* %32, i32 %33, i32 1, i32 1, double %sub35)
  %34 = load %struct.domain_type*, %struct.domain_type** %domain.addr, align 8, !tbaa !1
  %35 = load i32, i32* %level.addr, align 4, !tbaa !35
  %36 = load double, double* %a.addr, align 8, !tbaa !34
  %div37 = fdiv double %sub35, %36
  call void @shift_grid(%struct.domain_type* %34, i32 %35, i32 11, i32 11, double %div37)
  br label %if.end38

if.end38:                                         ; preds = %if.then34, %if.end
  call void @llvm.lifetime.end(i64 4, i8* nonnull %5) #1
  call void @llvm.lifetime.end(i64 8, i8* %4) #1
  call void @llvm.lifetime.end(i64 8, i8* %3) #1
  call void @llvm.lifetime.end(i64 8, i8* %2) #1
  call void @llvm.lifetime.end(i64 8, i8* %1) #1
  call void @llvm.lifetime.end(i64 8, i8* %0) #1
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..56(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., %struct.domain_type** nocapture readonly dereferenceable(8) %domain, i32* nocapture readonly dereferenceable(4) %box, i32* nocapture readonly dereferenceable(4) %level, double* nocapture readonly dereferenceable(8) %hLevel, double* nocapture readonly dereferenceable(8) %c1, double* nocapture readonly dereferenceable(8) %c2, double* nocapture readonly dereferenceable(8) %c3, double* nocapture readonly dereferenceable(8) %c4, double* readonly dereferenceable(8) %NPi, double* nocapture readonly dereferenceable(8) %a, double* nocapture readonly dereferenceable(8) %b) #3 {
entry:
  %.omp.lb = alloca i64, align 8
  %.omp.ub = alloca i64, align 8
  %.omp.stride = alloca i64, align 8
  %.omp.is_last = alloca i32, align 4
  %0 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom = sext i32 %0 to i64
  %1 = load i32, i32* %box, align 4, !tbaa !35
  %idxprom1 = sext i32 %1 to i64
  %2 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %2, i64 0, i32 28
  %3 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %3, i64 %idxprom1, i32 5
  %4 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %k = getelementptr inbounds %struct.box_type, %struct.box_type* %4, i64 %idxprom, i32 2, i32 2
  %5 = load i32, i32* %k, align 4, !tbaa !40
  %conv = sext i32 %5 to i64
  %j = getelementptr inbounds %struct.box_type, %struct.box_type* %4, i64 %idxprom, i32 2, i32 1
  %6 = load i32, i32* %j, align 4, !tbaa !37
  %conv15 = sext i32 %6 to i64
  %mul = mul nsw i64 %conv15, %conv
  %sub16 = add nsw i64 %mul, -1
  %cmp = icmp sgt i32 %5, 0
  %cmp37 = icmp sgt i32 %6, 0
  %or.cond = and i1 %cmp, %cmp37
  br i1 %or.cond, label %omp.precond.then, label %entry.omp.precond.end_crit_edge

entry.omp.precond.end_crit_edge:                  ; preds = %entry
  %.pre610 = bitcast i32* %.omp.is_last to i8*
  %.pre611 = bitcast i64* %.omp.stride to i8*
  %.pre613 = bitcast i64* %.omp.ub to i8*
  %.pre615 = bitcast i64* %.omp.lb to i8*
  br label %omp.precond.end

omp.precond.then:                                 ; preds = %entry
  %7 = bitcast i64* %.omp.lb to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #1
  store i64 0, i64* %.omp.lb, align 8, !tbaa !42
  %8 = bitcast i64* %.omp.ub to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #1
  store i64 %sub16, i64* %.omp.ub, align 8, !tbaa !42
  %9 = bitcast i64* %.omp.stride to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #1
  store i64 1, i64* %.omp.stride, align 8, !tbaa !42
  %10 = bitcast i32* %.omp.is_last to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  store i32 0, i32* %.omp.is_last, align 4, !tbaa !35
  %11 = load i32, i32* %.global_tid., align 4, !tbaa !35
  call void @__kmpc_for_static_init_8(%ident_t* nonnull @0, i32 %11, i32 34, i32* nonnull %.omp.is_last, i64* nonnull %.omp.lb, i64* nonnull %.omp.ub, i64* nonnull %.omp.stride, i64 1, i64 1) #1
  %12 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  %cmp44 = icmp sgt i64 %12, %sub16
  %cond = select i1 %cmp44, i64 %sub16, i64 %12
  store i64 %cond, i64* %.omp.ub, align 8, !tbaa !42
  %13 = load i64, i64* %.omp.lb, align 8, !tbaa !42
  %cmp46604 = icmp sgt i64 %13, %cond
  br i1 %cmp46604, label %omp.loop.exit, label %omp.inner.for.body.preheader

omp.inner.for.body.preheader:                     ; preds = %omp.precond.then
  %.pre = load i32, i32* %level, align 4, !tbaa !35
  %.pre606 = load i32, i32* %box, align 4, !tbaa !35
  %.pre607 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  br label %omp.inner.for.body

omp.inner.for.body:                               ; preds = %omp.inner.for.body.preheader, %omp.inner.for.inc
  %14 = phi i64 [ %102, %omp.inner.for.inc ], [ %cond, %omp.inner.for.body.preheader ]
  %15 = phi %struct.domain_type* [ %103, %omp.inner.for.inc ], [ %.pre607, %omp.inner.for.body.preheader ]
  %16 = phi i32 [ %104, %omp.inner.for.inc ], [ %.pre606, %omp.inner.for.body.preheader ]
  %17 = phi i32 [ %105, %omp.inner.for.inc ], [ %.pre, %omp.inner.for.body.preheader ]
  %.omp.iv.0605 = phi i64 [ %add451, %omp.inner.for.inc ], [ %13, %omp.inner.for.body.preheader ]
  %idxprom48 = sext i32 %17 to i64
  %idxprom49 = sext i32 %16 to i64
  %subdomains50 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %15, i64 0, i32 28
  %18 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains50, align 8, !tbaa !24
  %levels52 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %18, i64 %idxprom49, i32 5
  %19 = load %struct.box_type*, %struct.box_type** %levels52, align 8, !tbaa !28
  %j55 = getelementptr inbounds %struct.box_type, %struct.box_type* %19, i64 %idxprom48, i32 2, i32 1
  %20 = load i32, i32* %j55, align 4, !tbaa !37
  %conv60 = sext i32 %20 to i64
  %div61 = sdiv i64 %.omp.iv.0605, %conv60
  %conv64 = trunc i64 %div61 to i32
  %rem = srem i64 %.omp.iv.0605, %conv60
  %conv80 = trunc i64 %rem to i32
  %i88600 = getelementptr inbounds %struct.box_type, %struct.box_type* %19, i64 %idxprom48, i32 2, i32 0
  %21 = load i32, i32* %i88600, align 4, !tbaa !43
  %cmp89601 = icmp sgt i32 %21, 0
  br i1 %cmp89601, label %for.body.preheader, label %omp.inner.for.inc

for.body.preheader:                               ; preds = %omp.inner.for.body
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %22 = phi %struct.box_type* [ %95, %for.body ], [ %19, %for.body.preheader ]
  %idxprom81603 = phi i64 [ %idxprom413, %for.body ], [ %idxprom48, %for.body.preheader ]
  %i.0602 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %23 = load double, double* %hLevel, align 8, !tbaa !34
  %i97 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom81603, i32 1, i32 0
  %24 = load i32, i32* %i97, align 8, !tbaa !94
  %add98 = add nsw i32 %24, %i.0602
  %conv99 = sitofp i32 %add98 to double
  %add100 = fadd double %conv99, 5.000000e-01
  %mul101 = fmul double %23, %add100
  %j109 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom81603, i32 1, i32 1
  %25 = load i32, i32* %j109, align 4, !tbaa !95
  %add110 = add nsw i32 %25, %conv80
  %conv111 = sitofp i32 %add110 to double
  %add112 = fadd double %conv111, 5.000000e-01
  %mul113 = fmul double %23, %add112
  %k121 = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom81603, i32 1, i32 2
  %26 = load i32, i32* %k121, align 8, !tbaa !96
  %add122 = add nsw i32 %26, %conv64
  %conv123 = sitofp i32 %add122 to double
  %add124 = fadd double %conv123, 5.000000e-01
  %mul125 = fmul double %23, %add124
  %ghosts = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom81603, i32 4
  %27 = load i32, i32* %ghosts, align 4, !tbaa !38
  %add132 = add nsw i32 %27, %i.0602
  %pencil = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom81603, i32 5
  %28 = load i32, i32* %pencil, align 8, !tbaa !54
  %add146 = add nsw i32 %27, %conv80
  %mul147 = mul nsw i32 %28, %add146
  %add148 = add nsw i32 %add132, %mul147
  %plane = getelementptr inbounds %struct.box_type, %struct.box_type* %22, i64 %idxprom81603, i32 6
  %29 = load i32, i32* %plane, align 4, !tbaa !55
  %add162 = add nsw i32 %27, %conv64
  %mul163 = mul nsw i32 %29, %add162
  %add164 = add nsw i32 %add148, %mul163
  %sub165 = fadd double %mul101, -5.000000e-01
  %pow2 = fmul double %sub165, %sub165
  %sub166 = fadd double %mul113, -5.000000e-01
  %pow2591 = fmul double %sub166, %sub166
  %add168 = fadd double %pow2, %pow2591
  %sub169 = fadd double %mul125, -5.000000e-01
  %pow2592 = fmul double %sub169, %sub169
  %add171 = fadd double %add168, %pow2592
  %mul173 = fmul double %sub165, 2.000000e+00
  %mul175 = fmul double %sub166, 2.000000e+00
  %mul177 = fmul double %sub169, 2.000000e+00
  %sqrt = call double @sqrt(double %add171) #7
  %fabs = call double @fabs(double %sqrt) #7
  %30 = fcmp oeq double %add171, 0xFFF0000000000000
  %mul179 = fmul double %mul173, 5.000000e-01
  %call180 = call double @pow(double %add171, double -5.000000e-01) #1
  %mul181 = fmul double %mul179, %call180
  %mul182 = fmul double %mul175, 5.000000e-01
  %call183 = call double @pow(double %add171, double -5.000000e-01) #1
  %mul184 = fmul double %mul182, %call183
  %mul185 = fmul double %mul177, 5.000000e-01
  %call186 = call double @pow(double %add171, double -5.000000e-01) #1
  %mul187 = fmul double %mul185, %call186
  %call189 = call double @pow(double %add171, double -5.000000e-01) #1
  %call193 = call double @pow(double %add171, double -1.500000e+00) #1
  %call197 = call double @pow(double %add171, double -5.000000e-01) #1
  %call201 = call double @pow(double %add171, double -1.500000e+00) #1
  %call205 = call double @pow(double %add171, double -5.000000e-01) #1
  %call209 = call double @pow(double %add171, double -1.500000e+00) #1
  %31 = load double, double* %c1, align 8, !tbaa !34
  %32 = load double, double* %c2, align 8, !tbaa !34
  %33 = load double, double* %c3, align 8, !tbaa !34
  %fabs.op = fadd double %fabs, -2.500000e-01
  %sub212 = select i1 %30, double 0x7FF0000000000000, double %fabs.op
  %mul213 = fmul double %sub212, %33
  %call214 = call double @tanh(double %mul213) #1
  %mul215 = fmul double %32, %call214
  %add216 = fadd double %31, %mul215
  %34 = load double, double* %c2, align 8, !tbaa !34
  %35 = load double, double* %c3, align 8, !tbaa !34
  %mul217 = fmul double %34, %35
  %mul218 = fmul double %mul181, %mul217
  %mul220 = fmul double %sub212, %35
  %call221 = call double @tanh(double %mul220) #1
  %pow2593 = fmul double %call221, %call221
  %sub223 = fsub double 1.000000e+00, %pow2593
  %mul224 = fmul double %mul218, %sub223
  %36 = load double, double* %c2, align 8, !tbaa !34
  %37 = load double, double* %c3, align 8, !tbaa !34
  %mul225 = fmul double %36, %37
  %mul226 = fmul double %mul184, %mul225
  %mul228 = fmul double %sub212, %37
  %call229 = call double @tanh(double %mul228) #1
  %pow2594 = fmul double %call229, %call229
  %sub231 = fsub double 1.000000e+00, %pow2594
  %mul232 = fmul double %mul226, %sub231
  %38 = load double, double* %c2, align 8, !tbaa !34
  %39 = load double, double* %c3, align 8, !tbaa !34
  %mul233 = fmul double %38, %39
  %mul234 = fmul double %mul187, %mul233
  %mul236 = fmul double %sub212, %39
  %call237 = call double @tanh(double %mul236) #1
  %pow2595 = fmul double %call237, %call237
  %sub239 = fsub double 1.000000e+00, %pow2595
  %mul240 = fmul double %mul234, %sub239
  %40 = load double, double* %c4, align 8, !tbaa !34
  %mul241 = fmul double %add171, %40
  %call242 = call double @exp(double %mul241) #1
  %41 = load double, double* %NPi, align 8, !tbaa !34
  %mul243 = fmul double %mul101, %41
  %call244 = call double @sin(double %mul243) #1
  %mul245 = fmul double %call242, %call244
  %42 = load double, double* %NPi, align 8, !tbaa !34
  %mul246 = fmul double %mul113, %42
  %call247 = call double @sin(double %mul246) #1
  %mul248 = fmul double %mul245, %call247
  %43 = load double, double* %NPi, align 8, !tbaa !34
  %mul249 = fmul double %mul125, %43
  %call250 = call double @sin(double %mul249) #1
  %mul251 = fmul double %mul248, %call250
  %44 = load double, double* %c4, align 8, !tbaa !34
  %mul252 = fmul double %mul173, %44
  %mul253 = fmul double %mul251, %mul252
  %45 = load double, double* %NPi, align 8, !tbaa !34
  %mul254 = fmul double %add171, %44
  %call255 = call double @exp(double %mul254) #1
  %mul256 = fmul double %45, %call255
  %46 = load double, double* %NPi, align 8, !tbaa !34
  %mul257 = fmul double %mul101, %46
  %call258 = call double @cos(double %mul257) #1
  %mul259 = fmul double %mul256, %call258
  %47 = load double, double* %NPi, align 8, !tbaa !34
  %mul260 = fmul double %mul113, %47
  %call261 = call double @sin(double %mul260) #1
  %mul262 = fmul double %mul259, %call261
  %48 = load double, double* %NPi, align 8, !tbaa !34
  %mul263 = fmul double %mul125, %48
  %call264 = call double @sin(double %mul263) #1
  %mul265 = fmul double %mul262, %call264
  %add266 = fadd double %mul253, %mul265
  %49 = load double, double* %c4, align 8, !tbaa !34
  %mul267 = fmul double %mul175, %49
  %mul268 = fmul double %mul251, %mul267
  %50 = load double, double* %NPi, align 8, !tbaa !34
  %mul269 = fmul double %add171, %49
  %call270 = call double @exp(double %mul269) #1
  %mul271 = fmul double %50, %call270
  %51 = load double, double* %NPi, align 8, !tbaa !34
  %mul272 = fmul double %mul101, %51
  %call273 = call double @sin(double %mul272) #1
  %mul274 = fmul double %mul271, %call273
  %52 = load double, double* %NPi, align 8, !tbaa !34
  %mul275 = fmul double %mul113, %52
  %call276 = call double @cos(double %mul275) #1
  %mul277 = fmul double %mul274, %call276
  %53 = load double, double* %NPi, align 8, !tbaa !34
  %mul278 = fmul double %mul125, %53
  %call279 = call double @sin(double %mul278) #1
  %mul280 = fmul double %mul277, %call279
  %add281 = fadd double %mul268, %mul280
  %54 = load double, double* %c4, align 8, !tbaa !34
  %mul282 = fmul double %mul177, %54
  %mul283 = fmul double %mul251, %mul282
  %55 = load double, double* %NPi, align 8, !tbaa !34
  %mul284 = fmul double %add171, %54
  %call285 = call double @exp(double %mul284) #1
  %mul286 = fmul double %55, %call285
  %56 = load double, double* %NPi, align 8, !tbaa !34
  %mul287 = fmul double %mul101, %56
  %call288 = call double @sin(double %mul287) #1
  %mul289 = fmul double %mul286, %call288
  %57 = load double, double* %NPi, align 8, !tbaa !34
  %mul290 = fmul double %mul113, %57
  %call291 = call double @sin(double %mul290) #1
  %mul292 = fmul double %mul289, %call291
  %58 = load double, double* %NPi, align 8, !tbaa !34
  %mul293 = fmul double %mul125, %58
  %call294 = call double @cos(double %mul293) #1
  %mul295 = fmul double %mul292, %call294
  %add296 = fadd double %mul283, %mul295
  %59 = load double, double* %c4, align 8, !tbaa !34
  %mul297 = fmul double %59, 2.000000e+00
  %mul298 = fmul double %mul251, %mul297
  %mul299 = fmul double %mul173, %59
  %mul300 = fmul double %add266, %mul299
  %add301 = fadd double %mul298, %mul300
  %60 = load double, double* %NPi, align 8, !tbaa !34
  %mul303 = fmul double %mul299, %60
  %mul304 = fmul double %add171, %59
  %call305 = call double @exp(double %mul304) #1
  %mul306 = fmul double %mul303, %call305
  %61 = load double, double* %NPi, align 8, !tbaa !34
  %mul307 = fmul double %mul101, %61
  %call308 = call double @cos(double %mul307) #1
  %mul309 = fmul double %mul306, %call308
  %62 = load double, double* %NPi, align 8, !tbaa !34
  %mul310 = fmul double %mul113, %62
  %call311 = call double @sin(double %mul310) #1
  %mul312 = fmul double %mul309, %call311
  %63 = load double, double* %NPi, align 8, !tbaa !34
  %mul313 = fmul double %mul125, %63
  %call314 = call double @sin(double %mul313) #1
  %mul315 = fmul double %mul312, %call314
  %add316 = fadd double %add301, %mul315
  %64 = load double, double* %NPi, align 8, !tbaa !34
  %mul317 = fmul double %64, %64
  %65 = load double, double* %c4, align 8, !tbaa !34
  %mul318 = fmul double %add171, %65
  %call319 = call double @exp(double %mul318) #1
  %mul320 = fmul double %mul317, %call319
  %66 = load double, double* %NPi, align 8, !tbaa !34
  %mul321 = fmul double %mul101, %66
  %call322 = call double @sin(double %mul321) #1
  %mul323 = fmul double %mul320, %call322
  %67 = load double, double* %NPi, align 8, !tbaa !34
  %mul324 = fmul double %mul113, %67
  %call325 = call double @sin(double %mul324) #1
  %mul326 = fmul double %mul323, %call325
  %68 = load double, double* %NPi, align 8, !tbaa !34
  %mul327 = fmul double %mul125, %68
  %call328 = call double @sin(double %mul327) #1
  %mul329 = fmul double %mul326, %call328
  %sub330 = fsub double %add316, %mul329
  %69 = load double, double* %c4, align 8, !tbaa !34
  %mul331 = fmul double %69, 2.000000e+00
  %mul332 = fmul double %mul251, %mul331
  %mul333 = fmul double %mul175, %69
  %mul334 = fmul double %add281, %mul333
  %add335 = fadd double %mul332, %mul334
  %70 = load double, double* %NPi, align 8, !tbaa !34
  %mul337 = fmul double %mul333, %70
  %mul338 = fmul double %add171, %69
  %call339 = call double @exp(double %mul338) #1
  %mul340 = fmul double %mul337, %call339
  %71 = load double, double* %NPi, align 8, !tbaa !34
  %mul341 = fmul double %mul101, %71
  %call342 = call double @sin(double %mul341) #1
  %mul343 = fmul double %mul340, %call342
  %72 = load double, double* %NPi, align 8, !tbaa !34
  %mul344 = fmul double %mul113, %72
  %call345 = call double @cos(double %mul344) #1
  %mul346 = fmul double %mul343, %call345
  %73 = load double, double* %NPi, align 8, !tbaa !34
  %mul347 = fmul double %mul125, %73
  %call348 = call double @sin(double %mul347) #1
  %mul349 = fmul double %mul346, %call348
  %add350 = fadd double %add335, %mul349
  %74 = load double, double* %NPi, align 8, !tbaa !34
  %mul351 = fmul double %74, %74
  %75 = load double, double* %c4, align 8, !tbaa !34
  %mul352 = fmul double %add171, %75
  %call353 = call double @exp(double %mul352) #1
  %mul354 = fmul double %mul351, %call353
  %76 = load double, double* %NPi, align 8, !tbaa !34
  %mul355 = fmul double %mul101, %76
  %call356 = call double @sin(double %mul355) #1
  %mul357 = fmul double %mul354, %call356
  %77 = load double, double* %NPi, align 8, !tbaa !34
  %mul358 = fmul double %mul113, %77
  %call359 = call double @sin(double %mul358) #1
  %mul360 = fmul double %mul357, %call359
  %78 = load double, double* %NPi, align 8, !tbaa !34
  %mul361 = fmul double %mul125, %78
  %call362 = call double @sin(double %mul361) #1
  %mul363 = fmul double %mul360, %call362
  %sub364 = fsub double %add350, %mul363
  %79 = load double, double* %c4, align 8, !tbaa !34
  %mul365 = fmul double %79, 2.000000e+00
  %mul366 = fmul double %mul251, %mul365
  %mul367 = fmul double %mul177, %79
  %mul368 = fmul double %add296, %mul367
  %add369 = fadd double %mul366, %mul368
  %80 = load double, double* %NPi, align 8, !tbaa !34
  %mul371 = fmul double %mul367, %80
  %mul372 = fmul double %add171, %79
  %call373 = call double @exp(double %mul372) #1
  %mul374 = fmul double %mul371, %call373
  %81 = load double, double* %NPi, align 8, !tbaa !34
  %mul375 = fmul double %mul101, %81
  %call376 = call double @sin(double %mul375) #1
  %mul377 = fmul double %mul374, %call376
  %82 = load double, double* %NPi, align 8, !tbaa !34
  %mul378 = fmul double %mul113, %82
  %call379 = call double @sin(double %mul378) #1
  %mul380 = fmul double %mul377, %call379
  %83 = load double, double* %NPi, align 8, !tbaa !34
  %mul381 = fmul double %mul125, %83
  %call382 = call double @cos(double %mul381) #1
  %mul383 = fmul double %mul380, %call382
  %add384 = fadd double %add369, %mul383
  %84 = load double, double* %NPi, align 8, !tbaa !34
  %mul385 = fmul double %84, %84
  %85 = load double, double* %c4, align 8, !tbaa !34
  %mul386 = fmul double %add171, %85
  %call387 = call double @exp(double %mul386) #1
  %mul388 = fmul double %mul385, %call387
  %86 = load double, double* %NPi, align 8, !tbaa !34
  %mul389 = fmul double %mul101, %86
  %call390 = call double @sin(double %mul389) #1
  %mul391 = fmul double %mul388, %call390
  %87 = load double, double* %NPi, align 8, !tbaa !34
  %mul392 = fmul double %mul113, %87
  %call393 = call double @sin(double %mul392) #1
  %mul394 = fmul double %mul391, %call393
  %88 = load double, double* %NPi, align 8, !tbaa !34
  %mul395 = fmul double %mul125, %88
  %call396 = call double @sin(double %mul395) #1
  %mul397 = fmul double %mul394, %call396
  %sub398 = fsub double %add384, %mul397
  %89 = load double, double* %a, align 8, !tbaa !34
  %mul400 = fmul double %mul251, %89
  %90 = load double, double* %b, align 8, !tbaa !34
  %mul401 = fmul double %mul224, %add266
  %mul402 = fmul double %mul232, %add281
  %add403 = fadd double %mul401, %mul402
  %mul404 = fmul double %mul240, %add296
  %add405 = fadd double %add403, %mul404
  %add406 = fadd double %sub330, %sub364
  %add407 = fadd double %add406, %sub398
  %mul408 = fmul double %add216, %add407
  %add409 = fadd double %add405, %mul408
  %mul410 = fmul double %90, %add409
  %sub411 = fsub double %mul400, %mul410
  %idxprom412 = sext i32 %add164 to i64
  %91 = load i32, i32* %level, align 4, !tbaa !35
  %idxprom413 = sext i32 %91 to i64
  %92 = load i32, i32* %box, align 4, !tbaa !35
  %idxprom414 = sext i32 %92 to i64
  %93 = load %struct.domain_type*, %struct.domain_type** %domain, align 8, !tbaa !1
  %subdomains415 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %93, i64 0, i32 28
  %94 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains415, align 8, !tbaa !24
  %levels417 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %94, i64 %idxprom414, i32 5
  %95 = load %struct.box_type*, %struct.box_type** %levels417, align 8, !tbaa !28
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %95, i64 %idxprom413, i32 10
  %96 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx419 = getelementptr inbounds double*, double** %96, i64 2
  %97 = load double*, double** %arrayidx419, align 8, !tbaa !1
  %arrayidx420 = getelementptr inbounds double, double* %97, i64 %idxprom412
  store double 1.000000e+00, double* %arrayidx420, align 8, !tbaa !34
  %arrayidx429 = getelementptr inbounds double*, double** %96, i64 3
  %98 = load double*, double** %arrayidx429, align 8, !tbaa !1
  %arrayidx430 = getelementptr inbounds double, double* %98, i64 %idxprom412
  store double %add216, double* %arrayidx430, align 8, !tbaa !34
  %arrayidx439 = getelementptr inbounds double*, double** %96, i64 11
  %99 = load double*, double** %arrayidx439, align 8, !tbaa !1
  %arrayidx440 = getelementptr inbounds double, double* %99, i64 %idxprom412
  store double %mul251, double* %arrayidx440, align 8, !tbaa !34
  %arrayidx449 = getelementptr inbounds double*, double** %96, i64 1
  %100 = load double*, double** %arrayidx449, align 8, !tbaa !1
  %arrayidx450 = getelementptr inbounds double, double* %100, i64 %idxprom412
  store double %sub411, double* %arrayidx450, align 8, !tbaa !34
  %inc = add nuw nsw i32 %i.0602, 1
  %i88 = getelementptr inbounds %struct.box_type, %struct.box_type* %95, i64 %idxprom413, i32 2, i32 0
  %101 = load i32, i32* %i88, align 4, !tbaa !43
  %cmp89 = icmp slt i32 %inc, %101
  br i1 %cmp89, label %for.body, label %omp.inner.for.inc.loopexit

omp.inner.for.inc.loopexit:                       ; preds = %for.body
  %.lcssa624 = phi %struct.domain_type* [ %93, %for.body ]
  %.lcssa623 = phi i32 [ %92, %for.body ]
  %.lcssa = phi i32 [ %91, %for.body ]
  %.pre608 = load i64, i64* %.omp.ub, align 8, !tbaa !42
  br label %omp.inner.for.inc

omp.inner.for.inc:                                ; preds = %omp.inner.for.inc.loopexit, %omp.inner.for.body
  %102 = phi i64 [ %.pre608, %omp.inner.for.inc.loopexit ], [ %14, %omp.inner.for.body ]
  %103 = phi %struct.domain_type* [ %.lcssa624, %omp.inner.for.inc.loopexit ], [ %15, %omp.inner.for.body ]
  %104 = phi i32 [ %.lcssa623, %omp.inner.for.inc.loopexit ], [ %16, %omp.inner.for.body ]
  %105 = phi i32 [ %.lcssa, %omp.inner.for.inc.loopexit ], [ %17, %omp.inner.for.body ]
  %add451 = add nsw i64 %.omp.iv.0605, 1
  %cmp46 = icmp slt i64 %.omp.iv.0605, %102
  br i1 %cmp46, label %omp.inner.for.body, label %omp.loop.exit.loopexit

omp.loop.exit.loopexit:                           ; preds = %omp.inner.for.inc
  %.pre609 = load i32, i32* %.global_tid., align 4, !tbaa !35
  br label %omp.loop.exit

omp.loop.exit:                                    ; preds = %omp.loop.exit.loopexit, %omp.precond.then
  %106 = phi i32 [ %.pre609, %omp.loop.exit.loopexit ], [ %11, %omp.precond.then ]
  call void @__kmpc_for_static_fini(%ident_t* nonnull @0, i32 %106) #1
  br label %omp.precond.end

omp.precond.end:                                  ; preds = %entry.omp.precond.end_crit_edge, %omp.loop.exit
  %.pre-phi616 = phi i8* [ %.pre615, %entry.omp.precond.end_crit_edge ], [ %7, %omp.loop.exit ]
  %.pre-phi614 = phi i8* [ %.pre613, %entry.omp.precond.end_crit_edge ], [ %8, %omp.loop.exit ]
  %.pre-phi612 = phi i8* [ %.pre611, %entry.omp.precond.end_crit_edge ], [ %9, %omp.loop.exit ]
  %.pre-phi = phi i8* [ %.pre610, %entry.omp.precond.end_crit_edge ], [ %10, %omp.loop.exit ]
  call void @llvm.lifetime.end(i64 4, i8* %.pre-phi) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi612) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi614) #1
  call void @llvm.lifetime.end(i64 8, i8* %.pre-phi616) #1
  ret void
}

declare double @sqrt(double)

; Function Attrs: nounwind
declare double @pow(double, double) #7

; Function Attrs: nounwind
declare double @tanh(double) #7

; Function Attrs: nounwind
declare double @exp(double) #7

; Function Attrs: nounwind
declare double @sin(double) #7

; Function Attrs: nounwind
declare double @cos(double) #7

; Function Attrs: nounwind uwtable
define i32 @main(i32 %argc, i8** %argv) #3 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %MPI_Rank = alloca i32, align 4
  %MPI_Tasks = alloca i32, align 4
  %OMP_Threads = alloca i32, align 4
  %MPI_threadingModel = alloca i32, align 4
  %domain_1 = alloca %struct.domain_type, align 8
  %domain_CA = alloca %struct.domain_type, align 8
  %boundary_conditions = alloca [3 x i32], align 4
  store i32 %argc, i32* %argc.addr, align 4, !tbaa !35
  store i8** %argv, i8*** %argv.addr, align 8, !tbaa !1
  %0 = bitcast i32* %MPI_Rank to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #1
  store i32 0, i32* %MPI_Rank, align 4, !tbaa !35
  %1 = bitcast i32* %MPI_Tasks to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #1
  store i32 1, i32* %MPI_Tasks, align 4, !tbaa !35
  %2 = bitcast i32* %OMP_Threads to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #1
  store i32 1, i32* %OMP_Threads, align 4, !tbaa !35
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @2, i32 1, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*)* @.omp_outlined..1 to void (i32*, i32*, ...)*), i32* nonnull %OMP_Threads) #1
  %3 = bitcast i32* %MPI_threadingModel to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #1
  store i32 -1, i32* %MPI_threadingModel, align 4, !tbaa !35
  %call = call i32 @MPI_Init_thread(i32* nonnull %argc.addr, i8*** nonnull %argv.addr, i32 1, i32* nonnull %MPI_threadingModel) #1
  %call1 = call i32 @MPI_Comm_size(i32 1140850688, i32* nonnull %MPI_Tasks) #1
  %call2 = call i32 @MPI_Comm_rank(i32 1140850688, i32* nonnull %MPI_Rank) #1
  %4 = load i32, i32* %MPI_threadingModel, align 4, !tbaa !35
  %cmp = icmp sgt i32 %4, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %MPI_threadingModel, align 4, !tbaa !35
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %MPI_Rank, align 4, !tbaa !35
  %cmp3 = icmp eq i32 %5, 0
  br i1 %cmp3, label %if.then13, label %if.end57

if.then13:                                        ; preds = %if.end
  %call14 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  %6 = load i32, i32* %MPI_threadingModel, align 4, !tbaa !35
  switch i32 %6, label %if.else49 [
    i32 3, label %if.then31
    i32 0, label %if.then35
    i32 1, label %if.then39
    i32 2, label %if.then43
  ]

if.then31:                                        ; preds = %if.then13
  %puts240 = call i32 @puts(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @str.21, i64 0, i64 0))
  br label %if.end55

if.then35:                                        ; preds = %if.then13
  %puts239 = call i32 @puts(i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @str.20, i64 0, i64 0))
  br label %if.end55

if.then39:                                        ; preds = %if.then13
  %puts238 = call i32 @puts(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @str.19, i64 0, i64 0))
  br label %if.end55

if.then43:                                        ; preds = %if.then13
  %puts237 = call i32 @puts(i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @str.18, i64 0, i64 0))
  br label %if.end55

if.else49:                                        ; preds = %if.then13
  %call50 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10, i64 0, i64 0), i32 %6)
  br label %if.end55

if.end55:                                         ; preds = %if.then35, %if.then43, %if.else49, %if.then39, %if.then31
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call56 = call i32 @fflush(%struct._IO_FILE* %7)
  br label %if.end57

if.end57:                                         ; preds = %if.end55, %if.end
  %8 = load i32, i32* %argc.addr, align 4, !tbaa !35
  switch i32 %8, label %if.then101 [
    i32 2, label %if.then63
    i32 5, label %if.then73
    i32 8, label %if.then84
    i32 1, label %if.end110
  ]

if.then63:                                        ; preds = %if.end57
  %9 = load i8**, i8*** %argv.addr, align 8, !tbaa !1
  %arrayidx = getelementptr inbounds i8*, i8** %9, i64 1
  %10 = load i8*, i8** %arrayidx, align 8, !tbaa !1
  %call.i = call i64 @strtol(i8* nocapture nonnull %10, i8** null, i32 10) #1
  %conv.i = trunc i64 %call.i to i32
  %div66 = lshr i32 256, %conv.i
  br label %if.end110

if.then73:                                        ; preds = %if.end57
  %11 = load i8**, i8*** %argv.addr, align 8, !tbaa !1
  %arrayidx74 = getelementptr inbounds i8*, i8** %11, i64 1
  %12 = load i8*, i8** %arrayidx74, align 8, !tbaa !1
  %call.i241 = call i64 @strtol(i8* nocapture nonnull %12, i8** null, i32 10) #1
  %conv.i242 = trunc i64 %call.i241 to i32
  %arrayidx76 = getelementptr inbounds i8*, i8** %11, i64 2
  %13 = load i8*, i8** %arrayidx76, align 8, !tbaa !1
  %call.i243 = call i64 @strtol(i8* nocapture nonnull %13, i8** null, i32 10) #1
  %conv.i244 = trunc i64 %call.i243 to i32
  %arrayidx78 = getelementptr inbounds i8*, i8** %11, i64 3
  %14 = load i8*, i8** %arrayidx78, align 8, !tbaa !1
  %call.i245 = call i64 @strtol(i8* nocapture nonnull %14, i8** null, i32 10) #1
  %conv.i246 = trunc i64 %call.i245 to i32
  %arrayidx80 = getelementptr inbounds i8*, i8** %11, i64 4
  %15 = load i8*, i8** %arrayidx80, align 8, !tbaa !1
  %call.i247 = call i64 @strtol(i8* nocapture nonnull %15, i8** null, i32 10) #1
  %conv.i248 = trunc i64 %call.i247 to i32
  br label %if.end110

if.then84:                                        ; preds = %if.end57
  %16 = load i8**, i8*** %argv.addr, align 8, !tbaa !1
  %arrayidx85 = getelementptr inbounds i8*, i8** %16, i64 1
  %17 = load i8*, i8** %arrayidx85, align 8, !tbaa !1
  %call.i249 = call i64 @strtol(i8* nocapture nonnull %17, i8** null, i32 10) #1
  %conv.i250 = trunc i64 %call.i249 to i32
  %arrayidx87 = getelementptr inbounds i8*, i8** %16, i64 2
  %18 = load i8*, i8** %arrayidx87, align 8, !tbaa !1
  %call.i251 = call i64 @strtol(i8* nocapture nonnull %18, i8** null, i32 10) #1
  %conv.i252 = trunc i64 %call.i251 to i32
  %arrayidx89 = getelementptr inbounds i8*, i8** %16, i64 3
  %19 = load i8*, i8** %arrayidx89, align 8, !tbaa !1
  %call.i253 = call i64 @strtol(i8* nocapture nonnull %19, i8** null, i32 10) #1
  %conv.i254 = trunc i64 %call.i253 to i32
  %arrayidx91 = getelementptr inbounds i8*, i8** %16, i64 4
  %20 = load i8*, i8** %arrayidx91, align 8, !tbaa !1
  %call.i255 = call i64 @strtol(i8* nocapture nonnull %20, i8** null, i32 10) #1
  %conv.i256 = trunc i64 %call.i255 to i32
  %arrayidx93 = getelementptr inbounds i8*, i8** %16, i64 5
  %21 = load i8*, i8** %arrayidx93, align 8, !tbaa !1
  %call.i257 = call i64 @strtol(i8* nocapture nonnull %21, i8** null, i32 10) #1
  %conv.i258 = trunc i64 %call.i257 to i32
  %arrayidx95 = getelementptr inbounds i8*, i8** %16, i64 6
  %22 = load i8*, i8** %arrayidx95, align 8, !tbaa !1
  %call.i259 = call i64 @strtol(i8* nocapture nonnull %22, i8** null, i32 10) #1
  %conv.i260 = trunc i64 %call.i259 to i32
  %arrayidx97 = getelementptr inbounds i8*, i8** %16, i64 7
  %23 = load i8*, i8** %arrayidx97, align 8, !tbaa !1
  %call.i261 = call i64 @strtol(i8* nocapture nonnull %23, i8** null, i32 10) #1
  %conv.i262 = trunc i64 %call.i261 to i32
  br label %if.end110

if.then101:                                       ; preds = %if.end57
  %24 = load i32, i32* %MPI_Rank, align 4, !tbaa !35
  %cmp102 = icmp eq i32 %24, 0
  br i1 %cmp102, label %if.then103, label %if.end105

if.then103:                                       ; preds = %if.then101
  %puts236 = call i32 @puts(i8* nonnull getelementptr inbounds ([87 x i8], [87 x i8]* @str.17, i64 0, i64 0))
  br label %if.end105

if.end105:                                        ; preds = %if.then103, %if.then101
  %call106 = call i32 @MPI_Finalize() #1
  call void @exit(i32 0) #12
  unreachable

if.end110:                                        ; preds = %if.end57, %if.then73, %if.then84, %if.then63
  %ranks_in_k.0 = phi i32 [ 1, %if.then63 ], [ 1, %if.then73 ], [ %conv.i262, %if.then84 ], [ 1, %if.end57 ]
  %ranks_in_j.0 = phi i32 [ 1, %if.then63 ], [ 1, %if.then73 ], [ %conv.i260, %if.then84 ], [ 1, %if.end57 ]
  %ranks_in_i.0 = phi i32 [ 1, %if.then63 ], [ 1, %if.then73 ], [ %conv.i258, %if.then84 ], [ 1, %if.end57 ]
  %subdomains_per_rank_in_k.0 = phi i32 [ %div66, %if.then63 ], [ %conv.i248, %if.then73 ], [ %conv.i256, %if.then84 ], [ 4, %if.end57 ]
  %subdomains_per_rank_in_j.0 = phi i32 [ %div66, %if.then63 ], [ %conv.i246, %if.then73 ], [ %conv.i254, %if.then84 ], [ 4, %if.end57 ]
  %subdomains_per_rank_in_i.0 = phi i32 [ %div66, %if.then63 ], [ %conv.i244, %if.then73 ], [ %conv.i252, %if.then84 ], [ 4, %if.end57 ]
  %log2_subdomain_dim.0 = phi i32 [ %conv.i, %if.then63 ], [ %conv.i242, %if.then73 ], [ %conv.i250, %if.then84 ], [ 6, %if.end57 ]
  %mul = mul i32 %ranks_in_j.0, %ranks_in_k.0
  %mul111 = mul i32 %mul, %ranks_in_i.0
  %25 = load i32, i32* %MPI_Tasks, align 4, !tbaa !35
  %cmp112 = icmp eq i32 %mul111, %25
  %26 = load i32, i32* %MPI_Rank, align 4, !tbaa !35
  %cmp114 = icmp eq i32 %26, 0
  br i1 %cmp112, label %if.end121, label %if.then113

if.then113:                                       ; preds = %if.end110
  br i1 %cmp114, label %if.then115, label %if.end119

if.then115:                                       ; preds = %if.then113
  %call118 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([71 x i8], [71 x i8]* @.str.12, i64 0, i64 0), i32 %ranks_in_i.0, i32 %ranks_in_j.0, i32 %ranks_in_k.0, i32 %mul111, i32 %25)
  br label %if.end119

if.end119:                                        ; preds = %if.then115, %if.then113
  %call120 = call i32 @MPI_Finalize() #1
  call void @exit(i32 0) #12
  unreachable

if.end121:                                        ; preds = %if.end110
  br i1 %cmp114, label %if.end125, label %if.end125.thread

if.end125.thread:                                 ; preds = %if.end121
  %shl126267 = shl i32 1, %log2_subdomain_dim.0
  %sub268 = add nsw i32 %log2_subdomain_dim.0, -1
  br label %if.end134

if.end125:                                        ; preds = %if.end121
  %27 = load i32, i32* %OMP_Threads, align 4, !tbaa !35
  %call124 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([28 x i8], [28 x i8]* @.str.13, i64 0, i64 0), i32 %mul111, i32 %27)
  %.pre = load i32, i32* %MPI_Rank, align 4, !tbaa !35
  %shl126 = shl i32 1, %log2_subdomain_dim.0
  %sub = add nsw i32 %log2_subdomain_dim.0, -1
  %cmp129 = icmp eq i32 %.pre, 0
  br i1 %cmp129, label %if.then130, label %if.end134

if.then130:                                       ; preds = %if.end125
  %call132 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([43 x i8], [43 x i8]* @.str.14, i64 0, i64 0), i32 4)
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call133 = call i32 @fflush(%struct._IO_FILE* %28)
  %.pre266 = load i32, i32* %MPI_Rank, align 4, !tbaa !35
  br label %if.end134

if.end134:                                        ; preds = %if.end125.thread, %if.then130, %if.end125
  %sub271 = phi i32 [ %sub, %if.then130 ], [ %sub, %if.end125 ], [ %sub268, %if.end125.thread ]
  %shl126270 = phi i32 [ %shl126, %if.then130 ], [ %shl126, %if.end125 ], [ %shl126267, %if.end125.thread ]
  %29 = phi i32 [ %.pre266, %if.then130 ], [ %.pre, %if.end125 ], [ %26, %if.end125.thread ]
  %30 = bitcast %struct.domain_type* %domain_1 to i8*
  call void @llvm.lifetime.start(i64 2544, i8* %30) #1
  %31 = bitcast %struct.domain_type* %domain_CA to i8*
  call void @llvm.lifetime.start(i64 2544, i8* %31) #1
  %32 = bitcast [3 x i32]* %boundary_conditions to i8*
  call void @llvm.lifetime.start(i64 12, i8* %32) #1
  call void @llvm.memset.p0i8.i64(i8* %32, i8 0, i64 12, i32 4, i1 false)
  %arraydecay = getelementptr inbounds [3 x i32], [3 x i32]* %boundary_conditions, i64 0, i64 0
  %call135 = call i32 @create_domain(%struct.domain_type* nonnull %domain_1, i32 %shl126270, i32 %shl126270, i32 %shl126270, i32 %subdomains_per_rank_in_i.0, i32 %subdomains_per_rank_in_j.0, i32 %subdomains_per_rank_in_k.0, i32 %ranks_in_i.0, i32 %ranks_in_j.0, i32 %ranks_in_k.0, i32 %29, i32* %arraydecay, i32 12, i32 1, i32 %sub271) #1
  %33 = load i32, i32* %MPI_Rank, align 4, !tbaa !35
  %call137 = call i32 @create_domain(%struct.domain_type* nonnull %domain_CA, i32 %shl126270, i32 %shl126270, i32 %shl126270, i32 %subdomains_per_rank_in_i.0, i32 %subdomains_per_rank_in_j.0, i32 %subdomains_per_rank_in_k.0, i32 %ranks_in_i.0, i32 %ranks_in_j.0, i32 %ranks_in_k.0, i32 %33, i32* %arraydecay, i32 12, i32 4, i32 %sub271) #1
  %i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain_1, i64 0, i32 16, i32 0
  %34 = load i32, i32* %i, align 8, !tbaa !97
  %conv = sitofp i32 %34 to double
  %div138 = fdiv double 1.000000e+00, %conv
  %35 = load i32, i32* %MPI_Rank, align 4, !tbaa !35
  %cmp139 = icmp eq i32 %35, 0
  br i1 %cmp139, label %if.then141, label %if.end144

if.then141:                                       ; preds = %if.end134
  %call142 = call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.15, i64 0, i64 0))
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call143 = call i32 @fflush(%struct._IO_FILE* %36)
  br label %if.end144

if.end144:                                        ; preds = %if.then141, %if.end134
  call void @initialize_problem(%struct.domain_type* nonnull %domain_1, i32 0, double %div138, double 9.000000e-01, double 9.000000e-01) #1
  call void @initialize_problem(%struct.domain_type* nonnull %domain_CA, i32 0, double %div138, double 9.000000e-01, double 9.000000e-01) #1
  %37 = load i32, i32* %MPI_Rank, align 4, !tbaa !35
  %cmp145 = icmp eq i32 %37, 0
  br i1 %cmp145, label %if.then147, label %if.end150

if.then147:                                       ; preds = %if.end144
  %puts = call i32 @puts(i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @str.2, i64 0, i64 0))
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call149 = call i32 @fflush(%struct._IO_FILE* %38)
  br label %if.end150

if.end150:                                        ; preds = %if.then147, %if.end144
  call void @MGBuild(%struct.domain_type* nonnull %domain_1, double 9.000000e-01, double 9.000000e-01, double %div138) #1
  call void @MGBuild(%struct.domain_type* nonnull %domain_CA, double 9.000000e-01, double 9.000000e-01, double %div138) #1
  %call151 = call i32 (%struct.domain_type*, ...) bitcast (void (%struct.domain_type*)* @MGResetTimers to i32 (%struct.domain_type*, ...)*)(%struct.domain_type* nonnull %domain_1) #1
  call void @zero_grid(%struct.domain_type* nonnull %domain_1, i32 0, i32 0) #1
  call void @MGSolve(%struct.domain_type* nonnull %domain_1, i32 0, i32 1, double 9.000000e-01, double 9.000000e-01, double 1.000000e-15) #1
  call void @zero_grid(%struct.domain_type* nonnull %domain_1, i32 0, i32 0) #1
  call void @MGSolve(%struct.domain_type* nonnull %domain_1, i32 0, i32 1, double 9.000000e-01, double 9.000000e-01, double 1.000000e-15) #1
  call void @zero_grid(%struct.domain_type* nonnull %domain_1, i32 0, i32 0) #1
  call void @MGSolve(%struct.domain_type* nonnull %domain_1, i32 0, i32 1, double 9.000000e-01, double 9.000000e-01, double 1.000000e-15) #1
  call void @zero_grid(%struct.domain_type* nonnull %domain_1, i32 0, i32 0) #1
  call void @MGSolve(%struct.domain_type* nonnull %domain_1, i32 0, i32 1, double 9.000000e-01, double 9.000000e-01, double 1.000000e-15) #1
  call void @print_timing(%struct.domain_type* nonnull %domain_1) #1
  %call154 = call i32 (%struct.domain_type*, ...) bitcast (void (%struct.domain_type*)* @MGResetTimers to i32 (%struct.domain_type*, ...)*)(%struct.domain_type* nonnull %domain_CA) #1
  call void @zero_grid(%struct.domain_type* nonnull %domain_CA, i32 0, i32 0) #1
  call void @MGSolve(%struct.domain_type* nonnull %domain_CA, i32 0, i32 1, double 9.000000e-01, double 9.000000e-01, double 1.000000e-15) #1
  call void @zero_grid(%struct.domain_type* nonnull %domain_CA, i32 0, i32 0) #1
  call void @MGSolve(%struct.domain_type* nonnull %domain_CA, i32 0, i32 1, double 9.000000e-01, double 9.000000e-01, double 1.000000e-15) #1
  call void @zero_grid(%struct.domain_type* nonnull %domain_CA, i32 0, i32 0) #1
  call void @MGSolve(%struct.domain_type* nonnull %domain_CA, i32 0, i32 1, double 9.000000e-01, double 9.000000e-01, double 1.000000e-15) #1
  call void @zero_grid(%struct.domain_type* nonnull %domain_CA, i32 0, i32 0) #1
  call void @MGSolve(%struct.domain_type* nonnull %domain_CA, i32 0, i32 1, double 9.000000e-01, double 9.000000e-01, double 1.000000e-15) #1
  call void @print_timing(%struct.domain_type* nonnull %domain_CA) #1
  call void @destroy_domain(%struct.domain_type* nonnull %domain_1) #1
  call void @destroy_domain(%struct.domain_type* nonnull %domain_CA) #1
  %call162 = call i32 @MPI_Finalize() #1
  call void @llvm.lifetime.end(i64 12, i8* %32) #1
  call void @llvm.lifetime.end(i64 2544, i8* %31) #1
  call void @llvm.lifetime.end(i64 2544, i8* %30) #1
  call void @llvm.lifetime.end(i64 4, i8* %3) #1
  call void @llvm.lifetime.end(i64 4, i8* %2) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %1) #1
  call void @llvm.lifetime.end(i64 4, i8* nonnull %0) #1
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..1(i32* noalias nocapture readonly %.global_tid., i32* noalias nocapture readnone %.bound_tid., i32* nocapture dereferenceable(4) %OMP_Threads) #3 {
entry:
  %0 = load i32, i32* %.global_tid., align 4, !tbaa !35
  %1 = tail call i32 @__kmpc_master(%ident_t* nonnull @2, i32 %0) #1
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %omp_if.end, label %omp_if.then

omp_if.then:                                      ; preds = %entry
  %call = tail call i32 @omp_get_num_threads() #1
  store i32 %call, i32* %OMP_Threads, align 4, !tbaa !35
  tail call void @__kmpc_end_master(%ident_t* nonnull @2, i32 %0) #1
  br label %omp_if.end

omp_if.end:                                       ; preds = %entry, %omp_if.then
  ret void
}

declare i32 @__kmpc_master(%ident_t*, i32)

declare i32 @omp_get_num_threads() #5

declare void @__kmpc_end_master(%ident_t*, i32)

declare i32 @MPI_Init_thread(i32*, i8***, i32, i32*) #5

declare i32 @MPI_Comm_size(i32, i32*) #5

declare i32 @MPI_Comm_rank(i32, i32*) #5

; Function Attrs: nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) #7

declare i32 @MPI_Finalize() #5

; Function Attrs: noreturn nounwind
declare void @exit(i32) #8

; Function Attrs: nounwind uwtable
define i32 @create_subdomain(%struct.subdomain_type* %box, i32 %subdomain_low_i, i32 %subdomain_low_j, i32 %subdomain_low_k, i32 %subdomain_dim_i, i32 %subdomain_dim_j, i32 %subdomain_dim_k, i32 %numGrids, i32 %ghosts, i32 %numLevels) #3 {
entry:
  %numLevels1 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %box, i64 0, i32 2
  store i32 %numLevels, i32* %numLevels1, align 8, !tbaa !98
  %ghosts2 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %box, i64 0, i32 3
  store i32 %ghosts, i32* %ghosts2, align 4, !tbaa !99
  %i = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %box, i64 0, i32 0, i32 0
  store i32 %subdomain_low_i, i32* %i, align 8, !tbaa !100
  %j = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %box, i64 0, i32 0, i32 1
  store i32 %subdomain_low_j, i32* %j, align 4, !tbaa !101
  %k = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %box, i64 0, i32 0, i32 2
  store i32 %subdomain_low_k, i32* %k, align 8, !tbaa !102
  %i5 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %box, i64 0, i32 1, i32 0
  store i32 %subdomain_dim_i, i32* %i5, align 4, !tbaa !103
  %j7 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %box, i64 0, i32 1, i32 1
  store i32 %subdomain_dim_j, i32* %j7, align 4, !tbaa !104
  %k9 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %box, i64 0, i32 1, i32 2
  store i32 %subdomain_dim_k, i32* %k9, align 4, !tbaa !105
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %box, i64 0, i32 5
  %0 = bitcast %struct.box_type** %levels to i8**
  %conv = sext i32 %numLevels to i64
  %mul = mul nsw i64 %conv, 216
  %call = tail call i32 @posix_memalign(i8** %0, i64 64, i64 %mul) #1
  %cmp62 = icmp sgt i32 %numLevels, 0
  br i1 %cmp62, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %sub = add nsw i32 %numLevels, -1
  %1 = zext i32 %sub to i64
  br label %for.body

for.body:                                         ; preds = %if.end, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %if.end ]
  %memory_allocated.064 = phi i64 [ %mul, %for.body.lr.ph ], [ %add25, %if.end ]
  %cmp13 = icmp eq i64 %indvars.iv, %1
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %call15 = tail call i32 (...) bitcast (i32 ()* @IterativeSolver_NumGrids to i32 (...)*)() #1
  %add16 = add nsw i32 %call15, %numGrids
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %numGridsActual.0 = phi i32 [ %add16, %if.then ], [ %numGrids, %for.body ]
  %2 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %arrayidx = getelementptr inbounds %struct.box_type, %struct.box_type* %2, i64 %indvars.iv
  %3 = trunc i64 %indvars.iv to i32
  %shr = ashr i32 %subdomain_low_i, %3
  %shr18 = ashr i32 %subdomain_low_j, %3
  %shr19 = ashr i32 %subdomain_low_k, %3
  %shr20 = ashr i32 %subdomain_dim_i, %3
  %shr21 = ashr i32 %subdomain_dim_j, %3
  %shr22 = ashr i32 %subdomain_dim_k, %3
  %call23 = tail call i32 @create_box(%struct.box_type* %arrayidx, i32 %numGridsActual.0, i32 %shr, i32 %shr18, i32 %shr19, i32 %shr20, i32 %shr21, i32 %shr22, i32 %ghosts) #1
  %conv24 = sext i32 %call23 to i64
  %add25 = add i64 %conv24, %memory_allocated.064
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %numLevels
  br i1 %exitcond, label %for.end.loopexit, label %for.body

for.end.loopexit:                                 ; preds = %if.end
  %add25.lcssa = phi i64 [ %add25, %if.end ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %memory_allocated.0.lcssa = phi i64 [ %mul, %entry ], [ %add25.lcssa, %for.end.loopexit ]
  %conv26 = trunc i64 %memory_allocated.0.lcssa to i32
  ret i32 %conv26
}

; Function Attrs: nounwind
declare i32 @posix_memalign(i8**, i64, i64) #7

; Function Attrs: nounwind uwtable
define void @destroy_subdomain(%struct.subdomain_type* nocapture readonly %box) #3 {
entry:
  %numLevels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %box, i64 0, i32 2
  %0 = load i32, i32* %numLevels, align 8, !tbaa !98
  %cmp7 = icmp sgt i32 %0, 0
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %box, i64 0, i32 5
  br i1 %cmp7, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.body.preheader ]
  %1 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %arrayidx = getelementptr inbounds %struct.box_type, %struct.box_type* %1, i64 %indvars.iv
  tail call void @destroy_box(%struct.box_type* %arrayidx) #1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %2 = load i32, i32* %numLevels, align 8, !tbaa !98
  %3 = sext i32 %2 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %3
  br i1 %cmp, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %entry
  %4 = bitcast %struct.box_type** %levels to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !28
  tail call void @free(i8* %5) #1
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @calculate_neighboring_subdomain_index(%struct.domain_type* nocapture readonly %domain, i32 %bi, i32 %bj, i32 %bk, i32 %di, i32 %dj, i32 %dk) #9 {
entry:
  %i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 18, i32 0
  %0 = bitcast i32* %i to i64*
  %1 = load i64, i64* %0, align 8
  %2 = trunc i64 %1 to i32
  %add = add i32 %di, %bi
  %add1 = add i32 %add, %2
  %rem = srem i32 %add1, %2
  %3 = lshr i64 %1, 32
  %4 = trunc i64 %3 to i32
  %add5 = add i32 %dj, %bj
  %add6 = add i32 %add5, %4
  %rem9 = srem i32 %add6, %4
  %k = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 18, i32 2
  %5 = load i32, i32* %k, align 8, !tbaa !39
  %add11 = add i32 %dk, %bk
  %add12 = add i32 %add11, %5
  %rem15 = srem i32 %add12, %5
  %mul24 = mul i32 %rem15, %4
  %tmp = add i32 %mul24, %rem9
  %tmp38 = mul i32 %tmp, %2
  %add25 = add i32 %tmp38, %rem
  ret i32 %add25
}

; Function Attrs: norecurse nounwind readonly uwtable
define i32 @calculate_neighboring_subdomain_rank(%struct.domain_type* nocapture readonly %domain, i32 %bi, i32 %bj, i32 %bk, i32 %di, i32 %dj, i32 %dk, i32 %ri, i32 %rj, i32 %rk) #9 {
entry:
  %i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 20, i32 0
  %0 = bitcast i32* %i to i64*
  %1 = load i64, i64* %0, align 8
  %2 = trunc i64 %1 to i32
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.end14, label %if.then

if.then:                                          ; preds = %entry
  %i1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 18, i32 0
  %3 = load i32, i32* %i1, align 8, !tbaa !106
  %mul = mul nsw i32 %3, %ri
  %add = add i32 %di, %bi
  %add2 = add i32 %add, %mul
  %cmp3 = icmp slt i32 %add2, 0
  br i1 %cmp3, label %return, label %if.end

if.end:                                           ; preds = %if.then
  %i10 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 19, i32 0
  %4 = load i32, i32* %i10, align 4, !tbaa !107
  %cmp11 = icmp slt i32 %add2, %4
  br i1 %cmp11, label %if.end14, label %return

if.end14:                                         ; preds = %if.end, %entry
  %cmp16 = icmp ult i64 %1, 4294967296
  br i1 %cmp16, label %if.end36, label %if.then17

if.then17:                                        ; preds = %if.end14
  %j19 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 18, i32 1
  %5 = load i32, i32* %j19, align 4, !tbaa !36
  %mul20 = mul nsw i32 %5, %rj
  %add21 = add i32 %dj, %bj
  %add22 = add i32 %add21, %mul20
  %cmp23 = icmp slt i32 %add22, 0
  br i1 %cmp23, label %return, label %if.end25

if.end25:                                         ; preds = %if.then17
  %j32 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 19, i32 1
  %6 = load i32, i32* %j32, align 4, !tbaa !108
  %cmp33 = icmp slt i32 %add22, %6
  br i1 %cmp33, label %if.end36, label %return

if.end36:                                         ; preds = %if.end25, %if.end14
  %k = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 20, i32 2
  %7 = load i32, i32* %k, align 8, !tbaa !109
  %cmp38 = icmp eq i32 %7, 0
  %k98.phi.trans.insert = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 18, i32 2
  %.pre = load i32, i32* %k98.phi.trans.insert, align 8, !tbaa !39
  br i1 %cmp38, label %if.end36.if.end58_crit_edge, label %if.then39

if.end36.if.end58_crit_edge:                      ; preds = %if.end36
  %.pre178 = add nsw i32 %dk, %bk
  br label %if.end58

if.then39:                                        ; preds = %if.end36
  %mul42 = mul nsw i32 %.pre, %rk
  %add43 = add i32 %dk, %bk
  %add44 = add i32 %add43, %mul42
  %cmp45 = icmp slt i32 %add44, 0
  br i1 %cmp45, label %return, label %if.end47

if.end47:                                         ; preds = %if.then39
  %k54 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 19, i32 2
  %8 = load i32, i32* %k54, align 4, !tbaa !110
  %cmp55 = icmp slt i32 %add44, %8
  br i1 %cmp55, label %if.end58, label %return

if.end58:                                         ; preds = %if.end36.if.end58_crit_edge, %if.end47
  %add91.pre-phi = phi i32 [ %.pre178, %if.end36.if.end58_crit_edge ], [ %add43, %if.end47 ]
  %add59 = add nsw i32 %di, %bi
  %add59.lobit = ashr i32 %add59, 31
  %dec.ri = add nsw i32 %add59.lobit, %ri
  %i65 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 18, i32 0
  %9 = bitcast i32* %i65 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = trunc i64 %10 to i32
  %not.cmp66 = icmp sge i32 %add59, %11
  %inc = zext i1 %not.cmp66 to i32
  %i69 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 17, i32 0
  %12 = load i32, i32* %i69, align 4, !tbaa !111
  %ri.addr.1 = add i32 %dec.ri, %12
  %add70 = add i32 %ri.addr.1, %inc
  %rem = srem i32 %add70, %12
  %add73 = add nsw i32 %dj, %bj
  %add73.lobit = ashr i32 %add73, 31
  %dec76.rj = add nsw i32 %add73.lobit, %rj
  %13 = lshr i64 %10, 32
  %14 = trunc i64 %13 to i32
  %not.cmp81 = icmp sge i32 %add73, %14
  %inc83 = zext i1 %not.cmp81 to i32
  %j86 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 17, i32 1
  %15 = load i32, i32* %j86, align 4, !tbaa !112
  %rj.addr.1 = add i32 %dec76.rj, %15
  %add87 = add i32 %rj.addr.1, %inc83
  %rem90 = srem i32 %add87, %15
  %add91.lobit = ashr i32 %add91.pre-phi, 31
  %dec94.rk = add nsw i32 %add91.lobit, %rk
  %not.cmp99 = icmp sge i32 %add91.pre-phi, %.pre
  %inc101 = zext i1 %not.cmp99 to i32
  %k104 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 17, i32 2
  %16 = load i32, i32* %k104, align 4, !tbaa !113
  %rk.addr.1 = add i32 %dec94.rk, %16
  %add105 = add i32 %rk.addr.1, %inc101
  %rem108 = srem i32 %add105, %16
  %mul118 = mul i32 %rem108, %15
  %tmp = add i32 %mul118, %rem90
  %tmp177 = mul i32 %tmp, %12
  %add119 = add i32 %tmp177, %rem
  br label %return

return:                                           ; preds = %if.end47, %if.then39, %if.end25, %if.then17, %if.end, %if.then, %if.end58
  %retval.0 = phi i32 [ %add119, %if.end58 ], [ -1, %if.then ], [ -1, %if.end ], [ -1, %if.then17 ], [ -1, %if.end25 ], [ -1, %if.then39 ], [ -1, %if.end47 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define i32 @create_domain(%struct.domain_type* %domain, i32 %subdomain_dim_i, i32 %subdomain_dim_j, i32 %subdomain_dim_k, i32 %subdomains_per_rank_in_i, i32 %subdomains_per_rank_in_j, i32 %subdomains_per_rank_in_k, i32 %ranks_in_i, i32 %ranks_in_j, i32 %ranks_in_k, i32 %rank, i32* nocapture readonly %boundary_conditions, i32 %numGrids, i32 %ghosts, i32 %numLevels) #3 {
entry:
  %faces = alloca [27 x i32], align 16
  %rank1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 21
  store i32 %rank, i32* %rank1, align 4, !tbaa !41
  %cmp = icmp eq i32 %rank, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0))
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call3 = tail call i32 @fflush(%struct._IO_FILE* %0)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %sub = add nsw i32 %numLevels, -1
  %shr = ashr i32 %subdomain_dim_i, %sub
  %cmp4 = icmp slt i32 %shr, %ghosts
  br i1 %cmp4, label %if.then5, label %if.end13

if.then5:                                         ; preds = %if.end
  %1 = load i32, i32* %rank1, align 4, !tbaa !41
  %cmp7 = icmp eq i32 %1, 0
  br i1 %cmp7, label %if.then8, label %if.end12

if.then8:                                         ; preds = %if.then5
  %call11 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1.6, i64 0, i64 0), i32 %ghosts, i32 %shr)
  br label %if.end12

if.end12:                                         ; preds = %if.then8, %if.then5
  tail call void @exit(i32 0) #12
  unreachable

if.end13:                                         ; preds = %if.end
  %cmp14 = icmp eq i32 %subdomain_dim_i, %subdomain_dim_j
  %cmp15 = icmp eq i32 %subdomain_dim_j, %subdomain_dim_k
  %or.cond = and i1 %cmp14, %cmp15
  %cmp17 = icmp eq i32 %subdomain_dim_i, %subdomain_dim_k
  %or.cond2915 = and i1 %cmp17, %or.cond
  br i1 %or.cond2915, label %if.end24, label %if.then18

if.then18:                                        ; preds = %if.end13
  %2 = load i32, i32* %rank1, align 4, !tbaa !41
  %cmp20 = icmp eq i32 %2, 0
  br i1 %cmp20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.then18
  %puts2914 = tail call i32 @puts(i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @str.43, i64 0, i64 0))
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %if.then18
  tail call void @exit(i32 0) #12
  unreachable

if.end24:                                         ; preds = %if.end13
  %mul = mul nsw i32 %ranks_in_j, %ranks_in_i
  %div = sdiv i32 %rank, %mul
  %mul26 = mul nsw i32 %div, %mul
  %sub27 = sub nsw i32 %rank, %mul26
  %div28 = sdiv i32 %sub27, %ranks_in_i
  %mul32 = mul nsw i32 %div28, %ranks_in_i
  %sub33 = sub nsw i32 %sub27, %mul32
  %i34 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 17, i32 0
  store i32 %ranks_in_i, i32* %i34, align 4, !tbaa !111
  %j36 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 17, i32 1
  store i32 %ranks_in_j, i32* %j36, align 4, !tbaa !112
  %k38 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 17, i32 2
  store i32 %ranks_in_k, i32* %k38, align 4, !tbaa !113
  %i39 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 18, i32 0
  store i32 %subdomains_per_rank_in_i, i32* %i39, align 8, !tbaa !106
  %j41 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 18, i32 1
  store i32 %subdomains_per_rank_in_j, i32* %j41, align 4, !tbaa !36
  %k43 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 18, i32 2
  store i32 %subdomains_per_rank_in_k, i32* %k43, align 8, !tbaa !39
  %mul44 = mul nsw i32 %ranks_in_i, %subdomains_per_rank_in_i
  %i45 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 19, i32 0
  store i32 %mul44, i32* %i45, align 4, !tbaa !107
  %mul46 = mul nsw i32 %ranks_in_j, %subdomains_per_rank_in_j
  %j48 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 19, i32 1
  store i32 %mul46, i32* %j48, align 4, !tbaa !108
  %mul49 = mul nsw i32 %ranks_in_k, %subdomains_per_rank_in_k
  %k51 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 19, i32 2
  store i32 %mul49, i32* %k51, align 4, !tbaa !110
  %mul52 = mul nsw i32 %subdomains_per_rank_in_j, %subdomains_per_rank_in_i
  %mul53 = mul nsw i32 %mul52, %subdomains_per_rank_in_k
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 22
  store i32 %mul53, i32* %subdomains_per_rank, align 8, !tbaa !53
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  %3 = bitcast %struct.subdomain_type** %subdomains to i8**
  %conv = sext i32 %mul53 to i64
  %mul55 = mul nsw i64 %conv, 1120
  %call56 = tail call i32 @posix_memalign(i8** %3, i64 64, i64 %mul55) #1
  %4 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %conv58 = sext i32 %4 to i64
  %mul59 = mul nsw i64 %conv58, 1120
  %5 = load i32, i32* %i45, align 4, !tbaa !107
  %mul62 = mul nsw i32 %5, %subdomain_dim_i
  %i63 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 16, i32 0
  store i32 %mul62, i32* %i63, align 8, !tbaa !97
  %6 = load i32, i32* %j48, align 4, !tbaa !108
  %mul66 = mul nsw i32 %6, %subdomain_dim_i
  %j68 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 16, i32 1
  store i32 %mul66, i32* %j68, align 4, !tbaa !114
  %7 = load i32, i32* %k51, align 4, !tbaa !110
  %mul71 = mul nsw i32 %7, %subdomain_dim_i
  %k73 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 16, i32 2
  store i32 %mul71, i32* %k73, align 8, !tbaa !85
  %8 = load i32, i32* %boundary_conditions, align 4, !tbaa !35
  %i74 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 20, i32 0
  store i32 %8, i32* %i74, align 8, !tbaa !115
  %arrayidx75 = getelementptr inbounds i32, i32* %boundary_conditions, i64 1
  %9 = load i32, i32* %arrayidx75, align 4, !tbaa !35
  %j77 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 20, i32 1
  store i32 %9, i32* %j77, align 4, !tbaa !116
  %arrayidx78 = getelementptr inbounds i32, i32* %boundary_conditions, i64 2
  %10 = load i32, i32* %arrayidx78, align 4, !tbaa !35
  %k80 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 20, i32 2
  store i32 %10, i32* %k80, align 8, !tbaa !109
  %numLevels81 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 23
  store i32 %numLevels, i32* %numLevels81, align 4, !tbaa !117
  %numGrids82 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 24
  store i32 %numGrids, i32* %numGrids82, align 8, !tbaa !118
  %ghosts83 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 25
  store i32 %ghosts, i32* %ghosts83, align 4, !tbaa !84
  %cmp853640 = icmp sgt i32 %numLevels, 0
  br i1 %cmp853640, label %for.body.preheader, label %for.cond94.preheader.preheader

for.body.preheader:                               ; preds = %if.end24
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %indvars.iv3842 = phi i64 [ %indvars.iv.next3843, %for.body ], [ 0, %for.body.preheader ]
  %arrayidx87 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 26, i64 %indvars.iv3842
  store double -1.000000e+00, double* %arrayidx87, align 8, !tbaa !34
  %arrayidx89 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 27, i64 %indvars.iv3842
  store double -1.000000e+00, double* %arrayidx89, align 8, !tbaa !34
  %indvars.iv.next3843 = add nuw nsw i64 %indvars.iv3842, 1
  %11 = load i32, i32* %numLevels81, align 4, !tbaa !117
  %12 = sext i32 %11 to i64
  %cmp85 = icmp slt i64 %indvars.iv.next3843, %12
  br i1 %cmp85, label %for.body, label %for.cond94.preheader.preheader.loopexit

for.cond94.preheader.preheader.loopexit:          ; preds = %for.body
  br label %for.cond94.preheader.preheader

for.cond94.preheader.preheader:                   ; preds = %for.cond94.preheader.preheader.loopexit, %if.end24
  %13 = sext i32 %sub33 to i64
  %14 = sext i32 %ranks_in_i to i64
  %15 = sext i32 %div28 to i64
  %16 = sext i32 %ranks_in_j to i64
  %17 = sext i32 %div to i64
  %18 = sext i32 %ranks_in_k to i64
  %19 = add i32 %sub33, -1
  %20 = add i32 %19, %ranks_in_i
  %21 = add i32 %sub33, %ranks_in_i
  %22 = add nsw i64 %13, 1
  %23 = add nsw i64 %22, %14
  %24 = trunc i64 %23 to i32
  %cmp128.us.2 = icmp slt i32 %sub33, -1
  %cmp136.us.2 = icmp slt i64 %22, %14
  %cmp128.us.1 = icmp slt i32 %sub33, 0
  %cmp136.us.1 = icmp slt i32 %sub33, %ranks_in_i
  %cmp128.us = icmp slt i32 %sub33, 1
  %cmp136.us = icmp sgt i32 %sub33, %ranks_in_i
  %25 = add i32 %sub33, -1
  %26 = add i32 %25, %ranks_in_i
  %27 = add i32 %sub33, %ranks_in_i
  %28 = add nsw i64 %13, 1
  %29 = add nsw i64 %28, %14
  %30 = trunc i64 %29 to i32
  %cmp128.us3688.2 = icmp slt i32 %sub33, -1
  %cmp136.us3691.2 = icmp slt i64 %28, %14
  %cmp128.us3688.1 = icmp slt i32 %sub33, 0
  %cmp136.us3691.1 = icmp slt i32 %sub33, %ranks_in_i
  %cmp128.us3688 = icmp slt i32 %sub33, 1
  %cmp136.us3691 = icmp sgt i32 %sub33, %ranks_in_i
  %31 = add i32 %sub33, -1
  %32 = add i32 %31, %ranks_in_i
  %33 = add i32 %sub33, %ranks_in_i
  %34 = add nsw i64 %13, 1
  %35 = add nsw i64 %34, %14
  %36 = trunc i64 %35 to i32
  %cmp128.2 = icmp slt i32 %sub33, -1
  %cmp136.2 = icmp slt i64 %34, %14
  %cmp128.1 = icmp slt i32 %sub33, 0
  %cmp136.1 = icmp slt i32 %sub33, %ranks_in_i
  %cmp128 = icmp slt i32 %sub33, 1
  %cmp136 = icmp sgt i32 %sub33, %ranks_in_i
  br label %for.cond94.preheader

for.cond94.preheader:                             ; preds = %for.inc194, %for.cond94.preheader.preheader
  %indvars.iv3835 = phi i64 [ -1, %for.cond94.preheader.preheader ], [ %indvars.iv.next3836, %for.inc194 ]
  %37 = mul nsw i64 %indvars.iv3835, 9
  %38 = add nsw i64 %37, 13
  %39 = add nsw i64 %indvars.iv3835, %17
  %40 = add nsw i64 %39, %18
  %41 = trunc i64 %40 to i32
  %rem114 = srem i32 %41, %ranks_in_k
  %mul118 = mul nsw i32 %rem114, %mul
  %cmp172 = icmp slt i64 %39, 0
  %cmp180 = icmp slt i64 %39, %18
  br label %for.cond98.preheader

for.cond197.preheader:                            ; preds = %for.inc194
  %cmp1983632 = icmp sgt i32 %subdomains_per_rank_in_k, 0
  br i1 %cmp1983632, label %for.cond201.preheader.lr.ph, label %for.end278

for.cond201.preheader.lr.ph:                      ; preds = %for.cond197.preheader
  %cmp2023627 = icmp sgt i32 %subdomains_per_rank_in_j, 0
  %cmp2063623 = icmp sgt i32 %subdomains_per_rank_in_i, 0
  %mul214 = mul nsw i32 %sub33, %subdomains_per_rank_in_i
  %mul217 = mul nsw i32 %div28, %subdomains_per_rank_in_j
  %mul220 = mul nsw i32 %div, %subdomains_per_rank_in_k
  %conv.i = sext i32 %numLevels to i64
  %mul.i = mul nsw i64 %conv.i, 216
  %42 = zext i32 %sub to i64
  %43 = bitcast i32* %i74 to i64*
  %44 = bitcast i32* %i39 to i64*
  %45 = sext i32 %mul214 to i64
  %46 = sext i32 %subdomain_dim_i to i64
  %47 = sext i32 %mul217 to i64
  %48 = sext i32 %mul220 to i64
  %49 = bitcast i32* %k43 to i64*
  br label %for.cond201.preheader

for.cond98.preheader:                             ; preds = %for.inc191, %for.cond94.preheader
  %indvars.iv3828 = phi i64 [ -1, %for.cond94.preheader ], [ %indvars.iv.next3829, %for.inc191 ]
  %50 = mul nsw i64 %indvars.iv3828, 3
  %51 = add nsw i64 %38, %50
  %52 = add nsw i64 %indvars.iv3828, %15
  %53 = add nsw i64 %52, %16
  %54 = trunc i64 %53 to i32
  %rem111 = srem i32 %54, %ranks_in_j
  %mul115 = mul nsw i32 %rem111, %ranks_in_i
  %cmp150 = icmp slt i64 %52, 0
  br i1 %cmp150, label %for.body101.us.preheader, label %for.cond98.preheader.split

for.body101.us.preheader:                         ; preds = %for.cond98.preheader
  %55 = add nsw i64 %51, -1
  %rem.us = srem i32 %20, %ranks_in_i
  %add116.us = add nsw i32 %mul115, %rem.us
  %add119.us = add nsw i32 %add116.us, %mul118
  %arrayidx121.us = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 5, i64 %55
  store i32 %add119.us, i32* %arrayidx121.us, align 4, !tbaa !35
  %56 = load i32, i32* %i74, align 8, !tbaa !115
  %cmp124.us = icmp eq i32 %56, 0
  br i1 %cmp124.us, label %if.end143.us, label %if.then126.us

if.then126.us:                                    ; preds = %for.body101.us.preheader
  br i1 %cmp128.us, label %if.then130.us, label %if.end134.us

if.then130.us:                                    ; preds = %if.then126.us
  store i32 -1, i32* %arrayidx121.us, align 4, !tbaa !35
  br label %if.end134.us

if.end134.us:                                     ; preds = %if.then130.us, %if.then126.us
  br i1 %cmp136.us, label %if.then138.us, label %if.end143.us

if.then138.us:                                    ; preds = %if.end134.us
  store i32 -1, i32* %arrayidx121.us, align 4, !tbaa !35
  br label %if.end143.us

if.end143.us:                                     ; preds = %if.end134.us, %if.then138.us, %for.body101.us.preheader
  %57 = load i32, i32* %j77, align 4, !tbaa !116
  %cmp146.us = icmp eq i32 %57, 0
  br i1 %cmp146.us, label %if.end165.us, label %if.then152.us

if.then152.us:                                    ; preds = %if.end143.us
  store i32 -1, i32* %arrayidx121.us, align 4
  br label %if.end165.us

if.end165.us:                                     ; preds = %if.then152.us, %if.end143.us
  %58 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp168.us = icmp eq i32 %58, 0
  br i1 %cmp168.us, label %if.end187.us, label %if.then170.us

if.then170.us:                                    ; preds = %if.end165.us
  br i1 %cmp172, label %if.then174.us, label %if.end178.us

if.then174.us:                                    ; preds = %if.then170.us
  store i32 -1, i32* %arrayidx121.us, align 4, !tbaa !35
  br label %if.end178.us

if.end178.us:                                     ; preds = %if.then174.us, %if.then170.us
  br i1 %cmp180, label %if.end187.us, label %if.then182.us

if.then182.us:                                    ; preds = %if.end178.us
  store i32 -1, i32* %arrayidx121.us, align 4, !tbaa !35
  br label %if.end187.us

if.end187.us:                                     ; preds = %if.then182.us, %if.end178.us, %if.end165.us
  %rem.us.1 = srem i32 %21, %ranks_in_i
  %add116.us.1 = add nsw i32 %mul115, %rem.us.1
  %add119.us.1 = add nsw i32 %add116.us.1, %mul118
  %arrayidx121.us.1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 5, i64 %51
  store i32 %add119.us.1, i32* %arrayidx121.us.1, align 4, !tbaa !35
  %59 = load i32, i32* %i74, align 8, !tbaa !115
  %cmp124.us.1 = icmp eq i32 %59, 0
  br i1 %cmp124.us.1, label %if.end143.us.1, label %if.then126.us.1

for.cond98.preheader.split:                       ; preds = %for.cond98.preheader
  %cmp158 = icmp slt i64 %52, %16
  %60 = add nsw i64 %51, -1
  br i1 %cmp158, label %for.body101.us3676.preheader, label %for.body101.preheader

for.body101.preheader:                            ; preds = %for.cond98.preheader.split
  %rem = srem i32 %32, %ranks_in_i
  %add116 = add nsw i32 %mul115, %rem
  %add119 = add nsw i32 %add116, %mul118
  %arrayidx121 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 5, i64 %60
  store i32 %add119, i32* %arrayidx121, align 4, !tbaa !35
  %61 = load i32, i32* %i74, align 8, !tbaa !115
  %cmp124 = icmp eq i32 %61, 0
  br i1 %cmp124, label %if.end143, label %if.then126

for.body101.us3676.preheader:                     ; preds = %for.cond98.preheader.split
  %rem.us3681 = srem i32 %26, %ranks_in_i
  %add116.us3682 = add nsw i32 %mul115, %rem.us3681
  %add119.us3683 = add nsw i32 %add116.us3682, %mul118
  %arrayidx121.us3685 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 5, i64 %60
  store i32 %add119.us3683, i32* %arrayidx121.us3685, align 4, !tbaa !35
  %62 = load i32, i32* %i74, align 8, !tbaa !115
  %cmp124.us3686 = icmp eq i32 %62, 0
  br i1 %cmp124.us3686, label %if.end143.us3693, label %if.then126.us3687

if.then126.us3687:                                ; preds = %for.body101.us3676.preheader
  br i1 %cmp128.us3688, label %if.then130.us3689, label %if.end134.us3690

if.then130.us3689:                                ; preds = %if.then126.us3687
  store i32 -1, i32* %arrayidx121.us3685, align 4, !tbaa !35
  br label %if.end134.us3690

if.end134.us3690:                                 ; preds = %if.then130.us3689, %if.then126.us3687
  br i1 %cmp136.us3691, label %if.then138.us3692, label %if.end143.us3693

if.then138.us3692:                                ; preds = %if.end134.us3690
  store i32 -1, i32* %arrayidx121.us3685, align 4, !tbaa !35
  br label %if.end143.us3693

if.end143.us3693:                                 ; preds = %if.end134.us3690, %if.then138.us3692, %for.body101.us3676.preheader
  %63 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp168.us3700 = icmp eq i32 %63, 0
  br i1 %cmp168.us3700, label %if.end187.us3705, label %if.then170.us3701

if.then170.us3701:                                ; preds = %if.end143.us3693
  br i1 %cmp172, label %if.then174.us3702, label %if.end178.us3703

if.then174.us3702:                                ; preds = %if.then170.us3701
  store i32 -1, i32* %arrayidx121.us3685, align 4, !tbaa !35
  br label %if.end178.us3703

if.end178.us3703:                                 ; preds = %if.then174.us3702, %if.then170.us3701
  br i1 %cmp180, label %if.end187.us3705, label %if.then182.us3704

if.then182.us3704:                                ; preds = %if.end178.us3703
  store i32 -1, i32* %arrayidx121.us3685, align 4, !tbaa !35
  br label %if.end187.us3705

if.end187.us3705:                                 ; preds = %if.then182.us3704, %if.end178.us3703, %if.end143.us3693
  %rem.us3681.1 = srem i32 %27, %ranks_in_i
  %add116.us3682.1 = add nsw i32 %mul115, %rem.us3681.1
  %add119.us3683.1 = add nsw i32 %add116.us3682.1, %mul118
  %arrayidx121.us3685.1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 5, i64 %51
  store i32 %add119.us3683.1, i32* %arrayidx121.us3685.1, align 4, !tbaa !35
  %64 = load i32, i32* %i74, align 8, !tbaa !115
  %cmp124.us3686.1 = icmp eq i32 %64, 0
  br i1 %cmp124.us3686.1, label %if.end143.us3693.1, label %if.then126.us3687.1

if.then126:                                       ; preds = %for.body101.preheader
  br i1 %cmp128, label %if.then130, label %if.end134

if.then130:                                       ; preds = %if.then126
  store i32 -1, i32* %arrayidx121, align 4, !tbaa !35
  br label %if.end134

if.end134:                                        ; preds = %if.then130, %if.then126
  br i1 %cmp136, label %if.then138, label %if.end143

if.then138:                                       ; preds = %if.end134
  store i32 -1, i32* %arrayidx121, align 4, !tbaa !35
  br label %if.end143

if.end143:                                        ; preds = %if.end134, %for.body101.preheader, %if.then138
  %65 = load i32, i32* %j77, align 4, !tbaa !116
  %cmp146 = icmp eq i32 %65, 0
  br i1 %cmp146, label %if.end165, label %if.then160

if.then160:                                       ; preds = %if.end143
  store i32 -1, i32* %arrayidx121, align 4, !tbaa !35
  br label %if.end165

if.end165:                                        ; preds = %if.end143, %if.then160
  %66 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp168 = icmp eq i32 %66, 0
  br i1 %cmp168, label %if.end187, label %if.then170

if.then170:                                       ; preds = %if.end165
  br i1 %cmp172, label %if.then174, label %if.end178

if.then174:                                       ; preds = %if.then170
  store i32 -1, i32* %arrayidx121, align 4, !tbaa !35
  br label %if.end178

if.end178:                                        ; preds = %if.then174, %if.then170
  br i1 %cmp180, label %if.end187, label %if.then182

if.then182:                                       ; preds = %if.end178
  store i32 -1, i32* %arrayidx121, align 4, !tbaa !35
  br label %if.end187

if.end187:                                        ; preds = %if.end178, %if.end165, %if.then182
  %rem.1 = srem i32 %33, %ranks_in_i
  %add116.1 = add nsw i32 %mul115, %rem.1
  %add119.1 = add nsw i32 %add116.1, %mul118
  %arrayidx121.1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 5, i64 %51
  store i32 %add119.1, i32* %arrayidx121.1, align 4, !tbaa !35
  %67 = load i32, i32* %i74, align 8, !tbaa !115
  %cmp124.1 = icmp eq i32 %67, 0
  br i1 %cmp124.1, label %if.end143.1, label %if.then126.1

for.inc191:                                       ; preds = %if.end165.us.2, %if.end178.us.2, %if.then182.us.2, %if.end143.us3693.2, %if.end178.us3703.2, %if.then182.us3704.2, %if.end165.2, %if.end178.2, %if.then182.2
  %indvars.iv.next3829 = add nsw i64 %indvars.iv3828, 1
  %exitcond3834 = icmp eq i64 %indvars.iv.next3829, 2
  br i1 %exitcond3834, label %for.inc194, label %for.cond98.preheader

for.inc194:                                       ; preds = %for.inc191
  %indvars.iv.next3836 = add nsw i64 %indvars.iv3835, 1
  %exitcond3841 = icmp eq i64 %indvars.iv.next3836, 2
  br i1 %exitcond3841, label %for.cond197.preheader, label %for.cond94.preheader

for.cond201.preheader:                            ; preds = %for.inc276, %for.cond201.preheader.lr.ph
  %indvars.iv3804 = phi i64 [ 0, %for.cond201.preheader.lr.ph ], [ %indvars.iv.next3805, %for.inc276 ]
  %memory_allocated.03633 = phi i64 [ %mul59, %for.cond201.preheader.lr.ph ], [ %memory_allocated.1.lcssa, %for.inc276 ]
  br i1 %cmp2023627, label %for.cond205.preheader.lr.ph, label %for.inc276

for.cond205.preheader.lr.ph:                      ; preds = %for.cond201.preheader
  %68 = trunc i64 %indvars.iv3804 to i32
  %mul212 = mul i32 %68, %subdomains_per_rank_in_j
  %69 = add nsw i64 %indvars.iv3804, %48
  %70 = mul nsw i64 %69, %46
  %71 = trunc i64 %70 to i32
  br label %for.cond205.preheader

for.cond205.preheader:                            ; preds = %for.inc273, %for.cond205.preheader.lr.ph
  %indvars.iv3798 = phi i64 [ 0, %for.cond205.preheader.lr.ph ], [ %indvars.iv.next3799, %for.inc273 ]
  %memory_allocated.13628 = phi i64 [ %memory_allocated.03633, %for.cond205.preheader.lr.ph ], [ %memory_allocated.2.lcssa, %for.inc273 ]
  br i1 %cmp2063623, label %for.body208.lr.ph, label %for.inc273

for.body208.lr.ph:                                ; preds = %for.cond205.preheader
  %72 = trunc i64 %indvars.iv3798 to i32
  %tmp = add i32 %72, %mul212
  %tmp3318 = mul i32 %tmp, %subdomains_per_rank_in_i
  %73 = add nsw i64 %indvars.iv3798, %47
  %74 = mul nsw i64 %73, %46
  %.pre = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %75 = trunc i64 %74 to i32
  br label %for.body208

for.body208:                                      ; preds = %for.end269, %for.body208.lr.ph
  %76 = phi %struct.subdomain_type* [ %.pre, %for.body208.lr.ph ], [ %.lcssa4000, %for.end269 ]
  %indvars.iv3792 = phi i64 [ 0, %for.body208.lr.ph ], [ %indvars.iv.next3793, %for.end269 ]
  %memory_allocated.23624 = phi i64 [ %memory_allocated.13628, %for.body208.lr.ph ], [ %add228, %for.end269 ]
  %77 = trunc i64 %indvars.iv3792 to i32
  %add213 = add i32 %77, %tmp3318
  %78 = add nsw i64 %indvars.iv3792, %45
  %79 = mul nsw i64 %78, %46
  %idxprom223 = sext i32 %add213 to i64
  %numLevels1.i = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %76, i64 %idxprom223, i32 2
  store i32 %numLevels, i32* %numLevels1.i, align 8, !tbaa !98
  %ghosts2.i = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %76, i64 %idxprom223, i32 3
  store i32 %ghosts, i32* %ghosts2.i, align 4, !tbaa !99
  %i.i = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %76, i64 %idxprom223, i32 0, i32 0
  %80 = trunc i64 %79 to i32
  store i32 %80, i32* %i.i, align 8, !tbaa !100
  %j.i = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %76, i64 %idxprom223, i32 0, i32 1
  store i32 %75, i32* %j.i, align 4, !tbaa !101
  %k.i = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %76, i64 %idxprom223, i32 0, i32 2
  store i32 %71, i32* %k.i, align 8, !tbaa !102
  %i5.i = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %76, i64 %idxprom223, i32 1, i32 0
  store i32 %subdomain_dim_i, i32* %i5.i, align 4, !tbaa !103
  %j7.i = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %76, i64 %idxprom223, i32 1, i32 1
  store i32 %subdomain_dim_i, i32* %j7.i, align 4, !tbaa !104
  %k9.i = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %76, i64 %idxprom223, i32 1, i32 2
  store i32 %subdomain_dim_i, i32* %k9.i, align 4, !tbaa !105
  %levels.i = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %76, i64 %idxprom223, i32 5
  %81 = bitcast %struct.box_type** %levels.i to i8**
  %call.i = tail call i32 @posix_memalign(i8** %81, i64 64, i64 %mul.i) #1
  br i1 %cmp853640, label %for.body.i.preheader, label %create_subdomain.exit

for.body.i.preheader:                             ; preds = %for.body208
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.preheader, %if.end.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %if.end.i ], [ 0, %for.body.i.preheader ]
  %memory_allocated.064.i = phi i64 [ %add25.i, %if.end.i ], [ %mul.i, %for.body.i.preheader ]
  %cmp13.i = icmp eq i64 %indvars.iv.i, %42
  br i1 %cmp13.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %for.body.i
  %call15.i = tail call i32 (...) bitcast (i32 ()* @IterativeSolver_NumGrids to i32 (...)*)() #1
  %add16.i = add nsw i32 %call15.i, %numGrids
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %for.body.i
  %numGridsActual.0.i = phi i32 [ %add16.i, %if.then.i ], [ %numGrids, %for.body.i ]
  %82 = load %struct.box_type*, %struct.box_type** %levels.i, align 8, !tbaa !28
  %arrayidx.i = getelementptr inbounds %struct.box_type, %struct.box_type* %82, i64 %indvars.iv.i
  %83 = trunc i64 %indvars.iv.i to i32
  %shr.i = ashr i32 %80, %83
  %shr18.i = ashr i32 %75, %83
  %shr19.i = ashr i32 %71, %83
  %shr20.i = ashr i32 %subdomain_dim_i, %83
  %call23.i = tail call i32 @create_box(%struct.box_type* %arrayidx.i, i32 %numGridsActual.0.i, i32 %shr.i, i32 %shr18.i, i32 %shr19.i, i32 %shr20.i, i32 %shr20.i, i32 %shr20.i, i32 %ghosts) #1
  %conv24.i = sext i32 %call23.i to i64
  %add25.i = add i64 %conv24.i, %memory_allocated.064.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %lftr.wideiv3767 = trunc i64 %indvars.iv.next.i to i32
  %exitcond3768 = icmp eq i32 %lftr.wideiv3767, %numLevels
  br i1 %exitcond3768, label %create_subdomain.exit.loopexit, label %for.body.i

create_subdomain.exit.loopexit:                   ; preds = %if.end.i
  %add25.i.lcssa = phi i64 [ %add25.i, %if.end.i ]
  br label %create_subdomain.exit

create_subdomain.exit:                            ; preds = %create_subdomain.exit.loopexit, %for.body208
  %memory_allocated.0.lcssa.i = phi i64 [ %mul.i, %for.body208 ], [ %add25.i.lcssa, %create_subdomain.exit.loopexit ]
  %sext = shl i64 %memory_allocated.0.lcssa.i, 32
  %conv227 = ashr exact i64 %sext, 32
  br label %for.cond233.preheader

for.cond233.preheader:                            ; preds = %for.inc267, %create_subdomain.exit
  %indvars.iv3784 = phi i64 [ -1, %create_subdomain.exit ], [ %indvars.iv.next3785, %for.inc267 ]
  %dk.13622 = phi i32 [ -1, %create_subdomain.exit ], [ %inc268, %for.inc267 ]
  %84 = mul nsw i64 %indvars.iv3784, 9
  %85 = add nsw i64 %84, 13
  %86 = add nsw i64 %indvars.iv3784, %indvars.iv3804
  %.pre178.i = add nsw i32 %dk.13622, %68
  %87 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8
  %88 = load i64, i64* %49, align 8
  %89 = trunc i64 %88 to i32
  %90 = trunc i64 %86 to i32
  %add12.i = add i32 %90, %89
  %rem15.i = srem i32 %add12.i, %89
  %91 = lshr i64 %88, 32
  %92 = trunc i64 %91 to i32
  br label %for.cond237.preheader

for.cond237.preheader:                            ; preds = %for.inc264, %for.cond233.preheader
  %93 = phi i32 [ %92, %for.cond233.preheader ], [ %.lcssa, %for.inc264 ]
  %indvars.iv3776 = phi i64 [ -1, %for.cond233.preheader ], [ %indvars.iv.next3777, %for.inc264 ]
  %94 = mul nsw i64 %indvars.iv3776, 3
  %95 = add nsw i64 %85, %94
  %96 = add nsw i64 %indvars.iv3776, %indvars.iv3798
  %97 = trunc i64 %96 to i32
  %add73.lobit.i = ashr i32 %97, 31
  %dec76.rj.i = add nsw i32 %add73.lobit.i, %div28
  br label %for.body240

for.body240:                                      ; preds = %calculate_neighboring_subdomain_rank.exit, %for.cond237.preheader
  %98 = phi i32 [ %93, %for.cond237.preheader ], [ %121, %calculate_neighboring_subdomain_rank.exit ]
  %indvars.iv3769 = phi i64 [ -1, %for.cond237.preheader ], [ %indvars.iv.next3770, %calculate_neighboring_subdomain_rank.exit ]
  %99 = add nsw i64 %95, %indvars.iv3769
  %100 = load i64, i64* %43, align 8
  %101 = trunc i64 %100 to i32
  %cmp.i = icmp eq i32 %101, 0
  br i1 %cmp.i, label %if.end14.i, label %if.then.i2926

if.then.i2926:                                    ; preds = %for.body240
  %102 = load i64, i64* %44, align 8
  %103 = trunc i64 %102 to i32
  %mul.i2925 = mul nsw i32 %103, %sub33
  %104 = add nsw i64 %indvars.iv3769, %indvars.iv3792
  %105 = trunc i64 %104 to i32
  %add2.i = add i32 %105, %mul.i2925
  %cmp3.i = icmp sgt i32 %add2.i, -1
  %cmp11.i = icmp slt i32 %add2.i, %98
  %or.cond3904 = and i1 %cmp3.i, %cmp11.i
  br i1 %or.cond3904, label %if.end14.i, label %calculate_neighboring_subdomain_rank.exit

if.end14.i:                                       ; preds = %if.then.i2926, %for.body240
  %cmp16.i = icmp ult i64 %100, 4294967296
  br i1 %cmp16.i, label %if.end36.i, label %if.then17.i

if.then17.i:                                      ; preds = %if.end14.i
  %106 = load i32, i32* %j41, align 4, !tbaa !36
  %mul20.i = mul nsw i32 %106, %div28
  %add22.i = add i32 %97, %mul20.i
  %cmp23.i = icmp slt i32 %add22.i, 0
  br i1 %cmp23.i, label %calculate_neighboring_subdomain_rank.exit, label %if.end25.i

if.end25.i:                                       ; preds = %if.then17.i
  %107 = load i32, i32* %j48, align 4, !tbaa !108
  %cmp33.i = icmp slt i32 %add22.i, %107
  br i1 %cmp33.i, label %if.end36.i, label %calculate_neighboring_subdomain_rank.exit

if.end36.i:                                       ; preds = %if.end25.i, %if.end14.i
  %108 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp38.i = icmp eq i32 %108, 0
  %.pre.i = load i64, i64* %49, align 8
  %109 = trunc i64 %.pre.i to i32
  %110 = lshr i64 %.pre.i, 32
  %111 = trunc i64 %110 to i32
  br i1 %cmp38.i, label %if.end58.i, label %if.then39.i

if.then39.i:                                      ; preds = %if.end36.i
  %mul42.i = mul nsw i32 %109, %div
  %add44.i = add i32 %mul42.i, %90
  %cmp45.i = icmp slt i32 %add44.i, 0
  br i1 %cmp45.i, label %calculate_neighboring_subdomain_rank.exit, label %if.end47.i

if.end47.i:                                       ; preds = %if.then39.i
  %112 = load i32, i32* %k51, align 4, !tbaa !110
  %cmp55.i = icmp slt i32 %add44.i, %112
  br i1 %cmp55.i, label %if.end58.i, label %calculate_neighboring_subdomain_rank.exit

if.end58.i:                                       ; preds = %if.end36.i, %if.end47.i
  %add91.pre-phi.i = phi i32 [ %90, %if.end47.i ], [ %.pre178.i, %if.end36.i ]
  %113 = add nsw i64 %indvars.iv3769, %indvars.iv3792
  %114 = trunc i64 %113 to i32
  %add59.lobit.i = ashr i32 %114, 31
  %dec.ri.i = add nsw i32 %add59.lobit.i, %sub33
  %115 = load i64, i64* %44, align 8
  %sext3852 = shl i64 %115, 32
  %116 = ashr exact i64 %sext3852, 32
  %not.cmp66.i = icmp sge i64 %113, %116
  %inc.i = zext i1 %not.cmp66.i to i32
  %117 = load i32, i32* %i34, align 4, !tbaa !111
  %ri.addr.1.i = add i32 %dec.ri.i, %117
  %add70.i = add i32 %ri.addr.1.i, %inc.i
  %rem.i = srem i32 %add70.i, %117
  %118 = ashr i64 %115, 32
  %not.cmp81.i = icmp sge i64 %96, %118
  %inc83.i = zext i1 %not.cmp81.i to i32
  %119 = load i32, i32* %j36, align 4, !tbaa !112
  %rj.addr.1.i = add i32 %dec76.rj.i, %119
  %add87.i = add i32 %rj.addr.1.i, %inc83.i
  %rem90.i = srem i32 %add87.i, %119
  %add91.lobit.i = ashr i32 %add91.pre-phi.i, 31
  %dec94.rk.i = add nsw i32 %add91.lobit.i, %div
  %not.cmp99.i = icmp sge i32 %add91.pre-phi.i, %109
  %inc101.i = zext i1 %not.cmp99.i to i32
  %120 = load i32, i32* %k38, align 4, !tbaa !113
  %rk.addr.1.i = add i32 %dec94.rk.i, %inc101.i
  %add105.i = add i32 %rk.addr.1.i, %120
  %rem108.i = srem i32 %add105.i, %120
  %mul118.i = mul i32 %rem108.i, %119
  %tmp.i = add i32 %mul118.i, %rem90.i
  %tmp177.i = mul i32 %tmp.i, %117
  %add119.i = add i32 %tmp177.i, %rem.i
  br label %calculate_neighboring_subdomain_rank.exit

calculate_neighboring_subdomain_rank.exit:        ; preds = %if.then.i2926, %if.then17.i, %if.end25.i, %if.then39.i, %if.end47.i, %if.end58.i
  %121 = phi i32 [ %111, %if.end58.i ], [ %98, %if.then.i2926 ], [ %98, %if.then17.i ], [ %98, %if.end25.i ], [ %111, %if.then39.i ], [ %111, %if.end47.i ]
  %retval.0.i = phi i32 [ %add119.i, %if.end58.i ], [ -1, %if.then.i2926 ], [ -1, %if.then17.i ], [ -1, %if.end25.i ], [ -1, %if.then39.i ], [ -1, %if.end47.i ]
  %rank253 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %87, i64 %idxprom223, i32 4, i64 %99, i32 0
  store i32 %retval.0.i, i32* %rank253, align 8, !tbaa !119
  %122 = load i64, i64* %44, align 8
  %123 = trunc i64 %122 to i32
  %124 = add nsw i64 %indvars.iv3769, %indvars.iv3792
  %125 = trunc i64 %124 to i32
  %add1.i = add i32 %125, %123
  %rem.i2931 = srem i32 %add1.i, %123
  %126 = lshr i64 %122, 32
  %127 = trunc i64 %126 to i32
  %add6.i = add i32 %97, %127
  %rem9.i = srem i32 %add6.i, %127
  %mul24.i = mul i32 %rem15.i, %127
  %tmp.i2933 = add i32 %mul24.i, %rem9.i
  %tmp38.i = mul i32 %tmp.i2933, %123
  %add25.i2934 = add i32 %tmp38.i, %rem.i2931
  %local_index = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %87, i64 %idxprom223, i32 4, i64 %99, i32 1
  store i32 %add25.i2934, i32* %local_index, align 4, !tbaa !122
  %indvars.iv.next3770 = add nsw i64 %indvars.iv3769, 1
  %exitcond3775 = icmp eq i64 %indvars.iv.next3770, 2
  br i1 %exitcond3775, label %for.inc264, label %for.body240

for.inc264:                                       ; preds = %calculate_neighboring_subdomain_rank.exit
  %.lcssa = phi i32 [ %121, %calculate_neighboring_subdomain_rank.exit ]
  %indvars.iv.next3777 = add nsw i64 %indvars.iv3776, 1
  %exitcond3783 = icmp eq i64 %indvars.iv.next3777, 2
  br i1 %exitcond3783, label %for.inc267, label %for.cond237.preheader

for.inc267:                                       ; preds = %for.inc264
  %indvars.iv.next3785 = add nsw i64 %indvars.iv3784, 1
  %inc268 = add nsw i32 %dk.13622, 1
  %exitcond3791 = icmp eq i64 %indvars.iv.next3785, 2
  br i1 %exitcond3791, label %for.end269, label %for.cond233.preheader

for.end269:                                       ; preds = %for.inc267
  %.lcssa4000 = phi %struct.subdomain_type* [ %87, %for.inc267 ]
  %add228 = add i64 %conv227, %memory_allocated.23624
  %indvars.iv.next3793 = add nuw nsw i64 %indvars.iv3792, 1
  %lftr.wideiv3796 = trunc i64 %indvars.iv.next3793 to i32
  %exitcond3797 = icmp eq i32 %lftr.wideiv3796, %subdomains_per_rank_in_i
  br i1 %exitcond3797, label %for.inc273.loopexit, label %for.body208

for.inc273.loopexit:                              ; preds = %for.end269
  %add228.lcssa = phi i64 [ %add228, %for.end269 ]
  br label %for.inc273

for.inc273:                                       ; preds = %for.inc273.loopexit, %for.cond205.preheader
  %memory_allocated.2.lcssa = phi i64 [ %memory_allocated.13628, %for.cond205.preheader ], [ %add228.lcssa, %for.inc273.loopexit ]
  %indvars.iv.next3799 = add nuw nsw i64 %indvars.iv3798, 1
  %lftr.wideiv3802 = trunc i64 %indvars.iv.next3799 to i32
  %exitcond3803 = icmp eq i32 %lftr.wideiv3802, %subdomains_per_rank_in_j
  br i1 %exitcond3803, label %for.inc276.loopexit, label %for.cond205.preheader

for.inc276.loopexit:                              ; preds = %for.inc273
  %memory_allocated.2.lcssa.lcssa = phi i64 [ %memory_allocated.2.lcssa, %for.inc273 ]
  br label %for.inc276

for.inc276:                                       ; preds = %for.inc276.loopexit, %for.cond201.preheader
  %memory_allocated.1.lcssa = phi i64 [ %memory_allocated.03633, %for.cond201.preheader ], [ %memory_allocated.2.lcssa.lcssa, %for.inc276.loopexit ]
  %indvars.iv.next3805 = add nuw nsw i64 %indvars.iv3804, 1
  %lftr.wideiv3808 = trunc i64 %indvars.iv.next3805 to i32
  %exitcond3809 = icmp eq i32 %lftr.wideiv3808, %subdomains_per_rank_in_k
  br i1 %exitcond3809, label %for.end278.loopexit, label %for.cond201.preheader

for.end278.loopexit:                              ; preds = %for.inc276
  %memory_allocated.1.lcssa.lcssa = phi i64 [ %memory_allocated.1.lcssa, %for.inc276 ]
  br label %for.end278

for.end278:                                       ; preds = %for.end278.loopexit, %for.cond197.preheader
  %memory_allocated.0.lcssa = phi i64 [ %mul59, %for.cond197.preheader ], [ %memory_allocated.1.lcssa.lcssa, %for.end278.loopexit ]
  %128 = bitcast [27 x i32]* %faces to i8*
  call void @llvm.lifetime.start(i64 108, i8* %128) #1
  call void @llvm.memset.p0i8.i64(i8* %128, i8 0, i64 108, i32 16, i1 false)
  %129 = getelementptr [27 x i32], [27 x i32]* %faces, i64 0, i64 4
  store i32 1, i32* %129, align 16
  %130 = getelementptr [27 x i32], [27 x i32]* %faces, i64 0, i64 10
  store i32 1, i32* %130, align 8
  %131 = getelementptr [27 x i32], [27 x i32]* %faces, i64 0, i64 12
  store i32 1, i32* %131, align 16
  %132 = getelementptr [27 x i32], [27 x i32]* %faces, i64 0, i64 14
  store i32 1, i32* %132, align 8
  %133 = getelementptr [27 x i32], [27 x i32]* %faces, i64 0, i64 16
  store i32 1, i32* %133, align 16
  %134 = getelementptr [27 x i32], [27 x i32]* %faces, i64 0, i64 22
  store i32 1, i32* %134, align 8
  %135 = bitcast i32* %i39 to i64*
  %bufSize.1.us3657.2 = mul nsw i32 %ghosts, %ghosts
  %bufSize.1.us3657 = mul nsw i32 %ghosts, %ghosts
  %bufSize.1.2 = mul nsw i32 %ghosts, %ghosts
  %bufSize.2.2 = mul nsw i32 %bufSize.1.2, %ghosts
  %conv331.2 = sext i32 %bufSize.2.2 to i64
  %mul332.2 = shl nsw i64 %conv331.2, 3
  %factor.2 = shl nsw i64 %conv331.2, 4
  %bufSize.1 = mul nsw i32 %ghosts, %ghosts
  %bufSize.2 = mul nsw i32 %bufSize.1, %ghosts
  %conv331 = sext i32 %bufSize.2 to i64
  %mul332 = shl nsw i64 %conv331, 3
  %factor = shl nsw i64 %conv331, 4
  br label %for.cond283.preheader

for.cond283.preheader:                            ; preds = %for.inc362, %for.end278
  %indvars.iv3762 = phi i64 [ -1, %for.end278 ], [ %indvars.iv.next3763, %for.inc362 ]
  %memory_allocated.33618 = phi i64 [ %memory_allocated.0.lcssa, %for.end278 ], [ %memory_allocated.5.lcssa.lcssa, %for.inc362 ]
  %136 = mul nsw i64 %indvars.iv3762, 9
  %137 = add nsw i64 %136, 13
  %138 = trunc i64 %indvars.iv3762 to i32
  %cmp319 = icmp eq i32 %138, 0
  br label %for.cond287.preheader

for.cond365.preheader:                            ; preds = %for.inc362
  %memory_allocated.5.lcssa.lcssa.lcssa = phi i64 [ %memory_allocated.5.lcssa.lcssa, %for.inc362 ]
  %139 = load i32, i32* %numLevels81, align 4, !tbaa !117
  %cmp3673580 = icmp sgt i32 %139, 0
  br i1 %cmp3673580, label %for.cond370.preheader.lr.ph, label %for.end1870

for.cond370.preheader.lr.ph:                      ; preds = %for.cond365.preheader
  %bufferCopy_Pack_Start = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 10
  %140 = bitcast i32* %i74 to i64*
  %141 = bitcast i32* %i39 to i64*
  %sub404 = add nsw i32 %subdomains_per_rank_in_k, -1
  %sub399 = add nsw i32 %subdomains_per_rank_in_j, -1
  %sub395 = add nsw i32 %subdomains_per_rank_in_i, -1
  %bufferCopy_Pack_End = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 11
  %bufferCopy_Local_Start = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 12
  %cmp7823411 = icmp sgt i32 %subdomains_per_rank_in_j, 0
  %cmp7863389 = icmp sgt i32 %subdomains_per_rank_in_i, 0
  %bufferCopy_Local_End = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 13
  %bufferCopy_Unpack_Start = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 14
  %bufferCopy_Unpack_End = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 15
  %142 = sext i32 %subdomains_per_rank_in_i to i64
  br label %for.cond370.preheader

for.cond287.preheader:                            ; preds = %for.inc359, %for.cond283.preheader
  %indvars.iv3757 = phi i64 [ -1, %for.cond283.preheader ], [ %indvars.iv.next3758, %for.inc359 ]
  %memory_allocated.43616 = phi i64 [ %memory_allocated.33618, %for.cond283.preheader ], [ %memory_allocated.5.lcssa, %for.inc359 ]
  %143 = mul nsw i64 %indvars.iv3757, 3
  %144 = add nsw i64 %137, %143
  %145 = trunc i64 %indvars.iv3757 to i32
  %cmp309 = icmp eq i32 %145, 0
  %146 = add nsw i64 %144, -1
  %cmp297.us = icmp eq i64 %146, 13
  br i1 %cmp309, label %for.body290.us.preheader, label %for.cond287.preheader.split

for.body290.us.preheader:                         ; preds = %for.cond287.preheader
  br i1 %cmp297.us, label %if.end355.us, label %if.then311.us

if.then311.us:                                    ; preds = %for.body290.us.preheader
  %.pre3844 = load i32, i32* %j41, align 4, !tbaa !36
  %mul314.us = mul nsw i32 %.pre3844, %subdomain_dim_i
  %bufSize.1.us = mul nsw i32 %mul314.us, %ghosts
  br i1 %cmp319, label %if.then321.us, label %if.end328.us

if.then321.us:                                    ; preds = %if.then311.us
  %147 = load i32, i32* %k43, align 8, !tbaa !39
  %mul324.us = mul nsw i32 %147, %subdomain_dim_i
  br label %if.end328.us

if.end328.us:                                     ; preds = %if.then321.us, %if.then311.us
  %mul324.pn.us = phi i32 [ %mul324.us, %if.then321.us ], [ %ghosts, %if.then311.us ]
  %bufSize.2.us = mul nsw i32 %bufSize.1.us, %mul324.pn.us
  %arrayidx330.us = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 6, i64 %146
  %148 = bitcast double** %arrayidx330.us to i8**
  %conv331.us = sext i32 %bufSize.2.us to i64
  %mul332.us = shl nsw i64 %conv331.us, 3
  %call333.us = tail call i32 @posix_memalign(i8** %148, i64 64, i64 %mul332.us) #1
  %arrayidx335.us = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 7, i64 %146
  %149 = bitcast double** %arrayidx335.us to i8**
  %call338.us = tail call i32 @posix_memalign(i8** %149, i64 64, i64 %mul332.us) #1
  %150 = load i8*, i8** %148, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %150, i8 0, i64 %mul332.us, i32 8, i1 false)
  %151 = load i8*, i8** %149, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %151, i8 0, i64 %mul332.us, i32 8, i1 false)
  %factor.us = shl nsw i64 %conv331.us, 4
  %add354.us = add i64 %factor.us, %memory_allocated.43616
  br label %if.end355.us

if.end355.us:                                     ; preds = %if.end328.us, %for.body290.us.preheader
  %memory_allocated.6.us = phi i64 [ %add354.us, %if.end328.us ], [ %memory_allocated.43616, %for.body290.us.preheader ]
  %cmp297.us.1 = icmp eq i64 %144, 13
  br i1 %cmp297.us.1, label %if.then311.us.2, label %if.then311.us.1

for.cond287.preheader.split:                      ; preds = %for.cond287.preheader
  br i1 %cmp319, label %for.body290.us3642.preheader, label %for.body290.preheader

for.body290.preheader:                            ; preds = %for.cond287.preheader.split
  br i1 %cmp297.us, label %if.end355, label %if.end318

for.body290.us3642.preheader:                     ; preds = %for.cond287.preheader.split
  br i1 %cmp297.us, label %if.end355.us3672, label %if.end318.us3655

if.end318.us3655:                                 ; preds = %for.body290.us3642.preheader
  %152 = load i32, i32* %k43, align 8, !tbaa !39
  %mul324.us3659 = mul nsw i32 %152, %subdomain_dim_i
  %bufSize.2.us3662 = mul nsw i32 %bufSize.1.us3657, %mul324.us3659
  %arrayidx330.us3664 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 6, i64 %146
  %153 = bitcast double** %arrayidx330.us3664 to i8**
  %conv331.us3665 = sext i32 %bufSize.2.us3662 to i64
  %mul332.us3666 = shl nsw i64 %conv331.us3665, 3
  %call333.us3667 = tail call i32 @posix_memalign(i8** %153, i64 64, i64 %mul332.us3666) #1
  %arrayidx335.us3668 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 7, i64 %146
  %154 = bitcast double** %arrayidx335.us3668 to i8**
  %call338.us3669 = tail call i32 @posix_memalign(i8** %154, i64 64, i64 %mul332.us3666) #1
  %155 = load i8*, i8** %153, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %155, i8 0, i64 %mul332.us3666, i32 8, i1 false)
  %156 = load i8*, i8** %154, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %156, i8 0, i64 %mul332.us3666, i32 8, i1 false)
  %factor.us3670 = shl nsw i64 %conv331.us3665, 4
  %add354.us3671 = add i64 %factor.us3670, %memory_allocated.43616
  br label %if.end355.us3672

if.end355.us3672:                                 ; preds = %if.end318.us3655, %for.body290.us3642.preheader
  %memory_allocated.6.us3673 = phi i64 [ %add354.us3671, %if.end318.us3655 ], [ %memory_allocated.43616, %for.body290.us3642.preheader ]
  %cmp297.us3646.1 = icmp eq i64 %144, 13
  br i1 %cmp297.us3646.1, label %if.end318.us3655.2, label %if.end355.us3672.1

if.end318:                                        ; preds = %for.body290.preheader
  %arrayidx330 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 6, i64 %146
  %157 = bitcast double** %arrayidx330 to i8**
  %call333 = tail call i32 @posix_memalign(i8** %157, i64 64, i64 %mul332) #1
  %arrayidx335 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 7, i64 %146
  %158 = bitcast double** %arrayidx335 to i8**
  %call338 = tail call i32 @posix_memalign(i8** %158, i64 64, i64 %mul332) #1
  %159 = load i8*, i8** %157, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %159, i8 0, i64 %mul332, i32 8, i1 false)
  %160 = load i8*, i8** %158, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %160, i8 0, i64 %mul332, i32 8, i1 false)
  %add354 = add i64 %factor, %memory_allocated.43616
  br label %if.end355

if.end355:                                        ; preds = %for.body290.preheader, %if.end318
  %memory_allocated.6 = phi i64 [ %add354, %if.end318 ], [ %memory_allocated.43616, %for.body290.preheader ]
  %cmp297.1 = icmp eq i64 %144, 13
  br i1 %cmp297.1, label %if.end318.2, label %if.end355.1

for.inc359:                                       ; preds = %if.end355.us.1, %if.end328.us.2, %if.end355.us3672.1, %if.end318.us3655.2, %if.end355.1, %if.end318.2
  %memory_allocated.5.lcssa = phi i64 [ %add354.2, %if.end318.2 ], [ %add354.1, %if.end355.1 ], [ %add354.us3671.2, %if.end318.us3655.2 ], [ %add354.us3671.1, %if.end355.us3672.1 ], [ %add354.us.2, %if.end328.us.2 ], [ %add354.us.1, %if.end355.us.1 ]
  %indvars.iv.next3758 = add nsw i64 %indvars.iv3757, 1
  %exitcond3761 = icmp eq i64 %indvars.iv.next3758, 2
  br i1 %exitcond3761, label %for.inc362, label %for.cond287.preheader

for.inc362:                                       ; preds = %for.inc359
  %memory_allocated.5.lcssa.lcssa = phi i64 [ %memory_allocated.5.lcssa, %for.inc359 ]
  %indvars.iv.next3763 = add nsw i64 %indvars.iv3762, 1
  %exitcond3766 = icmp eq i64 %indvars.iv.next3763, 2
  br i1 %exitcond3766, label %for.cond365.preheader, label %for.cond283.preheader

for.cond370.preheader:                            ; preds = %for.cond370.preheader.lr.ph, %for.end1867
  %indvars.iv3743 = phi i64 [ 0, %for.cond370.preheader.lr.ph ], [ %indvars.iv.next3744, %for.end1867 ]
  %buf_k1306.03612 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %buf_k1306.3.lcssa.lcssa.lcssa3990, %for.end1867 ]
  %buf_j1305.03611 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %buf_j1305.3.lcssa.lcssa.lcssa3991, %for.end1867 ]
  %buf_i1304.03610 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %buf_i1304.3.lcssa.lcssa.lcssa3992, %for.end1867 ]
  %grid_k1303.03609 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %grid_k1303.3.lcssa.lcssa.lcssa3993, %for.end1867 ]
  %grid_j1302.03608 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %grid_j1302.3.lcssa.lcssa.lcssa3994, %for.end1867 ]
  %grid_i1301.03607 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %grid_i1301.3.lcssa.lcssa.lcssa3995, %for.end1867 ]
  %dim_k1300.03606 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %dim_k1300.3.lcssa.lcssa.lcssa3996, %for.end1867 ]
  %dim_j1299.03605 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %dim_j1299.3.lcssa.lcssa.lcssa3997, %for.end1867 ]
  %dim_i1298.03604 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %dim_i1298.3.lcssa.lcssa.lcssa3998, %for.end1867 ]
  %dim_k806.03602 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %dim_k806.3.lcssa.lcssa.lcssa3981, %for.end1867 ]
  %dim_j805.03601 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %dim_j805.3.lcssa.lcssa.lcssa3982, %for.end1867 ]
  %dim_i804.03600 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %dim_i804.3.lcssa.lcssa.lcssa3983, %for.end1867 ]
  %recv_k.03599 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %recv_k.3.lcssa.lcssa.lcssa3984, %for.end1867 ]
  %recv_j.03598 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %recv_j.3.lcssa.lcssa.lcssa3985, %for.end1867 ]
  %recv_i.03597 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %recv_i.3.lcssa.lcssa.lcssa3986, %for.end1867 ]
  %send_k.03596 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %send_k.3.lcssa.lcssa.lcssa3987, %for.end1867 ]
  %send_j.03595 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %send_j.3.lcssa.lcssa.lcssa3988, %for.end1867 ]
  %send_i.03594 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %send_i.3.lcssa.lcssa.lcssa3989, %for.end1867 ]
  %memory_allocated.73593 = phi i64 [ %memory_allocated.5.lcssa.lcssa.lcssa, %for.cond370.preheader.lr.ph ], [ %memory_allocated.83561.ph.lcssa, %for.end1867 ]
  %sd_i_lo.03592 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %sd_i_lo.3.lcssa.lcssa3970, %for.end1867 ]
  %sd_i_hi.03591 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %sd_i_hi.3.lcssa.lcssa3969, %for.end1867 ]
  %sd_j_lo.03590 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %sd_j_lo.3.lcssa.lcssa3972, %for.end1867 ]
  %sd_j_hi.03589 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %sd_j_hi.3.lcssa.lcssa3971, %for.end1867 ]
  %sd_k_lo.03588 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %sd_k_lo.33858.lcssa.lcssa3973, %for.end1867 ]
  %dim_k.03587 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %dim_k.3.lcssa.lcssa.lcssa3975, %for.end1867 ]
  %dim_j.03586 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %dim_j.3.lcssa.lcssa.lcssa3976, %for.end1867 ]
  %dim_i.03585 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %dim_i.3.lcssa.lcssa.lcssa3977, %for.end1867 ]
  %grid_k.03584 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %grid_k.3.lcssa.lcssa.lcssa3978, %for.end1867 ]
  %grid_j.03583 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %grid_j.3.lcssa.lcssa.lcssa3979, %for.end1867 ]
  %grid_i.03582 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %grid_i.3.lcssa.lcssa.lcssa3980, %for.end1867 ]
  %sd_k_hi.03581 = phi i32 [ undef, %for.cond370.preheader.lr.ph ], [ %sd_k_hi.33855.lcssa.lcssa3974, %for.end1867 ]
  %arrayidx594 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 9, i64 %indvars.iv3743
  %161 = bitcast %struct.bufferCopy_type** %arrayidx594 to i8**
  br label %for.body373.outer

for.body373.outer:                                ; preds = %if.end1864.thread, %for.cond370.preheader
  %buf_k1306.13579.ph = phi i32 [ %buf_k1306.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %buf_k1306.03612, %for.cond370.preheader ]
  %buf_j1305.13578.ph = phi i32 [ %buf_j1305.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %buf_j1305.03611, %for.cond370.preheader ]
  %buf_i1304.13577.ph = phi i32 [ %buf_i1304.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %buf_i1304.03610, %for.cond370.preheader ]
  %grid_k1303.13576.ph = phi i32 [ %grid_k1303.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %grid_k1303.03609, %for.cond370.preheader ]
  %grid_j1302.13575.ph = phi i32 [ %grid_j1302.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %grid_j1302.03608, %for.cond370.preheader ]
  %grid_i1301.13574.ph = phi i32 [ %grid_i1301.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %grid_i1301.03607, %for.cond370.preheader ]
  %dim_k1300.13573.ph = phi i32 [ %dim_k1300.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %dim_k1300.03606, %for.cond370.preheader ]
  %dim_j1299.13572.ph = phi i32 [ %dim_j1299.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %dim_j1299.03605, %for.cond370.preheader ]
  %dim_i1298.13571.ph = phi i32 [ %dim_i1298.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %dim_i1298.03604, %for.cond370.preheader ]
  %dim_k806.13570.ph = phi i32 [ %dim_k806.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %dim_k806.03602, %for.cond370.preheader ]
  %dim_j805.13569.ph = phi i32 [ %dim_j805.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %dim_j805.03601, %for.cond370.preheader ]
  %dim_i804.13568.ph = phi i32 [ %dim_i804.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %dim_i804.03600, %for.cond370.preheader ]
  %recv_k.13567.ph = phi i32 [ %recv_k.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %recv_k.03599, %for.cond370.preheader ]
  %recv_j.13566.ph = phi i32 [ %recv_j.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %recv_j.03598, %for.cond370.preheader ]
  %recv_i.13565.ph = phi i32 [ %recv_i.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %recv_i.03597, %for.cond370.preheader ]
  %send_k.13564.ph = phi i32 [ %send_k.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %send_k.03596, %for.cond370.preheader ]
  %send_j.13563.ph = phi i32 [ %send_j.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %send_j.03595, %for.cond370.preheader ]
  %send_i.13562.ph = phi i32 [ %send_i.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %send_i.03594, %for.cond370.preheader ]
  %memory_allocated.83561.ph = phi i64 [ %add1863, %if.end1864.thread ], [ %memory_allocated.73593, %for.cond370.preheader ]
  %initialize.03560.ph = phi i32 [ 1, %if.end1864.thread ], [ 0, %for.cond370.preheader ]
  %sd_i_lo.13559.ph = phi i32 [ %sd_i_lo.3.lcssa.lcssa, %if.end1864.thread ], [ %sd_i_lo.03592, %for.cond370.preheader ]
  %sd_i_hi.13558.ph = phi i32 [ %sd_i_hi.3.lcssa.lcssa, %if.end1864.thread ], [ %sd_i_hi.03591, %for.cond370.preheader ]
  %sd_j_lo.13557.ph = phi i32 [ %sd_j_lo.3.lcssa.lcssa, %if.end1864.thread ], [ %sd_j_lo.03590, %for.cond370.preheader ]
  %sd_j_hi.13556.ph = phi i32 [ %sd_j_hi.3.lcssa.lcssa, %if.end1864.thread ], [ %sd_j_hi.03589, %for.cond370.preheader ]
  %sd_k_lo.13555.ph = phi i32 [ %sd_k_lo.33858.lcssa.lcssa, %if.end1864.thread ], [ %sd_k_lo.03588, %for.cond370.preheader ]
  %dim_k.13554.ph = phi i32 [ %dim_k.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %dim_k.03587, %for.cond370.preheader ]
  %dim_j.13553.ph = phi i32 [ %dim_j.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %dim_j.03586, %for.cond370.preheader ]
  %dim_i.13552.ph = phi i32 [ %dim_i.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %dim_i.03585, %for.cond370.preheader ]
  %grid_k.13551.ph = phi i32 [ %grid_k.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %grid_k.03584, %for.cond370.preheader ]
  %grid_j.13550.ph = phi i32 [ %grid_j.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %grid_j.03583, %for.cond370.preheader ]
  %grid_i.13549.ph = phi i32 [ %grid_i.3.lcssa.lcssa.lcssa, %if.end1864.thread ], [ %grid_i.03582, %for.cond370.preheader ]
  %sd_k_hi.13548.ph = phi i32 [ %sd_k_hi.33855.lcssa.lcssa, %if.end1864.thread ], [ %sd_k_hi.03581, %for.cond370.preheader ]
  br label %for.body373

for.body373:                                      ; preds = %for.body373.outer, %if.end1864
  %buf_k1306.13579 = phi i32 [ %buf_k1306.3.lcssa.lcssa, %if.end1864 ], [ %buf_k1306.13579.ph, %for.body373.outer ]
  %buf_j1305.13578 = phi i32 [ %buf_j1305.3.lcssa.lcssa, %if.end1864 ], [ %buf_j1305.13578.ph, %for.body373.outer ]
  %buf_i1304.13577 = phi i32 [ %buf_i1304.3.lcssa.lcssa, %if.end1864 ], [ %buf_i1304.13577.ph, %for.body373.outer ]
  %grid_k1303.13576 = phi i32 [ %grid_k1303.3.lcssa.lcssa, %if.end1864 ], [ %grid_k1303.13576.ph, %for.body373.outer ]
  %grid_j1302.13575 = phi i32 [ %grid_j1302.3.lcssa.lcssa, %if.end1864 ], [ %grid_j1302.13575.ph, %for.body373.outer ]
  %grid_i1301.13574 = phi i32 [ %grid_i1301.3.lcssa.lcssa, %if.end1864 ], [ %grid_i1301.13574.ph, %for.body373.outer ]
  %dim_k1300.13573 = phi i32 [ %dim_k1300.3.lcssa.lcssa, %if.end1864 ], [ %dim_k1300.13573.ph, %for.body373.outer ]
  %dim_j1299.13572 = phi i32 [ %dim_j1299.3.lcssa.lcssa, %if.end1864 ], [ %dim_j1299.13572.ph, %for.body373.outer ]
  %dim_i1298.13571 = phi i32 [ %dim_i1298.3.lcssa.lcssa, %if.end1864 ], [ %dim_i1298.13571.ph, %for.body373.outer ]
  %dim_k806.13570 = phi i32 [ %dim_k806.3.lcssa.lcssa, %if.end1864 ], [ %dim_k806.13570.ph, %for.body373.outer ]
  %dim_j805.13569 = phi i32 [ %dim_j805.3.lcssa.lcssa, %if.end1864 ], [ %dim_j805.13569.ph, %for.body373.outer ]
  %dim_i804.13568 = phi i32 [ %dim_i804.3.lcssa.lcssa, %if.end1864 ], [ %dim_i804.13568.ph, %for.body373.outer ]
  %recv_k.13567 = phi i32 [ %recv_k.3.lcssa.lcssa, %if.end1864 ], [ %recv_k.13567.ph, %for.body373.outer ]
  %recv_j.13566 = phi i32 [ %recv_j.3.lcssa.lcssa, %if.end1864 ], [ %recv_j.13566.ph, %for.body373.outer ]
  %recv_i.13565 = phi i32 [ %recv_i.3.lcssa.lcssa, %if.end1864 ], [ %recv_i.13565.ph, %for.body373.outer ]
  %send_k.13564 = phi i32 [ %send_k.3.lcssa.lcssa, %if.end1864 ], [ %send_k.13564.ph, %for.body373.outer ]
  %send_j.13563 = phi i32 [ %send_j.3.lcssa.lcssa, %if.end1864 ], [ %send_j.13563.ph, %for.body373.outer ]
  %send_i.13562 = phi i32 [ %send_i.3.lcssa.lcssa, %if.end1864 ], [ %send_i.13562.ph, %for.body373.outer ]
  %initialize.03560 = phi i32 [ %inc1866, %if.end1864 ], [ %initialize.03560.ph, %for.body373.outer ]
  %sd_i_lo.13559 = phi i32 [ %sd_i_lo.3.lcssa, %if.end1864 ], [ %sd_i_lo.13559.ph, %for.body373.outer ]
  %sd_i_hi.13558 = phi i32 [ %sd_i_hi.3.lcssa, %if.end1864 ], [ %sd_i_hi.13558.ph, %for.body373.outer ]
  %sd_j_lo.13557 = phi i32 [ %sd_j_lo.3.lcssa, %if.end1864 ], [ %sd_j_lo.13557.ph, %for.body373.outer ]
  %sd_j_hi.13556 = phi i32 [ %sd_j_hi.3.lcssa, %if.end1864 ], [ %sd_j_hi.13556.ph, %for.body373.outer ]
  %sd_k_lo.13555 = phi i32 [ %sd_k_lo.33858.lcssa, %if.end1864 ], [ %sd_k_lo.13555.ph, %for.body373.outer ]
  %dim_k.13554 = phi i32 [ %dim_k.3.lcssa.lcssa, %if.end1864 ], [ %dim_k.13554.ph, %for.body373.outer ]
  %dim_j.13553 = phi i32 [ %dim_j.3.lcssa.lcssa, %if.end1864 ], [ %dim_j.13553.ph, %for.body373.outer ]
  %dim_i.13552 = phi i32 [ %dim_i.3.lcssa.lcssa, %if.end1864 ], [ %dim_i.13552.ph, %for.body373.outer ]
  %grid_k.13551 = phi i32 [ %grid_k.3.lcssa.lcssa, %if.end1864 ], [ %grid_k.13551.ph, %for.body373.outer ]
  %grid_j.13550 = phi i32 [ %grid_j.3.lcssa.lcssa, %if.end1864 ], [ %grid_j.13550.ph, %for.body373.outer ]
  %grid_i.13549 = phi i32 [ %grid_i.3.lcssa.lcssa, %if.end1864 ], [ %grid_i.13549.ph, %for.body373.outer ]
  %sd_k_hi.13548 = phi i32 [ %sd_k_hi.33855.lcssa, %if.end1864 ], [ %sd_k_hi.13548.ph, %for.body373.outer ]
  store i32 0, i32* %bufferCopy_Pack_Start, align 8, !tbaa !45
  %cmp589 = icmp eq i32 %initialize.03560, 1
  br label %for.body377

for.body377:                                      ; preds = %for.end754, %for.body373
  %indvars.iv3717 = phi i64 [ 0, %for.body373 ], [ %indvars.iv.next3718, %for.end754 ]
  %buffer.03388 = phi i32 [ 0, %for.body373 ], [ %buffer.1.lcssa, %for.end754 ]
  %sd_i_lo.23386 = phi i32 [ %sd_i_lo.13559, %for.body373 ], [ %sd_i_lo.3, %for.end754 ]
  %sd_i_hi.23385 = phi i32 [ %sd_i_hi.13558, %for.body373 ], [ %sd_i_hi.3, %for.end754 ]
  %sd_j_lo.23384 = phi i32 [ %sd_j_lo.13557, %for.body373 ], [ %sd_j_lo.3, %for.end754 ]
  %sd_j_hi.23383 = phi i32 [ %sd_j_hi.13556, %for.body373 ], [ %sd_j_hi.3, %for.end754 ]
  %sd_k_lo.23382 = phi i32 [ %sd_k_lo.13555, %for.body373 ], [ %sd_k_lo.33858, %for.end754 ]
  %dim_k.23381 = phi i32 [ %dim_k.13554, %for.body373 ], [ %dim_k.3.lcssa, %for.end754 ]
  %dim_j.23380 = phi i32 [ %dim_j.13553, %for.body373 ], [ %dim_j.3.lcssa, %for.end754 ]
  %dim_i.23379 = phi i32 [ %dim_i.13552, %for.body373 ], [ %dim_i.3.lcssa, %for.end754 ]
  %grid_k.23378 = phi i32 [ %grid_k.13551, %for.body373 ], [ %grid_k.3.lcssa, %for.end754 ]
  %grid_j.23377 = phi i32 [ %grid_j.13550, %for.body373 ], [ %grid_j.3.lcssa, %for.end754 ]
  %grid_i.23376 = phi i32 [ %grid_i.13549, %for.body373 ], [ %grid_i.3.lcssa, %for.end754 ]
  %sd_k_hi.23375 = phi i32 [ %sd_k_hi.13548, %for.body373 ], [ %sd_k_hi.33855, %for.end754 ]
  %arrayidx380 = getelementptr inbounds [27 x i32], [27 x i32]* @create_domain.FacesEdgesCorners, i64 0, i64 %indvars.iv3717
  %162 = load i32, i32* %arrayidx380, align 4, !tbaa !35
  %rem383 = srem i32 %162, 3
  %sub384 = add nsw i32 %rem383, -1
  %div386 = sdiv i32 %162, 3
  %rem387 = srem i32 %div386, 3
  %sub388 = add nsw i32 %rem387, -1
  %div390 = sdiv i32 %162, 9
  %rem391 = srem i32 %div390, 3
  %sub392 = add nsw i32 %rem391, -1
  switch i32 %rem383, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb393
    i32 2, label %sw.bb394
  ]

sw.bb:                                            ; preds = %for.body377
  br label %sw.epilog

sw.bb393:                                         ; preds = %for.body377
  br label %sw.epilog

sw.bb394:                                         ; preds = %for.body377
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body377, %sw.bb394, %sw.bb393, %sw.bb
  %sd_i_hi.3 = phi i32 [ %sd_i_hi.23385, %for.body377 ], [ %subdomains_per_rank_in_i, %sw.bb394 ], [ %subdomains_per_rank_in_i, %sw.bb393 ], [ 1, %sw.bb ]
  %sd_i_lo.3 = phi i32 [ %sd_i_lo.23386, %for.body377 ], [ %sub395, %sw.bb394 ], [ 0, %sw.bb393 ], [ 0, %sw.bb ]
  switch i32 %rem387, label %sw.epilog400 [
    i32 0, label %sw.bb396
    i32 1, label %sw.bb397
    i32 2, label %sw.bb398
  ]

sw.bb396:                                         ; preds = %sw.epilog
  br label %sw.epilog400

sw.bb397:                                         ; preds = %sw.epilog
  br label %sw.epilog400

sw.bb398:                                         ; preds = %sw.epilog
  br label %sw.epilog400

sw.epilog400:                                     ; preds = %sw.epilog, %sw.bb398, %sw.bb397, %sw.bb396
  %sd_j_hi.3 = phi i32 [ %sd_j_hi.23383, %sw.epilog ], [ %subdomains_per_rank_in_j, %sw.bb398 ], [ %subdomains_per_rank_in_j, %sw.bb397 ], [ 1, %sw.bb396 ]
  %sd_j_lo.3 = phi i32 [ %sd_j_lo.23384, %sw.epilog ], [ %sub399, %sw.bb398 ], [ 0, %sw.bb397 ], [ 0, %sw.bb396 ]
  switch i32 %rem391, label %sw.epilog405 [
    i32 0, label %for.cond410.preheader.lr.ph
    i32 1, label %sw.bb402
    i32 2, label %sw.bb403
  ]

sw.bb402:                                         ; preds = %sw.epilog400
  br label %sw.epilog405

sw.bb403:                                         ; preds = %sw.epilog400
  br label %for.cond410.preheader.lr.ph

sw.epilog405:                                     ; preds = %sw.epilog400, %sw.bb402
  %sd_k_hi.3 = phi i32 [ %sd_k_hi.23375, %sw.epilog400 ], [ %subdomains_per_rank_in_k, %sw.bb402 ]
  %sd_k_lo.3 = phi i32 [ %sd_k_lo.23382, %sw.epilog400 ], [ 0, %sw.bb402 ]
  %cmp4073358 = icmp slt i32 %sd_k_lo.3, %sd_k_hi.3
  br i1 %cmp4073358, label %for.cond410.preheader.lr.ph, label %for.end754

for.cond410.preheader.lr.ph:                      ; preds = %sw.epilog400, %sw.bb403, %sw.epilog405
  %sd_k_lo.33857 = phi i32 [ %sd_k_lo.3, %sw.epilog405 ], [ %sub404, %sw.bb403 ], [ 0, %sw.epilog400 ]
  %sd_k_hi.33856 = phi i32 [ %sd_k_hi.3, %sw.epilog405 ], [ %subdomains_per_rank_in_k, %sw.bb403 ], [ 1, %sw.epilog400 ]
  %cmp4113341 = icmp sgt i32 %sd_j_hi.3, %sd_j_lo.3
  %cmp4153325 = icmp sgt i32 %sd_i_hi.3, %sd_i_lo.3
  %sub584 = sub nsw i32 %sd_i_hi.3, %sd_i_lo.3
  %sub586 = sub nsw i32 %sd_j_hi.3, %sd_j_lo.3
  %idxprom677 = sext i32 %162 to i64
  %arrayidx679 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 6, i64 %idxprom677
  %163 = bitcast double** %arrayidx679 to i64*
  %arrayidx723 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 %idxprom677
  %arrayidx730 = getelementptr inbounds [27 x i32], [27 x i32]* @create_domain.edges, i64 0, i64 %idxprom677
  %arrayidx737 = getelementptr inbounds [27 x i32], [27 x i32]* @create_domain.corners, i64 0, i64 %idxprom677
  %164 = sext i32 %sd_i_lo.3 to i64
  %165 = sext i32 %sub384 to i64
  br label %for.cond410.preheader

for.cond410.preheader:                            ; preds = %for.inc752, %for.cond410.preheader.lr.ph
  %k.13366 = phi i32 [ %sd_k_lo.33857, %for.cond410.preheader.lr.ph ], [ %inc753, %for.inc752 ]
  %buffer.13365 = phi i32 [ %buffer.03388, %for.cond410.preheader.lr.ph ], [ %buffer.2.lcssa, %for.inc752 ]
  %dim_k.33364 = phi i32 [ %dim_k.23381, %for.cond410.preheader.lr.ph ], [ %dim_k.4.lcssa, %for.inc752 ]
  %dim_j.33363 = phi i32 [ %dim_j.23380, %for.cond410.preheader.lr.ph ], [ %dim_j.4.lcssa, %for.inc752 ]
  %dim_i.33362 = phi i32 [ %dim_i.23379, %for.cond410.preheader.lr.ph ], [ %dim_i.4.lcssa, %for.inc752 ]
  %grid_k.33361 = phi i32 [ %grid_k.23378, %for.cond410.preheader.lr.ph ], [ %grid_k.4.lcssa, %for.inc752 ]
  %grid_j.33360 = phi i32 [ %grid_j.23377, %for.cond410.preheader.lr.ph ], [ %grid_j.4.lcssa, %for.inc752 ]
  %grid_i.33359 = phi i32 [ %grid_i.23376, %for.cond410.preheader.lr.ph ], [ %grid_i.4.lcssa, %for.inc752 ]
  br i1 %cmp4113341, label %for.cond414.preheader.lr.ph, label %for.inc752

for.cond414.preheader.lr.ph:                      ; preds = %for.cond410.preheader
  %.pre178.i2962 = add i32 %k.13366, %sub392
  %mul433 = mul i32 %k.13366, %subdomains_per_rank_in_j
  %sub582 = sub nsw i32 %k.13366, %sd_k_lo.33857
  %add91.lobit.i2992 = ashr i32 %.pre178.i2962, 31
  %dec94.rk.i2993 = add nsw i32 %add91.lobit.i2992, %div
  %add91.lobit.i3295 = ashr i32 %.pre178.i2962, 31
  %dec94.rk.i3296 = add nsw i32 %add91.lobit.i3295, %div
  br label %for.cond414.preheader

for.cond414.preheader:                            ; preds = %for.inc749, %for.cond414.preheader.lr.ph
  %j.13349 = phi i32 [ %sd_j_lo.3, %for.cond414.preheader.lr.ph ], [ %inc750, %for.inc749 ]
  %buffer.23348 = phi i32 [ %buffer.13365, %for.cond414.preheader.lr.ph ], [ %buffer.3.lcssa, %for.inc749 ]
  %dim_k.43347 = phi i32 [ %dim_k.33364, %for.cond414.preheader.lr.ph ], [ %dim_k.5.lcssa, %for.inc749 ]
  %dim_j.43346 = phi i32 [ %dim_j.33363, %for.cond414.preheader.lr.ph ], [ %dim_j.5.lcssa, %for.inc749 ]
  %dim_i.43345 = phi i32 [ %dim_i.33362, %for.cond414.preheader.lr.ph ], [ %dim_i.5.lcssa, %for.inc749 ]
  %grid_k.43344 = phi i32 [ %grid_k.33361, %for.cond414.preheader.lr.ph ], [ %grid_k.5.lcssa, %for.inc749 ]
  %grid_j.43343 = phi i32 [ %grid_j.33360, %for.cond414.preheader.lr.ph ], [ %grid_j.5.lcssa, %for.inc749 ]
  %grid_i.43342 = phi i32 [ %grid_i.33359, %for.cond414.preheader.lr.ph ], [ %grid_i.5.lcssa, %for.inc749 ]
  br i1 %cmp4153325, label %for.body417.lr.ph, label %for.inc749

for.body417.lr.ph:                                ; preds = %for.cond414.preheader
  %add73.i2983 = add i32 %j.13349, %sub388
  %add73.lobit.i2984 = ashr i32 %add73.i2983, 31
  %dec76.rj.i2985 = add nsw i32 %add73.lobit.i2984, %div28
  %tmp3319 = add i32 %j.13349, %mul433
  %tmp3320 = mul i32 %tmp3319, %subdomains_per_rank_in_i
  %sub580 = sub nsw i32 %j.13349, %sd_j_lo.3
  br label %for.body417

for.body417:                                      ; preds = %if.end745, %for.body417.lr.ph
  %indvars.iv = phi i64 [ %164, %for.body417.lr.ph ], [ %indvars.iv.next, %if.end745 ]
  %buffer.33332 = phi i32 [ %buffer.23348, %for.body417.lr.ph ], [ %buffer.4, %if.end745 ]
  %dim_k.53331 = phi i32 [ %dim_k.43347, %for.body417.lr.ph ], [ %dim_k.7, %if.end745 ]
  %dim_j.53330 = phi i32 [ %dim_j.43346, %for.body417.lr.ph ], [ %dim_j.7, %if.end745 ]
  %dim_i.53329 = phi i32 [ %dim_i.43345, %for.body417.lr.ph ], [ %dim_i.7, %if.end745 ]
  %grid_k.53328 = phi i32 [ %grid_k.43344, %for.body417.lr.ph ], [ %grid_k.7, %if.end745 ]
  %grid_j.53327 = phi i32 [ %grid_j.43343, %for.body417.lr.ph ], [ %grid_j.7, %if.end745 ]
  %grid_i.53326 = phi i32 [ %grid_i.43342, %for.body417.lr.ph ], [ %grid_i.7, %if.end745 ]
  %166 = load i64, i64* %140, align 8
  %167 = trunc i64 %166 to i32
  %cmp.i2936 = icmp eq i32 %167, 0
  br i1 %cmp.i2936, label %if.end14.i2947, label %if.then.i2942

if.then.i2942:                                    ; preds = %for.body417
  %168 = load i32, i32* %i39, align 8, !tbaa !106
  %mul.i2938 = mul nsw i32 %168, %sub33
  %169 = trunc i64 %indvars.iv to i32
  %add.i2939 = add i32 %169, %sub384
  %add2.i2940 = add i32 %add.i2939, %mul.i2938
  %cmp3.i2941 = icmp slt i32 %add2.i2940, 0
  br i1 %cmp3.i2941, label %calculate_neighboring_subdomain_rank.exit3006.thread, label %if.end.i2945

if.end.i2945:                                     ; preds = %if.then.i2942
  %170 = load i32, i32* %i45, align 4, !tbaa !107
  %cmp11.i2944 = icmp slt i32 %add2.i2940, %170
  br i1 %cmp11.i2944, label %if.end14.i2947, label %calculate_neighboring_subdomain_rank.exit3006.thread

if.end14.i2947:                                   ; preds = %if.end.i2945, %for.body417
  %cmp16.i2946 = icmp ult i64 %166, 4294967296
  br i1 %cmp16.i2946, label %if.end36.i2961, label %if.then17.i2953

if.then17.i2953:                                  ; preds = %if.end14.i2947
  %171 = load i32, i32* %j41, align 4, !tbaa !36
  %mul20.i2949 = mul nsw i32 %171, %div28
  %add22.i2951 = add i32 %add73.i2983, %mul20.i2949
  %cmp23.i2952 = icmp slt i32 %add22.i2951, 0
  br i1 %cmp23.i2952, label %calculate_neighboring_subdomain_rank.exit3006, label %if.end25.i2956

if.end25.i2956:                                   ; preds = %if.then17.i2953
  %172 = load i32, i32* %j48, align 4, !tbaa !108
  %cmp33.i2955 = icmp slt i32 %add22.i2951, %172
  br i1 %cmp33.i2955, label %if.end36.i2961, label %calculate_neighboring_subdomain_rank.exit3006

if.end36.i2961:                                   ; preds = %if.end25.i2956, %if.end14.i2947
  %173 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp38.i2958 = icmp eq i32 %173, 0
  %.pre.i2960 = load i32, i32* %k43, align 8, !tbaa !39
  br i1 %cmp38.i2958, label %if.end58.i3004, label %if.then39.i2968

if.then39.i2968:                                  ; preds = %if.end36.i2961
  %mul42.i2964 = mul nsw i32 %.pre.i2960, %div
  %add44.i2966 = add i32 %mul42.i2964, %.pre178.i2962
  %cmp45.i2967 = icmp slt i32 %add44.i2966, 0
  br i1 %cmp45.i2967, label %calculate_neighboring_subdomain_rank.exit3006, label %if.end47.i2971

if.end47.i2971:                                   ; preds = %if.then39.i2968
  %174 = load i32, i32* %k51, align 4, !tbaa !110
  %cmp55.i2970 = icmp slt i32 %add44.i2966, %174
  br i1 %cmp55.i2970, label %if.end58.i3004, label %calculate_neighboring_subdomain_rank.exit3006

if.end58.i3004:                                   ; preds = %if.end36.i2961, %if.end47.i2971
  %175 = add nsw i64 %indvars.iv, %165
  %176 = trunc i64 %175 to i32
  %add59.lobit.i2974 = ashr i32 %176, 31
  %dec.ri.i2975 = add nsw i32 %add59.lobit.i2974, %sub33
  %177 = load i64, i64* %141, align 8
  %sext3851 = shl i64 %177, 32
  %178 = ashr exact i64 %sext3851, 32
  %not.cmp66.i2977 = icmp sge i64 %175, %178
  %inc.i2978 = zext i1 %not.cmp66.i2977 to i32
  %179 = load i32, i32* %i34, align 4, !tbaa !111
  %ri.addr.1.i2980 = add i32 %dec.ri.i2975, %179
  %add70.i2981 = add i32 %ri.addr.1.i2980, %inc.i2978
  %rem.i2982 = srem i32 %add70.i2981, %179
  %180 = lshr i64 %177, 32
  %181 = trunc i64 %180 to i32
  %not.cmp81.i2986 = icmp sge i32 %add73.i2983, %181
  %inc83.i2987 = zext i1 %not.cmp81.i2986 to i32
  %182 = load i32, i32* %j36, align 4, !tbaa !112
  %rj.addr.1.i2989 = add i32 %dec76.rj.i2985, %182
  %add87.i2990 = add i32 %rj.addr.1.i2989, %inc83.i2987
  %rem90.i2991 = srem i32 %add87.i2990, %182
  %not.cmp99.i2994 = icmp sge i32 %.pre178.i2962, %.pre.i2960
  %inc101.i2995 = zext i1 %not.cmp99.i2994 to i32
  %183 = load i32, i32* %k38, align 4, !tbaa !113
  %rk.addr.1.i2997 = add i32 %dec94.rk.i2993, %inc101.i2995
  %add105.i2998 = add i32 %rk.addr.1.i2997, %183
  %rem108.i2999 = srem i32 %add105.i2998, %183
  %mul118.i3000 = mul i32 %rem108.i2999, %182
  %tmp.i3001 = add i32 %mul118.i3000, %rem90.i2991
  %tmp177.i3002 = mul i32 %tmp.i3001, %179
  %add119.i3003 = add i32 %tmp177.i3002, %rem.i2982
  br label %calculate_neighboring_subdomain_rank.exit3006

calculate_neighboring_subdomain_rank.exit3006.thread: ; preds = %if.then.i2942, %if.end.i2945
  %184 = load i32, i32* %rank1, align 4, !tbaa !41
  br label %if.then.i3245

calculate_neighboring_subdomain_rank.exit3006:    ; preds = %if.then17.i2953, %if.end25.i2956, %if.then39.i2968, %if.end47.i2971, %if.end58.i3004
  %retval.0.i3005 = phi i32 [ %add119.i3003, %if.end58.i3004 ], [ -1, %if.then17.i2953 ], [ -1, %if.end25.i2956 ], [ -1, %if.then39.i2968 ], [ -1, %if.end47.i2971 ]
  %185 = load i32, i32* %rank1, align 4, !tbaa !41
  br i1 %cmp.i2936, label %if.end14.i3250, label %if.then.i3245

if.then.i3245:                                    ; preds = %calculate_neighboring_subdomain_rank.exit3006.thread, %calculate_neighboring_subdomain_rank.exit3006
  %186 = phi i32 [ %184, %calculate_neighboring_subdomain_rank.exit3006.thread ], [ %185, %calculate_neighboring_subdomain_rank.exit3006 ]
  %retval.0.i30053859 = phi i32 [ -1, %calculate_neighboring_subdomain_rank.exit3006.thread ], [ %retval.0.i3005, %calculate_neighboring_subdomain_rank.exit3006 ]
  %187 = load i32, i32* %i39, align 8, !tbaa !106
  %mul.i3241 = mul nsw i32 %187, %sub33
  %188 = trunc i64 %indvars.iv to i32
  %add.i3242 = add i32 %188, %sub384
  %add2.i3243 = add i32 %add.i3242, %mul.i3241
  %cmp3.i3244 = icmp slt i32 %add2.i3243, 0
  br i1 %cmp3.i3244, label %if.end745, label %if.end.i3248

if.end.i3248:                                     ; preds = %if.then.i3245
  %189 = load i32, i32* %i45, align 4, !tbaa !107
  %cmp11.i3247 = icmp slt i32 %add2.i3243, %189
  br i1 %cmp11.i3247, label %if.end14.i3250, label %if.end745

if.end14.i3250:                                   ; preds = %if.end.i3248, %calculate_neighboring_subdomain_rank.exit3006
  %190 = phi i32 [ %186, %if.end.i3248 ], [ %185, %calculate_neighboring_subdomain_rank.exit3006 ]
  %retval.0.i30053860 = phi i32 [ %retval.0.i30053859, %if.end.i3248 ], [ %retval.0.i3005, %calculate_neighboring_subdomain_rank.exit3006 ]
  %cmp16.i3249 = icmp ult i64 %166, 4294967296
  br i1 %cmp16.i3249, label %if.end36.i3264, label %if.then17.i3256

if.then17.i3256:                                  ; preds = %if.end14.i3250
  %191 = load i32, i32* %j41, align 4, !tbaa !36
  %mul20.i3252 = mul nsw i32 %191, %div28
  %add22.i3254 = add i32 %add73.i2983, %mul20.i3252
  %cmp23.i3255 = icmp slt i32 %add22.i3254, 0
  br i1 %cmp23.i3255, label %if.end745, label %if.end25.i3259

if.end25.i3259:                                   ; preds = %if.then17.i3256
  %192 = load i32, i32* %j48, align 4, !tbaa !108
  %cmp33.i3258 = icmp slt i32 %add22.i3254, %192
  br i1 %cmp33.i3258, label %if.end36.i3264, label %if.end745

if.end36.i3264:                                   ; preds = %if.end25.i3259, %if.end14.i3250
  %193 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp38.i3261 = icmp eq i32 %193, 0
  %.pre.i3263 = load i32, i32* %k43, align 8, !tbaa !39
  br i1 %cmp38.i3261, label %calculate_neighboring_subdomain_rank.exit3309, label %if.then39.i3271

if.then39.i3271:                                  ; preds = %if.end36.i3264
  %mul42.i3267 = mul nsw i32 %.pre.i3263, %div
  %add44.i3269 = add i32 %mul42.i3267, %.pre178.i2962
  %cmp45.i3270 = icmp slt i32 %add44.i3269, 0
  br i1 %cmp45.i3270, label %if.end745, label %if.end47.i3274

if.end47.i3274:                                   ; preds = %if.then39.i3271
  %194 = load i32, i32* %k51, align 4, !tbaa !110
  %cmp55.i3273 = icmp slt i32 %add44.i3269, %194
  br i1 %cmp55.i3273, label %calculate_neighboring_subdomain_rank.exit3309, label %if.end745

calculate_neighboring_subdomain_rank.exit3309:    ; preds = %if.end36.i3264, %if.end47.i3274
  %195 = add nsw i64 %indvars.iv, %165
  %196 = trunc i64 %195 to i32
  %add59.lobit.i3277 = ashr i32 %196, 31
  %dec.ri.i3278 = add nsw i32 %add59.lobit.i3277, %sub33
  %197 = load i64, i64* %141, align 8
  %sext3850 = shl i64 %197, 32
  %198 = ashr exact i64 %sext3850, 32
  %not.cmp66.i3280 = icmp sge i64 %195, %198
  %inc.i3281 = zext i1 %not.cmp66.i3280 to i32
  %199 = load i32, i32* %i34, align 4, !tbaa !111
  %ri.addr.1.i3283 = add i32 %dec.ri.i3278, %199
  %add70.i3284 = add i32 %ri.addr.1.i3283, %inc.i3281
  %rem.i3285 = srem i32 %add70.i3284, %199
  %200 = lshr i64 %197, 32
  %201 = trunc i64 %200 to i32
  %not.cmp81.i3289 = icmp sge i32 %add73.i2983, %201
  %inc83.i3290 = zext i1 %not.cmp81.i3289 to i32
  %202 = load i32, i32* %j36, align 4, !tbaa !112
  %rj.addr.1.i3292 = add i32 %dec76.rj.i2985, %202
  %add87.i3293 = add i32 %rj.addr.1.i3292, %inc83.i3290
  %rem90.i3294 = srem i32 %add87.i3293, %202
  %not.cmp99.i3297 = icmp sge i32 %.pre178.i2962, %.pre.i3263
  %inc101.i3298 = zext i1 %not.cmp99.i3297 to i32
  %203 = load i32, i32* %k38, align 4, !tbaa !113
  %rk.addr.1.i3300 = add i32 %dec94.rk.i3296, %inc101.i3298
  %add105.i3301 = add i32 %rk.addr.1.i3300, %203
  %rem108.i3302 = srem i32 %add105.i3301, %203
  %mul118.i3303 = mul i32 %rem108.i3302, %202
  %tmp.i3304 = add i32 %mul118.i3303, %rem90.i3294
  %tmp177.i3305 = mul i32 %tmp.i3304, %199
  %add119.i3306 = add i32 %tmp177.i3305, %rem.i3285
  %cmp425 = icmp eq i32 %add119.i3306, -1
  %tobool3317 = icmp eq i32 %retval.0.i30053860, %190
  %tobool = or i1 %tobool3317, %cmp425
  br i1 %tobool, label %if.end745, label %if.then429

if.then429:                                       ; preds = %calculate_neighboring_subdomain_rank.exit3309
  %204 = trunc i64 %indvars.iv to i32
  %add434 = add i32 %204, %tmp3320
  switch i32 %rem383, label %sw.epilog481 [
    i32 0, label %sw.bb435
    i32 1, label %sw.bb449
    i32 2, label %sw.bb465
  ]

sw.bb435:                                         ; preds = %if.then429
  %idxprom437 = sext i32 %add434 to i64
  %205 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %205, i64 %idxprom437, i32 5
  %206 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %ghosts441 = getelementptr inbounds %struct.box_type, %struct.box_type* %206, i64 %indvars.iv3743, i32 4
  %207 = load i32, i32* %ghosts441, align 4, !tbaa !38
  br label %sw.epilog481

sw.bb449:                                         ; preds = %if.then429
  %idxprom451 = sext i32 %add434 to i64
  %208 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels454 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %208, i64 %idxprom451, i32 5
  %209 = load %struct.box_type*, %struct.box_type** %levels454, align 8, !tbaa !28
  %ghosts456 = getelementptr inbounds %struct.box_type, %struct.box_type* %209, i64 %indvars.iv3743, i32 4
  %210 = load i32, i32* %ghosts456, align 4, !tbaa !38
  %i464 = getelementptr inbounds %struct.box_type, %struct.box_type* %209, i64 %indvars.iv3743, i32 2, i32 0
  %211 = load i32, i32* %i464, align 4, !tbaa !43
  br label %sw.epilog481

sw.bb465:                                         ; preds = %if.then429
  %idxprom467 = sext i32 %add434 to i64
  %212 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels470 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %212, i64 %idxprom467, i32 5
  %213 = load %struct.box_type*, %struct.box_type** %levels470, align 8, !tbaa !28
  %i473 = getelementptr inbounds %struct.box_type, %struct.box_type* %213, i64 %indvars.iv3743, i32 2, i32 0
  %214 = load i32, i32* %i473, align 4, !tbaa !43
  %ghosts480 = getelementptr inbounds %struct.box_type, %struct.box_type* %213, i64 %indvars.iv3743, i32 4
  %215 = load i32, i32* %ghosts480, align 4, !tbaa !38
  br label %sw.epilog481

sw.epilog481:                                     ; preds = %if.then429, %sw.bb465, %sw.bb449, %sw.bb435
  %grid_i.6 = phi i32 [ %grid_i.53326, %if.then429 ], [ %214, %sw.bb465 ], [ %210, %sw.bb449 ], [ %207, %sw.bb435 ]
  %dim_i.6 = phi i32 [ %dim_i.53329, %if.then429 ], [ %215, %sw.bb465 ], [ %211, %sw.bb449 ], [ %207, %sw.bb435 ]
  switch i32 %rem387, label %sw.epilog529 [
    i32 0, label %sw.bb482
    i32 1, label %sw.bb497
    i32 2, label %sw.bb513
  ]

sw.bb482:                                         ; preds = %sw.epilog481
  %idxprom484 = sext i32 %add434 to i64
  %216 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels487 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %216, i64 %idxprom484, i32 5
  %217 = load %struct.box_type*, %struct.box_type** %levels487, align 8, !tbaa !28
  %ghosts489 = getelementptr inbounds %struct.box_type, %struct.box_type* %217, i64 %indvars.iv3743, i32 4
  %218 = load i32, i32* %ghosts489, align 4, !tbaa !38
  br label %sw.epilog529

sw.bb497:                                         ; preds = %sw.epilog481
  %idxprom499 = sext i32 %add434 to i64
  %219 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels502 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %219, i64 %idxprom499, i32 5
  %220 = load %struct.box_type*, %struct.box_type** %levels502, align 8, !tbaa !28
  %ghosts504 = getelementptr inbounds %struct.box_type, %struct.box_type* %220, i64 %indvars.iv3743, i32 4
  %221 = load i32, i32* %ghosts504, align 4, !tbaa !38
  %j512 = getelementptr inbounds %struct.box_type, %struct.box_type* %220, i64 %indvars.iv3743, i32 2, i32 1
  %222 = load i32, i32* %j512, align 4, !tbaa !37
  br label %sw.epilog529

sw.bb513:                                         ; preds = %sw.epilog481
  %idxprom515 = sext i32 %add434 to i64
  %223 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels518 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %223, i64 %idxprom515, i32 5
  %224 = load %struct.box_type*, %struct.box_type** %levels518, align 8, !tbaa !28
  %j521 = getelementptr inbounds %struct.box_type, %struct.box_type* %224, i64 %indvars.iv3743, i32 2, i32 1
  %225 = load i32, i32* %j521, align 4, !tbaa !37
  %ghosts528 = getelementptr inbounds %struct.box_type, %struct.box_type* %224, i64 %indvars.iv3743, i32 4
  %226 = load i32, i32* %ghosts528, align 4, !tbaa !38
  br label %sw.epilog529

sw.epilog529:                                     ; preds = %sw.epilog481, %sw.bb513, %sw.bb497, %sw.bb482
  %grid_j.6 = phi i32 [ %grid_j.53327, %sw.epilog481 ], [ %225, %sw.bb513 ], [ %221, %sw.bb497 ], [ %218, %sw.bb482 ]
  %dim_j.6 = phi i32 [ %dim_j.53330, %sw.epilog481 ], [ %226, %sw.bb513 ], [ %222, %sw.bb497 ], [ %218, %sw.bb482 ]
  switch i32 %rem391, label %sw.epilog577 [
    i32 0, label %sw.bb530
    i32 1, label %sw.bb545
    i32 2, label %sw.bb561
  ]

sw.bb530:                                         ; preds = %sw.epilog529
  %idxprom532 = sext i32 %add434 to i64
  %227 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels535 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %227, i64 %idxprom532, i32 5
  %228 = load %struct.box_type*, %struct.box_type** %levels535, align 8, !tbaa !28
  %ghosts537 = getelementptr inbounds %struct.box_type, %struct.box_type* %228, i64 %indvars.iv3743, i32 4
  %229 = load i32, i32* %ghosts537, align 4, !tbaa !38
  br label %sw.epilog577

sw.bb545:                                         ; preds = %sw.epilog529
  %idxprom547 = sext i32 %add434 to i64
  %230 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels550 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %230, i64 %idxprom547, i32 5
  %231 = load %struct.box_type*, %struct.box_type** %levels550, align 8, !tbaa !28
  %ghosts552 = getelementptr inbounds %struct.box_type, %struct.box_type* %231, i64 %indvars.iv3743, i32 4
  %232 = load i32, i32* %ghosts552, align 4, !tbaa !38
  %k560 = getelementptr inbounds %struct.box_type, %struct.box_type* %231, i64 %indvars.iv3743, i32 2, i32 2
  %233 = load i32, i32* %k560, align 4, !tbaa !40
  br label %sw.epilog577

sw.bb561:                                         ; preds = %sw.epilog529
  %idxprom563 = sext i32 %add434 to i64
  %234 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels566 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %234, i64 %idxprom563, i32 5
  %235 = load %struct.box_type*, %struct.box_type** %levels566, align 8, !tbaa !28
  %k569 = getelementptr inbounds %struct.box_type, %struct.box_type* %235, i64 %indvars.iv3743, i32 2, i32 2
  %236 = load i32, i32* %k569, align 4, !tbaa !40
  %ghosts576 = getelementptr inbounds %struct.box_type, %struct.box_type* %235, i64 %indvars.iv3743, i32 4
  %237 = load i32, i32* %ghosts576, align 4, !tbaa !38
  br label %sw.epilog577

sw.epilog577:                                     ; preds = %sw.epilog529, %sw.bb561, %sw.bb545, %sw.bb530
  %grid_k.6 = phi i32 [ %grid_k.53328, %sw.epilog529 ], [ %236, %sw.bb561 ], [ %232, %sw.bb545 ], [ %229, %sw.bb530 ]
  %dim_k.6 = phi i32 [ %dim_k.53331, %sw.epilog529 ], [ %237, %sw.bb561 ], [ %233, %sw.bb545 ], [ %229, %sw.bb530 ]
  %mul585 = mul nsw i32 %dim_i.6, %sub584
  br i1 %cmp589, label %if.then591, label %if.end743

if.then591:                                       ; preds = %sw.epilog577
  %mul587 = mul i32 %mul585, %sub586
  %mul588 = mul i32 %mul587, %dim_j.6
  %mul583 = mul nsw i32 %dim_k.6, %sub582
  %mul581 = mul nsw i32 %dim_j.6, %sub580
  %238 = sub nsw i64 %indvars.iv, %164
  %239 = trunc i64 %238 to i32
  %mul579 = mul nsw i32 %dim_i.6, %239
  %idxprom592 = sext i32 %buffer.33332 to i64
  %240 = load %struct.bufferCopy_type*, %struct.bufferCopy_type** %arrayidx594, align 8, !tbaa !1
  %i597 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %240, i64 %idxprom592, i32 3, i32 0
  store i32 %dim_i.6, i32* %i597, align 4, !tbaa !5
  %j604 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %240, i64 %idxprom592, i32 3, i32 1
  store i32 %dim_j.6, i32* %j604, align 4, !tbaa !10
  %k611 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %240, i64 %idxprom592, i32 3, i32 2
  store i32 %dim_k.6, i32* %k611, align 4, !tbaa !11
  %box617 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %240, i64 %idxprom592, i32 4, i32 0
  store i32 %add434, i32* %box617, align 8, !tbaa !23
  %ptr = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %240, i64 %idxprom592, i32 4, i32 6
  store double* null, double** %ptr, align 8, !tbaa !123
  %241 = load %struct.bufferCopy_type*, %struct.bufferCopy_type** %arrayidx594, align 8, !tbaa !1
  %i630 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %241, i64 %idxprom592, i32 4, i32 1
  store i32 %grid_i.6, i32* %i630, align 4, !tbaa !12
  %j637 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %241, i64 %idxprom592, i32 4, i32 2
  store i32 %grid_j.6, i32* %j637, align 8, !tbaa !13
  %k644 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %241, i64 %idxprom592, i32 4, i32 3
  store i32 %grid_k.6, i32* %k644, align 4, !tbaa !14
  %idxprom646 = sext i32 %add434 to i64
  %242 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels649 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %242, i64 %idxprom646, i32 5
  %243 = load %struct.box_type*, %struct.box_type** %levels649, align 8, !tbaa !28
  %pencil = getelementptr inbounds %struct.box_type, %struct.box_type* %243, i64 %indvars.iv3743, i32 5
  %244 = load i32, i32* %pencil, align 8, !tbaa !54
  %pencil657 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %241, i64 %idxprom592, i32 4, i32 4
  store i32 %244, i32* %pencil657, align 8, !tbaa !15
  %plane = getelementptr inbounds %struct.box_type, %struct.box_type* %243, i64 %indvars.iv3743, i32 6
  %245 = load i32, i32* %plane, align 4, !tbaa !55
  %plane670 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %241, i64 %idxprom592, i32 4, i32 5
  store i32 %245, i32* %plane670, align 4, !tbaa !16
  %box676 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %241, i64 %idxprom592, i32 5, i32 0
  store i32 -1, i32* %box676, align 8, !tbaa !33
  %246 = load i64, i64* %163, align 8, !tbaa !1
  %ptr686 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %241, i64 %idxprom592, i32 5, i32 6
  %247 = bitcast double** %ptr686 to i64*
  store i64 %246, i64* %247, align 8, !tbaa !22
  %248 = load %struct.bufferCopy_type*, %struct.bufferCopy_type** %arrayidx594, align 8, !tbaa !1
  %i693 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %248, i64 %idxprom592, i32 5, i32 1
  store i32 %mul579, i32* %i693, align 4, !tbaa !17
  %j700 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %248, i64 %idxprom592, i32 5, i32 2
  store i32 %mul581, i32* %j700, align 8, !tbaa !18
  %k707 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %248, i64 %idxprom592, i32 5, i32 3
  store i32 %mul583, i32* %k707, align 4, !tbaa !19
  %pencil714 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %248, i64 %idxprom592, i32 5, i32 4
  store i32 %mul585, i32* %pencil714, align 8, !tbaa !20
  %plane721 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %248, i64 %idxprom592, i32 5, i32 5
  store i32 %mul588, i32* %plane721, align 4, !tbaa !21
  %249 = load i32, i32* %arrayidx723, align 4, !tbaa !35
  %isFace = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %248, i64 %idxprom592, i32 0
  store i32 %249, i32* %isFace, align 8, !tbaa !46
  %250 = load i32, i32* %arrayidx730, align 4, !tbaa !35
  %isEdge = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %248, i64 %idxprom592, i32 1
  store i32 %250, i32* %isEdge, align 4, !tbaa !47
  %251 = load i32, i32* %arrayidx737, align 4, !tbaa !35
  %isCorner = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %248, i64 %idxprom592, i32 2
  store i32 %251, i32* %isCorner, align 8, !tbaa !48
  br label %if.end743

if.end743:                                        ; preds = %if.then591, %sw.epilog577
  %inc744 = add nsw i32 %buffer.33332, 1
  br label %if.end745

if.end745:                                        ; preds = %if.end47.i3274, %if.then39.i3271, %if.end25.i3259, %if.then17.i3256, %if.end.i3248, %if.then.i3245, %calculate_neighboring_subdomain_rank.exit3309, %if.end743
  %grid_i.7 = phi i32 [ %grid_i.6, %if.end743 ], [ %grid_i.53326, %calculate_neighboring_subdomain_rank.exit3309 ], [ %grid_i.53326, %if.then.i3245 ], [ %grid_i.53326, %if.end.i3248 ], [ %grid_i.53326, %if.then17.i3256 ], [ %grid_i.53326, %if.end25.i3259 ], [ %grid_i.53326, %if.then39.i3271 ], [ %grid_i.53326, %if.end47.i3274 ]
  %grid_j.7 = phi i32 [ %grid_j.6, %if.end743 ], [ %grid_j.53327, %calculate_neighboring_subdomain_rank.exit3309 ], [ %grid_j.53327, %if.then.i3245 ], [ %grid_j.53327, %if.end.i3248 ], [ %grid_j.53327, %if.then17.i3256 ], [ %grid_j.53327, %if.end25.i3259 ], [ %grid_j.53327, %if.then39.i3271 ], [ %grid_j.53327, %if.end47.i3274 ]
  %grid_k.7 = phi i32 [ %grid_k.6, %if.end743 ], [ %grid_k.53328, %calculate_neighboring_subdomain_rank.exit3309 ], [ %grid_k.53328, %if.then.i3245 ], [ %grid_k.53328, %if.end.i3248 ], [ %grid_k.53328, %if.then17.i3256 ], [ %grid_k.53328, %if.end25.i3259 ], [ %grid_k.53328, %if.then39.i3271 ], [ %grid_k.53328, %if.end47.i3274 ]
  %dim_i.7 = phi i32 [ %dim_i.6, %if.end743 ], [ %dim_i.53329, %calculate_neighboring_subdomain_rank.exit3309 ], [ %dim_i.53329, %if.then.i3245 ], [ %dim_i.53329, %if.end.i3248 ], [ %dim_i.53329, %if.then17.i3256 ], [ %dim_i.53329, %if.end25.i3259 ], [ %dim_i.53329, %if.then39.i3271 ], [ %dim_i.53329, %if.end47.i3274 ]
  %dim_j.7 = phi i32 [ %dim_j.6, %if.end743 ], [ %dim_j.53330, %calculate_neighboring_subdomain_rank.exit3309 ], [ %dim_j.53330, %if.then.i3245 ], [ %dim_j.53330, %if.end.i3248 ], [ %dim_j.53330, %if.then17.i3256 ], [ %dim_j.53330, %if.end25.i3259 ], [ %dim_j.53330, %if.then39.i3271 ], [ %dim_j.53330, %if.end47.i3274 ]
  %dim_k.7 = phi i32 [ %dim_k.6, %if.end743 ], [ %dim_k.53331, %calculate_neighboring_subdomain_rank.exit3309 ], [ %dim_k.53331, %if.then.i3245 ], [ %dim_k.53331, %if.end.i3248 ], [ %dim_k.53331, %if.then17.i3256 ], [ %dim_k.53331, %if.end25.i3259 ], [ %dim_k.53331, %if.then39.i3271 ], [ %dim_k.53331, %if.end47.i3274 ]
  %buffer.4 = phi i32 [ %inc744, %if.end743 ], [ %buffer.33332, %calculate_neighboring_subdomain_rank.exit3309 ], [ %buffer.33332, %if.then.i3245 ], [ %buffer.33332, %if.end.i3248 ], [ %buffer.33332, %if.then17.i3256 ], [ %buffer.33332, %if.end25.i3259 ], [ %buffer.33332, %if.then39.i3271 ], [ %buffer.33332, %if.end47.i3274 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %sd_i_hi.3
  br i1 %exitcond, label %for.inc749.loopexit, label %for.body417

for.inc749.loopexit:                              ; preds = %if.end745
  %buffer.4.lcssa = phi i32 [ %buffer.4, %if.end745 ]
  %dim_k.7.lcssa = phi i32 [ %dim_k.7, %if.end745 ]
  %dim_j.7.lcssa = phi i32 [ %dim_j.7, %if.end745 ]
  %dim_i.7.lcssa = phi i32 [ %dim_i.7, %if.end745 ]
  %grid_k.7.lcssa = phi i32 [ %grid_k.7, %if.end745 ]
  %grid_j.7.lcssa = phi i32 [ %grid_j.7, %if.end745 ]
  %grid_i.7.lcssa = phi i32 [ %grid_i.7, %if.end745 ]
  br label %for.inc749

for.inc749:                                       ; preds = %for.inc749.loopexit, %for.cond414.preheader
  %buffer.3.lcssa = phi i32 [ %buffer.23348, %for.cond414.preheader ], [ %buffer.4.lcssa, %for.inc749.loopexit ]
  %dim_k.5.lcssa = phi i32 [ %dim_k.43347, %for.cond414.preheader ], [ %dim_k.7.lcssa, %for.inc749.loopexit ]
  %dim_j.5.lcssa = phi i32 [ %dim_j.43346, %for.cond414.preheader ], [ %dim_j.7.lcssa, %for.inc749.loopexit ]
  %dim_i.5.lcssa = phi i32 [ %dim_i.43345, %for.cond414.preheader ], [ %dim_i.7.lcssa, %for.inc749.loopexit ]
  %grid_k.5.lcssa = phi i32 [ %grid_k.43344, %for.cond414.preheader ], [ %grid_k.7.lcssa, %for.inc749.loopexit ]
  %grid_j.5.lcssa = phi i32 [ %grid_j.43343, %for.cond414.preheader ], [ %grid_j.7.lcssa, %for.inc749.loopexit ]
  %grid_i.5.lcssa = phi i32 [ %grid_i.43342, %for.cond414.preheader ], [ %grid_i.7.lcssa, %for.inc749.loopexit ]
  %inc750 = add nsw i32 %j.13349, 1
  %exitcond3715 = icmp eq i32 %inc750, %sd_j_hi.3
  br i1 %exitcond3715, label %for.inc752.loopexit, label %for.cond414.preheader

for.inc752.loopexit:                              ; preds = %for.inc749
  %grid_i.5.lcssa.lcssa = phi i32 [ %grid_i.5.lcssa, %for.inc749 ]
  %grid_j.5.lcssa.lcssa = phi i32 [ %grid_j.5.lcssa, %for.inc749 ]
  %grid_k.5.lcssa.lcssa = phi i32 [ %grid_k.5.lcssa, %for.inc749 ]
  %dim_i.5.lcssa.lcssa = phi i32 [ %dim_i.5.lcssa, %for.inc749 ]
  %dim_j.5.lcssa.lcssa = phi i32 [ %dim_j.5.lcssa, %for.inc749 ]
  %dim_k.5.lcssa.lcssa = phi i32 [ %dim_k.5.lcssa, %for.inc749 ]
  %buffer.3.lcssa.lcssa = phi i32 [ %buffer.3.lcssa, %for.inc749 ]
  br label %for.inc752

for.inc752:                                       ; preds = %for.inc752.loopexit, %for.cond410.preheader
  %buffer.2.lcssa = phi i32 [ %buffer.13365, %for.cond410.preheader ], [ %buffer.3.lcssa.lcssa, %for.inc752.loopexit ]
  %dim_k.4.lcssa = phi i32 [ %dim_k.33364, %for.cond410.preheader ], [ %dim_k.5.lcssa.lcssa, %for.inc752.loopexit ]
  %dim_j.4.lcssa = phi i32 [ %dim_j.33363, %for.cond410.preheader ], [ %dim_j.5.lcssa.lcssa, %for.inc752.loopexit ]
  %dim_i.4.lcssa = phi i32 [ %dim_i.33362, %for.cond410.preheader ], [ %dim_i.5.lcssa.lcssa, %for.inc752.loopexit ]
  %grid_k.4.lcssa = phi i32 [ %grid_k.33361, %for.cond410.preheader ], [ %grid_k.5.lcssa.lcssa, %for.inc752.loopexit ]
  %grid_j.4.lcssa = phi i32 [ %grid_j.33360, %for.cond410.preheader ], [ %grid_j.5.lcssa.lcssa, %for.inc752.loopexit ]
  %grid_i.4.lcssa = phi i32 [ %grid_i.33359, %for.cond410.preheader ], [ %grid_i.5.lcssa.lcssa, %for.inc752.loopexit ]
  %inc753 = add nsw i32 %k.13366, 1
  %exitcond3716 = icmp eq i32 %inc753, %sd_k_hi.33856
  br i1 %exitcond3716, label %for.end754.loopexit, label %for.cond410.preheader

for.end754.loopexit:                              ; preds = %for.inc752
  %grid_i.4.lcssa.lcssa = phi i32 [ %grid_i.4.lcssa, %for.inc752 ]
  %grid_j.4.lcssa.lcssa = phi i32 [ %grid_j.4.lcssa, %for.inc752 ]
  %grid_k.4.lcssa.lcssa = phi i32 [ %grid_k.4.lcssa, %for.inc752 ]
  %dim_i.4.lcssa.lcssa = phi i32 [ %dim_i.4.lcssa, %for.inc752 ]
  %dim_j.4.lcssa.lcssa = phi i32 [ %dim_j.4.lcssa, %for.inc752 ]
  %dim_k.4.lcssa.lcssa = phi i32 [ %dim_k.4.lcssa, %for.inc752 ]
  %buffer.2.lcssa.lcssa = phi i32 [ %buffer.2.lcssa, %for.inc752 ]
  br label %for.end754

for.end754:                                       ; preds = %for.end754.loopexit, %sw.epilog405
  %sd_k_lo.33858 = phi i32 [ %sd_k_lo.3, %sw.epilog405 ], [ %sd_k_lo.33857, %for.end754.loopexit ]
  %sd_k_hi.33855 = phi i32 [ %sd_k_hi.3, %sw.epilog405 ], [ %sd_k_hi.33856, %for.end754.loopexit ]
  %buffer.1.lcssa = phi i32 [ %buffer.03388, %sw.epilog405 ], [ %buffer.2.lcssa.lcssa, %for.end754.loopexit ]
  %dim_k.3.lcssa = phi i32 [ %dim_k.23381, %sw.epilog405 ], [ %dim_k.4.lcssa.lcssa, %for.end754.loopexit ]
  %dim_j.3.lcssa = phi i32 [ %dim_j.23380, %sw.epilog405 ], [ %dim_j.4.lcssa.lcssa, %for.end754.loopexit ]
  %dim_i.3.lcssa = phi i32 [ %dim_i.23379, %sw.epilog405 ], [ %dim_i.4.lcssa.lcssa, %for.end754.loopexit ]
  %grid_k.3.lcssa = phi i32 [ %grid_k.23378, %sw.epilog405 ], [ %grid_k.4.lcssa.lcssa, %for.end754.loopexit ]
  %grid_j.3.lcssa = phi i32 [ %grid_j.23377, %sw.epilog405 ], [ %grid_j.4.lcssa.lcssa, %for.end754.loopexit ]
  %grid_i.3.lcssa = phi i32 [ %grid_i.23376, %sw.epilog405 ], [ %grid_i.4.lcssa.lcssa, %for.end754.loopexit ]
  %indvars.iv.next3718 = add nuw nsw i64 %indvars.iv3717, 1
  %exitcond3719 = icmp eq i64 %indvars.iv.next3718, 26
  br i1 %exitcond3719, label %for.end757, label %for.body377

for.end757:                                       ; preds = %for.end754
  %grid_i.3.lcssa.lcssa = phi i32 [ %grid_i.3.lcssa, %for.end754 ]
  %grid_j.3.lcssa.lcssa = phi i32 [ %grid_j.3.lcssa, %for.end754 ]
  %grid_k.3.lcssa.lcssa = phi i32 [ %grid_k.3.lcssa, %for.end754 ]
  %dim_i.3.lcssa.lcssa = phi i32 [ %dim_i.3.lcssa, %for.end754 ]
  %dim_j.3.lcssa.lcssa = phi i32 [ %dim_j.3.lcssa, %for.end754 ]
  %dim_k.3.lcssa.lcssa = phi i32 [ %dim_k.3.lcssa, %for.end754 ]
  %buffer.1.lcssa.lcssa = phi i32 [ %buffer.1.lcssa, %for.end754 ]
  %sd_k_hi.33855.lcssa = phi i32 [ %sd_k_hi.33855, %for.end754 ]
  %sd_k_lo.33858.lcssa = phi i32 [ %sd_k_lo.33858, %for.end754 ]
  %sd_j_lo.3.lcssa = phi i32 [ %sd_j_lo.3, %for.end754 ]
  %sd_j_hi.3.lcssa = phi i32 [ %sd_j_hi.3, %for.end754 ]
  %sd_i_lo.3.lcssa = phi i32 [ %sd_i_lo.3, %for.end754 ]
  %sd_i_hi.3.lcssa = phi i32 [ %sd_i_hi.3, %for.end754 ]
  store i32 %buffer.1.lcssa.lcssa, i32* %bufferCopy_Pack_End, align 4, !tbaa !44
  store i32 %buffer.1.lcssa.lcssa, i32* %bufferCopy_Local_Start, align 8, !tbaa !50
  br label %for.body761

for.body761:                                      ; preds = %for.end1205, %for.end757
  %indvars.iv3727 = phi i64 [ 0, %for.end757 ], [ %indvars.iv.next3728, %for.end1205 ]
  %dim_k806.23467 = phi i32 [ %dim_k806.13570, %for.end757 ], [ %dim_k806.3.lcssa, %for.end1205 ]
  %dim_j805.23466 = phi i32 [ %dim_j805.13569, %for.end757 ], [ %dim_j805.3.lcssa, %for.end1205 ]
  %dim_i804.23465 = phi i32 [ %dim_i804.13568, %for.end757 ], [ %dim_i804.3.lcssa, %for.end1205 ]
  %recv_k.23464 = phi i32 [ %recv_k.13567, %for.end757 ], [ %recv_k.3.lcssa, %for.end1205 ]
  %recv_j.23463 = phi i32 [ %recv_j.13566, %for.end757 ], [ %recv_j.3.lcssa, %for.end1205 ]
  %recv_i.23462 = phi i32 [ %recv_i.13565, %for.end757 ], [ %recv_i.3.lcssa, %for.end1205 ]
  %send_k.23461 = phi i32 [ %send_k.13564, %for.end757 ], [ %send_k.3.lcssa, %for.end1205 ]
  %send_j.23460 = phi i32 [ %send_j.13563, %for.end757 ], [ %send_j.3.lcssa, %for.end1205 ]
  %send_i.23459 = phi i32 [ %send_i.13562, %for.end757 ], [ %send_i.3.lcssa, %for.end1205 ]
  %buffer.53458 = phi i32 [ %buffer.1.lcssa.lcssa, %for.end757 ], [ %buffer.6.lcssa, %for.end1205 ]
  %arrayidx764 = getelementptr inbounds [27 x i32], [27 x i32]* @create_domain.FacesEdgesCorners, i64 0, i64 %indvars.iv3727
  %252 = load i32, i32* %arrayidx764, align 4, !tbaa !35
  %rem767 = srem i32 %252, 3
  %sub768 = add nsw i32 %rem767, -1
  %div770 = sdiv i32 %252, 3
  %rem771 = srem i32 %div770, 3
  %sub772 = add nsw i32 %rem771, -1
  %div774 = sdiv i32 %252, 9
  %rem775 = srem i32 %div774, 3
  %sub776 = add nsw i32 %rem775, -1
  br i1 %cmp1983632, label %for.cond781.preheader.lr.ph, label %for.end1205

for.cond781.preheader.lr.ph:                      ; preds = %for.body761
  %idxprom1170 = sext i32 %252 to i64
  %arrayidx1171 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 %idxprom1170
  %arrayidx1179 = getelementptr inbounds [27 x i32], [27 x i32]* @create_domain.edges, i64 0, i64 %idxprom1170
  %arrayidx1187 = getelementptr inbounds [27 x i32], [27 x i32]* @create_domain.corners, i64 0, i64 %idxprom1170
  %253 = sext i32 %sub768 to i64
  br label %for.cond781.preheader

for.cond781.preheader:                            ; preds = %for.inc1203, %for.cond781.preheader.lr.ph
  %k.23445 = phi i32 [ 0, %for.cond781.preheader.lr.ph ], [ %inc1204, %for.inc1203 ]
  %dim_k806.33444 = phi i32 [ %dim_k806.23467, %for.cond781.preheader.lr.ph ], [ %dim_k806.4.lcssa, %for.inc1203 ]
  %dim_j805.33443 = phi i32 [ %dim_j805.23466, %for.cond781.preheader.lr.ph ], [ %dim_j805.4.lcssa, %for.inc1203 ]
  %dim_i804.33442 = phi i32 [ %dim_i804.23465, %for.cond781.preheader.lr.ph ], [ %dim_i804.4.lcssa, %for.inc1203 ]
  %recv_k.33441 = phi i32 [ %recv_k.23464, %for.cond781.preheader.lr.ph ], [ %recv_k.4.lcssa, %for.inc1203 ]
  %recv_j.33440 = phi i32 [ %recv_j.23463, %for.cond781.preheader.lr.ph ], [ %recv_j.4.lcssa, %for.inc1203 ]
  %recv_i.33439 = phi i32 [ %recv_i.23462, %for.cond781.preheader.lr.ph ], [ %recv_i.4.lcssa, %for.inc1203 ]
  %send_k.33438 = phi i32 [ %send_k.23461, %for.cond781.preheader.lr.ph ], [ %send_k.4.lcssa, %for.inc1203 ]
  %send_j.33437 = phi i32 [ %send_j.23460, %for.cond781.preheader.lr.ph ], [ %send_j.4.lcssa, %for.inc1203 ]
  %send_i.33436 = phi i32 [ %send_i.23459, %for.cond781.preheader.lr.ph ], [ %send_i.4.lcssa, %for.inc1203 ]
  %buffer.63435 = phi i32 [ %buffer.53458, %for.cond781.preheader.lr.ph ], [ %buffer.7.lcssa, %for.inc1203 ]
  br i1 %cmp7823411, label %for.cond785.preheader.lr.ph, label %for.inc1203

for.cond785.preheader.lr.ph:                      ; preds = %for.cond781.preheader
  %mul793 = mul i32 %k.23445, %subdomains_per_rank_in_j
  %.pre178.i3193 = add i32 %k.23445, %sub776
  %add91.lobit.i3223 = ashr i32 %.pre178.i3193, 31
  %dec94.rk.i3224 = add nsw i32 %add91.lobit.i3223, %div
  br label %for.cond785.preheader

for.cond785.preheader:                            ; preds = %for.inc1200, %for.cond785.preheader.lr.ph
  %j.23422 = phi i32 [ 0, %for.cond785.preheader.lr.ph ], [ %inc1201, %for.inc1200 ]
  %dim_k806.43421 = phi i32 [ %dim_k806.33444, %for.cond785.preheader.lr.ph ], [ %dim_k806.5.lcssa, %for.inc1200 ]
  %dim_j805.43420 = phi i32 [ %dim_j805.33443, %for.cond785.preheader.lr.ph ], [ %dim_j805.5.lcssa, %for.inc1200 ]
  %dim_i804.43419 = phi i32 [ %dim_i804.33442, %for.cond785.preheader.lr.ph ], [ %dim_i804.5.lcssa, %for.inc1200 ]
  %recv_k.43418 = phi i32 [ %recv_k.33441, %for.cond785.preheader.lr.ph ], [ %recv_k.5.lcssa, %for.inc1200 ]
  %recv_j.43417 = phi i32 [ %recv_j.33440, %for.cond785.preheader.lr.ph ], [ %recv_j.5.lcssa, %for.inc1200 ]
  %recv_i.43416 = phi i32 [ %recv_i.33439, %for.cond785.preheader.lr.ph ], [ %recv_i.5.lcssa, %for.inc1200 ]
  %send_k.43415 = phi i32 [ %send_k.33438, %for.cond785.preheader.lr.ph ], [ %send_k.5.lcssa, %for.inc1200 ]
  %send_j.43414 = phi i32 [ %send_j.33437, %for.cond785.preheader.lr.ph ], [ %send_j.5.lcssa, %for.inc1200 ]
  %send_i.43413 = phi i32 [ %send_i.33436, %for.cond785.preheader.lr.ph ], [ %send_i.5.lcssa, %for.inc1200 ]
  %buffer.73412 = phi i32 [ %buffer.63435, %for.cond785.preheader.lr.ph ], [ %buffer.8.lcssa, %for.inc1200 ]
  br i1 %cmp7863389, label %for.body788.lr.ph, label %for.inc1200

for.body788.lr.ph:                                ; preds = %for.cond785.preheader
  %tmp3321 = add i32 %j.23422, %mul793
  %tmp3322 = mul i32 %tmp3321, %subdomains_per_rank_in_i
  %add73.i3214 = add i32 %j.23422, %sub772
  %add73.lobit.i3215 = ashr i32 %add73.i3214, 31
  %dec76.rj.i3216 = add nsw i32 %add73.lobit.i3215, %div28
  br label %for.body788

for.body788:                                      ; preds = %if.end1196, %for.body788.lr.ph
  %indvars.iv3720 = phi i64 [ 0, %for.body788.lr.ph ], [ %indvars.iv.next3721, %if.end1196 ]
  %dim_k806.53399 = phi i32 [ %dim_k806.43421, %for.body788.lr.ph ], [ %dim_k806.7, %if.end1196 ]
  %dim_j805.53398 = phi i32 [ %dim_j805.43420, %for.body788.lr.ph ], [ %dim_j805.7, %if.end1196 ]
  %dim_i804.53397 = phi i32 [ %dim_i804.43419, %for.body788.lr.ph ], [ %dim_i804.7, %if.end1196 ]
  %recv_k.53396 = phi i32 [ %recv_k.43418, %for.body788.lr.ph ], [ %recv_k.7, %if.end1196 ]
  %recv_j.53395 = phi i32 [ %recv_j.43417, %for.body788.lr.ph ], [ %recv_j.7, %if.end1196 ]
  %recv_i.53394 = phi i32 [ %recv_i.43416, %for.body788.lr.ph ], [ %recv_i.7, %if.end1196 ]
  %send_k.53393 = phi i32 [ %send_k.43415, %for.body788.lr.ph ], [ %send_k.7, %if.end1196 ]
  %send_j.53392 = phi i32 [ %send_j.43414, %for.body788.lr.ph ], [ %send_j.7, %if.end1196 ]
  %send_i.53391 = phi i32 [ %send_i.43413, %for.body788.lr.ph ], [ %send_i.7, %if.end1196 ]
  %buffer.83390 = phi i32 [ %buffer.73412, %for.body788.lr.ph ], [ %buffer.9, %if.end1196 ]
  %254 = trunc i64 %indvars.iv3720 to i32
  %add794 = add i32 %254, %tmp3322
  %255 = load i64, i64* %140, align 8
  %256 = trunc i64 %255 to i32
  %cmp.i3167 = icmp eq i32 %256, 0
  br i1 %cmp.i3167, label %if.end14.i3178, label %if.then.i3173

if.then.i3173:                                    ; preds = %for.body788
  %257 = load i32, i32* %i39, align 8, !tbaa !106
  %mul.i3169 = mul nsw i32 %257, %sub33
  %add.i3170 = add i32 %254, %sub768
  %add2.i3171 = add i32 %add.i3170, %mul.i3169
  %cmp3.i3172 = icmp slt i32 %add2.i3171, 0
  br i1 %cmp3.i3172, label %calculate_neighboring_subdomain_rank.exit3237, label %if.end.i3176

if.end.i3176:                                     ; preds = %if.then.i3173
  %258 = load i32, i32* %i45, align 4, !tbaa !107
  %cmp11.i3175 = icmp slt i32 %add2.i3171, %258
  br i1 %cmp11.i3175, label %if.end14.i3178, label %calculate_neighboring_subdomain_rank.exit3237

if.end14.i3178:                                   ; preds = %if.end.i3176, %for.body788
  %cmp16.i3177 = icmp ult i64 %255, 4294967296
  br i1 %cmp16.i3177, label %if.end36.i3192, label %if.then17.i3184

if.then17.i3184:                                  ; preds = %if.end14.i3178
  %259 = load i32, i32* %j41, align 4, !tbaa !36
  %mul20.i3180 = mul nsw i32 %259, %div28
  %add22.i3182 = add i32 %add73.i3214, %mul20.i3180
  %cmp23.i3183 = icmp slt i32 %add22.i3182, 0
  br i1 %cmp23.i3183, label %calculate_neighboring_subdomain_rank.exit3237, label %if.end25.i3187

if.end25.i3187:                                   ; preds = %if.then17.i3184
  %260 = load i32, i32* %j48, align 4, !tbaa !108
  %cmp33.i3186 = icmp slt i32 %add22.i3182, %260
  br i1 %cmp33.i3186, label %if.end36.i3192, label %calculate_neighboring_subdomain_rank.exit3237

if.end36.i3192:                                   ; preds = %if.end25.i3187, %if.end14.i3178
  %261 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp38.i3189 = icmp eq i32 %261, 0
  %.pre.i3191 = load i32, i32* %k43, align 8, !tbaa !39
  br i1 %cmp38.i3189, label %if.end58.i3235, label %if.then39.i3199

if.then39.i3199:                                  ; preds = %if.end36.i3192
  %mul42.i3195 = mul nsw i32 %.pre.i3191, %div
  %add44.i3197 = add i32 %mul42.i3195, %.pre178.i3193
  %cmp45.i3198 = icmp slt i32 %add44.i3197, 0
  br i1 %cmp45.i3198, label %calculate_neighboring_subdomain_rank.exit3237, label %if.end47.i3202

if.end47.i3202:                                   ; preds = %if.then39.i3199
  %262 = load i32, i32* %k51, align 4, !tbaa !110
  %cmp55.i3201 = icmp slt i32 %add44.i3197, %262
  br i1 %cmp55.i3201, label %if.end58.i3235, label %calculate_neighboring_subdomain_rank.exit3237

if.end58.i3235:                                   ; preds = %if.end36.i3192, %if.end47.i3202
  %263 = add nsw i64 %indvars.iv3720, %253
  %264 = trunc i64 %263 to i32
  %add59.lobit.i3205 = ashr i32 %264, 31
  %dec.ri.i3206 = add nsw i32 %add59.lobit.i3205, %sub33
  %265 = load i64, i64* %141, align 8
  %sext3849 = shl i64 %265, 32
  %266 = ashr exact i64 %sext3849, 32
  %not.cmp66.i3208 = icmp sge i64 %263, %266
  %inc.i3209 = zext i1 %not.cmp66.i3208 to i32
  %267 = load i32, i32* %i34, align 4, !tbaa !111
  %ri.addr.1.i3211 = add i32 %dec.ri.i3206, %267
  %add70.i3212 = add i32 %ri.addr.1.i3211, %inc.i3209
  %rem.i3213 = srem i32 %add70.i3212, %267
  %268 = lshr i64 %265, 32
  %269 = trunc i64 %268 to i32
  %not.cmp81.i3217 = icmp sge i32 %add73.i3214, %269
  %inc83.i3218 = zext i1 %not.cmp81.i3217 to i32
  %270 = load i32, i32* %j36, align 4, !tbaa !112
  %rj.addr.1.i3220 = add i32 %dec76.rj.i3216, %270
  %add87.i3221 = add i32 %rj.addr.1.i3220, %inc83.i3218
  %rem90.i3222 = srem i32 %add87.i3221, %270
  %not.cmp99.i3225 = icmp sge i32 %.pre178.i3193, %.pre.i3191
  %inc101.i3226 = zext i1 %not.cmp99.i3225 to i32
  %271 = load i32, i32* %k38, align 4, !tbaa !113
  %rk.addr.1.i3228 = add i32 %dec94.rk.i3224, %inc101.i3226
  %add105.i3229 = add i32 %rk.addr.1.i3228, %271
  %rem108.i3230 = srem i32 %add105.i3229, %271
  %mul118.i3231 = mul i32 %rem108.i3230, %270
  %tmp.i3232 = add i32 %mul118.i3231, %rem90.i3222
  %tmp177.i3233 = mul i32 %tmp.i3232, %267
  %add119.i3234 = add i32 %tmp177.i3233, %rem.i3213
  br label %calculate_neighboring_subdomain_rank.exit3237

calculate_neighboring_subdomain_rank.exit3237:    ; preds = %if.then.i3173, %if.end.i3176, %if.then17.i3184, %if.end25.i3187, %if.then39.i3199, %if.end47.i3202, %if.end58.i3235
  %retval.0.i3236 = phi i32 [ %add119.i3234, %if.end58.i3235 ], [ -1, %if.then.i3173 ], [ -1, %if.end.i3176 ], [ -1, %if.then17.i3184 ], [ -1, %if.end25.i3187 ], [ -1, %if.then39.i3199 ], [ -1, %if.end47.i3202 ]
  %272 = load i32, i32* %rank1, align 4, !tbaa !41
  %cmp797 = icmp eq i32 %retval.0.i3236, %272
  br i1 %cmp797, label %if.then802, label %if.end1196

if.then802:                                       ; preds = %calculate_neighboring_subdomain_rank.exit3237
  %273 = load i64, i64* %141, align 8
  %274 = trunc i64 %273 to i32
  %add.i3152 = add i32 %254, %sub768
  %add1.i3153 = add i32 %add.i3152, %274
  %rem.i3154 = srem i32 %add1.i3153, %274
  %275 = lshr i64 %273, 32
  %276 = trunc i64 %275 to i32
  %add6.i3156 = add i32 %add73.i3214, %276
  %rem9.i3157 = srem i32 %add6.i3156, %276
  %277 = load i32, i32* %k43, align 8, !tbaa !39
  %add12.i3160 = add i32 %.pre178.i3193, %277
  %rem15.i3161 = srem i32 %add12.i3160, %277
  %mul24.i3162 = mul i32 %rem15.i3161, %276
  %tmp.i3163 = add i32 %mul24.i3162, %rem9.i3157
  %tmp38.i3164 = mul i32 %tmp.i3163, %274
  %add25.i3165 = add i32 %tmp38.i3164, %rem.i3154
  switch i32 %rem767, label %sw.epilog877 [
    i32 0, label %sw.bb807
    i32 1, label %sw.bb838
    i32 2, label %sw.bb861
  ]

sw.bb807:                                         ; preds = %if.then802
  %idxprom809 = sext i32 %add794 to i64
  %278 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels812 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %278, i64 %idxprom809, i32 5
  %279 = load %struct.box_type*, %struct.box_type** %levels812, align 8, !tbaa !28
  %ghosts814 = getelementptr inbounds %struct.box_type, %struct.box_type* %279, i64 %indvars.iv3743, i32 4
  %280 = load i32, i32* %ghosts814, align 4, !tbaa !38
  %idxprom823 = sext i32 %add25.i3165 to i64
  %levels826 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %278, i64 %idxprom823, i32 5
  %281 = load %struct.box_type*, %struct.box_type** %levels826, align 8, !tbaa !28
  %ghosts828 = getelementptr inbounds %struct.box_type, %struct.box_type* %281, i64 %indvars.iv3743, i32 4
  %282 = load i32, i32* %ghosts828, align 4, !tbaa !38
  %i836 = getelementptr inbounds %struct.box_type, %struct.box_type* %281, i64 %indvars.iv3743, i32 2, i32 0
  %283 = load i32, i32* %i836, align 4, !tbaa !43
  %add837 = add nsw i32 %283, %282
  br label %sw.epilog877

sw.bb838:                                         ; preds = %if.then802
  %idxprom840 = sext i32 %add794 to i64
  %284 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels843 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %284, i64 %idxprom840, i32 5
  %285 = load %struct.box_type*, %struct.box_type** %levels843, align 8, !tbaa !28
  %ghosts845 = getelementptr inbounds %struct.box_type, %struct.box_type* %285, i64 %indvars.iv3743, i32 4
  %286 = load i32, i32* %ghosts845, align 4, !tbaa !38
  %i853 = getelementptr inbounds %struct.box_type, %struct.box_type* %285, i64 %indvars.iv3743, i32 2, i32 0
  %287 = load i32, i32* %i853, align 4, !tbaa !43
  %idxprom855 = sext i32 %add25.i3165 to i64
  %levels858 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %284, i64 %idxprom855, i32 5
  %288 = load %struct.box_type*, %struct.box_type** %levels858, align 8, !tbaa !28
  %ghosts860 = getelementptr inbounds %struct.box_type, %struct.box_type* %288, i64 %indvars.iv3743, i32 4
  %289 = load i32, i32* %ghosts860, align 4, !tbaa !38
  br label %sw.epilog877

sw.bb861:                                         ; preds = %if.then802
  %idxprom863 = sext i32 %add794 to i64
  %290 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels866 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %290, i64 %idxprom863, i32 5
  %291 = load %struct.box_type*, %struct.box_type** %levels866, align 8, !tbaa !28
  %i869 = getelementptr inbounds %struct.box_type, %struct.box_type* %291, i64 %indvars.iv3743, i32 2, i32 0
  %292 = load i32, i32* %i869, align 4, !tbaa !43
  %ghosts876 = getelementptr inbounds %struct.box_type, %struct.box_type* %291, i64 %indvars.iv3743, i32 4
  %293 = load i32, i32* %ghosts876, align 4, !tbaa !38
  br label %sw.epilog877

sw.epilog877:                                     ; preds = %if.then802, %sw.bb861, %sw.bb838, %sw.bb807
  %send_i.6 = phi i32 [ %send_i.53391, %if.then802 ], [ %292, %sw.bb861 ], [ %286, %sw.bb838 ], [ %280, %sw.bb807 ]
  %recv_i.6 = phi i32 [ %recv_i.53394, %if.then802 ], [ 0, %sw.bb861 ], [ %289, %sw.bb838 ], [ %add837, %sw.bb807 ]
  %dim_i804.6 = phi i32 [ %dim_i804.53397, %if.then802 ], [ %293, %sw.bb861 ], [ %287, %sw.bb838 ], [ %280, %sw.bb807 ]
  switch i32 %rem771, label %sw.epilog948 [
    i32 0, label %sw.bb878
    i32 1, label %sw.bb909
    i32 2, label %sw.bb932
  ]

sw.bb878:                                         ; preds = %sw.epilog877
  %idxprom880 = sext i32 %add794 to i64
  %294 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels883 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %294, i64 %idxprom880, i32 5
  %295 = load %struct.box_type*, %struct.box_type** %levels883, align 8, !tbaa !28
  %ghosts885 = getelementptr inbounds %struct.box_type, %struct.box_type* %295, i64 %indvars.iv3743, i32 4
  %296 = load i32, i32* %ghosts885, align 4, !tbaa !38
  %idxprom894 = sext i32 %add25.i3165 to i64
  %levels897 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %294, i64 %idxprom894, i32 5
  %297 = load %struct.box_type*, %struct.box_type** %levels897, align 8, !tbaa !28
  %ghosts899 = getelementptr inbounds %struct.box_type, %struct.box_type* %297, i64 %indvars.iv3743, i32 4
  %298 = load i32, i32* %ghosts899, align 4, !tbaa !38
  %j907 = getelementptr inbounds %struct.box_type, %struct.box_type* %297, i64 %indvars.iv3743, i32 2, i32 1
  %299 = load i32, i32* %j907, align 4, !tbaa !37
  %add908 = add nsw i32 %299, %298
  br label %sw.epilog948

sw.bb909:                                         ; preds = %sw.epilog877
  %idxprom911 = sext i32 %add794 to i64
  %300 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels914 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %300, i64 %idxprom911, i32 5
  %301 = load %struct.box_type*, %struct.box_type** %levels914, align 8, !tbaa !28
  %ghosts916 = getelementptr inbounds %struct.box_type, %struct.box_type* %301, i64 %indvars.iv3743, i32 4
  %302 = load i32, i32* %ghosts916, align 4, !tbaa !38
  %j924 = getelementptr inbounds %struct.box_type, %struct.box_type* %301, i64 %indvars.iv3743, i32 2, i32 1
  %303 = load i32, i32* %j924, align 4, !tbaa !37
  %idxprom926 = sext i32 %add25.i3165 to i64
  %levels929 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %300, i64 %idxprom926, i32 5
  %304 = load %struct.box_type*, %struct.box_type** %levels929, align 8, !tbaa !28
  %ghosts931 = getelementptr inbounds %struct.box_type, %struct.box_type* %304, i64 %indvars.iv3743, i32 4
  %305 = load i32, i32* %ghosts931, align 4, !tbaa !38
  br label %sw.epilog948

sw.bb932:                                         ; preds = %sw.epilog877
  %idxprom934 = sext i32 %add794 to i64
  %306 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels937 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %306, i64 %idxprom934, i32 5
  %307 = load %struct.box_type*, %struct.box_type** %levels937, align 8, !tbaa !28
  %j940 = getelementptr inbounds %struct.box_type, %struct.box_type* %307, i64 %indvars.iv3743, i32 2, i32 1
  %308 = load i32, i32* %j940, align 4, !tbaa !37
  %ghosts947 = getelementptr inbounds %struct.box_type, %struct.box_type* %307, i64 %indvars.iv3743, i32 4
  %309 = load i32, i32* %ghosts947, align 4, !tbaa !38
  br label %sw.epilog948

sw.epilog948:                                     ; preds = %sw.epilog877, %sw.bb932, %sw.bb909, %sw.bb878
  %send_j.6 = phi i32 [ %send_j.53392, %sw.epilog877 ], [ %308, %sw.bb932 ], [ %302, %sw.bb909 ], [ %296, %sw.bb878 ]
  %recv_j.6 = phi i32 [ %recv_j.53395, %sw.epilog877 ], [ 0, %sw.bb932 ], [ %305, %sw.bb909 ], [ %add908, %sw.bb878 ]
  %dim_j805.6 = phi i32 [ %dim_j805.53398, %sw.epilog877 ], [ %309, %sw.bb932 ], [ %303, %sw.bb909 ], [ %296, %sw.bb878 ]
  switch i32 %rem775, label %sw.epilog1019 [
    i32 0, label %sw.bb949
    i32 1, label %sw.bb980
    i32 2, label %sw.bb1003
  ]

sw.bb949:                                         ; preds = %sw.epilog948
  %idxprom951 = sext i32 %add794 to i64
  %310 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels954 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %310, i64 %idxprom951, i32 5
  %311 = load %struct.box_type*, %struct.box_type** %levels954, align 8, !tbaa !28
  %ghosts956 = getelementptr inbounds %struct.box_type, %struct.box_type* %311, i64 %indvars.iv3743, i32 4
  %312 = load i32, i32* %ghosts956, align 4, !tbaa !38
  %idxprom965 = sext i32 %add25.i3165 to i64
  %levels968 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %310, i64 %idxprom965, i32 5
  %313 = load %struct.box_type*, %struct.box_type** %levels968, align 8, !tbaa !28
  %ghosts970 = getelementptr inbounds %struct.box_type, %struct.box_type* %313, i64 %indvars.iv3743, i32 4
  %314 = load i32, i32* %ghosts970, align 4, !tbaa !38
  %k978 = getelementptr inbounds %struct.box_type, %struct.box_type* %313, i64 %indvars.iv3743, i32 2, i32 2
  %315 = load i32, i32* %k978, align 4, !tbaa !40
  %add979 = add nsw i32 %315, %314
  br label %sw.epilog1019

sw.bb980:                                         ; preds = %sw.epilog948
  %idxprom982 = sext i32 %add794 to i64
  %316 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels985 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %316, i64 %idxprom982, i32 5
  %317 = load %struct.box_type*, %struct.box_type** %levels985, align 8, !tbaa !28
  %ghosts987 = getelementptr inbounds %struct.box_type, %struct.box_type* %317, i64 %indvars.iv3743, i32 4
  %318 = load i32, i32* %ghosts987, align 4, !tbaa !38
  %k995 = getelementptr inbounds %struct.box_type, %struct.box_type* %317, i64 %indvars.iv3743, i32 2, i32 2
  %319 = load i32, i32* %k995, align 4, !tbaa !40
  %idxprom997 = sext i32 %add25.i3165 to i64
  %levels1000 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %316, i64 %idxprom997, i32 5
  %320 = load %struct.box_type*, %struct.box_type** %levels1000, align 8, !tbaa !28
  %ghosts1002 = getelementptr inbounds %struct.box_type, %struct.box_type* %320, i64 %indvars.iv3743, i32 4
  %321 = load i32, i32* %ghosts1002, align 4, !tbaa !38
  br label %sw.epilog1019

sw.bb1003:                                        ; preds = %sw.epilog948
  %idxprom1005 = sext i32 %add794 to i64
  %322 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1008 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %322, i64 %idxprom1005, i32 5
  %323 = load %struct.box_type*, %struct.box_type** %levels1008, align 8, !tbaa !28
  %k1011 = getelementptr inbounds %struct.box_type, %struct.box_type* %323, i64 %indvars.iv3743, i32 2, i32 2
  %324 = load i32, i32* %k1011, align 4, !tbaa !40
  %ghosts1018 = getelementptr inbounds %struct.box_type, %struct.box_type* %323, i64 %indvars.iv3743, i32 4
  %325 = load i32, i32* %ghosts1018, align 4, !tbaa !38
  br label %sw.epilog1019

sw.epilog1019:                                    ; preds = %sw.epilog948, %sw.bb1003, %sw.bb980, %sw.bb949
  %send_k.6 = phi i32 [ %send_k.53393, %sw.epilog948 ], [ %324, %sw.bb1003 ], [ %318, %sw.bb980 ], [ %312, %sw.bb949 ]
  %recv_k.6 = phi i32 [ %recv_k.53396, %sw.epilog948 ], [ 0, %sw.bb1003 ], [ %321, %sw.bb980 ], [ %add979, %sw.bb949 ]
  %dim_k806.6 = phi i32 [ %dim_k806.53399, %sw.epilog948 ], [ %325, %sw.bb1003 ], [ %319, %sw.bb980 ], [ %312, %sw.bb949 ]
  br i1 %cmp589, label %if.then1022, label %if.end1194

if.then1022:                                      ; preds = %sw.epilog1019
  %idxprom1023 = sext i32 %buffer.83390 to i64
  %326 = load %struct.bufferCopy_type*, %struct.bufferCopy_type** %arrayidx594, align 8, !tbaa !1
  %i1029 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %326, i64 %idxprom1023, i32 3, i32 0
  store i32 %dim_i804.6, i32* %i1029, align 4, !tbaa !5
  %j1036 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %326, i64 %idxprom1023, i32 3, i32 1
  store i32 %dim_j805.6, i32* %j1036, align 4, !tbaa !10
  %k1043 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %326, i64 %idxprom1023, i32 3, i32 2
  store i32 %dim_k806.6, i32* %k1043, align 4, !tbaa !11
  %box1050 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %326, i64 %idxprom1023, i32 4, i32 0
  store i32 %add794, i32* %box1050, align 8, !tbaa !23
  %ptr1057 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %326, i64 %idxprom1023, i32 4, i32 6
  store double* null, double** %ptr1057, align 8, !tbaa !123
  %327 = load %struct.bufferCopy_type*, %struct.bufferCopy_type** %arrayidx594, align 8, !tbaa !1
  %i1064 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %327, i64 %idxprom1023, i32 4, i32 1
  store i32 %send_i.6, i32* %i1064, align 4, !tbaa !12
  %j1071 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %327, i64 %idxprom1023, i32 4, i32 2
  store i32 %send_j.6, i32* %j1071, align 8, !tbaa !13
  %k1078 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %327, i64 %idxprom1023, i32 4, i32 3
  store i32 %send_k.6, i32* %k1078, align 4, !tbaa !14
  %idxprom1080 = sext i32 %add794 to i64
  %328 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1083 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %328, i64 %idxprom1080, i32 5
  %329 = load %struct.box_type*, %struct.box_type** %levels1083, align 8, !tbaa !28
  %pencil1085 = getelementptr inbounds %struct.box_type, %struct.box_type* %329, i64 %indvars.iv3743, i32 5
  %330 = load i32, i32* %pencil1085, align 8, !tbaa !54
  %pencil1092 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %327, i64 %idxprom1023, i32 4, i32 4
  store i32 %330, i32* %pencil1092, align 8, !tbaa !15
  %plane1099 = getelementptr inbounds %struct.box_type, %struct.box_type* %329, i64 %indvars.iv3743, i32 6
  %331 = load i32, i32* %plane1099, align 4, !tbaa !55
  %plane1106 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %327, i64 %idxprom1023, i32 4, i32 5
  store i32 %331, i32* %plane1106, align 4, !tbaa !16
  %box1113 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %327, i64 %idxprom1023, i32 5, i32 0
  store i32 %add25.i3165, i32* %box1113, align 8, !tbaa !33
  %ptr1120 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %327, i64 %idxprom1023, i32 5, i32 6
  store double* null, double** %ptr1120, align 8, !tbaa !22
  %332 = load %struct.bufferCopy_type*, %struct.bufferCopy_type** %arrayidx594, align 8, !tbaa !1
  %i1127 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %332, i64 %idxprom1023, i32 5, i32 1
  store i32 %recv_i.6, i32* %i1127, align 4, !tbaa !17
  %j1134 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %332, i64 %idxprom1023, i32 5, i32 2
  store i32 %recv_j.6, i32* %j1134, align 8, !tbaa !18
  %k1141 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %332, i64 %idxprom1023, i32 5, i32 3
  store i32 %recv_k.6, i32* %k1141, align 4, !tbaa !19
  %idxprom1143 = sext i32 %add25.i3165 to i64
  %levels1146 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %328, i64 %idxprom1143, i32 5
  %333 = load %struct.box_type*, %struct.box_type** %levels1146, align 8, !tbaa !28
  %pencil1148 = getelementptr inbounds %struct.box_type, %struct.box_type* %333, i64 %indvars.iv3743, i32 5
  %334 = load i32, i32* %pencil1148, align 8, !tbaa !54
  %pencil1155 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %332, i64 %idxprom1023, i32 5, i32 4
  store i32 %334, i32* %pencil1155, align 8, !tbaa !20
  %plane1162 = getelementptr inbounds %struct.box_type, %struct.box_type* %333, i64 %indvars.iv3743, i32 6
  %335 = load i32, i32* %plane1162, align 4, !tbaa !55
  %plane1169 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %332, i64 %idxprom1023, i32 5, i32 5
  store i32 %335, i32* %plane1169, align 4, !tbaa !21
  %336 = load i32, i32* %arrayidx1171, align 4, !tbaa !35
  %isFace1177 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %332, i64 %idxprom1023, i32 0
  store i32 %336, i32* %isFace1177, align 8, !tbaa !46
  %337 = load i32, i32* %arrayidx1179, align 4, !tbaa !35
  %isEdge1185 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %332, i64 %idxprom1023, i32 1
  store i32 %337, i32* %isEdge1185, align 4, !tbaa !47
  %338 = load i32, i32* %arrayidx1187, align 4, !tbaa !35
  %isCorner1193 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %332, i64 %idxprom1023, i32 2
  store i32 %338, i32* %isCorner1193, align 8, !tbaa !48
  br label %if.end1194

if.end1194:                                       ; preds = %if.then1022, %sw.epilog1019
  %inc1195 = add nsw i32 %buffer.83390, 1
  br label %if.end1196

if.end1196:                                       ; preds = %if.end1194, %calculate_neighboring_subdomain_rank.exit3237
  %buffer.9 = phi i32 [ %inc1195, %if.end1194 ], [ %buffer.83390, %calculate_neighboring_subdomain_rank.exit3237 ]
  %send_i.7 = phi i32 [ %send_i.6, %if.end1194 ], [ %send_i.53391, %calculate_neighboring_subdomain_rank.exit3237 ]
  %send_j.7 = phi i32 [ %send_j.6, %if.end1194 ], [ %send_j.53392, %calculate_neighboring_subdomain_rank.exit3237 ]
  %send_k.7 = phi i32 [ %send_k.6, %if.end1194 ], [ %send_k.53393, %calculate_neighboring_subdomain_rank.exit3237 ]
  %recv_i.7 = phi i32 [ %recv_i.6, %if.end1194 ], [ %recv_i.53394, %calculate_neighboring_subdomain_rank.exit3237 ]
  %recv_j.7 = phi i32 [ %recv_j.6, %if.end1194 ], [ %recv_j.53395, %calculate_neighboring_subdomain_rank.exit3237 ]
  %recv_k.7 = phi i32 [ %recv_k.6, %if.end1194 ], [ %recv_k.53396, %calculate_neighboring_subdomain_rank.exit3237 ]
  %dim_i804.7 = phi i32 [ %dim_i804.6, %if.end1194 ], [ %dim_i804.53397, %calculate_neighboring_subdomain_rank.exit3237 ]
  %dim_j805.7 = phi i32 [ %dim_j805.6, %if.end1194 ], [ %dim_j805.53398, %calculate_neighboring_subdomain_rank.exit3237 ]
  %dim_k806.7 = phi i32 [ %dim_k806.6, %if.end1194 ], [ %dim_k806.53399, %calculate_neighboring_subdomain_rank.exit3237 ]
  %indvars.iv.next3721 = add nuw nsw i64 %indvars.iv3720, 1
  %lftr.wideiv3723 = trunc i64 %indvars.iv.next3721 to i32
  %exitcond3724 = icmp eq i32 %lftr.wideiv3723, %subdomains_per_rank_in_i
  br i1 %exitcond3724, label %for.inc1200.loopexit, label %for.body788

for.inc1200.loopexit:                             ; preds = %if.end1196
  %dim_k806.7.lcssa = phi i32 [ %dim_k806.7, %if.end1196 ]
  %dim_j805.7.lcssa = phi i32 [ %dim_j805.7, %if.end1196 ]
  %dim_i804.7.lcssa = phi i32 [ %dim_i804.7, %if.end1196 ]
  %recv_k.7.lcssa = phi i32 [ %recv_k.7, %if.end1196 ]
  %recv_j.7.lcssa = phi i32 [ %recv_j.7, %if.end1196 ]
  %recv_i.7.lcssa = phi i32 [ %recv_i.7, %if.end1196 ]
  %send_k.7.lcssa = phi i32 [ %send_k.7, %if.end1196 ]
  %send_j.7.lcssa = phi i32 [ %send_j.7, %if.end1196 ]
  %send_i.7.lcssa = phi i32 [ %send_i.7, %if.end1196 ]
  %buffer.9.lcssa = phi i32 [ %buffer.9, %if.end1196 ]
  br label %for.inc1200

for.inc1200:                                      ; preds = %for.inc1200.loopexit, %for.cond785.preheader
  %dim_k806.5.lcssa = phi i32 [ %dim_k806.43421, %for.cond785.preheader ], [ %dim_k806.7.lcssa, %for.inc1200.loopexit ]
  %dim_j805.5.lcssa = phi i32 [ %dim_j805.43420, %for.cond785.preheader ], [ %dim_j805.7.lcssa, %for.inc1200.loopexit ]
  %dim_i804.5.lcssa = phi i32 [ %dim_i804.43419, %for.cond785.preheader ], [ %dim_i804.7.lcssa, %for.inc1200.loopexit ]
  %recv_k.5.lcssa = phi i32 [ %recv_k.43418, %for.cond785.preheader ], [ %recv_k.7.lcssa, %for.inc1200.loopexit ]
  %recv_j.5.lcssa = phi i32 [ %recv_j.43417, %for.cond785.preheader ], [ %recv_j.7.lcssa, %for.inc1200.loopexit ]
  %recv_i.5.lcssa = phi i32 [ %recv_i.43416, %for.cond785.preheader ], [ %recv_i.7.lcssa, %for.inc1200.loopexit ]
  %send_k.5.lcssa = phi i32 [ %send_k.43415, %for.cond785.preheader ], [ %send_k.7.lcssa, %for.inc1200.loopexit ]
  %send_j.5.lcssa = phi i32 [ %send_j.43414, %for.cond785.preheader ], [ %send_j.7.lcssa, %for.inc1200.loopexit ]
  %send_i.5.lcssa = phi i32 [ %send_i.43413, %for.cond785.preheader ], [ %send_i.7.lcssa, %for.inc1200.loopexit ]
  %buffer.8.lcssa = phi i32 [ %buffer.73412, %for.cond785.preheader ], [ %buffer.9.lcssa, %for.inc1200.loopexit ]
  %inc1201 = add nuw nsw i32 %j.23422, 1
  %exitcond3725 = icmp eq i32 %inc1201, %subdomains_per_rank_in_j
  br i1 %exitcond3725, label %for.inc1203.loopexit, label %for.cond785.preheader

for.inc1203.loopexit:                             ; preds = %for.inc1200
  %buffer.8.lcssa.lcssa = phi i32 [ %buffer.8.lcssa, %for.inc1200 ]
  %send_i.5.lcssa.lcssa = phi i32 [ %send_i.5.lcssa, %for.inc1200 ]
  %send_j.5.lcssa.lcssa = phi i32 [ %send_j.5.lcssa, %for.inc1200 ]
  %send_k.5.lcssa.lcssa = phi i32 [ %send_k.5.lcssa, %for.inc1200 ]
  %recv_i.5.lcssa.lcssa = phi i32 [ %recv_i.5.lcssa, %for.inc1200 ]
  %recv_j.5.lcssa.lcssa = phi i32 [ %recv_j.5.lcssa, %for.inc1200 ]
  %recv_k.5.lcssa.lcssa = phi i32 [ %recv_k.5.lcssa, %for.inc1200 ]
  %dim_i804.5.lcssa.lcssa = phi i32 [ %dim_i804.5.lcssa, %for.inc1200 ]
  %dim_j805.5.lcssa.lcssa = phi i32 [ %dim_j805.5.lcssa, %for.inc1200 ]
  %dim_k806.5.lcssa.lcssa = phi i32 [ %dim_k806.5.lcssa, %for.inc1200 ]
  br label %for.inc1203

for.inc1203:                                      ; preds = %for.inc1203.loopexit, %for.cond781.preheader
  %dim_k806.4.lcssa = phi i32 [ %dim_k806.33444, %for.cond781.preheader ], [ %dim_k806.5.lcssa.lcssa, %for.inc1203.loopexit ]
  %dim_j805.4.lcssa = phi i32 [ %dim_j805.33443, %for.cond781.preheader ], [ %dim_j805.5.lcssa.lcssa, %for.inc1203.loopexit ]
  %dim_i804.4.lcssa = phi i32 [ %dim_i804.33442, %for.cond781.preheader ], [ %dim_i804.5.lcssa.lcssa, %for.inc1203.loopexit ]
  %recv_k.4.lcssa = phi i32 [ %recv_k.33441, %for.cond781.preheader ], [ %recv_k.5.lcssa.lcssa, %for.inc1203.loopexit ]
  %recv_j.4.lcssa = phi i32 [ %recv_j.33440, %for.cond781.preheader ], [ %recv_j.5.lcssa.lcssa, %for.inc1203.loopexit ]
  %recv_i.4.lcssa = phi i32 [ %recv_i.33439, %for.cond781.preheader ], [ %recv_i.5.lcssa.lcssa, %for.inc1203.loopexit ]
  %send_k.4.lcssa = phi i32 [ %send_k.33438, %for.cond781.preheader ], [ %send_k.5.lcssa.lcssa, %for.inc1203.loopexit ]
  %send_j.4.lcssa = phi i32 [ %send_j.33437, %for.cond781.preheader ], [ %send_j.5.lcssa.lcssa, %for.inc1203.loopexit ]
  %send_i.4.lcssa = phi i32 [ %send_i.33436, %for.cond781.preheader ], [ %send_i.5.lcssa.lcssa, %for.inc1203.loopexit ]
  %buffer.7.lcssa = phi i32 [ %buffer.63435, %for.cond781.preheader ], [ %buffer.8.lcssa.lcssa, %for.inc1203.loopexit ]
  %inc1204 = add nuw nsw i32 %k.23445, 1
  %exitcond3726 = icmp eq i32 %inc1204, %subdomains_per_rank_in_k
  br i1 %exitcond3726, label %for.end1205.loopexit, label %for.cond781.preheader

for.end1205.loopexit:                             ; preds = %for.inc1203
  %buffer.7.lcssa.lcssa = phi i32 [ %buffer.7.lcssa, %for.inc1203 ]
  %send_i.4.lcssa.lcssa = phi i32 [ %send_i.4.lcssa, %for.inc1203 ]
  %send_j.4.lcssa.lcssa = phi i32 [ %send_j.4.lcssa, %for.inc1203 ]
  %send_k.4.lcssa.lcssa = phi i32 [ %send_k.4.lcssa, %for.inc1203 ]
  %recv_i.4.lcssa.lcssa = phi i32 [ %recv_i.4.lcssa, %for.inc1203 ]
  %recv_j.4.lcssa.lcssa = phi i32 [ %recv_j.4.lcssa, %for.inc1203 ]
  %recv_k.4.lcssa.lcssa = phi i32 [ %recv_k.4.lcssa, %for.inc1203 ]
  %dim_i804.4.lcssa.lcssa = phi i32 [ %dim_i804.4.lcssa, %for.inc1203 ]
  %dim_j805.4.lcssa.lcssa = phi i32 [ %dim_j805.4.lcssa, %for.inc1203 ]
  %dim_k806.4.lcssa.lcssa = phi i32 [ %dim_k806.4.lcssa, %for.inc1203 ]
  br label %for.end1205

for.end1205:                                      ; preds = %for.end1205.loopexit, %for.body761
  %dim_k806.3.lcssa = phi i32 [ %dim_k806.23467, %for.body761 ], [ %dim_k806.4.lcssa.lcssa, %for.end1205.loopexit ]
  %dim_j805.3.lcssa = phi i32 [ %dim_j805.23466, %for.body761 ], [ %dim_j805.4.lcssa.lcssa, %for.end1205.loopexit ]
  %dim_i804.3.lcssa = phi i32 [ %dim_i804.23465, %for.body761 ], [ %dim_i804.4.lcssa.lcssa, %for.end1205.loopexit ]
  %recv_k.3.lcssa = phi i32 [ %recv_k.23464, %for.body761 ], [ %recv_k.4.lcssa.lcssa, %for.end1205.loopexit ]
  %recv_j.3.lcssa = phi i32 [ %recv_j.23463, %for.body761 ], [ %recv_j.4.lcssa.lcssa, %for.end1205.loopexit ]
  %recv_i.3.lcssa = phi i32 [ %recv_i.23462, %for.body761 ], [ %recv_i.4.lcssa.lcssa, %for.end1205.loopexit ]
  %send_k.3.lcssa = phi i32 [ %send_k.23461, %for.body761 ], [ %send_k.4.lcssa.lcssa, %for.end1205.loopexit ]
  %send_j.3.lcssa = phi i32 [ %send_j.23460, %for.body761 ], [ %send_j.4.lcssa.lcssa, %for.end1205.loopexit ]
  %send_i.3.lcssa = phi i32 [ %send_i.23459, %for.body761 ], [ %send_i.4.lcssa.lcssa, %for.end1205.loopexit ]
  %buffer.6.lcssa = phi i32 [ %buffer.53458, %for.body761 ], [ %buffer.7.lcssa.lcssa, %for.end1205.loopexit ]
  %indvars.iv.next3728 = add nuw nsw i64 %indvars.iv3727, 1
  %exitcond3729 = icmp eq i64 %indvars.iv.next3728, 26
  br i1 %exitcond3729, label %for.end1208, label %for.body761

for.end1208:                                      ; preds = %for.end1205
  %buffer.6.lcssa.lcssa = phi i32 [ %buffer.6.lcssa, %for.end1205 ]
  %send_i.3.lcssa.lcssa = phi i32 [ %send_i.3.lcssa, %for.end1205 ]
  %send_j.3.lcssa.lcssa = phi i32 [ %send_j.3.lcssa, %for.end1205 ]
  %send_k.3.lcssa.lcssa = phi i32 [ %send_k.3.lcssa, %for.end1205 ]
  %recv_i.3.lcssa.lcssa = phi i32 [ %recv_i.3.lcssa, %for.end1205 ]
  %recv_j.3.lcssa.lcssa = phi i32 [ %recv_j.3.lcssa, %for.end1205 ]
  %recv_k.3.lcssa.lcssa = phi i32 [ %recv_k.3.lcssa, %for.end1205 ]
  %dim_i804.3.lcssa.lcssa = phi i32 [ %dim_i804.3.lcssa, %for.end1205 ]
  %dim_j805.3.lcssa.lcssa = phi i32 [ %dim_j805.3.lcssa, %for.end1205 ]
  %dim_k806.3.lcssa.lcssa = phi i32 [ %dim_k806.3.lcssa, %for.end1205 ]
  store i32 %buffer.6.lcssa.lcssa, i32* %bufferCopy_Local_End, align 4, !tbaa !49
  store i32 %buffer.6.lcssa.lcssa, i32* %bufferCopy_Unpack_Start, align 8, !tbaa !52
  br label %for.body1212

for.body1212:                                     ; preds = %for.end1848, %for.end1208
  %indvars.iv3739 = phi i64 [ 0, %for.end1208 ], [ %indvars.iv.next3740, %for.end1848 ]
  %buf_k1306.23547 = phi i32 [ %buf_k1306.13579, %for.end1208 ], [ %buf_k1306.3.lcssa, %for.end1848 ]
  %buf_j1305.23546 = phi i32 [ %buf_j1305.13578, %for.end1208 ], [ %buf_j1305.3.lcssa, %for.end1848 ]
  %buf_i1304.23545 = phi i32 [ %buf_i1304.13577, %for.end1208 ], [ %buf_i1304.3.lcssa, %for.end1848 ]
  %grid_k1303.23544 = phi i32 [ %grid_k1303.13576, %for.end1208 ], [ %grid_k1303.3.lcssa, %for.end1848 ]
  %grid_j1302.23543 = phi i32 [ %grid_j1302.13575, %for.end1208 ], [ %grid_j1302.3.lcssa, %for.end1848 ]
  %grid_i1301.23542 = phi i32 [ %grid_i1301.13574, %for.end1208 ], [ %grid_i1301.3.lcssa, %for.end1848 ]
  %dim_k1300.23541 = phi i32 [ %dim_k1300.13573, %for.end1208 ], [ %dim_k1300.3.lcssa, %for.end1848 ]
  %dim_j1299.23540 = phi i32 [ %dim_j1299.13572, %for.end1208 ], [ %dim_j1299.3.lcssa, %for.end1848 ]
  %dim_i1298.23539 = phi i32 [ %dim_i1298.13571, %for.end1208 ], [ %dim_i1298.3.lcssa, %for.end1848 ]
  %buffer.103538 = phi i32 [ %buffer.6.lcssa.lcssa, %for.end1208 ], [ %buffer.11.lcssa, %for.end1848 ]
  %arrayidx1215 = getelementptr inbounds [27 x i32], [27 x i32]* @create_domain.FacesEdgesCorners, i64 0, i64 %indvars.iv3739
  %339 = load i32, i32* %arrayidx1215, align 4, !tbaa !35
  %rem1218 = srem i32 %339, 3
  %sub1219 = add nsw i32 %rem1218, -1
  %div1221 = sdiv i32 %339, 3
  %rem1222 = srem i32 %div1221, 3
  %sub1223 = add nsw i32 %rem1222, -1
  %div1225 = sdiv i32 %339, 9
  %rem1226 = srem i32 %div1225, 3
  %sub1227 = add nsw i32 %rem1226, -1
  br i1 %cmp1983632, label %for.cond1232.preheader.lr.ph, label %for.end1848

for.cond1232.preheader.lr.ph:                     ; preds = %for.body1212
  %cmp1577 = icmp slt i32 %rem1218, 1
  %cmp1589 = icmp sgt i32 %rem1218, 1
  %cmp1612 = icmp slt i32 %rem1222, 1
  %cmp1624 = icmp sgt i32 %rem1222, 1
  %cmp1647 = icmp slt i32 %rem1226, 1
  %cmp1659 = icmp sgt i32 %rem1226, 1
  %idxprom1813 = sext i32 %339 to i64
  %arrayidx1814 = getelementptr inbounds [27 x i32], [27 x i32]* %faces, i64 0, i64 %idxprom1813
  %arrayidx1822 = getelementptr inbounds [27 x i32], [27 x i32]* @create_domain.edges, i64 0, i64 %idxprom1813
  %arrayidx1830 = getelementptr inbounds [27 x i32], [27 x i32]* @create_domain.corners, i64 0, i64 %idxprom1813
  %340 = sext i32 %sub1219 to i64
  br label %for.cond1232.preheader

for.cond1232.preheader:                           ; preds = %for.inc1846, %for.cond1232.preheader.lr.ph
  %buf_k1306.33526 = phi i32 [ %buf_k1306.23547, %for.cond1232.preheader.lr.ph ], [ %buf_k1306.4.lcssa, %for.inc1846 ]
  %buf_j1305.33525 = phi i32 [ %buf_j1305.23546, %for.cond1232.preheader.lr.ph ], [ %buf_j1305.4.lcssa, %for.inc1846 ]
  %buf_i1304.33524 = phi i32 [ %buf_i1304.23545, %for.cond1232.preheader.lr.ph ], [ %buf_i1304.4.lcssa, %for.inc1846 ]
  %grid_k1303.33523 = phi i32 [ %grid_k1303.23544, %for.cond1232.preheader.lr.ph ], [ %grid_k1303.4.lcssa, %for.inc1846 ]
  %grid_j1302.33522 = phi i32 [ %grid_j1302.23543, %for.cond1232.preheader.lr.ph ], [ %grid_j1302.4.lcssa, %for.inc1846 ]
  %grid_i1301.33521 = phi i32 [ %grid_i1301.23542, %for.cond1232.preheader.lr.ph ], [ %grid_i1301.4.lcssa, %for.inc1846 ]
  %dim_k1300.33520 = phi i32 [ %dim_k1300.23541, %for.cond1232.preheader.lr.ph ], [ %dim_k1300.4.lcssa, %for.inc1846 ]
  %dim_j1299.33519 = phi i32 [ %dim_j1299.23540, %for.cond1232.preheader.lr.ph ], [ %dim_j1299.4.lcssa, %for.inc1846 ]
  %dim_i1298.33518 = phi i32 [ %dim_i1298.23539, %for.cond1232.preheader.lr.ph ], [ %dim_i1298.4.lcssa, %for.inc1846 ]
  %k.33516 = phi i32 [ 0, %for.cond1232.preheader.lr.ph ], [ %inc1847, %for.inc1846 ]
  %buffer.113515 = phi i32 [ %buffer.103538, %for.cond1232.preheader.lr.ph ], [ %buffer.12.lcssa, %for.inc1846 ]
  br i1 %cmp7823411, label %for.cond1236.preheader.lr.ph, label %for.inc1846

for.cond1236.preheader.lr.ph:                     ; preds = %for.cond1232.preheader
  %mul1244 = mul i32 %k.33516, %subdomains_per_rank_in_j
  %.pre178.i3106 = add i32 %k.33516, %sub1227
  %cmp1283 = icmp slt i32 %.pre178.i3106, 0
  %cmp1288 = icmp slt i32 %.pre178.i3106, %subdomains_per_rank_in_k
  %341 = zext i1 %cmp1288 to i32
  %.2920 = xor i32 %341, 1
  %_dk.0 = select i1 %cmp1283, i32 -1, i32 %.2920
  %mul1296 = mul nsw i32 %_dk.0, 9
  %add1293 = add i32 %mul1296, 13
  %cmp1640 = icmp sgt i32 %.pre178.i3106, -1
  %or.cond2923 = and i1 %cmp1640, %cmp1288
  %add91.lobit.i3136 = ashr i32 %.pre178.i3106, 31
  %dec94.rk.i3137 = add nsw i32 %add91.lobit.i3136, %div
  %add91.lobit.i3064 = ashr i32 %.pre178.i3106, 31
  %dec94.rk.i3065 = add nsw i32 %add91.lobit.i3064, %div
  br label %for.cond1236.preheader

for.cond1236.preheader:                           ; preds = %for.inc1843, %for.cond1236.preheader.lr.ph
  %buf_k1306.43503 = phi i32 [ %buf_k1306.33526, %for.cond1236.preheader.lr.ph ], [ %buf_k1306.5.lcssa, %for.inc1843 ]
  %buf_j1305.43502 = phi i32 [ %buf_j1305.33525, %for.cond1236.preheader.lr.ph ], [ %buf_j1305.5.lcssa, %for.inc1843 ]
  %buf_i1304.43501 = phi i32 [ %buf_i1304.33524, %for.cond1236.preheader.lr.ph ], [ %buf_i1304.5.lcssa, %for.inc1843 ]
  %grid_k1303.43500 = phi i32 [ %grid_k1303.33523, %for.cond1236.preheader.lr.ph ], [ %grid_k1303.5.lcssa, %for.inc1843 ]
  %grid_j1302.43499 = phi i32 [ %grid_j1302.33522, %for.cond1236.preheader.lr.ph ], [ %grid_j1302.5.lcssa, %for.inc1843 ]
  %grid_i1301.43498 = phi i32 [ %grid_i1301.33521, %for.cond1236.preheader.lr.ph ], [ %grid_i1301.5.lcssa, %for.inc1843 ]
  %dim_k1300.43497 = phi i32 [ %dim_k1300.33520, %for.cond1236.preheader.lr.ph ], [ %dim_k1300.5.lcssa, %for.inc1843 ]
  %dim_j1299.43496 = phi i32 [ %dim_j1299.33519, %for.cond1236.preheader.lr.ph ], [ %dim_j1299.5.lcssa, %for.inc1843 ]
  %dim_i1298.43495 = phi i32 [ %dim_i1298.33518, %for.cond1236.preheader.lr.ph ], [ %dim_i1298.5.lcssa, %for.inc1843 ]
  %j.33493 = phi i32 [ 0, %for.cond1236.preheader.lr.ph ], [ %inc1844, %for.inc1843 ]
  %buffer.123492 = phi i32 [ %buffer.113515, %for.cond1236.preheader.lr.ph ], [ %buffer.13.lcssa, %for.inc1843 ]
  br i1 %cmp7863389, label %for.body1239.lr.ph, label %for.inc1843

for.body1239.lr.ph:                               ; preds = %for.cond1236.preheader
  %tmp3323 = add i32 %j.33493, %mul1244
  %tmp3324 = mul i32 %tmp3323, %subdomains_per_rank_in_i
  %add73.i3127 = add i32 %j.33493, %sub1223
  %add73.lobit.i3128 = ashr i32 %add73.i3127, 31
  %dec76.rj.i3129 = add nsw i32 %add73.lobit.i3128, %div28
  %cmp1272 = icmp slt i32 %add73.i3127, 0
  %cmp1277 = icmp slt i32 %add73.i3127, %subdomains_per_rank_in_j
  %342 = zext i1 %cmp1277 to i32
  %.2919 = xor i32 %342, 1
  %_dj.0 = select i1 %cmp1272, i32 -1, i32 %.2919
  %mul1294 = mul nsw i32 %_dj.0, 3
  %add1295 = add i32 %add1293, %mul1294
  %cmp1605 = icmp sgt i32 %add73.i3127, -1
  %or.cond2922 = and i1 %cmp1605, %cmp1277
  br label %for.body1239

for.body1239:                                     ; preds = %if.end1839, %for.body1239.lr.ph
  %indvars.iv3730 = phi i64 [ 0, %for.body1239.lr.ph ], [ %indvars.iv.next3731, %if.end1839 ]
  %buf_k1306.53480 = phi i32 [ %buf_k1306.43503, %for.body1239.lr.ph ], [ %buf_k1306.8, %if.end1839 ]
  %buf_j1305.53479 = phi i32 [ %buf_j1305.43502, %for.body1239.lr.ph ], [ %buf_j1305.8, %if.end1839 ]
  %buf_i1304.53478 = phi i32 [ %buf_i1304.43501, %for.body1239.lr.ph ], [ %buf_i1304.8, %if.end1839 ]
  %grid_k1303.53477 = phi i32 [ %grid_k1303.43500, %for.body1239.lr.ph ], [ %grid_k1303.7, %if.end1839 ]
  %grid_j1302.53476 = phi i32 [ %grid_j1302.43499, %for.body1239.lr.ph ], [ %grid_j1302.7, %if.end1839 ]
  %grid_i1301.53475 = phi i32 [ %grid_i1301.43498, %for.body1239.lr.ph ], [ %grid_i1301.7, %if.end1839 ]
  %dim_k1300.53474 = phi i32 [ %dim_k1300.43497, %for.body1239.lr.ph ], [ %dim_k1300.7, %if.end1839 ]
  %dim_j1299.53473 = phi i32 [ %dim_j1299.43496, %for.body1239.lr.ph ], [ %dim_j1299.7, %if.end1839 ]
  %dim_i1298.53472 = phi i32 [ %dim_i1298.43495, %for.body1239.lr.ph ], [ %dim_i1298.7, %if.end1839 ]
  %buffer.133469 = phi i32 [ %buffer.123492, %for.body1239.lr.ph ], [ %buffer.14, %if.end1839 ]
  %343 = trunc i64 %indvars.iv3730 to i32
  %add1245 = add i32 %343, %tmp3324
  %344 = load i64, i64* %140, align 8
  %345 = trunc i64 %344 to i32
  %cmp.i3080 = icmp eq i32 %345, 0
  br i1 %cmp.i3080, label %if.end14.i3091, label %if.then.i3086

if.then.i3086:                                    ; preds = %for.body1239
  %346 = load i32, i32* %i39, align 8, !tbaa !106
  %mul.i3082 = mul nsw i32 %346, %sub33
  %add.i3083 = add i32 %343, %sub1219
  %add2.i3084 = add i32 %add.i3083, %mul.i3082
  %cmp3.i3085 = icmp slt i32 %add2.i3084, 0
  br i1 %cmp3.i3085, label %calculate_neighboring_subdomain_rank.exit3150.thread, label %if.end.i3089

if.end.i3089:                                     ; preds = %if.then.i3086
  %347 = load i32, i32* %i45, align 4, !tbaa !107
  %cmp11.i3088 = icmp slt i32 %add2.i3084, %347
  br i1 %cmp11.i3088, label %if.end14.i3091, label %calculate_neighboring_subdomain_rank.exit3150.thread

if.end14.i3091:                                   ; preds = %if.end.i3089, %for.body1239
  %cmp16.i3090 = icmp ult i64 %344, 4294967296
  br i1 %cmp16.i3090, label %if.end36.i3105, label %if.then17.i3097

if.then17.i3097:                                  ; preds = %if.end14.i3091
  %348 = load i32, i32* %j41, align 4, !tbaa !36
  %mul20.i3093 = mul nsw i32 %348, %div28
  %add22.i3095 = add i32 %add73.i3127, %mul20.i3093
  %cmp23.i3096 = icmp slt i32 %add22.i3095, 0
  br i1 %cmp23.i3096, label %calculate_neighboring_subdomain_rank.exit3150, label %if.end25.i3100

if.end25.i3100:                                   ; preds = %if.then17.i3097
  %349 = load i32, i32* %j48, align 4, !tbaa !108
  %cmp33.i3099 = icmp slt i32 %add22.i3095, %349
  br i1 %cmp33.i3099, label %if.end36.i3105, label %calculate_neighboring_subdomain_rank.exit3150

if.end36.i3105:                                   ; preds = %if.end25.i3100, %if.end14.i3091
  %350 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp38.i3102 = icmp eq i32 %350, 0
  %.pre.i3104 = load i32, i32* %k43, align 8, !tbaa !39
  br i1 %cmp38.i3102, label %if.end58.i3148, label %if.then39.i3112

if.then39.i3112:                                  ; preds = %if.end36.i3105
  %mul42.i3108 = mul nsw i32 %.pre.i3104, %div
  %add44.i3110 = add i32 %mul42.i3108, %.pre178.i3106
  %cmp45.i3111 = icmp slt i32 %add44.i3110, 0
  br i1 %cmp45.i3111, label %calculate_neighboring_subdomain_rank.exit3150, label %if.end47.i3115

if.end47.i3115:                                   ; preds = %if.then39.i3112
  %351 = load i32, i32* %k51, align 4, !tbaa !110
  %cmp55.i3114 = icmp slt i32 %add44.i3110, %351
  br i1 %cmp55.i3114, label %if.end58.i3148, label %calculate_neighboring_subdomain_rank.exit3150

if.end58.i3148:                                   ; preds = %if.end36.i3105, %if.end47.i3115
  %352 = add nsw i64 %indvars.iv3730, %340
  %353 = trunc i64 %352 to i32
  %add59.lobit.i3118 = ashr i32 %353, 31
  %dec.ri.i3119 = add nsw i32 %add59.lobit.i3118, %sub33
  %354 = load i64, i64* %141, align 8
  %sext3848 = shl i64 %354, 32
  %355 = ashr exact i64 %sext3848, 32
  %not.cmp66.i3121 = icmp sge i64 %352, %355
  %inc.i3122 = zext i1 %not.cmp66.i3121 to i32
  %356 = load i32, i32* %i34, align 4, !tbaa !111
  %ri.addr.1.i3124 = add i32 %dec.ri.i3119, %356
  %add70.i3125 = add i32 %ri.addr.1.i3124, %inc.i3122
  %rem.i3126 = srem i32 %add70.i3125, %356
  %357 = lshr i64 %354, 32
  %358 = trunc i64 %357 to i32
  %not.cmp81.i3130 = icmp sge i32 %add73.i3127, %358
  %inc83.i3131 = zext i1 %not.cmp81.i3130 to i32
  %359 = load i32, i32* %j36, align 4, !tbaa !112
  %rj.addr.1.i3133 = add i32 %dec76.rj.i3129, %359
  %add87.i3134 = add i32 %rj.addr.1.i3133, %inc83.i3131
  %rem90.i3135 = srem i32 %add87.i3134, %359
  %not.cmp99.i3138 = icmp sge i32 %.pre178.i3106, %.pre.i3104
  %inc101.i3139 = zext i1 %not.cmp99.i3138 to i32
  %360 = load i32, i32* %k38, align 4, !tbaa !113
  %rk.addr.1.i3141 = add i32 %dec94.rk.i3137, %inc101.i3139
  %add105.i3142 = add i32 %rk.addr.1.i3141, %360
  %rem108.i3143 = srem i32 %add105.i3142, %360
  %mul118.i3144 = mul i32 %rem108.i3143, %359
  %tmp.i3145 = add i32 %mul118.i3144, %rem90.i3135
  %tmp177.i3146 = mul i32 %tmp.i3145, %356
  %add119.i3147 = add i32 %tmp177.i3146, %rem.i3126
  br label %calculate_neighboring_subdomain_rank.exit3150

calculate_neighboring_subdomain_rank.exit3150.thread: ; preds = %if.then.i3086, %if.end.i3089
  %361 = load i32, i32* %rank1, align 4, !tbaa !41
  br label %if.then.i3014

calculate_neighboring_subdomain_rank.exit3150:    ; preds = %if.then17.i3097, %if.end25.i3100, %if.then39.i3112, %if.end47.i3115, %if.end58.i3148
  %retval.0.i3149 = phi i32 [ %add119.i3147, %if.end58.i3148 ], [ -1, %if.then17.i3097 ], [ -1, %if.end25.i3100 ], [ -1, %if.then39.i3112 ], [ -1, %if.end47.i3115 ]
  %362 = load i32, i32* %rank1, align 4, !tbaa !41
  br i1 %cmp.i3080, label %if.end14.i3019, label %if.then.i3014

if.then.i3014:                                    ; preds = %calculate_neighboring_subdomain_rank.exit3150.thread, %calculate_neighboring_subdomain_rank.exit3150
  %363 = phi i32 [ %361, %calculate_neighboring_subdomain_rank.exit3150.thread ], [ %362, %calculate_neighboring_subdomain_rank.exit3150 ]
  %retval.0.i31493861 = phi i32 [ -1, %calculate_neighboring_subdomain_rank.exit3150.thread ], [ %retval.0.i3149, %calculate_neighboring_subdomain_rank.exit3150 ]
  %364 = load i32, i32* %i39, align 8, !tbaa !106
  %mul.i3010 = mul nsw i32 %364, %sub33
  %add.i3011 = add i32 %343, %sub1219
  %add2.i3012 = add i32 %add.i3011, %mul.i3010
  %cmp3.i3013 = icmp slt i32 %add2.i3012, 0
  br i1 %cmp3.i3013, label %if.end1839, label %if.end.i3017

if.end.i3017:                                     ; preds = %if.then.i3014
  %365 = load i32, i32* %i45, align 4, !tbaa !107
  %cmp11.i3016 = icmp slt i32 %add2.i3012, %365
  br i1 %cmp11.i3016, label %if.end14.i3019, label %if.end1839

if.end14.i3019:                                   ; preds = %if.end.i3017, %calculate_neighboring_subdomain_rank.exit3150
  %366 = phi i32 [ %363, %if.end.i3017 ], [ %362, %calculate_neighboring_subdomain_rank.exit3150 ]
  %retval.0.i31493862 = phi i32 [ %retval.0.i31493861, %if.end.i3017 ], [ %retval.0.i3149, %calculate_neighboring_subdomain_rank.exit3150 ]
  %cmp16.i3018 = icmp ult i64 %344, 4294967296
  br i1 %cmp16.i3018, label %if.end36.i3033, label %if.then17.i3025

if.then17.i3025:                                  ; preds = %if.end14.i3019
  %367 = load i32, i32* %j41, align 4, !tbaa !36
  %mul20.i3021 = mul nsw i32 %367, %div28
  %add22.i3023 = add i32 %add73.i3127, %mul20.i3021
  %cmp23.i3024 = icmp slt i32 %add22.i3023, 0
  br i1 %cmp23.i3024, label %if.end1839, label %if.end25.i3028

if.end25.i3028:                                   ; preds = %if.then17.i3025
  %368 = load i32, i32* %j48, align 4, !tbaa !108
  %cmp33.i3027 = icmp slt i32 %add22.i3023, %368
  br i1 %cmp33.i3027, label %if.end36.i3033, label %if.end1839

if.end36.i3033:                                   ; preds = %if.end25.i3028, %if.end14.i3019
  %369 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp38.i3030 = icmp eq i32 %369, 0
  %.pre.i3032 = load i32, i32* %k43, align 8, !tbaa !39
  br i1 %cmp38.i3030, label %calculate_neighboring_subdomain_rank.exit3078, label %if.then39.i3040

if.then39.i3040:                                  ; preds = %if.end36.i3033
  %mul42.i3036 = mul nsw i32 %.pre.i3032, %div
  %add44.i3038 = add i32 %mul42.i3036, %.pre178.i3106
  %cmp45.i3039 = icmp slt i32 %add44.i3038, 0
  br i1 %cmp45.i3039, label %if.end1839, label %if.end47.i3043

if.end47.i3043:                                   ; preds = %if.then39.i3040
  %370 = load i32, i32* %k51, align 4, !tbaa !110
  %cmp55.i3042 = icmp slt i32 %add44.i3038, %370
  br i1 %cmp55.i3042, label %calculate_neighboring_subdomain_rank.exit3078, label %if.end1839

calculate_neighboring_subdomain_rank.exit3078:    ; preds = %if.end36.i3033, %if.end47.i3043
  %371 = add nsw i64 %indvars.iv3730, %340
  %372 = trunc i64 %371 to i32
  %add59.lobit.i3046 = ashr i32 %372, 31
  %dec.ri.i3047 = add nsw i32 %add59.lobit.i3046, %sub33
  %373 = load i64, i64* %141, align 8
  %sext3847 = shl i64 %373, 32
  %374 = ashr exact i64 %sext3847, 32
  %not.cmp66.i3049 = icmp sge i64 %371, %374
  %inc.i3050 = zext i1 %not.cmp66.i3049 to i32
  %375 = load i32, i32* %i34, align 4, !tbaa !111
  %ri.addr.1.i3052 = add i32 %dec.ri.i3047, %375
  %add70.i3053 = add i32 %ri.addr.1.i3052, %inc.i3050
  %rem.i3054 = srem i32 %add70.i3053, %375
  %376 = lshr i64 %373, 32
  %377 = trunc i64 %376 to i32
  %not.cmp81.i3058 = icmp sge i32 %add73.i3127, %377
  %inc83.i3059 = zext i1 %not.cmp81.i3058 to i32
  %378 = load i32, i32* %j36, align 4, !tbaa !112
  %rj.addr.1.i3061 = add i32 %dec76.rj.i3129, %378
  %add87.i3062 = add i32 %rj.addr.1.i3061, %inc83.i3059
  %rem90.i3063 = srem i32 %add87.i3062, %378
  %not.cmp99.i3066 = icmp sge i32 %.pre178.i3106, %.pre.i3032
  %inc101.i3067 = zext i1 %not.cmp99.i3066 to i32
  %379 = load i32, i32* %k38, align 4, !tbaa !113
  %rk.addr.1.i3069 = add i32 %dec94.rk.i3065, %inc101.i3067
  %add105.i3070 = add i32 %rk.addr.1.i3069, %379
  %rem108.i3071 = srem i32 %add105.i3070, %379
  %mul118.i3072 = mul i32 %rem108.i3071, %378
  %tmp.i3073 = add i32 %mul118.i3072, %rem90.i3063
  %tmp177.i3074 = mul i32 %tmp.i3073, %375
  %add119.i3075 = add i32 %tmp177.i3074, %rem.i3054
  %cmp1254 = icmp eq i32 %add119.i3075, -1
  %tobool12583316 = icmp eq i32 %retval.0.i31493862, %366
  %tobool1258 = or i1 %tobool12583316, %cmp1254
  br i1 %tobool1258, label %if.end1839, label %if.then1259

if.then1259:                                      ; preds = %calculate_neighboring_subdomain_rank.exit3078
  %cmp1261 = icmp slt i64 %371, 0
  %cmp1266 = icmp slt i64 %371, %142
  %380 = zext i1 %cmp1266 to i32
  %.2918 = xor i32 %380, 1
  %_di.0 = select i1 %cmp1261, i32 -1, i32 %.2918
  %add1297 = add i32 %add1295, %_di.0
  switch i32 %rem1218, label %sw.epilog1357 [
    i32 0, label %sw.bb1309
    i32 1, label %sw.bb1317
    i32 2, label %sw.bb1333
  ]

sw.bb1309:                                        ; preds = %if.then1259
  %idxprom1311 = sext i32 %add1245 to i64
  %381 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1314 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %381, i64 %idxprom1311, i32 5
  %382 = load %struct.box_type*, %struct.box_type** %levels1314, align 8, !tbaa !28
  %ghosts1316 = getelementptr inbounds %struct.box_type, %struct.box_type* %382, i64 %indvars.iv3743, i32 4
  %383 = load i32, i32* %ghosts1316, align 4, !tbaa !38
  br label %sw.epilog1357

sw.bb1317:                                        ; preds = %if.then1259
  %idxprom1319 = sext i32 %add1245 to i64
  %384 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1322 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %384, i64 %idxprom1319, i32 5
  %385 = load %struct.box_type*, %struct.box_type** %levels1322, align 8, !tbaa !28
  %i1325 = getelementptr inbounds %struct.box_type, %struct.box_type* %385, i64 %indvars.iv3743, i32 2, i32 0
  %386 = load i32, i32* %i1325, align 4, !tbaa !43
  %ghosts1332 = getelementptr inbounds %struct.box_type, %struct.box_type* %385, i64 %indvars.iv3743, i32 4
  %387 = load i32, i32* %ghosts1332, align 4, !tbaa !38
  br label %sw.epilog1357

sw.bb1333:                                        ; preds = %if.then1259
  %idxprom1335 = sext i32 %add1245 to i64
  %388 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1338 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %388, i64 %idxprom1335, i32 5
  %389 = load %struct.box_type*, %struct.box_type** %levels1338, align 8, !tbaa !28
  %ghosts1340 = getelementptr inbounds %struct.box_type, %struct.box_type* %389, i64 %indvars.iv3743, i32 4
  %390 = load i32, i32* %ghosts1340, align 4, !tbaa !38
  %i1355 = getelementptr inbounds %struct.box_type, %struct.box_type* %389, i64 %indvars.iv3743, i32 2, i32 0
  %391 = load i32, i32* %i1355, align 4, !tbaa !43
  %add1356 = add nsw i32 %391, %390
  br label %sw.epilog1357

sw.epilog1357:                                    ; preds = %if.then1259, %sw.bb1333, %sw.bb1317, %sw.bb1309
  %dim_i1298.6 = phi i32 [ %dim_i1298.53472, %if.then1259 ], [ %390, %sw.bb1333 ], [ %386, %sw.bb1317 ], [ %383, %sw.bb1309 ]
  %grid_i1301.6 = phi i32 [ %grid_i1301.53475, %if.then1259 ], [ %add1356, %sw.bb1333 ], [ %387, %sw.bb1317 ], [ 0, %sw.bb1309 ]
  switch i32 %rem1222, label %sw.epilog1406 [
    i32 0, label %sw.bb1358
    i32 1, label %sw.bb1366
    i32 2, label %sw.bb1382
  ]

sw.bb1358:                                        ; preds = %sw.epilog1357
  %idxprom1360 = sext i32 %add1245 to i64
  %392 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1363 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %392, i64 %idxprom1360, i32 5
  %393 = load %struct.box_type*, %struct.box_type** %levels1363, align 8, !tbaa !28
  %ghosts1365 = getelementptr inbounds %struct.box_type, %struct.box_type* %393, i64 %indvars.iv3743, i32 4
  %394 = load i32, i32* %ghosts1365, align 4, !tbaa !38
  br label %sw.epilog1406

sw.bb1366:                                        ; preds = %sw.epilog1357
  %idxprom1368 = sext i32 %add1245 to i64
  %395 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1371 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %395, i64 %idxprom1368, i32 5
  %396 = load %struct.box_type*, %struct.box_type** %levels1371, align 8, !tbaa !28
  %j1374 = getelementptr inbounds %struct.box_type, %struct.box_type* %396, i64 %indvars.iv3743, i32 2, i32 1
  %397 = load i32, i32* %j1374, align 4, !tbaa !37
  %ghosts1381 = getelementptr inbounds %struct.box_type, %struct.box_type* %396, i64 %indvars.iv3743, i32 4
  %398 = load i32, i32* %ghosts1381, align 4, !tbaa !38
  br label %sw.epilog1406

sw.bb1382:                                        ; preds = %sw.epilog1357
  %idxprom1384 = sext i32 %add1245 to i64
  %399 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1387 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %399, i64 %idxprom1384, i32 5
  %400 = load %struct.box_type*, %struct.box_type** %levels1387, align 8, !tbaa !28
  %ghosts1389 = getelementptr inbounds %struct.box_type, %struct.box_type* %400, i64 %indvars.iv3743, i32 4
  %401 = load i32, i32* %ghosts1389, align 4, !tbaa !38
  %j1404 = getelementptr inbounds %struct.box_type, %struct.box_type* %400, i64 %indvars.iv3743, i32 2, i32 1
  %402 = load i32, i32* %j1404, align 4, !tbaa !37
  %add1405 = add nsw i32 %402, %401
  br label %sw.epilog1406

sw.epilog1406:                                    ; preds = %sw.epilog1357, %sw.bb1382, %sw.bb1366, %sw.bb1358
  %dim_j1299.6 = phi i32 [ %dim_j1299.53473, %sw.epilog1357 ], [ %401, %sw.bb1382 ], [ %397, %sw.bb1366 ], [ %394, %sw.bb1358 ]
  %grid_j1302.6 = phi i32 [ %grid_j1302.53476, %sw.epilog1357 ], [ %add1405, %sw.bb1382 ], [ %398, %sw.bb1366 ], [ 0, %sw.bb1358 ]
  switch i32 %rem1226, label %sw.epilog1455 [
    i32 0, label %sw.bb1407
    i32 1, label %sw.bb1415
    i32 2, label %sw.bb1431
  ]

sw.bb1407:                                        ; preds = %sw.epilog1406
  %idxprom1409 = sext i32 %add1245 to i64
  %403 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1412 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %403, i64 %idxprom1409, i32 5
  %404 = load %struct.box_type*, %struct.box_type** %levels1412, align 8, !tbaa !28
  %ghosts1414 = getelementptr inbounds %struct.box_type, %struct.box_type* %404, i64 %indvars.iv3743, i32 4
  %405 = load i32, i32* %ghosts1414, align 4, !tbaa !38
  br label %sw.epilog1455

sw.bb1415:                                        ; preds = %sw.epilog1406
  %idxprom1417 = sext i32 %add1245 to i64
  %406 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1420 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %406, i64 %idxprom1417, i32 5
  %407 = load %struct.box_type*, %struct.box_type** %levels1420, align 8, !tbaa !28
  %k1423 = getelementptr inbounds %struct.box_type, %struct.box_type* %407, i64 %indvars.iv3743, i32 2, i32 2
  %408 = load i32, i32* %k1423, align 4, !tbaa !40
  %ghosts1430 = getelementptr inbounds %struct.box_type, %struct.box_type* %407, i64 %indvars.iv3743, i32 4
  %409 = load i32, i32* %ghosts1430, align 4, !tbaa !38
  br label %sw.epilog1455

sw.bb1431:                                        ; preds = %sw.epilog1406
  %idxprom1433 = sext i32 %add1245 to i64
  %410 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1436 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %410, i64 %idxprom1433, i32 5
  %411 = load %struct.box_type*, %struct.box_type** %levels1436, align 8, !tbaa !28
  %ghosts1438 = getelementptr inbounds %struct.box_type, %struct.box_type* %411, i64 %indvars.iv3743, i32 4
  %412 = load i32, i32* %ghosts1438, align 4, !tbaa !38
  %k1453 = getelementptr inbounds %struct.box_type, %struct.box_type* %411, i64 %indvars.iv3743, i32 2, i32 2
  %413 = load i32, i32* %k1453, align 4, !tbaa !40
  %add1454 = add nsw i32 %413, %412
  br label %sw.epilog1455

sw.epilog1455:                                    ; preds = %sw.epilog1406, %sw.bb1431, %sw.bb1415, %sw.bb1407
  %dim_k1300.6 = phi i32 [ %dim_k1300.53474, %sw.epilog1406 ], [ %412, %sw.bb1431 ], [ %408, %sw.bb1415 ], [ %405, %sw.bb1407 ]
  %grid_k1303.6 = phi i32 [ %grid_k1303.53477, %sw.epilog1406 ], [ %add1454, %sw.bb1431 ], [ %409, %sw.bb1415 ], [ 0, %sw.bb1407 ]
  switch i32 %_di.0, label %sw.epilog1517 [
    i32 -1, label %sw.bb1456
    i32 0, label %sw.bb1472
    i32 1, label %sw.bb1501
  ]

sw.bb1456:                                        ; preds = %sw.epilog1455
  %idxprom1458 = sext i32 %add1245 to i64
  %414 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1461 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %414, i64 %idxprom1458, i32 5
  %415 = load %struct.box_type*, %struct.box_type** %levels1461, align 8, !tbaa !28
  %ghosts1463 = getelementptr inbounds %struct.box_type, %struct.box_type* %415, i64 %indvars.iv3743, i32 4
  %416 = load i32, i32* %ghosts1463, align 4, !tbaa !38
  br label %sw.epilog1517

sw.bb1472:                                        ; preds = %sw.epilog1455
  %idxprom1474 = sext i32 %add1245 to i64
  %417 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1477 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %417, i64 %idxprom1474, i32 5
  %418 = load %struct.box_type*, %struct.box_type** %levels1477, align 8, !tbaa !28
  %i1480 = getelementptr inbounds %struct.box_type, %struct.box_type* %418, i64 %indvars.iv3743, i32 2, i32 0
  %419 = load i32, i32* %i1480, align 4, !tbaa !43
  %mul1481 = mul nsw i32 %419, %343
  %mul1490 = mul nsw i32 %419, %subdomains_per_rank_in_i
  br label %sw.epilog1517

sw.bb1501:                                        ; preds = %sw.epilog1455
  %idxprom1503 = sext i32 %add1245 to i64
  %420 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1506 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %420, i64 %idxprom1503, i32 5
  %421 = load %struct.box_type*, %struct.box_type** %levels1506, align 8, !tbaa !28
  %ghosts1508 = getelementptr inbounds %struct.box_type, %struct.box_type* %421, i64 %indvars.iv3743, i32 4
  %422 = load i32, i32* %ghosts1508, align 4, !tbaa !38
  br label %sw.epilog1517

sw.epilog1517:                                    ; preds = %sw.epilog1455, %sw.bb1501, %sw.bb1472, %sw.bb1456
  %buf_i1304.6 = phi i32 [ %buf_i1304.53478, %sw.epilog1455 ], [ 0, %sw.bb1501 ], [ %mul1481, %sw.bb1472 ], [ 0, %sw.bb1456 ]
  %buf_plane1307.0 = phi i32 [ 1, %sw.epilog1455 ], [ %422, %sw.bb1501 ], [ %mul1490, %sw.bb1472 ], [ %416, %sw.bb1456 ]
  switch i32 %_dj.0, label %sw.epilog1556 [
    i32 -1, label %sw.bb1518
    i32 0, label %sw.bb1527
    i32 1, label %sw.bb1547
  ]

sw.bb1518:                                        ; preds = %sw.epilog1517
  %idxprom1520 = sext i32 %add1245 to i64
  %423 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1523 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %423, i64 %idxprom1520, i32 5
  %424 = load %struct.box_type*, %struct.box_type** %levels1523, align 8, !tbaa !28
  %ghosts1525 = getelementptr inbounds %struct.box_type, %struct.box_type* %424, i64 %indvars.iv3743, i32 4
  %425 = load i32, i32* %ghosts1525, align 4, !tbaa !38
  %mul1526 = mul nsw i32 %425, %buf_plane1307.0
  br label %sw.epilog1556

sw.bb1527:                                        ; preds = %sw.epilog1517
  %idxprom1529 = sext i32 %add1245 to i64
  %426 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1532 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %426, i64 %idxprom1529, i32 5
  %427 = load %struct.box_type*, %struct.box_type** %levels1532, align 8, !tbaa !28
  %j1535 = getelementptr inbounds %struct.box_type, %struct.box_type* %427, i64 %indvars.iv3743, i32 2, i32 1
  %428 = load i32, i32* %j1535, align 4, !tbaa !37
  %mul1536 = mul nsw i32 %428, %j.33493
  %mul1545 = mul i32 %buf_plane1307.0, %subdomains_per_rank_in_j
  %mul1546 = mul i32 %mul1545, %428
  br label %sw.epilog1556

sw.bb1547:                                        ; preds = %sw.epilog1517
  %idxprom1549 = sext i32 %add1245 to i64
  %429 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1552 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %429, i64 %idxprom1549, i32 5
  %430 = load %struct.box_type*, %struct.box_type** %levels1552, align 8, !tbaa !28
  %ghosts1554 = getelementptr inbounds %struct.box_type, %struct.box_type* %430, i64 %indvars.iv3743, i32 4
  %431 = load i32, i32* %ghosts1554, align 4, !tbaa !38
  %mul1555 = mul nsw i32 %431, %buf_plane1307.0
  br label %sw.epilog1556

sw.epilog1556:                                    ; preds = %sw.epilog1517, %sw.bb1547, %sw.bb1527, %sw.bb1518
  %buf_j1305.6 = phi i32 [ %buf_j1305.53479, %sw.epilog1517 ], [ 0, %sw.bb1547 ], [ %mul1536, %sw.bb1527 ], [ 0, %sw.bb1518 ]
  %buf_plane1307.1 = phi i32 [ %buf_plane1307.0, %sw.epilog1517 ], [ %mul1555, %sw.bb1547 ], [ %mul1546, %sw.bb1527 ], [ %mul1526, %sw.bb1518 ]
  switch i32 %_dk.0, label %sw.epilog1569 [
    i32 -1, label %sw.bb1557
    i32 0, label %sw.bb1558
    i32 1, label %sw.bb1568
  ]

sw.bb1557:                                        ; preds = %sw.epilog1556
  br label %sw.epilog1569

sw.bb1558:                                        ; preds = %sw.epilog1556
  %idxprom1560 = sext i32 %add1245 to i64
  %432 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1563 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %432, i64 %idxprom1560, i32 5
  %433 = load %struct.box_type*, %struct.box_type** %levels1563, align 8, !tbaa !28
  %k1566 = getelementptr inbounds %struct.box_type, %struct.box_type* %433, i64 %indvars.iv3743, i32 2, i32 2
  %434 = load i32, i32* %k1566, align 4, !tbaa !40
  %mul1567 = mul nsw i32 %434, %k.33516
  br label %sw.epilog1569

sw.bb1568:                                        ; preds = %sw.epilog1556
  br label %sw.epilog1569

sw.epilog1569:                                    ; preds = %sw.epilog1556, %sw.bb1568, %sw.bb1558, %sw.bb1557
  %buf_k1306.6 = phi i32 [ %buf_k1306.53480, %sw.epilog1556 ], [ 0, %sw.bb1568 ], [ %mul1567, %sw.bb1558 ], [ 0, %sw.bb1557 ]
  %cmp1571 = icmp sgt i64 %371, -1
  %or.cond2921 = and i1 %cmp1571, %cmp1266
  br i1 %or.cond2921, label %if.then1576, label %if.end1603

if.then1576:                                      ; preds = %sw.epilog1569
  br i1 %cmp1577, label %if.then1579, label %if.else1588

if.then1579:                                      ; preds = %if.then1576
  %idxprom1581 = sext i32 %add1245 to i64
  %435 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1584 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %435, i64 %idxprom1581, i32 5
  %436 = load %struct.box_type*, %struct.box_type** %levels1584, align 8, !tbaa !28
  %ghosts1586 = getelementptr inbounds %struct.box_type, %struct.box_type* %436, i64 %indvars.iv3743, i32 4
  %437 = load i32, i32* %ghosts1586, align 4, !tbaa !38
  %sub1587 = sub nsw i32 %buf_i1304.6, %437
  br label %if.end1603

if.else1588:                                      ; preds = %if.then1576
  br i1 %cmp1589, label %if.then1591, label %if.end1603

if.then1591:                                      ; preds = %if.else1588
  %idxprom1593 = sext i32 %add1245 to i64
  %438 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1596 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %438, i64 %idxprom1593, i32 5
  %439 = load %struct.box_type*, %struct.box_type** %levels1596, align 8, !tbaa !28
  %i1599 = getelementptr inbounds %struct.box_type, %struct.box_type* %439, i64 %indvars.iv3743, i32 2, i32 0
  %440 = load i32, i32* %i1599, align 4, !tbaa !43
  %add1600 = add nsw i32 %440, %buf_i1304.6
  br label %if.end1603

if.end1603:                                       ; preds = %if.then1579, %if.then1591, %if.else1588, %sw.epilog1569
  %buf_i1304.7 = phi i32 [ %sub1587, %if.then1579 ], [ %add1600, %if.then1591 ], [ %buf_i1304.6, %if.else1588 ], [ %buf_i1304.6, %sw.epilog1569 ]
  br i1 %or.cond2922, label %if.then1611, label %if.end1638

if.then1611:                                      ; preds = %if.end1603
  br i1 %cmp1612, label %if.then1614, label %if.else1623

if.then1614:                                      ; preds = %if.then1611
  %idxprom1616 = sext i32 %add1245 to i64
  %441 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1619 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %441, i64 %idxprom1616, i32 5
  %442 = load %struct.box_type*, %struct.box_type** %levels1619, align 8, !tbaa !28
  %ghosts1621 = getelementptr inbounds %struct.box_type, %struct.box_type* %442, i64 %indvars.iv3743, i32 4
  %443 = load i32, i32* %ghosts1621, align 4, !tbaa !38
  %sub1622 = sub nsw i32 %buf_j1305.6, %443
  br label %if.end1638

if.else1623:                                      ; preds = %if.then1611
  br i1 %cmp1624, label %if.then1626, label %if.end1638

if.then1626:                                      ; preds = %if.else1623
  %idxprom1628 = sext i32 %add1245 to i64
  %444 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1631 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %444, i64 %idxprom1628, i32 5
  %445 = load %struct.box_type*, %struct.box_type** %levels1631, align 8, !tbaa !28
  %j1634 = getelementptr inbounds %struct.box_type, %struct.box_type* %445, i64 %indvars.iv3743, i32 2, i32 1
  %446 = load i32, i32* %j1634, align 4, !tbaa !37
  %add1635 = add nsw i32 %446, %buf_j1305.6
  br label %if.end1638

if.end1638:                                       ; preds = %if.then1614, %if.then1626, %if.else1623, %if.end1603
  %buf_j1305.7 = phi i32 [ %sub1622, %if.then1614 ], [ %add1635, %if.then1626 ], [ %buf_j1305.6, %if.else1623 ], [ %buf_j1305.6, %if.end1603 ]
  br i1 %or.cond2923, label %if.then1646, label %if.end1673

if.then1646:                                      ; preds = %if.end1638
  br i1 %cmp1647, label %if.then1649, label %if.else1658

if.then1649:                                      ; preds = %if.then1646
  %idxprom1651 = sext i32 %add1245 to i64
  %447 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1654 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %447, i64 %idxprom1651, i32 5
  %448 = load %struct.box_type*, %struct.box_type** %levels1654, align 8, !tbaa !28
  %ghosts1656 = getelementptr inbounds %struct.box_type, %struct.box_type* %448, i64 %indvars.iv3743, i32 4
  %449 = load i32, i32* %ghosts1656, align 4, !tbaa !38
  %sub1657 = sub nsw i32 %buf_k1306.6, %449
  br label %if.end1673

if.else1658:                                      ; preds = %if.then1646
  br i1 %cmp1659, label %if.then1661, label %if.end1673

if.then1661:                                      ; preds = %if.else1658
  %idxprom1663 = sext i32 %add1245 to i64
  %450 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1666 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %450, i64 %idxprom1663, i32 5
  %451 = load %struct.box_type*, %struct.box_type** %levels1666, align 8, !tbaa !28
  %k1669 = getelementptr inbounds %struct.box_type, %struct.box_type* %451, i64 %indvars.iv3743, i32 2, i32 2
  %452 = load i32, i32* %k1669, align 4, !tbaa !40
  %add1670 = add nsw i32 %452, %buf_k1306.6
  br label %if.end1673

if.end1673:                                       ; preds = %if.then1649, %if.then1661, %if.else1658, %if.end1638
  %buf_k1306.7 = phi i32 [ %sub1657, %if.then1649 ], [ %add1670, %if.then1661 ], [ %buf_k1306.6, %if.else1658 ], [ %buf_k1306.6, %if.end1638 ]
  br i1 %cmp589, label %if.then1676, label %if.end1837

if.then1676:                                      ; preds = %if.end1673
  %idxprom1677 = sext i32 %buffer.133469 to i64
  %453 = load %struct.bufferCopy_type*, %struct.bufferCopy_type** %arrayidx594, align 8, !tbaa !1
  %i1683 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %453, i64 %idxprom1677, i32 3, i32 0
  store i32 %dim_i1298.6, i32* %i1683, align 4, !tbaa !5
  %j1690 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %453, i64 %idxprom1677, i32 3, i32 1
  store i32 %dim_j1299.6, i32* %j1690, align 4, !tbaa !10
  %k1697 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %453, i64 %idxprom1677, i32 3, i32 2
  store i32 %dim_k1300.6, i32* %k1697, align 4, !tbaa !11
  %box1704 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %453, i64 %idxprom1677, i32 4, i32 0
  store i32 -1, i32* %box1704, align 8, !tbaa !23
  %idxprom1705 = sext i32 %add1297 to i64
  %arrayidx1707 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 7, i64 %idxprom1705
  %454 = bitcast double** %arrayidx1707 to i64*
  %455 = load i64, i64* %454, align 8, !tbaa !1
  %ptr1714 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %453, i64 %idxprom1677, i32 4, i32 6
  %456 = bitcast double** %ptr1714 to i64*
  store i64 %455, i64* %456, align 8, !tbaa !123
  %457 = load %struct.bufferCopy_type*, %struct.bufferCopy_type** %arrayidx594, align 8, !tbaa !1
  %i1721 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %457, i64 %idxprom1677, i32 4, i32 1
  store i32 %buf_i1304.7, i32* %i1721, align 4, !tbaa !12
  %j1728 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %457, i64 %idxprom1677, i32 4, i32 2
  store i32 %buf_j1305.7, i32* %j1728, align 8, !tbaa !13
  %k1735 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %457, i64 %idxprom1677, i32 4, i32 3
  store i32 %buf_k1306.7, i32* %k1735, align 4, !tbaa !14
  %pencil1742 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %457, i64 %idxprom1677, i32 4, i32 4
  store i32 %buf_plane1307.0, i32* %pencil1742, align 8, !tbaa !15
  %plane1749 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %457, i64 %idxprom1677, i32 4, i32 5
  store i32 %buf_plane1307.1, i32* %plane1749, align 4, !tbaa !16
  %box1756 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %457, i64 %idxprom1677, i32 5, i32 0
  store i32 %add1245, i32* %box1756, align 8, !tbaa !33
  %ptr1763 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %457, i64 %idxprom1677, i32 5, i32 6
  store double* null, double** %ptr1763, align 8, !tbaa !22
  %458 = load %struct.bufferCopy_type*, %struct.bufferCopy_type** %arrayidx594, align 8, !tbaa !1
  %i1770 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %458, i64 %idxprom1677, i32 5, i32 1
  store i32 %grid_i1301.6, i32* %i1770, align 4, !tbaa !17
  %j1777 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %458, i64 %idxprom1677, i32 5, i32 2
  store i32 %grid_j1302.6, i32* %j1777, align 8, !tbaa !18
  %k1784 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %458, i64 %idxprom1677, i32 5, i32 3
  store i32 %grid_k1303.6, i32* %k1784, align 4, !tbaa !19
  %idxprom1786 = sext i32 %add1245 to i64
  %459 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels1789 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %459, i64 %idxprom1786, i32 5
  %460 = load %struct.box_type*, %struct.box_type** %levels1789, align 8, !tbaa !28
  %pencil1791 = getelementptr inbounds %struct.box_type, %struct.box_type* %460, i64 %indvars.iv3743, i32 5
  %461 = load i32, i32* %pencil1791, align 8, !tbaa !54
  %pencil1798 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %458, i64 %idxprom1677, i32 5, i32 4
  store i32 %461, i32* %pencil1798, align 8, !tbaa !20
  %plane1805 = getelementptr inbounds %struct.box_type, %struct.box_type* %460, i64 %indvars.iv3743, i32 6
  %462 = load i32, i32* %plane1805, align 4, !tbaa !55
  %plane1812 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %458, i64 %idxprom1677, i32 5, i32 5
  store i32 %462, i32* %plane1812, align 4, !tbaa !21
  %463 = load i32, i32* %arrayidx1814, align 4, !tbaa !35
  %isFace1820 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %458, i64 %idxprom1677, i32 0
  store i32 %463, i32* %isFace1820, align 8, !tbaa !46
  %464 = load i32, i32* %arrayidx1822, align 4, !tbaa !35
  %isEdge1828 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %458, i64 %idxprom1677, i32 1
  store i32 %464, i32* %isEdge1828, align 4, !tbaa !47
  %465 = load i32, i32* %arrayidx1830, align 4, !tbaa !35
  %isCorner1836 = getelementptr inbounds %struct.bufferCopy_type, %struct.bufferCopy_type* %458, i64 %idxprom1677, i32 2
  store i32 %465, i32* %isCorner1836, align 8, !tbaa !48
  br label %if.end1837

if.end1837:                                       ; preds = %if.then1676, %if.end1673
  %inc1838 = add nsw i32 %buffer.133469, 1
  br label %if.end1839

if.end1839:                                       ; preds = %if.end47.i3043, %if.then39.i3040, %if.end25.i3028, %if.then17.i3025, %if.end.i3017, %if.then.i3014, %calculate_neighboring_subdomain_rank.exit3078, %if.end1837
  %buffer.14 = phi i32 [ %inc1838, %if.end1837 ], [ %buffer.133469, %calculate_neighboring_subdomain_rank.exit3078 ], [ %buffer.133469, %if.then.i3014 ], [ %buffer.133469, %if.end.i3017 ], [ %buffer.133469, %if.then17.i3025 ], [ %buffer.133469, %if.end25.i3028 ], [ %buffer.133469, %if.then39.i3040 ], [ %buffer.133469, %if.end47.i3043 ]
  %dim_i1298.7 = phi i32 [ %dim_i1298.6, %if.end1837 ], [ %dim_i1298.53472, %calculate_neighboring_subdomain_rank.exit3078 ], [ %dim_i1298.53472, %if.then.i3014 ], [ %dim_i1298.53472, %if.end.i3017 ], [ %dim_i1298.53472, %if.then17.i3025 ], [ %dim_i1298.53472, %if.end25.i3028 ], [ %dim_i1298.53472, %if.then39.i3040 ], [ %dim_i1298.53472, %if.end47.i3043 ]
  %dim_j1299.7 = phi i32 [ %dim_j1299.6, %if.end1837 ], [ %dim_j1299.53473, %calculate_neighboring_subdomain_rank.exit3078 ], [ %dim_j1299.53473, %if.then.i3014 ], [ %dim_j1299.53473, %if.end.i3017 ], [ %dim_j1299.53473, %if.then17.i3025 ], [ %dim_j1299.53473, %if.end25.i3028 ], [ %dim_j1299.53473, %if.then39.i3040 ], [ %dim_j1299.53473, %if.end47.i3043 ]
  %dim_k1300.7 = phi i32 [ %dim_k1300.6, %if.end1837 ], [ %dim_k1300.53474, %calculate_neighboring_subdomain_rank.exit3078 ], [ %dim_k1300.53474, %if.then.i3014 ], [ %dim_k1300.53474, %if.end.i3017 ], [ %dim_k1300.53474, %if.then17.i3025 ], [ %dim_k1300.53474, %if.end25.i3028 ], [ %dim_k1300.53474, %if.then39.i3040 ], [ %dim_k1300.53474, %if.end47.i3043 ]
  %grid_i1301.7 = phi i32 [ %grid_i1301.6, %if.end1837 ], [ %grid_i1301.53475, %calculate_neighboring_subdomain_rank.exit3078 ], [ %grid_i1301.53475, %if.then.i3014 ], [ %grid_i1301.53475, %if.end.i3017 ], [ %grid_i1301.53475, %if.then17.i3025 ], [ %grid_i1301.53475, %if.end25.i3028 ], [ %grid_i1301.53475, %if.then39.i3040 ], [ %grid_i1301.53475, %if.end47.i3043 ]
  %grid_j1302.7 = phi i32 [ %grid_j1302.6, %if.end1837 ], [ %grid_j1302.53476, %calculate_neighboring_subdomain_rank.exit3078 ], [ %grid_j1302.53476, %if.then.i3014 ], [ %grid_j1302.53476, %if.end.i3017 ], [ %grid_j1302.53476, %if.then17.i3025 ], [ %grid_j1302.53476, %if.end25.i3028 ], [ %grid_j1302.53476, %if.then39.i3040 ], [ %grid_j1302.53476, %if.end47.i3043 ]
  %grid_k1303.7 = phi i32 [ %grid_k1303.6, %if.end1837 ], [ %grid_k1303.53477, %calculate_neighboring_subdomain_rank.exit3078 ], [ %grid_k1303.53477, %if.then.i3014 ], [ %grid_k1303.53477, %if.end.i3017 ], [ %grid_k1303.53477, %if.then17.i3025 ], [ %grid_k1303.53477, %if.end25.i3028 ], [ %grid_k1303.53477, %if.then39.i3040 ], [ %grid_k1303.53477, %if.end47.i3043 ]
  %buf_i1304.8 = phi i32 [ %buf_i1304.7, %if.end1837 ], [ %buf_i1304.53478, %calculate_neighboring_subdomain_rank.exit3078 ], [ %buf_i1304.53478, %if.then.i3014 ], [ %buf_i1304.53478, %if.end.i3017 ], [ %buf_i1304.53478, %if.then17.i3025 ], [ %buf_i1304.53478, %if.end25.i3028 ], [ %buf_i1304.53478, %if.then39.i3040 ], [ %buf_i1304.53478, %if.end47.i3043 ]
  %buf_j1305.8 = phi i32 [ %buf_j1305.7, %if.end1837 ], [ %buf_j1305.53479, %calculate_neighboring_subdomain_rank.exit3078 ], [ %buf_j1305.53479, %if.then.i3014 ], [ %buf_j1305.53479, %if.end.i3017 ], [ %buf_j1305.53479, %if.then17.i3025 ], [ %buf_j1305.53479, %if.end25.i3028 ], [ %buf_j1305.53479, %if.then39.i3040 ], [ %buf_j1305.53479, %if.end47.i3043 ]
  %buf_k1306.8 = phi i32 [ %buf_k1306.7, %if.end1837 ], [ %buf_k1306.53480, %calculate_neighboring_subdomain_rank.exit3078 ], [ %buf_k1306.53480, %if.then.i3014 ], [ %buf_k1306.53480, %if.end.i3017 ], [ %buf_k1306.53480, %if.then17.i3025 ], [ %buf_k1306.53480, %if.end25.i3028 ], [ %buf_k1306.53480, %if.then39.i3040 ], [ %buf_k1306.53480, %if.end47.i3043 ]
  %indvars.iv.next3731 = add nuw nsw i64 %indvars.iv3730, 1
  %lftr.wideiv3735 = trunc i64 %indvars.iv.next3731 to i32
  %exitcond3736 = icmp eq i32 %lftr.wideiv3735, %subdomains_per_rank_in_i
  br i1 %exitcond3736, label %for.inc1843.loopexit, label %for.body1239

for.inc1843.loopexit:                             ; preds = %if.end1839
  %buf_k1306.8.lcssa = phi i32 [ %buf_k1306.8, %if.end1839 ]
  %buf_j1305.8.lcssa = phi i32 [ %buf_j1305.8, %if.end1839 ]
  %buf_i1304.8.lcssa = phi i32 [ %buf_i1304.8, %if.end1839 ]
  %grid_k1303.7.lcssa = phi i32 [ %grid_k1303.7, %if.end1839 ]
  %grid_j1302.7.lcssa = phi i32 [ %grid_j1302.7, %if.end1839 ]
  %grid_i1301.7.lcssa = phi i32 [ %grid_i1301.7, %if.end1839 ]
  %dim_k1300.7.lcssa = phi i32 [ %dim_k1300.7, %if.end1839 ]
  %dim_j1299.7.lcssa = phi i32 [ %dim_j1299.7, %if.end1839 ]
  %dim_i1298.7.lcssa = phi i32 [ %dim_i1298.7, %if.end1839 ]
  %buffer.14.lcssa = phi i32 [ %buffer.14, %if.end1839 ]
  br label %for.inc1843

for.inc1843:                                      ; preds = %for.inc1843.loopexit, %for.cond1236.preheader
  %buf_k1306.5.lcssa = phi i32 [ %buf_k1306.43503, %for.cond1236.preheader ], [ %buf_k1306.8.lcssa, %for.inc1843.loopexit ]
  %buf_j1305.5.lcssa = phi i32 [ %buf_j1305.43502, %for.cond1236.preheader ], [ %buf_j1305.8.lcssa, %for.inc1843.loopexit ]
  %buf_i1304.5.lcssa = phi i32 [ %buf_i1304.43501, %for.cond1236.preheader ], [ %buf_i1304.8.lcssa, %for.inc1843.loopexit ]
  %grid_k1303.5.lcssa = phi i32 [ %grid_k1303.43500, %for.cond1236.preheader ], [ %grid_k1303.7.lcssa, %for.inc1843.loopexit ]
  %grid_j1302.5.lcssa = phi i32 [ %grid_j1302.43499, %for.cond1236.preheader ], [ %grid_j1302.7.lcssa, %for.inc1843.loopexit ]
  %grid_i1301.5.lcssa = phi i32 [ %grid_i1301.43498, %for.cond1236.preheader ], [ %grid_i1301.7.lcssa, %for.inc1843.loopexit ]
  %dim_k1300.5.lcssa = phi i32 [ %dim_k1300.43497, %for.cond1236.preheader ], [ %dim_k1300.7.lcssa, %for.inc1843.loopexit ]
  %dim_j1299.5.lcssa = phi i32 [ %dim_j1299.43496, %for.cond1236.preheader ], [ %dim_j1299.7.lcssa, %for.inc1843.loopexit ]
  %dim_i1298.5.lcssa = phi i32 [ %dim_i1298.43495, %for.cond1236.preheader ], [ %dim_i1298.7.lcssa, %for.inc1843.loopexit ]
  %buffer.13.lcssa = phi i32 [ %buffer.123492, %for.cond1236.preheader ], [ %buffer.14.lcssa, %for.inc1843.loopexit ]
  %inc1844 = add nuw nsw i32 %j.33493, 1
  %exitcond3737 = icmp eq i32 %inc1844, %subdomains_per_rank_in_j
  br i1 %exitcond3737, label %for.inc1846.loopexit, label %for.cond1236.preheader

for.inc1846.loopexit:                             ; preds = %for.inc1843
  %buffer.13.lcssa.lcssa = phi i32 [ %buffer.13.lcssa, %for.inc1843 ]
  %dim_i1298.5.lcssa.lcssa = phi i32 [ %dim_i1298.5.lcssa, %for.inc1843 ]
  %dim_j1299.5.lcssa.lcssa = phi i32 [ %dim_j1299.5.lcssa, %for.inc1843 ]
  %dim_k1300.5.lcssa.lcssa = phi i32 [ %dim_k1300.5.lcssa, %for.inc1843 ]
  %grid_i1301.5.lcssa.lcssa = phi i32 [ %grid_i1301.5.lcssa, %for.inc1843 ]
  %grid_j1302.5.lcssa.lcssa = phi i32 [ %grid_j1302.5.lcssa, %for.inc1843 ]
  %grid_k1303.5.lcssa.lcssa = phi i32 [ %grid_k1303.5.lcssa, %for.inc1843 ]
  %buf_i1304.5.lcssa.lcssa = phi i32 [ %buf_i1304.5.lcssa, %for.inc1843 ]
  %buf_j1305.5.lcssa.lcssa = phi i32 [ %buf_j1305.5.lcssa, %for.inc1843 ]
  %buf_k1306.5.lcssa.lcssa = phi i32 [ %buf_k1306.5.lcssa, %for.inc1843 ]
  br label %for.inc1846

for.inc1846:                                      ; preds = %for.inc1846.loopexit, %for.cond1232.preheader
  %buf_k1306.4.lcssa = phi i32 [ %buf_k1306.33526, %for.cond1232.preheader ], [ %buf_k1306.5.lcssa.lcssa, %for.inc1846.loopexit ]
  %buf_j1305.4.lcssa = phi i32 [ %buf_j1305.33525, %for.cond1232.preheader ], [ %buf_j1305.5.lcssa.lcssa, %for.inc1846.loopexit ]
  %buf_i1304.4.lcssa = phi i32 [ %buf_i1304.33524, %for.cond1232.preheader ], [ %buf_i1304.5.lcssa.lcssa, %for.inc1846.loopexit ]
  %grid_k1303.4.lcssa = phi i32 [ %grid_k1303.33523, %for.cond1232.preheader ], [ %grid_k1303.5.lcssa.lcssa, %for.inc1846.loopexit ]
  %grid_j1302.4.lcssa = phi i32 [ %grid_j1302.33522, %for.cond1232.preheader ], [ %grid_j1302.5.lcssa.lcssa, %for.inc1846.loopexit ]
  %grid_i1301.4.lcssa = phi i32 [ %grid_i1301.33521, %for.cond1232.preheader ], [ %grid_i1301.5.lcssa.lcssa, %for.inc1846.loopexit ]
  %dim_k1300.4.lcssa = phi i32 [ %dim_k1300.33520, %for.cond1232.preheader ], [ %dim_k1300.5.lcssa.lcssa, %for.inc1846.loopexit ]
  %dim_j1299.4.lcssa = phi i32 [ %dim_j1299.33519, %for.cond1232.preheader ], [ %dim_j1299.5.lcssa.lcssa, %for.inc1846.loopexit ]
  %dim_i1298.4.lcssa = phi i32 [ %dim_i1298.33518, %for.cond1232.preheader ], [ %dim_i1298.5.lcssa.lcssa, %for.inc1846.loopexit ]
  %buffer.12.lcssa = phi i32 [ %buffer.113515, %for.cond1232.preheader ], [ %buffer.13.lcssa.lcssa, %for.inc1846.loopexit ]
  %inc1847 = add nuw nsw i32 %k.33516, 1
  %exitcond3738 = icmp eq i32 %inc1847, %subdomains_per_rank_in_k
  br i1 %exitcond3738, label %for.end1848.loopexit, label %for.cond1232.preheader

for.end1848.loopexit:                             ; preds = %for.inc1846
  %buffer.12.lcssa.lcssa = phi i32 [ %buffer.12.lcssa, %for.inc1846 ]
  %dim_i1298.4.lcssa.lcssa = phi i32 [ %dim_i1298.4.lcssa, %for.inc1846 ]
  %dim_j1299.4.lcssa.lcssa = phi i32 [ %dim_j1299.4.lcssa, %for.inc1846 ]
  %dim_k1300.4.lcssa.lcssa = phi i32 [ %dim_k1300.4.lcssa, %for.inc1846 ]
  %grid_i1301.4.lcssa.lcssa = phi i32 [ %grid_i1301.4.lcssa, %for.inc1846 ]
  %grid_j1302.4.lcssa.lcssa = phi i32 [ %grid_j1302.4.lcssa, %for.inc1846 ]
  %grid_k1303.4.lcssa.lcssa = phi i32 [ %grid_k1303.4.lcssa, %for.inc1846 ]
  %buf_i1304.4.lcssa.lcssa = phi i32 [ %buf_i1304.4.lcssa, %for.inc1846 ]
  %buf_j1305.4.lcssa.lcssa = phi i32 [ %buf_j1305.4.lcssa, %for.inc1846 ]
  %buf_k1306.4.lcssa.lcssa = phi i32 [ %buf_k1306.4.lcssa, %for.inc1846 ]
  br label %for.end1848

for.end1848:                                      ; preds = %for.end1848.loopexit, %for.body1212
  %buf_k1306.3.lcssa = phi i32 [ %buf_k1306.23547, %for.body1212 ], [ %buf_k1306.4.lcssa.lcssa, %for.end1848.loopexit ]
  %buf_j1305.3.lcssa = phi i32 [ %buf_j1305.23546, %for.body1212 ], [ %buf_j1305.4.lcssa.lcssa, %for.end1848.loopexit ]
  %buf_i1304.3.lcssa = phi i32 [ %buf_i1304.23545, %for.body1212 ], [ %buf_i1304.4.lcssa.lcssa, %for.end1848.loopexit ]
  %grid_k1303.3.lcssa = phi i32 [ %grid_k1303.23544, %for.body1212 ], [ %grid_k1303.4.lcssa.lcssa, %for.end1848.loopexit ]
  %grid_j1302.3.lcssa = phi i32 [ %grid_j1302.23543, %for.body1212 ], [ %grid_j1302.4.lcssa.lcssa, %for.end1848.loopexit ]
  %grid_i1301.3.lcssa = phi i32 [ %grid_i1301.23542, %for.body1212 ], [ %grid_i1301.4.lcssa.lcssa, %for.end1848.loopexit ]
  %dim_k1300.3.lcssa = phi i32 [ %dim_k1300.23541, %for.body1212 ], [ %dim_k1300.4.lcssa.lcssa, %for.end1848.loopexit ]
  %dim_j1299.3.lcssa = phi i32 [ %dim_j1299.23540, %for.body1212 ], [ %dim_j1299.4.lcssa.lcssa, %for.end1848.loopexit ]
  %dim_i1298.3.lcssa = phi i32 [ %dim_i1298.23539, %for.body1212 ], [ %dim_i1298.4.lcssa.lcssa, %for.end1848.loopexit ]
  %buffer.11.lcssa = phi i32 [ %buffer.103538, %for.body1212 ], [ %buffer.12.lcssa.lcssa, %for.end1848.loopexit ]
  %indvars.iv.next3740 = add nuw nsw i64 %indvars.iv3739, 1
  %exitcond3741 = icmp eq i64 %indvars.iv.next3740, 26
  br i1 %exitcond3741, label %for.end1851, label %for.body1212

for.end1851:                                      ; preds = %for.end1848
  %buffer.11.lcssa.lcssa = phi i32 [ %buffer.11.lcssa, %for.end1848 ]
  %dim_i1298.3.lcssa.lcssa = phi i32 [ %dim_i1298.3.lcssa, %for.end1848 ]
  %dim_j1299.3.lcssa.lcssa = phi i32 [ %dim_j1299.3.lcssa, %for.end1848 ]
  %dim_k1300.3.lcssa.lcssa = phi i32 [ %dim_k1300.3.lcssa, %for.end1848 ]
  %grid_i1301.3.lcssa.lcssa = phi i32 [ %grid_i1301.3.lcssa, %for.end1848 ]
  %grid_j1302.3.lcssa.lcssa = phi i32 [ %grid_j1302.3.lcssa, %for.end1848 ]
  %grid_k1303.3.lcssa.lcssa = phi i32 [ %grid_k1303.3.lcssa, %for.end1848 ]
  %buf_i1304.3.lcssa.lcssa = phi i32 [ %buf_i1304.3.lcssa, %for.end1848 ]
  %buf_j1305.3.lcssa.lcssa = phi i32 [ %buf_j1305.3.lcssa, %for.end1848 ]
  %buf_k1306.3.lcssa.lcssa = phi i32 [ %buf_k1306.3.lcssa, %for.end1848 ]
  store i32 %buffer.11.lcssa.lcssa, i32* %bufferCopy_Unpack_End, align 4, !tbaa !51
  %cmp1852 = icmp eq i32 %initialize.03560, 0
  br i1 %cmp1852, label %if.end1864.thread, label %if.end1864

if.end1864.thread:                                ; preds = %for.end1851
  %buffer.11.lcssa.lcssa.lcssa = phi i32 [ %buffer.11.lcssa.lcssa, %for.end1851 ]
  %dim_i1298.3.lcssa.lcssa.lcssa = phi i32 [ %dim_i1298.3.lcssa.lcssa, %for.end1851 ]
  %dim_j1299.3.lcssa.lcssa.lcssa = phi i32 [ %dim_j1299.3.lcssa.lcssa, %for.end1851 ]
  %dim_k1300.3.lcssa.lcssa.lcssa = phi i32 [ %dim_k1300.3.lcssa.lcssa, %for.end1851 ]
  %grid_i1301.3.lcssa.lcssa.lcssa = phi i32 [ %grid_i1301.3.lcssa.lcssa, %for.end1851 ]
  %grid_j1302.3.lcssa.lcssa.lcssa = phi i32 [ %grid_j1302.3.lcssa.lcssa, %for.end1851 ]
  %grid_k1303.3.lcssa.lcssa.lcssa = phi i32 [ %grid_k1303.3.lcssa.lcssa, %for.end1851 ]
  %buf_i1304.3.lcssa.lcssa.lcssa = phi i32 [ %buf_i1304.3.lcssa.lcssa, %for.end1851 ]
  %buf_j1305.3.lcssa.lcssa.lcssa = phi i32 [ %buf_j1305.3.lcssa.lcssa, %for.end1851 ]
  %buf_k1306.3.lcssa.lcssa.lcssa = phi i32 [ %buf_k1306.3.lcssa.lcssa, %for.end1851 ]
  %send_i.3.lcssa.lcssa.lcssa = phi i32 [ %send_i.3.lcssa.lcssa, %for.end1851 ]
  %send_j.3.lcssa.lcssa.lcssa = phi i32 [ %send_j.3.lcssa.lcssa, %for.end1851 ]
  %send_k.3.lcssa.lcssa.lcssa = phi i32 [ %send_k.3.lcssa.lcssa, %for.end1851 ]
  %recv_i.3.lcssa.lcssa.lcssa = phi i32 [ %recv_i.3.lcssa.lcssa, %for.end1851 ]
  %recv_j.3.lcssa.lcssa.lcssa = phi i32 [ %recv_j.3.lcssa.lcssa, %for.end1851 ]
  %recv_k.3.lcssa.lcssa.lcssa = phi i32 [ %recv_k.3.lcssa.lcssa, %for.end1851 ]
  %dim_i804.3.lcssa.lcssa.lcssa = phi i32 [ %dim_i804.3.lcssa.lcssa, %for.end1851 ]
  %dim_j805.3.lcssa.lcssa.lcssa = phi i32 [ %dim_j805.3.lcssa.lcssa, %for.end1851 ]
  %dim_k806.3.lcssa.lcssa.lcssa = phi i32 [ %dim_k806.3.lcssa.lcssa, %for.end1851 ]
  %grid_i.3.lcssa.lcssa.lcssa = phi i32 [ %grid_i.3.lcssa.lcssa, %for.end1851 ]
  %grid_j.3.lcssa.lcssa.lcssa = phi i32 [ %grid_j.3.lcssa.lcssa, %for.end1851 ]
  %grid_k.3.lcssa.lcssa.lcssa = phi i32 [ %grid_k.3.lcssa.lcssa, %for.end1851 ]
  %dim_i.3.lcssa.lcssa.lcssa = phi i32 [ %dim_i.3.lcssa.lcssa, %for.end1851 ]
  %dim_j.3.lcssa.lcssa.lcssa = phi i32 [ %dim_j.3.lcssa.lcssa, %for.end1851 ]
  %dim_k.3.lcssa.lcssa.lcssa = phi i32 [ %dim_k.3.lcssa.lcssa, %for.end1851 ]
  %sd_k_hi.33855.lcssa.lcssa = phi i32 [ %sd_k_hi.33855.lcssa, %for.end1851 ]
  %sd_k_lo.33858.lcssa.lcssa = phi i32 [ %sd_k_lo.33858.lcssa, %for.end1851 ]
  %sd_j_lo.3.lcssa.lcssa = phi i32 [ %sd_j_lo.3.lcssa, %for.end1851 ]
  %sd_j_hi.3.lcssa.lcssa = phi i32 [ %sd_j_hi.3.lcssa, %for.end1851 ]
  %sd_i_lo.3.lcssa.lcssa = phi i32 [ %sd_i_lo.3.lcssa, %for.end1851 ]
  %sd_i_hi.3.lcssa.lcssa = phi i32 [ %sd_i_hi.3.lcssa, %for.end1851 ]
  %conv1855 = sext i32 %buffer.11.lcssa.lcssa.lcssa to i64
  %mul1856 = mul nsw i64 %conv1855, 88
  %call1857 = tail call noalias i8* @malloc(i64 %mul1856) #1
  store i8* %call1857, i8** %161, align 8, !tbaa !1
  %add1863 = add i64 %mul1856, %memory_allocated.83561.ph
  br label %for.body373.outer

if.end1864:                                       ; preds = %for.end1851
  %inc1866 = add nuw nsw i32 %initialize.03560, 1
  %exitcond3742 = icmp eq i32 %inc1866, 2
  br i1 %exitcond3742, label %for.end1867, label %for.body373

for.end1867:                                      ; preds = %if.end1864
  %memory_allocated.83561.ph.lcssa = phi i64 [ %memory_allocated.83561.ph, %if.end1864 ]
  %dim_i1298.3.lcssa.lcssa.lcssa3998 = phi i32 [ %dim_i1298.3.lcssa.lcssa, %if.end1864 ]
  %dim_j1299.3.lcssa.lcssa.lcssa3997 = phi i32 [ %dim_j1299.3.lcssa.lcssa, %if.end1864 ]
  %dim_k1300.3.lcssa.lcssa.lcssa3996 = phi i32 [ %dim_k1300.3.lcssa.lcssa, %if.end1864 ]
  %grid_i1301.3.lcssa.lcssa.lcssa3995 = phi i32 [ %grid_i1301.3.lcssa.lcssa, %if.end1864 ]
  %grid_j1302.3.lcssa.lcssa.lcssa3994 = phi i32 [ %grid_j1302.3.lcssa.lcssa, %if.end1864 ]
  %grid_k1303.3.lcssa.lcssa.lcssa3993 = phi i32 [ %grid_k1303.3.lcssa.lcssa, %if.end1864 ]
  %buf_i1304.3.lcssa.lcssa.lcssa3992 = phi i32 [ %buf_i1304.3.lcssa.lcssa, %if.end1864 ]
  %buf_j1305.3.lcssa.lcssa.lcssa3991 = phi i32 [ %buf_j1305.3.lcssa.lcssa, %if.end1864 ]
  %buf_k1306.3.lcssa.lcssa.lcssa3990 = phi i32 [ %buf_k1306.3.lcssa.lcssa, %if.end1864 ]
  %send_i.3.lcssa.lcssa.lcssa3989 = phi i32 [ %send_i.3.lcssa.lcssa, %if.end1864 ]
  %send_j.3.lcssa.lcssa.lcssa3988 = phi i32 [ %send_j.3.lcssa.lcssa, %if.end1864 ]
  %send_k.3.lcssa.lcssa.lcssa3987 = phi i32 [ %send_k.3.lcssa.lcssa, %if.end1864 ]
  %recv_i.3.lcssa.lcssa.lcssa3986 = phi i32 [ %recv_i.3.lcssa.lcssa, %if.end1864 ]
  %recv_j.3.lcssa.lcssa.lcssa3985 = phi i32 [ %recv_j.3.lcssa.lcssa, %if.end1864 ]
  %recv_k.3.lcssa.lcssa.lcssa3984 = phi i32 [ %recv_k.3.lcssa.lcssa, %if.end1864 ]
  %dim_i804.3.lcssa.lcssa.lcssa3983 = phi i32 [ %dim_i804.3.lcssa.lcssa, %if.end1864 ]
  %dim_j805.3.lcssa.lcssa.lcssa3982 = phi i32 [ %dim_j805.3.lcssa.lcssa, %if.end1864 ]
  %dim_k806.3.lcssa.lcssa.lcssa3981 = phi i32 [ %dim_k806.3.lcssa.lcssa, %if.end1864 ]
  %grid_i.3.lcssa.lcssa.lcssa3980 = phi i32 [ %grid_i.3.lcssa.lcssa, %if.end1864 ]
  %grid_j.3.lcssa.lcssa.lcssa3979 = phi i32 [ %grid_j.3.lcssa.lcssa, %if.end1864 ]
  %grid_k.3.lcssa.lcssa.lcssa3978 = phi i32 [ %grid_k.3.lcssa.lcssa, %if.end1864 ]
  %dim_i.3.lcssa.lcssa.lcssa3977 = phi i32 [ %dim_i.3.lcssa.lcssa, %if.end1864 ]
  %dim_j.3.lcssa.lcssa.lcssa3976 = phi i32 [ %dim_j.3.lcssa.lcssa, %if.end1864 ]
  %dim_k.3.lcssa.lcssa.lcssa3975 = phi i32 [ %dim_k.3.lcssa.lcssa, %if.end1864 ]
  %sd_k_hi.33855.lcssa.lcssa3974 = phi i32 [ %sd_k_hi.33855.lcssa, %if.end1864 ]
  %sd_k_lo.33858.lcssa.lcssa3973 = phi i32 [ %sd_k_lo.33858.lcssa, %if.end1864 ]
  %sd_j_lo.3.lcssa.lcssa3972 = phi i32 [ %sd_j_lo.3.lcssa, %if.end1864 ]
  %sd_j_hi.3.lcssa.lcssa3971 = phi i32 [ %sd_j_hi.3.lcssa, %if.end1864 ]
  %sd_i_lo.3.lcssa.lcssa3970 = phi i32 [ %sd_i_lo.3.lcssa, %if.end1864 ]
  %sd_i_hi.3.lcssa.lcssa3969 = phi i32 [ %sd_i_hi.3.lcssa, %if.end1864 ]
  %indvars.iv.next3744 = add nuw nsw i64 %indvars.iv3743, 1
  %466 = load i32, i32* %numLevels81, align 4, !tbaa !117
  %467 = sext i32 %466 to i64
  %cmp367 = icmp slt i64 %indvars.iv.next3744, %467
  br i1 %cmp367, label %for.cond370.preheader, label %for.end1870.loopexit

for.end1870.loopexit:                             ; preds = %for.end1867
  %memory_allocated.83561.ph.lcssa.lcssa = phi i64 [ %memory_allocated.83561.ph.lcssa, %for.end1867 ]
  br label %for.end1870

for.end1870:                                      ; preds = %for.end1870.loopexit, %for.cond365.preheader
  %memory_allocated.7.lcssa = phi i64 [ %memory_allocated.5.lcssa.lcssa.lcssa, %for.cond365.preheader ], [ %memory_allocated.83561.ph.lcssa.lcssa, %for.end1870.loopexit ]
  %468 = load i32, i32* %rank1, align 4, !tbaa !41
  %cmp1872 = icmp eq i32 %468, 0
  br i1 %cmp1872, label %if.then1874, label %if.end1893

if.then1874:                                      ; preds = %for.end1870
  %puts = tail call i32 @puts(i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @str.48, i64 0, i64 0))
  %469 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call1876 = tail call i32 @fflush(%struct._IO_FILE* %469)
  %call1877 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0), i32 %subdomain_dim_i, i32 %subdomain_dim_i, i32 %subdomain_dim_i)
  %mul1878 = mul nsw i32 %subdomains_per_rank_in_i, %subdomain_dim_i
  %mul1879 = mul nsw i32 %subdomains_per_rank_in_j, %subdomain_dim_i
  %mul1880 = mul nsw i32 %subdomains_per_rank_in_k, %subdomain_dim_i
  %call1881 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5.7, i64 0, i64 0), i32 %mul1878, i32 %mul1879, i32 %mul1880)
  %mul1883 = mul nsw i32 %mul44, %subdomain_dim_i
  %mul1885 = mul nsw i32 %mul46, %subdomain_dim_i
  %mul1887 = mul nsw i32 %mul49, %subdomain_dim_i
  %call1888 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0), i32 %mul1883, i32 %mul1885, i32 %mul1887)
  %call1889 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i32 %ghosts)
  %shr1890 = lshr i64 %memory_allocated.7.lcssa, 20
  %call1891 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8.8, i64 0, i64 0), i64 %shr1890)
  %470 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call1892 = tail call i32 @fflush(%struct._IO_FILE* %470)
  br label %if.end1893

if.end1893:                                       ; preds = %if.then1874, %for.end1870
  %conv1894 = trunc i64 %memory_allocated.7.lcssa to i32
  call void @llvm.lifetime.end(i64 108, i8* %128) #1
  ret i32 %conv1894

if.end355.1:                                      ; preds = %if.end355
  %471 = load i32, i32* %i39, align 8, !tbaa !106
  %mul305.1 = mul nsw i32 %471, %subdomain_dim_i
  %bufSize.1.1 = mul nsw i32 %mul305.1, %ghosts
  %bufSize.2.1 = mul nsw i32 %bufSize.1.1, %ghosts
  %arrayidx330.1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 6, i64 %144
  %472 = bitcast double** %arrayidx330.1 to i8**
  %conv331.1 = sext i32 %bufSize.2.1 to i64
  %mul332.1 = shl nsw i64 %conv331.1, 3
  %call333.1 = tail call i32 @posix_memalign(i8** %472, i64 64, i64 %mul332.1) #1
  %arrayidx335.1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 7, i64 %144
  %473 = bitcast double** %arrayidx335.1 to i8**
  %call338.1 = tail call i32 @posix_memalign(i8** %473, i64 64, i64 %mul332.1) #1
  %474 = load i8*, i8** %472, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %474, i8 0, i64 %mul332.1, i32 8, i1 false)
  %475 = load i8*, i8** %473, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %475, i8 0, i64 %mul332.1, i32 8, i1 false)
  %factor.1 = shl nsw i64 %conv331.1, 4
  %add354.1 = add i64 %factor.1, %memory_allocated.6
  %476 = add nsw i64 %144, 1
  %cmp297.2 = icmp eq i64 %476, 13
  br i1 %cmp297.2, label %for.inc359, label %if.end318.2

if.end318.2:                                      ; preds = %if.end355, %if.end355.1
  %477 = phi i64 [ %476, %if.end355.1 ], [ 14, %if.end355 ]
  %memory_allocated.6.13866 = phi i64 [ %add354.1, %if.end355.1 ], [ %memory_allocated.6, %if.end355 ]
  %arrayidx330.2 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 6, i64 %477
  %478 = bitcast double** %arrayidx330.2 to i8**
  %call333.2 = tail call i32 @posix_memalign(i8** %478, i64 64, i64 %mul332.2) #1
  %arrayidx335.2 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 7, i64 %477
  %479 = bitcast double** %arrayidx335.2 to i8**
  %call338.2 = tail call i32 @posix_memalign(i8** %479, i64 64, i64 %mul332.2) #1
  %480 = load i8*, i8** %478, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %480, i8 0, i64 %mul332.2, i32 8, i1 false)
  %481 = load i8*, i8** %479, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %481, i8 0, i64 %mul332.2, i32 8, i1 false)
  %add354.2 = add i64 %factor.2, %memory_allocated.6.13866
  br label %for.inc359

if.end355.us3672.1:                               ; preds = %if.end355.us3672
  %482 = load i32, i32* %i39, align 8, !tbaa !106
  %mul305.us3650.1 = mul nsw i32 %482, %subdomain_dim_i
  %bufSize.1.us3657.1 = mul nsw i32 %mul305.us3650.1, %ghosts
  %483 = load i32, i32* %k43, align 8, !tbaa !39
  %mul324.us3659.1 = mul nsw i32 %483, %subdomain_dim_i
  %bufSize.2.us3662.1 = mul nsw i32 %bufSize.1.us3657.1, %mul324.us3659.1
  %arrayidx330.us3664.1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 6, i64 %144
  %484 = bitcast double** %arrayidx330.us3664.1 to i8**
  %conv331.us3665.1 = sext i32 %bufSize.2.us3662.1 to i64
  %mul332.us3666.1 = shl nsw i64 %conv331.us3665.1, 3
  %call333.us3667.1 = tail call i32 @posix_memalign(i8** %484, i64 64, i64 %mul332.us3666.1) #1
  %arrayidx335.us3668.1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 7, i64 %144
  %485 = bitcast double** %arrayidx335.us3668.1 to i8**
  %call338.us3669.1 = tail call i32 @posix_memalign(i8** %485, i64 64, i64 %mul332.us3666.1) #1
  %486 = load i8*, i8** %484, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %486, i8 0, i64 %mul332.us3666.1, i32 8, i1 false)
  %487 = load i8*, i8** %485, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %487, i8 0, i64 %mul332.us3666.1, i32 8, i1 false)
  %factor.us3670.1 = shl nsw i64 %conv331.us3665.1, 4
  %add354.us3671.1 = add i64 %factor.us3670.1, %memory_allocated.6.us3673
  %488 = add nsw i64 %144, 1
  %cmp297.us3646.2 = icmp eq i64 %488, 13
  br i1 %cmp297.us3646.2, label %for.inc359, label %if.end318.us3655.2

if.end318.us3655.2:                               ; preds = %if.end355.us3672, %if.end355.us3672.1
  %489 = phi i64 [ %488, %if.end355.us3672.1 ], [ 14, %if.end355.us3672 ]
  %memory_allocated.6.us3673.13868 = phi i64 [ %add354.us3671.1, %if.end355.us3672.1 ], [ %memory_allocated.6.us3673, %if.end355.us3672 ]
  %490 = load i32, i32* %k43, align 8, !tbaa !39
  %mul324.us3659.2 = mul nsw i32 %490, %subdomain_dim_i
  %bufSize.2.us3662.2 = mul nsw i32 %bufSize.1.us3657.2, %mul324.us3659.2
  %arrayidx330.us3664.2 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 6, i64 %489
  %491 = bitcast double** %arrayidx330.us3664.2 to i8**
  %conv331.us3665.2 = sext i32 %bufSize.2.us3662.2 to i64
  %mul332.us3666.2 = shl nsw i64 %conv331.us3665.2, 3
  %call333.us3667.2 = tail call i32 @posix_memalign(i8** %491, i64 64, i64 %mul332.us3666.2) #1
  %arrayidx335.us3668.2 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 7, i64 %489
  %492 = bitcast double** %arrayidx335.us3668.2 to i8**
  %call338.us3669.2 = tail call i32 @posix_memalign(i8** %492, i64 64, i64 %mul332.us3666.2) #1
  %493 = load i8*, i8** %491, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %493, i8 0, i64 %mul332.us3666.2, i32 8, i1 false)
  %494 = load i8*, i8** %492, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %494, i8 0, i64 %mul332.us3666.2, i32 8, i1 false)
  %factor.us3670.2 = shl nsw i64 %conv331.us3665.2, 4
  %add354.us3671.2 = add i64 %factor.us3670.2, %memory_allocated.6.us3673.13868
  br label %for.inc359

if.then311.us.1:                                  ; preds = %if.end355.us
  %495 = load i64, i64* %135, align 8
  %496 = trunc i64 %495 to i32
  %mul305.us.1 = mul nsw i32 %496, %subdomain_dim_i
  %497 = lshr i64 %495, 32
  %498 = trunc i64 %497 to i32
  %mul314.us.1 = mul nsw i32 %498, %subdomain_dim_i
  %bufSize.1.us.1 = mul nsw i32 %mul314.us.1, %mul305.us.1
  br i1 %cmp319, label %if.then321.us.1, label %if.end355.us.1

if.then321.us.1:                                  ; preds = %if.then311.us.1
  %499 = load i32, i32* %k43, align 8, !tbaa !39
  %mul324.us.1 = mul nsw i32 %499, %subdomain_dim_i
  br label %if.end355.us.1

if.end355.us.1:                                   ; preds = %if.then311.us.1, %if.then321.us.1
  %mul324.pn.us.1 = phi i32 [ %mul324.us.1, %if.then321.us.1 ], [ %ghosts, %if.then311.us.1 ]
  %bufSize.2.us.1 = mul nsw i32 %bufSize.1.us.1, %mul324.pn.us.1
  %arrayidx330.us.1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 6, i64 %144
  %500 = bitcast double** %arrayidx330.us.1 to i8**
  %conv331.us.1 = sext i32 %bufSize.2.us.1 to i64
  %mul332.us.1 = shl nsw i64 %conv331.us.1, 3
  %call333.us.1 = tail call i32 @posix_memalign(i8** %500, i64 64, i64 %mul332.us.1) #1
  %arrayidx335.us.1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 7, i64 %144
  %501 = bitcast double** %arrayidx335.us.1 to i8**
  %call338.us.1 = tail call i32 @posix_memalign(i8** %501, i64 64, i64 %mul332.us.1) #1
  %502 = load i8*, i8** %500, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %502, i8 0, i64 %mul332.us.1, i32 8, i1 false)
  %503 = load i8*, i8** %501, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %503, i8 0, i64 %mul332.us.1, i32 8, i1 false)
  %factor.us.1 = shl nsw i64 %conv331.us.1, 4
  %add354.us.1 = add i64 %factor.us.1, %memory_allocated.6.us
  %504 = add nsw i64 %144, 1
  %cmp297.us.2 = icmp eq i64 %504, 13
  br i1 %cmp297.us.2, label %for.inc359, label %if.then311.us.2

if.then311.us.2:                                  ; preds = %if.end355.us, %if.end355.us.1
  %505 = phi i64 [ %504, %if.end355.us.1 ], [ 14, %if.end355.us ]
  %memory_allocated.6.us.13870 = phi i64 [ %add354.us.1, %if.end355.us.1 ], [ %memory_allocated.6.us, %if.end355.us ]
  %.pre3846 = load i32, i32* %j41, align 4, !tbaa !36
  %mul314.us.2 = mul nsw i32 %.pre3846, %subdomain_dim_i
  %bufSize.1.us.2 = mul nsw i32 %mul314.us.2, %ghosts
  br i1 %cmp319, label %if.then321.us.2, label %if.end328.us.2

if.then321.us.2:                                  ; preds = %if.then311.us.2
  %506 = load i32, i32* %k43, align 8, !tbaa !39
  %mul324.us.2 = mul nsw i32 %506, %subdomain_dim_i
  br label %if.end328.us.2

if.end328.us.2:                                   ; preds = %if.then321.us.2, %if.then311.us.2
  %mul324.pn.us.2 = phi i32 [ %mul324.us.2, %if.then321.us.2 ], [ %ghosts, %if.then311.us.2 ]
  %bufSize.2.us.2 = mul nsw i32 %bufSize.1.us.2, %mul324.pn.us.2
  %arrayidx330.us.2 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 6, i64 %505
  %507 = bitcast double** %arrayidx330.us.2 to i8**
  %conv331.us.2 = sext i32 %bufSize.2.us.2 to i64
  %mul332.us.2 = shl nsw i64 %conv331.us.2, 3
  %call333.us.2 = tail call i32 @posix_memalign(i8** %507, i64 64, i64 %mul332.us.2) #1
  %arrayidx335.us.2 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 7, i64 %505
  %508 = bitcast double** %arrayidx335.us.2 to i8**
  %call338.us.2 = tail call i32 @posix_memalign(i8** %508, i64 64, i64 %mul332.us.2) #1
  %509 = load i8*, i8** %507, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %509, i8 0, i64 %mul332.us.2, i32 8, i1 false)
  %510 = load i8*, i8** %508, align 8, !tbaa !1
  tail call void @llvm.memset.p0i8.i64(i8* %510, i8 0, i64 %mul332.us.2, i32 8, i1 false)
  %factor.us.2 = shl nsw i64 %conv331.us.2, 4
  %add354.us.2 = add i64 %factor.us.2, %memory_allocated.6.us.13870
  br label %for.inc359

if.then126.1:                                     ; preds = %if.end187
  br i1 %cmp128.1, label %if.then130.1, label %if.end134.1

if.then130.1:                                     ; preds = %if.then126.1
  store i32 -1, i32* %arrayidx121.1, align 4, !tbaa !35
  br label %if.end134.1

if.end134.1:                                      ; preds = %if.then130.1, %if.then126.1
  br i1 %cmp136.1, label %if.end143.1, label %if.then138.1

if.then138.1:                                     ; preds = %if.end134.1
  store i32 -1, i32* %arrayidx121.1, align 4, !tbaa !35
  br label %if.end143.1

if.end143.1:                                      ; preds = %if.then138.1, %if.end134.1, %if.end187
  %511 = load i32, i32* %j77, align 4, !tbaa !116
  %cmp146.1 = icmp eq i32 %511, 0
  br i1 %cmp146.1, label %if.end165.1, label %if.then160.1

if.then160.1:                                     ; preds = %if.end143.1
  store i32 -1, i32* %arrayidx121.1, align 4, !tbaa !35
  br label %if.end165.1

if.end165.1:                                      ; preds = %if.then160.1, %if.end143.1
  %512 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp168.1 = icmp eq i32 %512, 0
  br i1 %cmp168.1, label %if.end187.1, label %if.then170.1

if.then170.1:                                     ; preds = %if.end165.1
  br i1 %cmp172, label %if.then174.1, label %if.end178.1

if.then174.1:                                     ; preds = %if.then170.1
  store i32 -1, i32* %arrayidx121.1, align 4, !tbaa !35
  br label %if.end178.1

if.end178.1:                                      ; preds = %if.then174.1, %if.then170.1
  br i1 %cmp180, label %if.end187.1, label %if.then182.1

if.then182.1:                                     ; preds = %if.end178.1
  store i32 -1, i32* %arrayidx121.1, align 4, !tbaa !35
  br label %if.end187.1

if.end187.1:                                      ; preds = %if.then182.1, %if.end178.1, %if.end165.1
  %513 = add nsw i64 %51, 1
  %rem.2 = srem i32 %36, %ranks_in_i
  %add116.2 = add nsw i32 %mul115, %rem.2
  %add119.2 = add nsw i32 %add116.2, %mul118
  %arrayidx121.2 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 5, i64 %513
  store i32 %add119.2, i32* %arrayidx121.2, align 4, !tbaa !35
  %514 = load i32, i32* %i74, align 8, !tbaa !115
  %cmp124.2 = icmp eq i32 %514, 0
  br i1 %cmp124.2, label %if.end143.2, label %if.then126.2

if.then126.2:                                     ; preds = %if.end187.1
  br i1 %cmp128.2, label %if.then130.2, label %if.end134.2

if.then130.2:                                     ; preds = %if.then126.2
  store i32 -1, i32* %arrayidx121.2, align 4, !tbaa !35
  br label %if.end134.2

if.end134.2:                                      ; preds = %if.then130.2, %if.then126.2
  br i1 %cmp136.2, label %if.end143.2, label %if.then138.2

if.then138.2:                                     ; preds = %if.end134.2
  store i32 -1, i32* %arrayidx121.2, align 4, !tbaa !35
  br label %if.end143.2

if.end143.2:                                      ; preds = %if.then138.2, %if.end134.2, %if.end187.1
  %515 = load i32, i32* %j77, align 4, !tbaa !116
  %cmp146.2 = icmp eq i32 %515, 0
  br i1 %cmp146.2, label %if.end165.2, label %if.then160.2

if.then160.2:                                     ; preds = %if.end143.2
  store i32 -1, i32* %arrayidx121.2, align 4, !tbaa !35
  br label %if.end165.2

if.end165.2:                                      ; preds = %if.then160.2, %if.end143.2
  %516 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp168.2 = icmp eq i32 %516, 0
  br i1 %cmp168.2, label %for.inc191, label %if.then170.2

if.then170.2:                                     ; preds = %if.end165.2
  br i1 %cmp172, label %if.then174.2, label %if.end178.2

if.then174.2:                                     ; preds = %if.then170.2
  store i32 -1, i32* %arrayidx121.2, align 4, !tbaa !35
  br label %if.end178.2

if.end178.2:                                      ; preds = %if.then174.2, %if.then170.2
  br i1 %cmp180, label %for.inc191, label %if.then182.2

if.then182.2:                                     ; preds = %if.end178.2
  store i32 -1, i32* %arrayidx121.2, align 4, !tbaa !35
  br label %for.inc191

if.then126.us3687.1:                              ; preds = %if.end187.us3705
  br i1 %cmp128.us3688.1, label %if.then130.us3689.1, label %if.end134.us3690.1

if.then130.us3689.1:                              ; preds = %if.then126.us3687.1
  store i32 -1, i32* %arrayidx121.us3685.1, align 4, !tbaa !35
  br label %if.end134.us3690.1

if.end134.us3690.1:                               ; preds = %if.then130.us3689.1, %if.then126.us3687.1
  br i1 %cmp136.us3691.1, label %if.end143.us3693.1, label %if.then138.us3692.1

if.then138.us3692.1:                              ; preds = %if.end134.us3690.1
  store i32 -1, i32* %arrayidx121.us3685.1, align 4, !tbaa !35
  br label %if.end143.us3693.1

if.end143.us3693.1:                               ; preds = %if.then138.us3692.1, %if.end134.us3690.1, %if.end187.us3705
  %517 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp168.us3700.1 = icmp eq i32 %517, 0
  br i1 %cmp168.us3700.1, label %if.end187.us3705.1, label %if.then170.us3701.1

if.then170.us3701.1:                              ; preds = %if.end143.us3693.1
  br i1 %cmp172, label %if.then174.us3702.1, label %if.end178.us3703.1

if.then174.us3702.1:                              ; preds = %if.then170.us3701.1
  store i32 -1, i32* %arrayidx121.us3685.1, align 4, !tbaa !35
  br label %if.end178.us3703.1

if.end178.us3703.1:                               ; preds = %if.then174.us3702.1, %if.then170.us3701.1
  br i1 %cmp180, label %if.end187.us3705.1, label %if.then182.us3704.1

if.then182.us3704.1:                              ; preds = %if.end178.us3703.1
  store i32 -1, i32* %arrayidx121.us3685.1, align 4, !tbaa !35
  br label %if.end187.us3705.1

if.end187.us3705.1:                               ; preds = %if.then182.us3704.1, %if.end178.us3703.1, %if.end143.us3693.1
  %518 = add nsw i64 %51, 1
  %rem.us3681.2 = srem i32 %30, %ranks_in_i
  %add116.us3682.2 = add nsw i32 %mul115, %rem.us3681.2
  %add119.us3683.2 = add nsw i32 %add116.us3682.2, %mul118
  %arrayidx121.us3685.2 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 5, i64 %518
  store i32 %add119.us3683.2, i32* %arrayidx121.us3685.2, align 4, !tbaa !35
  %519 = load i32, i32* %i74, align 8, !tbaa !115
  %cmp124.us3686.2 = icmp eq i32 %519, 0
  br i1 %cmp124.us3686.2, label %if.end143.us3693.2, label %if.then126.us3687.2

if.then126.us3687.2:                              ; preds = %if.end187.us3705.1
  br i1 %cmp128.us3688.2, label %if.then130.us3689.2, label %if.end134.us3690.2

if.then130.us3689.2:                              ; preds = %if.then126.us3687.2
  store i32 -1, i32* %arrayidx121.us3685.2, align 4, !tbaa !35
  br label %if.end134.us3690.2

if.end134.us3690.2:                               ; preds = %if.then130.us3689.2, %if.then126.us3687.2
  br i1 %cmp136.us3691.2, label %if.end143.us3693.2, label %if.then138.us3692.2

if.then138.us3692.2:                              ; preds = %if.end134.us3690.2
  store i32 -1, i32* %arrayidx121.us3685.2, align 4, !tbaa !35
  br label %if.end143.us3693.2

if.end143.us3693.2:                               ; preds = %if.then138.us3692.2, %if.end134.us3690.2, %if.end187.us3705.1
  %520 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp168.us3700.2 = icmp eq i32 %520, 0
  br i1 %cmp168.us3700.2, label %for.inc191, label %if.then170.us3701.2

if.then170.us3701.2:                              ; preds = %if.end143.us3693.2
  br i1 %cmp172, label %if.then174.us3702.2, label %if.end178.us3703.2

if.then174.us3702.2:                              ; preds = %if.then170.us3701.2
  store i32 -1, i32* %arrayidx121.us3685.2, align 4, !tbaa !35
  br label %if.end178.us3703.2

if.end178.us3703.2:                               ; preds = %if.then174.us3702.2, %if.then170.us3701.2
  br i1 %cmp180, label %for.inc191, label %if.then182.us3704.2

if.then182.us3704.2:                              ; preds = %if.end178.us3703.2
  store i32 -1, i32* %arrayidx121.us3685.2, align 4, !tbaa !35
  br label %for.inc191

if.then126.us.1:                                  ; preds = %if.end187.us
  br i1 %cmp128.us.1, label %if.then130.us.1, label %if.end134.us.1

if.then130.us.1:                                  ; preds = %if.then126.us.1
  store i32 -1, i32* %arrayidx121.us.1, align 4, !tbaa !35
  br label %if.end134.us.1

if.end134.us.1:                                   ; preds = %if.then130.us.1, %if.then126.us.1
  br i1 %cmp136.us.1, label %if.end143.us.1, label %if.then138.us.1

if.then138.us.1:                                  ; preds = %if.end134.us.1
  store i32 -1, i32* %arrayidx121.us.1, align 4, !tbaa !35
  br label %if.end143.us.1

if.end143.us.1:                                   ; preds = %if.then138.us.1, %if.end134.us.1, %if.end187.us
  %521 = load i32, i32* %j77, align 4, !tbaa !116
  %cmp146.us.1 = icmp eq i32 %521, 0
  br i1 %cmp146.us.1, label %if.end165.us.1, label %if.then152.us.1

if.then152.us.1:                                  ; preds = %if.end143.us.1
  store i32 -1, i32* %arrayidx121.us.1, align 4
  br label %if.end165.us.1

if.end165.us.1:                                   ; preds = %if.then152.us.1, %if.end143.us.1
  %522 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp168.us.1 = icmp eq i32 %522, 0
  br i1 %cmp168.us.1, label %if.end187.us.1, label %if.then170.us.1

if.then170.us.1:                                  ; preds = %if.end165.us.1
  br i1 %cmp172, label %if.then174.us.1, label %if.end178.us.1

if.then174.us.1:                                  ; preds = %if.then170.us.1
  store i32 -1, i32* %arrayidx121.us.1, align 4, !tbaa !35
  br label %if.end178.us.1

if.end178.us.1:                                   ; preds = %if.then174.us.1, %if.then170.us.1
  br i1 %cmp180, label %if.end187.us.1, label %if.then182.us.1

if.then182.us.1:                                  ; preds = %if.end178.us.1
  store i32 -1, i32* %arrayidx121.us.1, align 4, !tbaa !35
  br label %if.end187.us.1

if.end187.us.1:                                   ; preds = %if.then182.us.1, %if.end178.us.1, %if.end165.us.1
  %523 = add nsw i64 %51, 1
  %rem.us.2 = srem i32 %24, %ranks_in_i
  %add116.us.2 = add nsw i32 %mul115, %rem.us.2
  %add119.us.2 = add nsw i32 %add116.us.2, %mul118
  %arrayidx121.us.2 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 5, i64 %523
  store i32 %add119.us.2, i32* %arrayidx121.us.2, align 4, !tbaa !35
  %524 = load i32, i32* %i74, align 8, !tbaa !115
  %cmp124.us.2 = icmp eq i32 %524, 0
  br i1 %cmp124.us.2, label %if.end143.us.2, label %if.then126.us.2

if.then126.us.2:                                  ; preds = %if.end187.us.1
  br i1 %cmp128.us.2, label %if.then130.us.2, label %if.end134.us.2

if.then130.us.2:                                  ; preds = %if.then126.us.2
  store i32 -1, i32* %arrayidx121.us.2, align 4, !tbaa !35
  br label %if.end134.us.2

if.end134.us.2:                                   ; preds = %if.then130.us.2, %if.then126.us.2
  br i1 %cmp136.us.2, label %if.end143.us.2, label %if.then138.us.2

if.then138.us.2:                                  ; preds = %if.end134.us.2
  store i32 -1, i32* %arrayidx121.us.2, align 4, !tbaa !35
  br label %if.end143.us.2

if.end143.us.2:                                   ; preds = %if.then138.us.2, %if.end134.us.2, %if.end187.us.1
  %525 = load i32, i32* %j77, align 4, !tbaa !116
  %cmp146.us.2 = icmp eq i32 %525, 0
  br i1 %cmp146.us.2, label %if.end165.us.2, label %if.then152.us.2

if.then152.us.2:                                  ; preds = %if.end143.us.2
  store i32 -1, i32* %arrayidx121.us.2, align 4
  br label %if.end165.us.2

if.end165.us.2:                                   ; preds = %if.then152.us.2, %if.end143.us.2
  %526 = load i32, i32* %k80, align 8, !tbaa !109
  %cmp168.us.2 = icmp eq i32 %526, 0
  br i1 %cmp168.us.2, label %for.inc191, label %if.then170.us.2

if.then170.us.2:                                  ; preds = %if.end165.us.2
  br i1 %cmp172, label %if.then174.us.2, label %if.end178.us.2

if.then174.us.2:                                  ; preds = %if.then170.us.2
  store i32 -1, i32* %arrayidx121.us.2, align 4, !tbaa !35
  br label %if.end178.us.2

if.end178.us.2:                                   ; preds = %if.then174.us.2, %if.then170.us.2
  br i1 %cmp180, label %for.inc191, label %if.then182.us.2

if.then182.us.2:                                  ; preds = %if.end178.us.2
  store i32 -1, i32* %arrayidx121.us.2, align 4, !tbaa !35
  br label %for.inc191
}

; Function Attrs: nounwind uwtable
define void @destroy_domain(%struct.domain_type* nocapture readonly %domain) #3 {
entry:
  %rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 21
  %0 = load i32, i32* %rank, align 4, !tbaa !41
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %for.cond.preheader

if.then:                                          ; preds = %entry
  %call = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0))
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call1 = tail call i32 @fflush(%struct._IO_FILE* %1)
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.then, %entry
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 22
  %2 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %cmp217 = icmp sgt i32 %2, 0
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  br i1 %cmp217, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %for.cond.preheader
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %destroy_subdomain.exit
  %indvars.iv = phi i64 [ %indvars.iv.next, %destroy_subdomain.exit ], [ 0, %for.body.preheader ]
  %3 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %numLevels.i = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %3, i64 %indvars.iv, i32 2
  %4 = load i32, i32* %numLevels.i, align 8, !tbaa !98
  %cmp7.i = icmp sgt i32 %4, 0
  %levels.i = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %3, i64 %indvars.iv, i32 5
  br i1 %cmp7.i, label %for.body.i.preheader, label %destroy_subdomain.exit

for.body.i.preheader:                             ; preds = %for.body
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.preheader, %for.body.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ 0, %for.body.i.preheader ]
  %5 = load %struct.box_type*, %struct.box_type** %levels.i, align 8, !tbaa !28
  %arrayidx.i = getelementptr inbounds %struct.box_type, %struct.box_type* %5, i64 %indvars.iv.i
  tail call void @destroy_box(%struct.box_type* %arrayidx.i) #1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %6 = load i32, i32* %numLevels.i, align 8, !tbaa !98
  %7 = sext i32 %6 to i64
  %cmp.i = icmp slt i64 %indvars.iv.next.i, %7
  br i1 %cmp.i, label %for.body.i, label %destroy_subdomain.exit.loopexit

destroy_subdomain.exit.loopexit:                  ; preds = %for.body.i
  br label %destroy_subdomain.exit

destroy_subdomain.exit:                           ; preds = %destroy_subdomain.exit.loopexit, %for.body
  %8 = bitcast %struct.box_type** %levels.i to i8**
  %9 = load i8*, i8** %8, align 8, !tbaa !28
  tail call void @free(i8* %9) #1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %11 = sext i32 %10 to i64
  %cmp2 = icmp slt i64 %indvars.iv.next, %11
  br i1 %cmp2, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %destroy_subdomain.exit
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.cond.preheader
  %12 = bitcast %struct.subdomain_type** %subdomains to i8**
  %13 = load i8*, i8** %12, align 8, !tbaa !24
  tail call void @free(i8* %13) #1
  %14 = load i32, i32* %rank, align 4, !tbaa !41
  %cmp5 = icmp eq i32 %14, 0
  br i1 %cmp5, label %if.then6, label %if.end9

if.then6:                                         ; preds = %for.end
  %puts = tail call i32 @puts(i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @str.48, i64 0, i64 0))
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call8 = tail call i32 @fflush(%struct._IO_FILE* %15)
  br label %if.end9

if.end9:                                          ; preds = %if.then6, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define void @print_timing(%struct.domain_type* readonly %domain) #3 {
entry:
  %numLevels1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 23
  %0 = load i32, i32* %numLevels1, align 4, !tbaa !117
  %call = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %call2 = tail call i32 (i32, ...) bitcast (i32 (...)* @sleep to i32 (i32, ...)*)(i32 1) #1
  %call3 = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub = sub i64 %call3, %call
  %conv = uitofp i64 %sub to double
  %div = fdiv double 1.000000e+00, %conv
  %MGSolves_performed = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 2
  %1 = load i32, i32* %MGSolves_performed, align 4, !tbaa !124
  %conv4 = sitofp i32 %1 to double
  %div5 = fdiv double %div, %conv4
  %rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 21
  %2 = load i32, i32* %rank, align 4, !tbaa !41
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %call7 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10.13, i64 0, i64 0))
  %cmp8664 = icmp sgt i32 %0, 0
  br i1 %cmp8664, label %for.body.preheader, label %for.end21.critedge

for.body.preheader:                               ; preds = %if.end
  br label %for.body

for.body:                                         ; preds = %for.body.preheader, %for.body
  %level.0665 = phi i32 [ %inc, %for.body ], [ 0, %for.body.preheader ]
  %call10 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i32 %level.0665)
  %inc = add nuw nsw i32 %level.0665, 1
  %exitcond728 = icmp eq i32 %inc, %0
  br i1 %exitcond728, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %putchar = tail call i32 @putchar(i32 10) #1
  %call12 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10.13, i64 0, i64 0))
  br i1 %cmp8664, label %for.body16.lr.ph, label %for.end37.critedge

for.body16.lr.ph:                                 ; preds = %for.end
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  br label %for.body16

for.body16:                                       ; preds = %for.body16, %for.body16.lr.ph
  %level.1663 = phi i32 [ 0, %for.body16.lr.ph ], [ %inc20, %for.body16 ]
  %3 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8, !tbaa !24
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %3, i64 0, i32 5
  %4 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %4, i64 0, i32 2, i32 0
  %5 = load i32, i32* %i, align 4, !tbaa !43
  %shr = ashr i32 %5, %level.1663
  %call18 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13.14, i64 0, i64 0), i32 %shr)
  %inc20 = add nuw nsw i32 %level.1663, 1
  %exitcond727 = icmp eq i32 %inc20, %0
  br i1 %exitcond727, label %for.end21.loopexit, label %for.body16

for.end21.critedge:                               ; preds = %if.end
  %putchar.c = tail call i32 @putchar(i32 10) #1
  %call12.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10.13, i64 0, i64 0))
  br label %for.end21

for.end21.loopexit:                               ; preds = %for.body16
  br label %for.end21

for.end21:                                        ; preds = %for.end21.loopexit, %for.end21.critedge
  %puts = tail call i32 @puts(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @str.45, i64 0, i64 0))
  %call23 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.15.15, i64 0, i64 0))
  br i1 %cmp8664, label %for.body27.preheader, label %for.end59.critedge

for.body27.preheader:                             ; preds = %for.end21
  br label %for.body27

for.body27:                                       ; preds = %for.body27.preheader, %for.body27
  %indvars.iv723 = phi i64 [ %indvars.iv.next724, %for.body27 ], [ 0, %for.body27.preheader ]
  %total.0660 = phi i64 [ %add, %for.body27 ], [ 0, %for.body27.preheader ]
  %arrayidx28 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 0, i64 %indvars.iv723
  %6 = load i64, i64* %arrayidx28, align 8, !tbaa !42
  %conv29 = uitofp i64 %6 to double
  %mul = fmul double %div5, %conv29
  %call30 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul)
  %7 = load i64, i64* %arrayidx28, align 8, !tbaa !42
  %add = add i64 %7, %total.0660
  %indvars.iv.next724 = add nuw nsw i64 %indvars.iv723, 1
  %lftr.wideiv725 = trunc i64 %indvars.iv.next724 to i32
  %exitcond726 = icmp eq i32 %lftr.wideiv725, %0
  br i1 %exitcond726, label %for.end37.loopexit, label %for.body27

for.end37.critedge:                               ; preds = %for.end
  %puts.c = tail call i32 @puts(i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @str.45, i64 0, i64 0))
  %call23.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.15.15, i64 0, i64 0))
  br label %for.end37

for.end37.loopexit:                               ; preds = %for.body27
  %add.lcssa = phi i64 [ %add, %for.body27 ]
  br label %for.end37

for.end37:                                        ; preds = %for.end37.loopexit, %for.end37.critedge
  %total.0.lcssa = phi i64 [ 0, %for.end37.critedge ], [ %add.lcssa, %for.end37.loopexit ]
  %conv38 = uitofp i64 %total.0.lcssa to double
  %mul39 = fmul double %div5, %conv38
  %call40 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul39)
  %call41 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.18, i64 0, i64 0))
  br i1 %cmp8664, label %for.body45.preheader, label %for.end81.critedge

for.body45.preheader:                             ; preds = %for.end37
  br label %for.body45

for.body45:                                       ; preds = %for.body45.preheader, %for.body45
  %indvars.iv719 = phi i64 [ %indvars.iv.next720, %for.body45 ], [ 0, %for.body45.preheader ]
  %total.1656 = phi i64 [ %add56, %for.body45 ], [ 0, %for.body45.preheader ]
  %arrayidx48 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 2, i64 %indvars.iv719
  %8 = load i64, i64* %arrayidx48, align 8, !tbaa !42
  %conv49 = uitofp i64 %8 to double
  %mul50 = fmul double %div5, %conv49
  %call51 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul50)
  %9 = load i64, i64* %arrayidx48, align 8, !tbaa !42
  %add56 = add i64 %9, %total.1656
  %indvars.iv.next720 = add nuw nsw i64 %indvars.iv719, 1
  %lftr.wideiv721 = trunc i64 %indvars.iv.next720 to i32
  %exitcond722 = icmp eq i32 %lftr.wideiv721, %0
  br i1 %exitcond722, label %for.end59.loopexit, label %for.body45

for.end59.critedge:                               ; preds = %for.end21
  %mul39.c = fmul double %div5, 0.000000e+00
  %call40.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul39.c)
  %call41.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.18, i64 0, i64 0))
  br label %for.end59

for.end59.loopexit:                               ; preds = %for.body45
  %add56.lcssa = phi i64 [ %add56, %for.body45 ]
  br label %for.end59

for.end59:                                        ; preds = %for.end59.loopexit, %for.end59.critedge
  %total.1.lcssa = phi i64 [ 0, %for.end59.critedge ], [ %add56.lcssa, %for.end59.loopexit ]
  %conv60 = uitofp i64 %total.1.lcssa to double
  %mul61 = fmul double %div5, %conv60
  %call62 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul61)
  %call63 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.19, i64 0, i64 0))
  br i1 %cmp8664, label %for.body67.preheader, label %for.end103.critedge

for.body67.preheader:                             ; preds = %for.end59
  br label %for.body67

for.body67:                                       ; preds = %for.body67.preheader, %for.body67
  %indvars.iv715 = phi i64 [ %indvars.iv.next716, %for.body67 ], [ 0, %for.body67.preheader ]
  %total.2652 = phi i64 [ %add78, %for.body67 ], [ 0, %for.body67.preheader ]
  %arrayidx70 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 3, i64 %indvars.iv715
  %10 = load i64, i64* %arrayidx70, align 8, !tbaa !42
  %conv71 = uitofp i64 %10 to double
  %mul72 = fmul double %div5, %conv71
  %call73 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul72)
  %11 = load i64, i64* %arrayidx70, align 8, !tbaa !42
  %add78 = add i64 %11, %total.2652
  %indvars.iv.next716 = add nuw nsw i64 %indvars.iv715, 1
  %lftr.wideiv717 = trunc i64 %indvars.iv.next716 to i32
  %exitcond718 = icmp eq i32 %lftr.wideiv717, %0
  br i1 %exitcond718, label %for.end81.loopexit, label %for.body67

for.end81.critedge:                               ; preds = %for.end37
  %mul61.c = fmul double %div5, 0.000000e+00
  %call62.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul61.c)
  %call63.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.19, i64 0, i64 0))
  br label %for.end81

for.end81.loopexit:                               ; preds = %for.body67
  %add78.lcssa = phi i64 [ %add78, %for.body67 ]
  br label %for.end81

for.end81:                                        ; preds = %for.end81.loopexit, %for.end81.critedge
  %total.2.lcssa = phi i64 [ 0, %for.end81.critedge ], [ %add78.lcssa, %for.end81.loopexit ]
  %conv82 = uitofp i64 %total.2.lcssa to double
  %mul83 = fmul double %div5, %conv82
  %call84 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul83)
  %call85 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.20, i64 0, i64 0))
  br i1 %cmp8664, label %for.body89.preheader, label %for.end125.critedge

for.body89.preheader:                             ; preds = %for.end81
  br label %for.body89

for.body89:                                       ; preds = %for.body89.preheader, %for.body89
  %indvars.iv711 = phi i64 [ %indvars.iv.next712, %for.body89 ], [ 0, %for.body89.preheader ]
  %total.3648 = phi i64 [ %add100, %for.body89 ], [ 0, %for.body89.preheader ]
  %arrayidx92 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 4, i64 %indvars.iv711
  %12 = load i64, i64* %arrayidx92, align 8, !tbaa !42
  %conv93 = uitofp i64 %12 to double
  %mul94 = fmul double %div5, %conv93
  %call95 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul94)
  %13 = load i64, i64* %arrayidx92, align 8, !tbaa !42
  %add100 = add i64 %13, %total.3648
  %indvars.iv.next712 = add nuw nsw i64 %indvars.iv711, 1
  %lftr.wideiv713 = trunc i64 %indvars.iv.next712 to i32
  %exitcond714 = icmp eq i32 %lftr.wideiv713, %0
  br i1 %exitcond714, label %for.end103.loopexit, label %for.body89

for.end103.critedge:                              ; preds = %for.end59
  %mul83.c = fmul double %div5, 0.000000e+00
  %call84.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul83.c)
  %call85.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.20, i64 0, i64 0))
  br label %for.end103

for.end103.loopexit:                              ; preds = %for.body89
  %add100.lcssa = phi i64 [ %add100, %for.body89 ]
  br label %for.end103

for.end103:                                       ; preds = %for.end103.loopexit, %for.end103.critedge
  %total.3.lcssa = phi i64 [ 0, %for.end103.critedge ], [ %add100.lcssa, %for.end103.loopexit ]
  %conv104 = uitofp i64 %total.3.lcssa to double
  %mul105 = fmul double %div5, %conv104
  %call106 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul105)
  %call107 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21, i64 0, i64 0))
  br i1 %cmp8664, label %for.body111.preheader, label %for.end147.critedge

for.body111.preheader:                            ; preds = %for.end103
  br label %for.body111

for.body111:                                      ; preds = %for.body111.preheader, %for.body111
  %indvars.iv707 = phi i64 [ %indvars.iv.next708, %for.body111 ], [ 0, %for.body111.preheader ]
  %total.4644 = phi i64 [ %add122, %for.body111 ], [ 0, %for.body111.preheader ]
  %arrayidx114 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 1, i64 %indvars.iv707
  %14 = load i64, i64* %arrayidx114, align 8, !tbaa !42
  %conv115 = uitofp i64 %14 to double
  %mul116 = fmul double %div5, %conv115
  %call117 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul116)
  %15 = load i64, i64* %arrayidx114, align 8, !tbaa !42
  %add122 = add i64 %15, %total.4644
  %indvars.iv.next708 = add nuw nsw i64 %indvars.iv707, 1
  %lftr.wideiv709 = trunc i64 %indvars.iv.next708 to i32
  %exitcond710 = icmp eq i32 %lftr.wideiv709, %0
  br i1 %exitcond710, label %for.end125.loopexit, label %for.body111

for.end125.critedge:                              ; preds = %for.end81
  %mul105.c = fmul double %div5, 0.000000e+00
  %call106.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul105.c)
  %call107.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21, i64 0, i64 0))
  br label %for.end125

for.end125.loopexit:                              ; preds = %for.body111
  %add122.lcssa = phi i64 [ %add122, %for.body111 ]
  br label %for.end125

for.end125:                                       ; preds = %for.end125.loopexit, %for.end125.critedge
  %total.4.lcssa = phi i64 [ 0, %for.end125.critedge ], [ %add122.lcssa, %for.end125.loopexit ]
  %conv126 = uitofp i64 %total.4.lcssa to double
  %mul127 = fmul double %div5, %conv126
  %call128 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul127)
  %call129 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.22, i64 0, i64 0))
  br i1 %cmp8664, label %for.body133.preheader, label %for.end169.critedge

for.body133.preheader:                            ; preds = %for.end125
  br label %for.body133

for.body133:                                      ; preds = %for.body133.preheader, %for.body133
  %indvars.iv703 = phi i64 [ %indvars.iv.next704, %for.body133 ], [ 0, %for.body133.preheader ]
  %total.5640 = phi i64 [ %add144, %for.body133 ], [ 0, %for.body133.preheader ]
  %arrayidx136 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 12, i64 %indvars.iv703
  %16 = load i64, i64* %arrayidx136, align 8, !tbaa !42
  %conv137 = uitofp i64 %16 to double
  %mul138 = fmul double %div5, %conv137
  %call139 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul138)
  %17 = load i64, i64* %arrayidx136, align 8, !tbaa !42
  %add144 = add i64 %17, %total.5640
  %indvars.iv.next704 = add nuw nsw i64 %indvars.iv703, 1
  %lftr.wideiv705 = trunc i64 %indvars.iv.next704 to i32
  %exitcond706 = icmp eq i32 %lftr.wideiv705, %0
  br i1 %exitcond706, label %for.end147.loopexit, label %for.body133

for.end147.critedge:                              ; preds = %for.end103
  %mul127.c = fmul double %div5, 0.000000e+00
  %call128.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul127.c)
  %call129.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.22, i64 0, i64 0))
  br label %for.end147

for.end147.loopexit:                              ; preds = %for.body133
  %add144.lcssa = phi i64 [ %add144, %for.body133 ]
  br label %for.end147

for.end147:                                       ; preds = %for.end147.loopexit, %for.end147.critedge
  %total.5.lcssa = phi i64 [ 0, %for.end147.critedge ], [ %add144.lcssa, %for.end147.loopexit ]
  %conv148 = uitofp i64 %total.5.lcssa to double
  %mul149 = fmul double %div5, %conv148
  %call150 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul149)
  %call151 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.23, i64 0, i64 0))
  br i1 %cmp8664, label %for.body155.preheader, label %for.end191.critedge

for.body155.preheader:                            ; preds = %for.end147
  br label %for.body155

for.body155:                                      ; preds = %for.body155.preheader, %for.body155
  %indvars.iv699 = phi i64 [ %indvars.iv.next700, %for.body155 ], [ 0, %for.body155.preheader ]
  %total.6636 = phi i64 [ %add166, %for.body155 ], [ 0, %for.body155.preheader ]
  %arrayidx158 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 13, i64 %indvars.iv699
  %18 = load i64, i64* %arrayidx158, align 8, !tbaa !42
  %conv159 = uitofp i64 %18 to double
  %mul160 = fmul double %div5, %conv159
  %call161 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul160)
  %19 = load i64, i64* %arrayidx158, align 8, !tbaa !42
  %add166 = add i64 %19, %total.6636
  %indvars.iv.next700 = add nuw nsw i64 %indvars.iv699, 1
  %lftr.wideiv701 = trunc i64 %indvars.iv.next700 to i32
  %exitcond702 = icmp eq i32 %lftr.wideiv701, %0
  br i1 %exitcond702, label %for.end169.loopexit, label %for.body155

for.end169.critedge:                              ; preds = %for.end125
  %mul149.c = fmul double %div5, 0.000000e+00
  %call150.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul149.c)
  %call151.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.23, i64 0, i64 0))
  br label %for.end169

for.end169.loopexit:                              ; preds = %for.body155
  %add166.lcssa = phi i64 [ %add166, %for.body155 ]
  br label %for.end169

for.end169:                                       ; preds = %for.end169.loopexit, %for.end169.critedge
  %total.6.lcssa = phi i64 [ 0, %for.end169.critedge ], [ %add166.lcssa, %for.end169.loopexit ]
  %conv170 = uitofp i64 %total.6.lcssa to double
  %mul171 = fmul double %div5, %conv170
  %call172 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul171)
  %call173 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.24, i64 0, i64 0))
  br i1 %cmp8664, label %for.body177.preheader, label %for.end213.critedge

for.body177.preheader:                            ; preds = %for.end169
  br label %for.body177

for.body177:                                      ; preds = %for.body177.preheader, %for.body177
  %indvars.iv695 = phi i64 [ %indvars.iv.next696, %for.body177 ], [ 0, %for.body177.preheader ]
  %total.7632 = phi i64 [ %add188, %for.body177 ], [ 0, %for.body177.preheader ]
  %arrayidx180 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 5, i64 %indvars.iv695
  %20 = load i64, i64* %arrayidx180, align 8, !tbaa !42
  %conv181 = uitofp i64 %20 to double
  %mul182 = fmul double %div5, %conv181
  %call183 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul182)
  %21 = load i64, i64* %arrayidx180, align 8, !tbaa !42
  %add188 = add i64 %21, %total.7632
  %indvars.iv.next696 = add nuw nsw i64 %indvars.iv695, 1
  %lftr.wideiv697 = trunc i64 %indvars.iv.next696 to i32
  %exitcond698 = icmp eq i32 %lftr.wideiv697, %0
  br i1 %exitcond698, label %for.end191.loopexit, label %for.body177

for.end191.critedge:                              ; preds = %for.end147
  %mul171.c = fmul double %div5, 0.000000e+00
  %call172.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul171.c)
  %call173.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.24, i64 0, i64 0))
  br label %for.end191

for.end191.loopexit:                              ; preds = %for.body177
  %add188.lcssa = phi i64 [ %add188, %for.body177 ]
  br label %for.end191

for.end191:                                       ; preds = %for.end191.loopexit, %for.end191.critedge
  %total.7.lcssa = phi i64 [ 0, %for.end191.critedge ], [ %add188.lcssa, %for.end191.loopexit ]
  %conv192 = uitofp i64 %total.7.lcssa to double
  %mul193 = fmul double %div5, %conv192
  %call194 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul193)
  %call195 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.25, i64 0, i64 0))
  br i1 %cmp8664, label %for.body199.preheader, label %for.end235.critedge

for.body199.preheader:                            ; preds = %for.end191
  br label %for.body199

for.body199:                                      ; preds = %for.body199.preheader, %for.body199
  %indvars.iv691 = phi i64 [ %indvars.iv.next692, %for.body199 ], [ 0, %for.body199.preheader ]
  %total.8628 = phi i64 [ %add210, %for.body199 ], [ 0, %for.body199.preheader ]
  %arrayidx202 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 7, i64 %indvars.iv691
  %22 = load i64, i64* %arrayidx202, align 8, !tbaa !42
  %conv203 = uitofp i64 %22 to double
  %mul204 = fmul double %div5, %conv203
  %call205 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul204)
  %23 = load i64, i64* %arrayidx202, align 8, !tbaa !42
  %add210 = add i64 %23, %total.8628
  %indvars.iv.next692 = add nuw nsw i64 %indvars.iv691, 1
  %lftr.wideiv693 = trunc i64 %indvars.iv.next692 to i32
  %exitcond694 = icmp eq i32 %lftr.wideiv693, %0
  br i1 %exitcond694, label %for.end213.loopexit, label %for.body199

for.end213.critedge:                              ; preds = %for.end169
  %mul193.c = fmul double %div5, 0.000000e+00
  %call194.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul193.c)
  %call195.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.25, i64 0, i64 0))
  br label %for.end213

for.end213.loopexit:                              ; preds = %for.body199
  %add210.lcssa = phi i64 [ %add210, %for.body199 ]
  br label %for.end213

for.end213:                                       ; preds = %for.end213.loopexit, %for.end213.critedge
  %total.8.lcssa = phi i64 [ 0, %for.end213.critedge ], [ %add210.lcssa, %for.end213.loopexit ]
  %conv214 = uitofp i64 %total.8.lcssa to double
  %mul215 = fmul double %div5, %conv214
  %call216 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul215)
  %call217 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.26, i64 0, i64 0))
  br i1 %cmp8664, label %for.body221.preheader, label %for.end257.critedge

for.body221.preheader:                            ; preds = %for.end213
  br label %for.body221

for.body221:                                      ; preds = %for.body221.preheader, %for.body221
  %indvars.iv687 = phi i64 [ %indvars.iv.next688, %for.body221 ], [ 0, %for.body221.preheader ]
  %total.9624 = phi i64 [ %add232, %for.body221 ], [ 0, %for.body221.preheader ]
  %arrayidx224 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 6, i64 %indvars.iv687
  %24 = load i64, i64* %arrayidx224, align 8, !tbaa !42
  %conv225 = uitofp i64 %24 to double
  %mul226 = fmul double %div5, %conv225
  %call227 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul226)
  %25 = load i64, i64* %arrayidx224, align 8, !tbaa !42
  %add232 = add i64 %25, %total.9624
  %indvars.iv.next688 = add nuw nsw i64 %indvars.iv687, 1
  %lftr.wideiv689 = trunc i64 %indvars.iv.next688 to i32
  %exitcond690 = icmp eq i32 %lftr.wideiv689, %0
  br i1 %exitcond690, label %for.end235.loopexit, label %for.body221

for.end235.loopexit:                              ; preds = %for.body221
  %add232.lcssa = phi i64 [ %add232, %for.body221 ]
  %phitmp = uitofp i64 %add232.lcssa to double
  br label %for.end235

for.end235.critedge:                              ; preds = %for.end191
  %mul215.c = fmul double %div5, 0.000000e+00
  %call216.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul215.c)
  %call217.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.26, i64 0, i64 0))
  br label %for.end235

for.end235:                                       ; preds = %for.end235.critedge, %for.end235.loopexit
  %total.9.lcssa = phi double [ %phitmp, %for.end235.loopexit ], [ 0.000000e+00, %for.end235.critedge ]
  %mul237 = fmul double %div5, %total.9.lcssa
  %call238 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul237)
  %call239 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.27, i64 0, i64 0))
  br i1 %cmp8664, label %for.body243.preheader, label %for.end279.critedge

for.body243.preheader:                            ; preds = %for.end235
  br label %for.body243

for.body243:                                      ; preds = %for.body243.preheader, %for.body243
  %indvars.iv683 = phi i64 [ %indvars.iv.next684, %for.body243 ], [ 0, %for.body243.preheader ]
  %total.10620 = phi i64 [ %add254, %for.body243 ], [ 0, %for.body243.preheader ]
  %arrayidx246 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 8, i64 %indvars.iv683
  %26 = load i64, i64* %arrayidx246, align 8, !tbaa !42
  %conv247 = uitofp i64 %26 to double
  %mul248 = fmul double %div5, %conv247
  %call249 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul248)
  %27 = load i64, i64* %arrayidx246, align 8, !tbaa !42
  %add254 = add i64 %27, %total.10620
  %indvars.iv.next684 = add nuw nsw i64 %indvars.iv683, 1
  %lftr.wideiv685 = trunc i64 %indvars.iv.next684 to i32
  %exitcond686 = icmp eq i32 %lftr.wideiv685, %0
  br i1 %exitcond686, label %for.end257.loopexit, label %for.body243

for.end257.loopexit:                              ; preds = %for.body243
  %add254.lcssa = phi i64 [ %add254, %for.body243 ]
  %phitmp729 = uitofp i64 %add254.lcssa to double
  br label %for.end257

for.end257.critedge:                              ; preds = %for.end213
  %mul237.c = fmul double %div5, 0.000000e+00
  %call238.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul237.c)
  %call239.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.27, i64 0, i64 0))
  br label %for.end257

for.end257:                                       ; preds = %for.end257.critedge, %for.end257.loopexit
  %total.10.lcssa = phi double [ %phitmp729, %for.end257.loopexit ], [ 0.000000e+00, %for.end257.critedge ]
  %mul259 = fmul double %div5, %total.10.lcssa
  %call260 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul259)
  %call261 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.28, i64 0, i64 0))
  br i1 %cmp8664, label %for.body265.preheader, label %for.end301.critedge

for.body265.preheader:                            ; preds = %for.end257
  br label %for.body265

for.body265:                                      ; preds = %for.body265.preheader, %for.body265
  %indvars.iv679 = phi i64 [ %indvars.iv.next680, %for.body265 ], [ 0, %for.body265.preheader ]
  %total.11616 = phi i64 [ %add276, %for.body265 ], [ 0, %for.body265.preheader ]
  %arrayidx268 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 10, i64 %indvars.iv679
  %28 = load i64, i64* %arrayidx268, align 8, !tbaa !42
  %conv269 = uitofp i64 %28 to double
  %mul270 = fmul double %div5, %conv269
  %call271 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul270)
  %29 = load i64, i64* %arrayidx268, align 8, !tbaa !42
  %add276 = add i64 %29, %total.11616
  %indvars.iv.next680 = add nuw nsw i64 %indvars.iv679, 1
  %lftr.wideiv681 = trunc i64 %indvars.iv.next680 to i32
  %exitcond682 = icmp eq i32 %lftr.wideiv681, %0
  br i1 %exitcond682, label %for.end279.loopexit, label %for.body265

for.end279.loopexit:                              ; preds = %for.body265
  %add276.lcssa = phi i64 [ %add276, %for.body265 ]
  %phitmp730 = uitofp i64 %add276.lcssa to double
  br label %for.end279

for.end279.critedge:                              ; preds = %for.end235
  %mul259.c = fmul double %div5, 0.000000e+00
  %call260.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul259.c)
  %call261.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.28, i64 0, i64 0))
  br label %for.end279

for.end279:                                       ; preds = %for.end279.critedge, %for.end279.loopexit
  %total.11.lcssa = phi double [ %phitmp730, %for.end279.loopexit ], [ 0.000000e+00, %for.end279.critedge ]
  %mul281 = fmul double %div5, %total.11.lcssa
  %call282 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul281)
  %call283 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.29, i64 0, i64 0))
  br i1 %cmp8664, label %for.body287.preheader, label %for.end323.critedge

for.body287.preheader:                            ; preds = %for.end279
  br label %for.body287

for.body287:                                      ; preds = %for.body287.preheader, %for.body287
  %indvars.iv675 = phi i64 [ %indvars.iv.next676, %for.body287 ], [ 0, %for.body287.preheader ]
  %total.12612 = phi i64 [ %add298, %for.body287 ], [ 0, %for.body287.preheader ]
  %arrayidx290 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 9, i64 %indvars.iv675
  %30 = load i64, i64* %arrayidx290, align 8, !tbaa !42
  %conv291 = uitofp i64 %30 to double
  %mul292 = fmul double %div5, %conv291
  %call293 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul292)
  %31 = load i64, i64* %arrayidx290, align 8, !tbaa !42
  %add298 = add i64 %31, %total.12612
  %indvars.iv.next676 = add nuw nsw i64 %indvars.iv675, 1
  %lftr.wideiv677 = trunc i64 %indvars.iv.next676 to i32
  %exitcond678 = icmp eq i32 %lftr.wideiv677, %0
  br i1 %exitcond678, label %for.end301.loopexit, label %for.body287

for.end301.loopexit:                              ; preds = %for.body287
  %add298.lcssa = phi i64 [ %add298, %for.body287 ]
  %phitmp731 = uitofp i64 %add298.lcssa to double
  br label %for.end301

for.end301.critedge:                              ; preds = %for.end257
  %mul281.c = fmul double %div5, 0.000000e+00
  %call282.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul281.c)
  %call283.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.29, i64 0, i64 0))
  br label %for.end301

for.end301:                                       ; preds = %for.end301.critedge, %for.end301.loopexit
  %total.12.lcssa = phi double [ %phitmp731, %for.end301.loopexit ], [ 0.000000e+00, %for.end301.critedge ]
  %mul303 = fmul double %div5, %total.12.lcssa
  %call304 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul303)
  %call305 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.30, i64 0, i64 0))
  br i1 %cmp8664, label %for.body309.preheader, label %for.end345.critedge

for.body309.preheader:                            ; preds = %for.end301
  br label %for.body309

for.body309:                                      ; preds = %for.body309.preheader, %for.body309
  %indvars.iv671 = phi i64 [ %indvars.iv.next672, %for.body309 ], [ 0, %for.body309.preheader ]
  %total.13608 = phi i64 [ %add320, %for.body309 ], [ 0, %for.body309.preheader ]
  %arrayidx312 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 11, i64 %indvars.iv671
  %32 = load i64, i64* %arrayidx312, align 8, !tbaa !42
  %conv313 = uitofp i64 %32 to double
  %mul314 = fmul double %div5, %conv313
  %call315 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul314)
  %33 = load i64, i64* %arrayidx312, align 8, !tbaa !42
  %add320 = add i64 %33, %total.13608
  %indvars.iv.next672 = add nuw nsw i64 %indvars.iv671, 1
  %lftr.wideiv673 = trunc i64 %indvars.iv.next672 to i32
  %exitcond674 = icmp eq i32 %lftr.wideiv673, %0
  br i1 %exitcond674, label %for.end323.loopexit, label %for.body309

for.end323.loopexit:                              ; preds = %for.body309
  %add320.lcssa = phi i64 [ %add320, %for.body309 ]
  %phitmp732 = uitofp i64 %add320.lcssa to double
  br label %for.end323

for.end323.critedge:                              ; preds = %for.end279
  %mul303.c = fmul double %div5, 0.000000e+00
  %call304.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul303.c)
  %call305.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.30, i64 0, i64 0))
  br label %for.end323

for.end323:                                       ; preds = %for.end323.critedge, %for.end323.loopexit
  %total.13.lcssa = phi double [ %phitmp732, %for.end323.loopexit ], [ 0.000000e+00, %for.end323.critedge ]
  %mul325 = fmul double %div5, %total.13.lcssa
  %call326 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul325)
  %call327 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.31, i64 0, i64 0))
  br i1 %cmp8664, label %for.body331.preheader, label %for.end345

for.body331.preheader:                            ; preds = %for.end323
  br label %for.body331

for.body331:                                      ; preds = %for.body331.preheader, %for.body331
  %indvars.iv667 = phi i64 [ %indvars.iv.next668, %for.body331 ], [ 0, %for.body331.preheader ]
  %total.14604 = phi i64 [ %add342, %for.body331 ], [ 0, %for.body331.preheader ]
  %arrayidx334 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 14, i64 %indvars.iv667
  %34 = load i64, i64* %arrayidx334, align 8, !tbaa !42
  %conv335 = uitofp i64 %34 to double
  %mul336 = fmul double %div5, %conv335
  %call337 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul336)
  %35 = load i64, i64* %arrayidx334, align 8, !tbaa !42
  %add342 = add i64 %35, %total.14604
  %indvars.iv.next668 = add nuw nsw i64 %indvars.iv667, 1
  %lftr.wideiv669 = trunc i64 %indvars.iv.next668 to i32
  %exitcond670 = icmp eq i32 %lftr.wideiv669, %0
  br i1 %exitcond670, label %for.end345.loopexit, label %for.body331

for.end345.loopexit:                              ; preds = %for.body331
  %add342.lcssa = phi i64 [ %add342, %for.body331 ]
  %phitmp733 = uitofp i64 %add342.lcssa to double
  br label %for.end345

for.end345.critedge:                              ; preds = %for.end301
  %mul325.c = fmul double %div5, 0.000000e+00
  %call326.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul325.c)
  %call327.c = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.31, i64 0, i64 0))
  br label %for.end345

for.end345:                                       ; preds = %for.end345.critedge, %for.end345.loopexit, %for.end323
  %total.14.lcssa = phi double [ 0.000000e+00, %for.end323 ], [ %phitmp733, %for.end345.loopexit ], [ 0.000000e+00, %for.end345.critedge ]
  %mul347 = fmul double %div5, %total.14.lcssa
  %call348 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul347)
  %call349 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.32, i64 0, i64 0))
  %cmp352600 = icmp slt i32 %0, 0
  br i1 %cmp352600, label %for.end358, label %for.body354.preheader

for.body354.preheader:                            ; preds = %for.end345
  br label %for.body354

for.body354:                                      ; preds = %for.body354.preheader, %for.body354
  %level.17601 = phi i32 [ %inc357, %for.body354 ], [ 0, %for.body354.preheader ]
  %call355 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.33, i64 0, i64 0))
  %inc357 = add nuw nsw i32 %level.17601, 1
  %exitcond666 = icmp eq i32 %level.17601, %0
  br i1 %exitcond666, label %for.end358.loopexit, label %for.body354

for.end358.loopexit:                              ; preds = %for.body354
  br label %for.end358

for.end358:                                       ; preds = %for.end358.loopexit, %for.end345
  %putchar594 = tail call i32 @putchar(i32 10) #1
  %call360 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([24 x i8], [24 x i8]* @.str.34, i64 0, i64 0))
  br i1 %cmp8664, label %for.body364.preheader, label %for.end378

for.body364.preheader:                            ; preds = %for.end358
  br label %for.body364

for.body364:                                      ; preds = %for.body364.preheader, %for.body364
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body364 ], [ 0, %for.body364.preheader ]
  %total.15599 = phi i64 [ %add375, %for.body364 ], [ 0, %for.body364.preheader ]
  %arrayidx367 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 15, i64 %indvars.iv
  %36 = load i64, i64* %arrayidx367, align 8, !tbaa !42
  %conv368 = uitofp i64 %36 to double
  %mul369 = fmul double %div5, %conv368
  %call370 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), double %mul369)
  %37 = load i64, i64* %arrayidx367, align 8, !tbaa !42
  %add375 = add i64 %37, %total.15599
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %0
  br i1 %exitcond, label %for.end378.loopexit, label %for.body364

for.end378.loopexit:                              ; preds = %for.body364
  %add375.lcssa = phi i64 [ %add375, %for.body364 ]
  %phitmp734 = uitofp i64 %add375.lcssa to double
  br label %for.end378

for.end378:                                       ; preds = %for.end378.loopexit, %for.end358
  %total.15.lcssa = phi double [ 0.000000e+00, %for.end358 ], [ %phitmp734, %for.end378.loopexit ]
  %mul380 = fmul double %div5, %total.15.lcssa
  %call381 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), double %mul380)
  %putchar595 = tail call i32 @putchar(i32 10) #1
  %MGBuild = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 16
  %38 = load i64, i64* %MGBuild, align 8, !tbaa !125
  %conv384 = uitofp i64 %38 to double
  %mul385 = fmul double %div5, %conv384
  %call386 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.35, i64 0, i64 0), double %mul385)
  %MGSolve = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 18
  %39 = load i64, i64* %MGSolve, align 8, !tbaa !126
  %conv388 = uitofp i64 %39 to double
  %mul389 = fmul double %div5, %conv388
  %call390 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.36, i64 0, i64 0), double %mul389)
  %vcycles = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 17
  %40 = load i64, i64* %vcycles, align 8, !tbaa !127
  %conv392 = uitofp i64 %40 to double
  %mul393 = fmul double %div5, %conv392
  %call394 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([34 x i8], [34 x i8]* @.str.37, i64 0, i64 0), double %mul393)
  %vcycles_performed = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 1
  %41 = bitcast i32* %vcycles_performed to i64*
  %42 = load i64, i64* %41, align 8
  %43 = trunc i64 %42 to i32
  %44 = lshr i64 %42, 32
  %45 = trunc i64 %44 to i32
  %div396 = sdiv i32 %43, %45
  %call397 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.38, i64 0, i64 0), i32 %div396)
  %Krylov_iterations = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 3
  %46 = load i32, i32* %Krylov_iterations, align 8, !tbaa !128
  %47 = load i32, i32* %MGSolves_performed, align 4, !tbaa !124
  %div399 = sdiv i32 %46, %47
  %call400 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([32 x i8], [32 x i8]* @.str.39, i64 0, i64 0), i32 %div399)
  %puts596 = tail call i32 @puts(i8* nonnull getelementptr inbounds ([2 x i8], [2 x i8]* @str.46, i64 0, i64 0))
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call402 = tail call i32 @fflush(%struct._IO_FILE* %48)
  br label %cleanup

cleanup:                                          ; preds = %entry, %for.end378
  ret void
}

declare i32 @sleep(...) #5

; Function Attrs: norecurse nounwind uwtable
define void @MGResetTimers(%struct.domain_type* %domain) #2 {
entry:
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 0, i64 %indvars.iv
  store i64 0, i64* %arrayidx, align 8, !tbaa !42
  %arrayidx3 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 1, i64 %indvars.iv
  store i64 0, i64* %arrayidx3, align 8, !tbaa !42
  %arrayidx6 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 2, i64 %indvars.iv
  store i64 0, i64* %arrayidx6, align 8, !tbaa !42
  %arrayidx9 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 5, i64 %indvars.iv
  store i64 0, i64* %arrayidx9, align 8, !tbaa !42
  %arrayidx12 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 3, i64 %indvars.iv
  store i64 0, i64* %arrayidx12, align 8, !tbaa !42
  %arrayidx15 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 4, i64 %indvars.iv
  store i64 0, i64* %arrayidx15, align 8, !tbaa !42
  %arrayidx18 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 12, i64 %indvars.iv
  store i64 0, i64* %arrayidx18, align 8, !tbaa !42
  %arrayidx21 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 13, i64 %indvars.iv
  store i64 0, i64* %arrayidx21, align 8, !tbaa !42
  %arrayidx24 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 6, i64 %indvars.iv
  store i64 0, i64* %arrayidx24, align 8, !tbaa !42
  %arrayidx27 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 8, i64 %indvars.iv
  store i64 0, i64* %arrayidx27, align 8, !tbaa !42
  %arrayidx30 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 7, i64 %indvars.iv
  store i64 0, i64* %arrayidx30, align 8, !tbaa !42
  %arrayidx33 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 9, i64 %indvars.iv
  store i64 0, i64* %arrayidx33, align 8, !tbaa !42
  %arrayidx36 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 10, i64 %indvars.iv
  store i64 0, i64* %arrayidx36, align 8, !tbaa !42
  %arrayidx39 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 11, i64 %indvars.iv
  store i64 0, i64* %arrayidx39, align 8, !tbaa !42
  %arrayidx42 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 14, i64 %indvars.iv
  store i64 0, i64* %arrayidx42, align 8, !tbaa !42
  %arrayidx45 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 15, i64 %indvars.iv
  store i64 0, i64* %arrayidx45, align 8, !tbaa !42
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 10
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %vcycles = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 17
  %0 = bitcast i64* %vcycles to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 32, i32 8, i1 false)
  ret void
}

; Function Attrs: nounwind uwtable
define void @MGBuild(%struct.domain_type* %domain, double %a, double %b, double %h0) #3 {
entry:
  %numLevels1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 23
  %0 = load i32, i32* %numLevels1, align 4, !tbaa !117
  %rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 21
  %1 = load i32, i32* %rank, align 4, !tbaa !41
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %for.body.i.preheader

if.then:                                          ; preds = %entry
  %call = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.41, i64 0, i64 0))
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call2 = tail call i32 @fflush(%struct._IO_FILE* %2)
  br label %for.body.i.preheader

for.body.i.preheader:                             ; preds = %if.then, %entry
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.preheader, %for.body.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ 0, %for.body.i.preheader ]
  %arrayidx.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 0, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx.i, align 8, !tbaa !42
  %arrayidx3.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 1, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx3.i, align 8, !tbaa !42
  %arrayidx6.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 2, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx6.i, align 8, !tbaa !42
  %arrayidx9.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 5, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx9.i, align 8, !tbaa !42
  %arrayidx12.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 3, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx12.i, align 8, !tbaa !42
  %arrayidx15.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 4, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx15.i, align 8, !tbaa !42
  %arrayidx18.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 12, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx18.i, align 8, !tbaa !42
  %arrayidx21.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 13, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx21.i, align 8, !tbaa !42
  %arrayidx24.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 6, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx24.i, align 8, !tbaa !42
  %arrayidx27.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 8, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx27.i, align 8, !tbaa !42
  %arrayidx30.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 7, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx30.i, align 8, !tbaa !42
  %arrayidx33.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 9, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx33.i, align 8, !tbaa !42
  %arrayidx36.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 10, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx36.i, align 8, !tbaa !42
  %arrayidx39.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 11, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx39.i, align 8, !tbaa !42
  %arrayidx42.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 14, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx42.i, align 8, !tbaa !42
  %arrayidx45.i = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 15, i64 %indvars.iv.i
  store i64 0, i64* %arrayidx45.i, align 8, !tbaa !42
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.i = icmp eq i64 %indvars.iv.next.i, 10
  br i1 %exitcond.i, label %MGResetTimers.exit, label %for.body.i

MGResetTimers.exit:                               ; preds = %for.body.i
  %MGBuild = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 16
  %3 = bitcast i64* %MGBuild to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 40, i32 8, i1 false)
  %call3 = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %cmp4219 = icmp sgt i32 %0, 0
  br i1 %cmp4219, label %for.body.lr.ph, label %for.cond80.preheader.thread

for.body.lr.ph:                                   ; preds = %MGResetTimers.exit
  %subdomains_per_rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 22
  %subdomains = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  br label %for.body

for.cond17.preheader:                             ; preds = %for.end
  br i1 %cmp4219, label %for.cond21.preheader.lr.ph, label %for.cond80.preheader.thread

for.cond21.preheader.lr.ph:                       ; preds = %for.cond17.preheader
  %subdomains_per_rank22 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 22
  %4 = load i32, i32* %subdomains_per_rank22, align 8
  %cmp23213 = icmp sgt i32 %4, 1
  %subdomains27 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 28
  br i1 %cmp23213, label %for.body25.lr.ph.us.preheader, label %for.cond73.preheader

for.body25.lr.ph.us.preheader:                    ; preds = %for.cond21.preheader.lr.ph
  br label %for.body25.lr.ph.us

for.body25.us:                                    ; preds = %for.body25.lr.ph.us, %for.body25.us
  %indvars.iv = phi i64 [ 1, %for.body25.lr.ph.us ], [ %indvars.iv.next, %for.body25.us ]
  %5 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains27, align 8, !tbaa !24
  %levels29.us = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %5, i64 0, i32 5
  %6 = load %struct.box_type*, %struct.box_type** %levels29.us, align 8, !tbaa !28
  %RedBlack_64bMask.us = getelementptr inbounds %struct.box_type, %struct.box_type* %6, i64 %indvars.iv226, i32 11
  %7 = bitcast i64** %RedBlack_64bMask.us to i64*
  %8 = load i64, i64* %7, align 8, !tbaa !129
  %levels35.us = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %5, i64 %indvars.iv, i32 5
  %9 = load %struct.box_type*, %struct.box_type** %levels35.us, align 8, !tbaa !28
  %RedBlack_64bMask37.us = getelementptr inbounds %struct.box_type, %struct.box_type* %9, i64 %indvars.iv226, i32 11
  %10 = bitcast i64** %RedBlack_64bMask37.us to i64*
  store i64 %8, i64* %10, align 8, !tbaa !129
  %arrayidx43.us = getelementptr inbounds %struct.box_type, %struct.box_type* %6, i64 %indvars.iv226, i32 12, i64 0
  %11 = bitcast double** %arrayidx43.us to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !1
  %RedBlack_FP50.us = getelementptr inbounds %struct.box_type, %struct.box_type* %9, i64 %indvars.iv226, i32 12
  %13 = bitcast [2 x double*]* %RedBlack_FP50.us to i64*
  store i64 %12, i64* %13, align 8, !tbaa !1
  %14 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains27, align 8, !tbaa !24
  %levels55.us = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %14, i64 0, i32 5
  %15 = load %struct.box_type*, %struct.box_type** %levels55.us, align 8, !tbaa !28
  %arrayidx58.us = getelementptr inbounds %struct.box_type, %struct.box_type* %15, i64 %indvars.iv226, i32 12, i64 1
  %16 = bitcast double** %arrayidx58.us to i64*
  %17 = load i64, i64* %16, align 8, !tbaa !1
  %levels63.us = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %14, i64 %indvars.iv, i32 5
  %18 = load %struct.box_type*, %struct.box_type** %levels63.us, align 8, !tbaa !28
  %arrayidx66.us = getelementptr inbounds %struct.box_type, %struct.box_type* %18, i64 %indvars.iv226, i32 12, i64 1
  %19 = bitcast double** %arrayidx66.us to i64*
  store i64 %17, i64* %19, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %cmp23.us = icmp slt i64 %indvars.iv.next, %21
  br i1 %cmp23.us, label %for.body25.us, label %for.cond21.for.inc70_crit_edge.us

for.body25.lr.ph.us:                              ; preds = %for.body25.lr.ph.us.preheader, %for.cond21.for.inc70_crit_edge.us.for.body25.lr.ph.us_crit_edge
  %20 = phi i32 [ %.pre, %for.cond21.for.inc70_crit_edge.us.for.body25.lr.ph.us_crit_edge ], [ %4, %for.body25.lr.ph.us.preheader ]
  %indvars.iv226 = phi i64 [ %indvars.iv.next227, %for.cond21.for.inc70_crit_edge.us.for.body25.lr.ph.us_crit_edge ], [ 0, %for.body25.lr.ph.us.preheader ]
  %21 = sext i32 %20 to i64
  br label %for.body25.us

for.cond21.for.inc70_crit_edge.us:                ; preds = %for.body25.us
  %indvars.iv.next227 = add nuw nsw i64 %indvars.iv226, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next227 to i32
  %exitcond228 = icmp eq i32 %lftr.wideiv, %0
  br i1 %exitcond228, label %for.cond73.preheader.loopexit, label %for.cond21.for.inc70_crit_edge.us.for.body25.lr.ph.us_crit_edge

for.cond21.for.inc70_crit_edge.us.for.body25.lr.ph.us_crit_edge: ; preds = %for.cond21.for.inc70_crit_edge.us
  %.pre = load i32, i32* %subdomains_per_rank22, align 8
  br label %for.body25.lr.ph.us

for.body:                                         ; preds = %for.end, %for.body.lr.ph
  %indvars.iv232 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next233, %for.end ]
  %22 = trunc i64 %indvars.iv232 to i32
  %shl = shl i32 1, %22
  %conv = sitofp i32 %shl to double
  %mul = fmul double %conv, %h0
  %arrayidx = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 26, i64 %indvars.iv232
  store double %mul, double* %arrayidx, align 8, !tbaa !34
  %23 = load i32, i32* %subdomains_per_rank, align 8, !tbaa !53
  %cmp6217 = icmp sgt i32 %23, 0
  br i1 %cmp6217, label %for.body8.lr.ph, label %for.end

for.body8.lr.ph:                                  ; preds = %for.body
  %24 = load %struct.subdomain_type*, %struct.subdomain_type** %subdomains, align 8
  %25 = sext i32 %23 to i64
  %26 = sext i32 %23 to i64
  %27 = add nsw i64 %26, -1
  %xtraiter = and i64 %26, 3
  %lcmp.mod = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod, label %for.body8.lr.ph.split, label %for.body8.prol.preheader

for.body8.prol.preheader:                         ; preds = %for.body8.lr.ph
  br label %for.body8.prol

for.body8.prol:                                   ; preds = %for.body8.prol, %for.body8.prol.preheader
  %indvars.iv230.prol = phi i64 [ %indvars.iv.next231.prol, %for.body8.prol ], [ 0, %for.body8.prol.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body8.prol ], [ %xtraiter, %for.body8.prol.preheader ]
  %levels.prol = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %24, i64 %indvars.iv230.prol, i32 5
  %28 = load %struct.box_type*, %struct.box_type** %levels.prol, align 8, !tbaa !28
  %h13.prol = getelementptr inbounds %struct.box_type, %struct.box_type* %28, i64 %indvars.iv232, i32 0
  store double %mul, double* %h13.prol, align 8, !tbaa !56
  %indvars.iv.next231.prol = add nuw nsw i64 %indvars.iv230.prol, 1
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body8.lr.ph.split.loopexit, label %for.body8.prol, !llvm.loop !130

for.body8.lr.ph.split.loopexit:                   ; preds = %for.body8.prol
  %indvars.iv.next231.prol.lcssa = phi i64 [ %indvars.iv.next231.prol, %for.body8.prol ]
  br label %for.body8.lr.ph.split

for.body8.lr.ph.split:                            ; preds = %for.body8.lr.ph, %for.body8.lr.ph.split.loopexit
  %indvars.iv230.unr = phi i64 [ 0, %for.body8.lr.ph ], [ %indvars.iv.next231.prol.lcssa, %for.body8.lr.ph.split.loopexit ]
  %29 = icmp ult i64 %27, 3
  br i1 %29, label %for.end.loopexit, label %for.body8.lr.ph.split.split

for.body8.lr.ph.split.split:                      ; preds = %for.body8.lr.ph.split
  br label %for.body8

for.body8:                                        ; preds = %for.body8, %for.body8.lr.ph.split.split
  %indvars.iv230 = phi i64 [ %indvars.iv230.unr, %for.body8.lr.ph.split.split ], [ %indvars.iv.next231.3, %for.body8 ]
  %levels = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %24, i64 %indvars.iv230, i32 5
  %30 = load %struct.box_type*, %struct.box_type** %levels, align 8, !tbaa !28
  %h13 = getelementptr inbounds %struct.box_type, %struct.box_type* %30, i64 %indvars.iv232, i32 0
  store double %mul, double* %h13, align 8, !tbaa !56
  %indvars.iv.next231 = add nuw nsw i64 %indvars.iv230, 1
  %levels.1 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %24, i64 %indvars.iv.next231, i32 5
  %31 = load %struct.box_type*, %struct.box_type** %levels.1, align 8, !tbaa !28
  %h13.1 = getelementptr inbounds %struct.box_type, %struct.box_type* %31, i64 %indvars.iv232, i32 0
  store double %mul, double* %h13.1, align 8, !tbaa !56
  %indvars.iv.next231.1 = add nsw i64 %indvars.iv230, 2
  %levels.2 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %24, i64 %indvars.iv.next231.1, i32 5
  %32 = load %struct.box_type*, %struct.box_type** %levels.2, align 8, !tbaa !28
  %h13.2 = getelementptr inbounds %struct.box_type, %struct.box_type* %32, i64 %indvars.iv232, i32 0
  store double %mul, double* %h13.2, align 8, !tbaa !56
  %indvars.iv.next231.2 = add nsw i64 %indvars.iv230, 3
  %levels.3 = getelementptr inbounds %struct.subdomain_type, %struct.subdomain_type* %24, i64 %indvars.iv.next231.2, i32 5
  %33 = load %struct.box_type*, %struct.box_type** %levels.3, align 8, !tbaa !28
  %h13.3 = getelementptr inbounds %struct.box_type, %struct.box_type* %33, i64 %indvars.iv232, i32 0
  store double %mul, double* %h13.3, align 8, !tbaa !56
  %indvars.iv.next231.3 = add nsw i64 %indvars.iv230, 4
  %cmp6.3 = icmp slt i64 %indvars.iv.next231.3, %25
  br i1 %cmp6.3, label %for.body8, label %for.end.loopexit.unr-lcssa

for.end.loopexit.unr-lcssa:                       ; preds = %for.body8
  br label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body8.lr.ph.split, %for.end.loopexit.unr-lcssa
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.body
  %indvars.iv.next233 = add nuw nsw i64 %indvars.iv232, 1
  %lftr.wideiv234 = trunc i64 %indvars.iv.next233 to i32
  %exitcond235 = icmp eq i32 %lftr.wideiv234, %0
  br i1 %exitcond235, label %for.cond17.preheader, label %for.body

for.cond80.preheader.thread:                      ; preds = %MGResetTimers.exit, %for.cond17.preheader
  %sub253 = add i32 %0, -1
  br label %for.end86

for.cond73.preheader.loopexit:                    ; preds = %for.cond21.for.inc70_crit_edge.us
  br label %for.cond73.preheader

for.cond73.preheader:                             ; preds = %for.cond73.preheader.loopexit, %for.cond21.preheader.lr.ph
  %sub = add i32 %0, -1
  %cmp74211 = icmp sgt i32 %0, 1
  br i1 %cmp74211, label %for.body76.preheader, label %for.cond80.preheader

for.body76.preheader:                             ; preds = %for.cond73.preheader
  br label %for.body76

for.cond80.preheader.loopexit:                    ; preds = %for.body76
  br label %for.cond80.preheader

for.cond80.preheader:                             ; preds = %for.cond80.preheader.loopexit, %for.cond73.preheader
  br i1 %cmp4219, label %for.body83.preheader, label %for.end86

for.body83.preheader:                             ; preds = %for.cond80.preheader
  br label %for.body83

for.body76:                                       ; preds = %for.body76.preheader, %for.body76
  %level.2212 = phi i32 [ %inc78, %for.body76 ], [ 0, %for.body76.preheader ]
  tail call void @restriction(%struct.domain_type* %domain, i32 %level.2212, i32 2, i32 2) #1
  %inc78 = add nuw nsw i32 %level.2212, 1
  %exitcond225 = icmp eq i32 %inc78, %sub
  br i1 %exitcond225, label %for.cond80.preheader.loopexit, label %for.body76

for.body83:                                       ; preds = %for.body83.preheader, %for.body83
  %level.3210 = phi i32 [ %inc85, %for.body83 ], [ 0, %for.body83.preheader ]
  tail call void @exchange_boundary(%struct.domain_type* %domain, i32 %level.3210, i32 2, i32 1, i32 1, i32 1) #1
  %inc85 = add nuw nsw i32 %level.3210, 1
  %exitcond224 = icmp eq i32 %inc85, %0
  br i1 %exitcond224, label %for.end86.loopexit, label %for.body83

for.end86.loopexit:                               ; preds = %for.body83
  br label %for.end86

for.end86:                                        ; preds = %for.end86.loopexit, %for.cond80.preheader.thread, %for.cond80.preheader
  %sub255256 = phi i32 [ %sub253, %for.cond80.preheader.thread ], [ %sub, %for.cond80.preheader ], [ %sub, %for.end86.loopexit ]
  tail call void @exchange_boundary(%struct.domain_type* %domain, i32 0, i32 3, i32 1, i32 1, i32 1) #1
  tail call void @project_cell_to_face(%struct.domain_type* %domain, i32 0, i32 3, i32 5, i32 0) #1
  tail call void @project_cell_to_face(%struct.domain_type* %domain, i32 0, i32 3, i32 6, i32 1) #1
  tail call void @project_cell_to_face(%struct.domain_type* %domain, i32 0, i32 3, i32 7, i32 2) #1
  br i1 %cmp4219, label %for.body90.preheader, label %for.end112

for.body90.preheader:                             ; preds = %for.end86
  br label %for.body90

for.cond99.preheader:                             ; preds = %for.inc96
  br i1 %cmp4219, label %for.body102.preheader, label %for.end112

for.body102.preheader:                            ; preds = %for.cond99.preheader
  br label %for.body102

for.body90:                                       ; preds = %for.body90.preheader, %for.inc96
  %level.4208 = phi i32 [ %add, %for.inc96 ], [ 0, %for.body90.preheader ]
  tail call void @exchange_boundary(%struct.domain_type* %domain, i32 %level.4208, i32 5, i32 1, i32 1, i32 1) #1
  tail call void @exchange_boundary(%struct.domain_type* %domain, i32 %level.4208, i32 6, i32 1, i32 1, i32 1) #1
  tail call void @exchange_boundary(%struct.domain_type* %domain, i32 %level.4208, i32 7, i32 1, i32 1, i32 1) #1
  %cmp92 = icmp slt i32 %level.4208, %sub255256
  %add = add nuw nsw i32 %level.4208, 1
  br i1 %cmp92, label %if.then94, label %for.inc96

if.then94:                                        ; preds = %for.body90
  tail call void @restriction_betas(%struct.domain_type* %domain, i32 %level.4208, i32 %add) #1
  br label %for.inc96

for.inc96:                                        ; preds = %for.body90, %if.then94
  %exitcond223 = icmp eq i32 %add, %0
  br i1 %exitcond223, label %for.cond99.preheader, label %for.body90

for.cond106.preheader:                            ; preds = %for.body102
  br i1 %cmp4219, label %for.body109.preheader, label %for.end112

for.body109.preheader:                            ; preds = %for.cond106.preheader
  br label %for.body109

for.body102:                                      ; preds = %for.body102.preheader, %for.body102
  %level.5206 = phi i32 [ %inc104, %for.body102 ], [ 0, %for.body102.preheader ]
  tail call void @rebuild_lambda(%struct.domain_type* %domain, i32 %level.5206, double %a, double %b) #1
  %inc104 = add nuw nsw i32 %level.5206, 1
  %exitcond222 = icmp eq i32 %inc104, %0
  br i1 %exitcond222, label %for.cond106.preheader, label %for.body102

for.body109:                                      ; preds = %for.body109.preheader, %for.body109
  %level.6204 = phi i32 [ %inc111, %for.body109 ], [ 0, %for.body109.preheader ]
  tail call void @exchange_boundary(%struct.domain_type* %domain, i32 %level.6204, i32 4, i32 1, i32 1, i32 1) #1
  %inc111 = add nuw nsw i32 %level.6204, 1
  %exitcond = icmp eq i32 %inc111, %0
  br i1 %exitcond, label %for.end112.loopexit, label %for.body109

for.end112.loopexit:                              ; preds = %for.body109
  br label %for.end112

for.end112:                                       ; preds = %for.end112.loopexit, %for.end86, %for.cond99.preheader, %for.cond106.preheader
  %call113 = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub114 = sub i64 %call113, %call3
  %34 = load i64, i64* %MGBuild, align 8, !tbaa !125
  %add117 = add i64 %sub114, %34
  store i64 %add117, i64* %MGBuild, align 8, !tbaa !125
  %35 = load i32, i32* %rank, align 4, !tbaa !41
  %cmp119 = icmp eq i32 %35, 0
  br i1 %cmp119, label %if.then121, label %if.end124

if.then121:                                       ; preds = %for.end112
  %puts = tail call i32 @puts(i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @str.48, i64 0, i64 0))
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call123 = tail call i32 @fflush(%struct._IO_FILE* %36)
  br label %if.end124

if.end124:                                        ; preds = %if.then121, %for.end112
  ret void
}

; Function Attrs: nounwind uwtable
define void @MGSolve(%struct.domain_type* %domain, i32 %u_id, i32 %F_id, double %a, double %b, double %desired_mg_norm) #3 {
entry:
  %MGSolves_performed = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 2
  %0 = load i32, i32* %MGSolves_performed, align 4, !tbaa !124
  %inc = add nsw i32 %0, 1
  store i32 %inc, i32* %MGSolves_performed, align 4, !tbaa !124
  %numLevels1 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 23
  %rank = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 21
  %1 = load i32, i32* %rank, align 4, !tbaa !41
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([33 x i8], [33 x i8]* @.str.42, i64 0, i64 0))
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call2 = tail call i32 @fflush(%struct._IO_FILE* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call3 = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  tail call void @zero_grid(%struct.domain_type* nonnull %domain, i32 0, i32 0) #1
  tail call void @scale_grid(%struct.domain_type* nonnull %domain, i32 0, i32 9, double 1.000000e+00, i32 %F_id) #1
  %call4 = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %vcycles_performed = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.end41, %if.end
  %v.0132 = phi i32 [ 0, %if.end ], [ %inc43, %for.end41 ]
  %3 = load i32, i32* %vcycles_performed, align 8, !tbaa !131
  %inc6 = add nsw i32 %3, 1
  store i32 %inc6, i32* %vcycles_performed, align 8, !tbaa !131
  %4 = load i32, i32* %numLevels1, align 4, !tbaa !117
  %cmp9125 = icmp sgt i32 %4, 1
  %call11126 = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %call11.neg127 = sub i64 0, %call11126
  br i1 %cmp9125, label %for.body10.preheader, label %for.end

for.body10.preheader:                             ; preds = %for.body
  br label %for.body10

for.body10:                                       ; preds = %for.body10.preheader, %for.body10
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body10 ], [ 0, %for.body10.preheader ]
  %call11.neg129 = phi i64 [ %call11.neg, %for.body10 ], [ %call11.neg127, %for.body10.preheader ]
  %5 = trunc i64 %indvars.iv to i32
  tail call void @smooth(%struct.domain_type* nonnull %domain, i32 %5, i32 0, i32 9, double %a, double %b) #1
  tail call void @residual(%struct.domain_type* nonnull %domain, i32 %5, i32 10, i32 0, i32 9, double %a, double %b) #1
  tail call void @restriction(%struct.domain_type* nonnull %domain, i32 %5, i32 9, i32 10) #1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = trunc i64 %indvars.iv.next to i32
  tail call void @zero_grid(%struct.domain_type* nonnull %domain, i32 %6, i32 0) #1
  %call12 = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub13 = add i64 %call12, %call11.neg129
  %arrayidx = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 15, i64 %indvars.iv
  %7 = load i64, i64* %arrayidx, align 8, !tbaa !42
  %add14 = add i64 %sub13, %7
  store i64 %add14, i64* %arrayidx, align 8, !tbaa !42
  %8 = load i32, i32* %numLevels1, align 4, !tbaa !117
  %sub = add nsw i32 %8, -1
  %9 = sext i32 %sub to i64
  %cmp9 = icmp slt i64 %indvars.iv.next, %9
  %call11 = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %call11.neg = sub i64 0, %call11
  br i1 %cmp9, label %for.body10, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body10
  %call11.neg.lcssa139 = phi i64 [ %call11.neg, %for.body10 ]
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %for.body
  %call11.neg.lcssa = phi i64 [ %call11.neg127, %for.body ], [ %call11.neg.lcssa139, %for.end.loopexit ]
  %10 = load i32, i32* %numLevels1, align 4, !tbaa !117
  %sub18 = add nsw i32 %10, -1
  tail call void @IterativeSolver(%struct.domain_type* nonnull %domain, i32 %sub18, i32 0, i32 9, double %a, double %b, double 1.000000e-03) #1
  %call19 = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub20 = add i64 %call19, %call11.neg.lcssa
  %idxprom21 = sext i32 %sub18 to i64
  %arrayidx24 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 15, i64 %idxprom21
  %11 = load i64, i64* %arrayidx24, align 8, !tbaa !42
  %add25 = add i64 %sub20, %11
  store i64 %add25, i64* %arrayidx24, align 8, !tbaa !42
  %12 = load i32, i32* %numLevels1, align 4, !tbaa !117
  %sub27 = add i32 %12, -2
  %cmp29130 = icmp sgt i32 %sub27, -1
  br i1 %cmp29130, label %for.body30.preheader, label %for.end41

for.body30.preheader:                             ; preds = %for.end
  %13 = sext i32 %sub27 to i64
  br label %for.body30

for.body30:                                       ; preds = %for.body30.preheader, %for.body30
  %indvars.iv134 = phi i64 [ %13, %for.body30.preheader ], [ %indvars.iv.next135, %for.body30 ]
  %call32 = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %14 = trunc i64 %indvars.iv134 to i32
  tail call void @interpolation_constant(%struct.domain_type* nonnull %domain, i32 %14, double 1.000000e+00, i32 0, i32 0) #1
  tail call void @smooth(%struct.domain_type* nonnull %domain, i32 %14, i32 0, i32 9, double %a, double %b) #1
  %call33 = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub34 = sub i64 %call33, %call32
  %arrayidx38 = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 15, i64 %indvars.iv134
  %15 = load i64, i64* %arrayidx38, align 8, !tbaa !42
  %add39 = add i64 %sub34, %15
  store i64 %add39, i64* %arrayidx38, align 8, !tbaa !42
  %cmp29 = icmp sgt i64 %indvars.iv134, 0
  %indvars.iv.next135 = add nsw i64 %indvars.iv134, -1
  br i1 %cmp29, label %for.body30, label %for.end41.loopexit

for.end41.loopexit:                               ; preds = %for.body30
  br label %for.end41

for.end41:                                        ; preds = %for.end41.loopexit, %for.end
  %inc43 = add nuw nsw i32 %v.0132, 1
  %exitcond = icmp eq i32 %inc43, 10
  br i1 %exitcond, label %for.end44, label %for.body

for.end44:                                        ; preds = %for.end41
  %call45 = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub46 = sub i64 %call45, %call4
  %vcycles = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 17
  %16 = load i64, i64* %vcycles, align 8, !tbaa !127
  %add48 = add i64 %sub46, %16
  store i64 %add48, i64* %vcycles, align 8, !tbaa !127
  %call49 = tail call i64 (...) bitcast (i64 ()* @CycleTime to i64 (...)*)() #1
  %sub50 = sub i64 %call49, %call3
  %MGSolve = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 0, i32 18
  %17 = load i64, i64* %MGSolve, align 8, !tbaa !126
  %add52 = add i64 %sub50, %17
  store i64 %add52, i64* %MGSolve, align 8, !tbaa !126
  %18 = load i32, i32* %rank, align 4, !tbaa !41
  %cmp54 = icmp eq i32 %18, 0
  br i1 %cmp54, label %if.then55, label %if.end58

if.then55:                                        ; preds = %for.end44
  %puts = tail call i32 @puts(i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @str.48, i64 0, i64 0))
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !1
  %call57 = tail call i32 @fflush(%struct._IO_FILE* %19)
  br label %if.end58

if.end58:                                         ; preds = %if.then55, %for.end44
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @create_box(%struct.box_type* %box, i32 %numGrids, i32 %low_i, i32 %low_j, i32 %low_k, i32 %dim_i, i32 %dim_j, i32 %dim_k, i32 %ghosts) #3 {
entry:
  %tmpbuf = alloca double*, align 8
  %numGrids1 = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 8
  store i32 %numGrids, i32* %numGrids1, align 4, !tbaa !132
  %i = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 1, i32 0
  store i32 %low_i, i32* %i, align 8, !tbaa !94
  %j = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 1, i32 1
  store i32 %low_j, i32* %j, align 4, !tbaa !95
  %k = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 1, i32 2
  store i32 %low_k, i32* %k, align 8, !tbaa !96
  %i4 = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 2, i32 0
  store i32 %dim_i, i32* %i4, align 4, !tbaa !43
  %j6 = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 2, i32 1
  store i32 %dim_j, i32* %j6, align 4, !tbaa !37
  %k8 = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 2, i32 2
  store i32 %dim_k, i32* %k8, align 4, !tbaa !40
  %mul = shl nsw i32 %ghosts, 1
  %add = add nsw i32 %mul, %dim_i
  %i9 = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 3, i32 0
  store i32 %add, i32* %i9, align 8, !tbaa !133
  %add11 = add nsw i32 %mul, %dim_j
  %j13 = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 3, i32 1
  store i32 %add11, i32* %j13, align 4, !tbaa !134
  %add15 = add nsw i32 %mul, %dim_k
  %k17 = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 3, i32 2
  store i32 %add15, i32* %k17, align 8, !tbaa !135
  %ghosts18 = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 4
  store i32 %ghosts, i32* %ghosts18, align 4, !tbaa !38
  %pencil = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 5
  store i32 %add, i32* %pencil, align 8, !tbaa !54
  %mul25 = mul nsw i32 %add, %add11
  %plane = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 6
  %add27 = add nsw i32 %add, 1
  %cmp = icmp slt i32 %add27, 15
  %sub31 = sub i32 14, %add
  %sub31.op = add i32 %sub31, 7
  %add36 = select i1 %cmp, i32 %sub31.op, i32 7
  %add37 = add i32 %add36, %mul25
  %and = and i32 %add37, -8
  store i32 %and, i32* %plane, align 4, !tbaa !55
  %mul42 = mul nsw i32 %and, %add15
  %volume = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 7
  store i32 %mul42, i32* %volume, align 8, !tbaa !93
  %cmp43 = icmp slt i32 %dim_i, 32
  %rem305 = srem i32 %mul42, 512
  %cmp46306 = icmp eq i32 %rem305, 64
  %or.cond = or i1 %cmp43, %cmp46306
  br i1 %or.cond, label %if.end49, label %while.body.preheader

while.body.preheader:                             ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %while.body.preheader, %while.body
  %0 = phi i32 [ %add48, %while.body ], [ %mul42, %while.body.preheader ]
  %add48 = add nsw i32 %0, 8
  %rem = srem i32 %add48, 512
  %cmp46 = icmp eq i32 %rem, 64
  br i1 %cmp46, label %while.cond.if.end49.loopexit_crit_edge, label %while.body

while.cond.if.end49.loopexit_crit_edge:           ; preds = %while.body
  %add48.lcssa = phi i32 [ %add48, %while.body ]
  store i32 %add48.lcssa, i32* %volume, align 8, !tbaa !93
  br label %if.end49

if.end49:                                         ; preds = %entry, %while.cond.if.end49.loopexit_crit_edge
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 10
  %1 = bitcast double*** %grids to i8**
  %conv = sext i32 %numGrids to i64
  %mul51 = shl nsw i64 %conv, 3
  %call = tail call i32 @posix_memalign(i8** %1, i64 64, i64 %mul51) #1
  %2 = load i32, i32* %numGrids1, align 4, !tbaa !132
  %conv53 = sext i32 %2 to i64
  %3 = bitcast double** %tmpbuf to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #1
  %4 = bitcast double** %tmpbuf to i8**
  %5 = load i32, i32* %volume, align 8, !tbaa !93
  %mul58 = mul nsw i32 %5, %2
  %conv59 = sext i32 %mul58 to i64
  %mul60 = shl nsw i64 %conv59, 3
  %call61 = call i32 @posix_memalign(i8** %4, i64 64, i64 %mul60) #1
  %6 = load i8*, i8** %4, align 8, !tbaa !1
  %7 = bitcast i32* %volume to i64*
  %8 = load i64, i64* %7, align 8
  %9 = lshr i64 %8, 32
  %mul64 = mul i64 %9, %8
  %sext = shl i64 %mul64, 32
  %mul66 = ashr exact i64 %sext, 29
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 %mul66, i32 8, i1 false)
  %10 = load i64, i64* %7, align 8
  %11 = lshr i64 %10, 32
  %12 = trunc i64 %11 to i32
  %mul69 = mul i64 %11, %10
  %sext311 = shl i64 %mul69, 32
  %conv70 = ashr exact i64 %sext311, 32
  %mul54291 = add nsw i64 %conv70, %conv53
  %cmp74303 = icmp sgt i32 %12, 0
  br i1 %cmp74303, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.end49
  %sext312 = shl i64 %10, 32
  %13 = ashr exact i64 %sext312, 32
  %14 = ashr i64 %10, 32
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv308 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next309, %for.body ]
  %15 = load double*, double** %tmpbuf, align 8, !tbaa !1
  %16 = mul nsw i64 %13, %indvars.iv308
  %add.ptr = getelementptr inbounds double, double* %15, i64 %16
  %17 = load double**, double*** %grids, align 8, !tbaa !30
  %arrayidx = getelementptr inbounds double*, double** %17, i64 %indvars.iv308
  store double* %add.ptr, double** %arrayidx, align 8, !tbaa !1
  %indvars.iv.next309 = add nuw nsw i64 %indvars.iv308, 1
  %cmp74 = icmp slt i64 %indvars.iv.next309, %14
  br i1 %cmp74, label %for.body, label %for.end.loopexit

for.end.loopexit:                                 ; preds = %for.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit, %if.end49
  %RedBlack_64bMask = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 11
  %18 = bitcast i64** %RedBlack_64bMask to i8**
  %19 = load i32, i32* %plane, align 4, !tbaa !55
  %conv80 = sext i32 %19 to i64
  %mul81 = shl nsw i64 %conv80, 3
  %call82 = call i32 @posix_memalign(i8** %18, i64 64, i64 %mul81) #1
  %20 = load i8*, i8** %18, align 8, !tbaa !129
  %21 = load i32, i32* %plane, align 4, !tbaa !55
  %conv85 = sext i32 %21 to i64
  %mul86 = shl nsw i64 %conv85, 3
  call void @llvm.memset.p0i8.i64(i8* %20, i8 0, i64 %mul86, i32 8, i1 false)
  %22 = load i32, i32* %plane, align 4, !tbaa !55
  %conv88 = sext i32 %22 to i64
  %mul89 = shl nsw i64 %conv88, 3
  %RedBlack_FP = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 12
  %arrayidx91 = getelementptr inbounds [2 x double*], [2 x double*]* %RedBlack_FP, i64 0, i64 0
  %23 = bitcast [2 x double*]* %RedBlack_FP to i8**
  %call95 = call i32 @posix_memalign(i8** %23, i64 64, i64 %mul89) #1
  %24 = load i8*, i8** %23, align 8, !tbaa !1
  %25 = load i32, i32* %plane, align 4, !tbaa !55
  %conv99 = sext i32 %25 to i64
  %mul100 = shl nsw i64 %conv99, 3
  call void @llvm.memset.p0i8.i64(i8* %24, i8 0, i64 %mul100, i32 8, i1 false)
  %26 = load i32, i32* %plane, align 4, !tbaa !55
  %conv102 = sext i32 %26 to i64
  %mul103 = shl nsw i64 %conv102, 3
  %arrayidx106 = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 12, i64 1
  %27 = bitcast double** %arrayidx106 to i8**
  %call110 = call i32 @posix_memalign(i8** %27, i64 64, i64 %mul103) #1
  %28 = load i8*, i8** %27, align 8, !tbaa !1
  %29 = load i32, i32* %plane, align 4, !tbaa !55
  %conv114 = sext i32 %29 to i64
  %mul115 = shl nsw i64 %conv114, 3
  call void @llvm.memset.p0i8.i64(i8* %28, i8 0, i64 %mul115, i32 8, i1 false)
  %30 = load i32, i32* %plane, align 4, !tbaa !55
  %conv117 = sext i32 %30 to i64
  %tmp = add nsw i64 %mul54291, %conv117
  %tmp295 = shl nsw i64 %tmp, 3
  %add104 = add nsw i64 %mul103, %mul89
  %add119 = add nsw i64 %add104, %tmp295
  %sub122 = sub i32 0, %ghosts
  %31 = load i32, i32* %j6, align 4, !tbaa !37
  %add126299 = add nsw i32 %31, %ghosts
  %cmp127300 = icmp sgt i32 %add126299, %sub122
  br i1 %cmp127300, label %for.cond131.preheader.lr.ph, label %for.end185

for.cond131.preheader.lr.ph:                      ; preds = %for.end
  %32 = load i32, i32* %i4, align 4
  %add134296 = add nsw i32 %32, %ghosts
  %cmp135297 = icmp sgt i32 %add134296, %sub122
  br i1 %cmp135297, label %for.body137.lr.ph.us.preheader, label %for.end185

for.body137.lr.ph.us.preheader:                   ; preds = %for.cond131.preheader.lr.ph
  %33 = sext i32 %sub122 to i64
  %34 = sub i32 0, %ghosts
  %35 = sext i32 %34 to i64
  %36 = add nsw i64 %35, 1
  %37 = sext i32 %34 to i64
  %38 = xor i64 %37, -1
  %39 = add nsw i64 %37, 1
  br label %for.body137.lr.ph.us

for.body137.us:                                   ; preds = %for.body137.us.preheader, %for.body137.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body137.us ], [ %indvars.iv.ph, %for.body137.us.preheader ]
  %i120.0298.us = phi i32 [ %inc181.us, %for.body137.us ], [ %i120.0298.us.ph, %for.body137.us.preheader ]
  %add138.us = add nsw i32 %i120.0298.us, %ghosts
  %add142.us = add nsw i32 %add138.us, %mul141.us
  %40 = trunc i64 %indvars.iv to i32
  %xor.us = xor i32 %40, %j121.0301.us
  %and143.us = and i32 %xor.us, 1
  %tobool.us = icmp ne i32 %and143.us, 0
  %idxprom145.us = sext i32 %add142.us to i64
  %arrayidx147.us = getelementptr inbounds i64, i64* %43, i64 %idxprom145.us
  %..us = sext i1 %tobool.us to i64
  store i64 %..us, i64* %arrayidx147.us, align 8, !tbaa !42
  %arrayidx159.us = getelementptr inbounds double, double* %44, i64 %idxprom145.us
  %storemerge292.us = select i1 %tobool.us, double 1.000000e+00, double 0.000000e+00
  store double %storemerge292.us, double* %arrayidx159.us, align 8, !tbaa !34
  %arrayidx173.us = getelementptr inbounds double, double* %45, i64 %idxprom145.us
  %.294.us = select i1 %tobool.us, double 0.000000e+00, double 1.000000e+00
  store double %.294.us, double* %arrayidx173.us, align 8, !tbaa !34
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %inc181.us = add nsw i32 %i120.0298.us, 1
  %cmp135.us = icmp slt i64 %indvars.iv.next, %46
  br i1 %cmp135.us, label %for.body137.us, label %for.cond131.for.inc183_crit_edge.us.loopexit, !llvm.loop !136

for.body137.lr.ph.us:                             ; preds = %for.cond131.for.inc183_crit_edge.us.for.body137.lr.ph.us_crit_edge, %for.body137.lr.ph.us.preheader
  %indvar = phi i32 [ %indvar.next, %for.cond131.for.inc183_crit_edge.us.for.body137.lr.ph.us_crit_edge ], [ 0, %for.body137.lr.ph.us.preheader ]
  %41 = phi i32 [ %.pre, %for.cond131.for.inc183_crit_edge.us.for.body137.lr.ph.us_crit_edge ], [ %32, %for.body137.lr.ph.us.preheader ]
  %j121.0301.us = phi i32 [ %inc184.us, %for.cond131.for.inc183_crit_edge.us.for.body137.lr.ph.us_crit_edge ], [ %sub122, %for.body137.lr.ph.us.preheader ]
  %add139.us = add nsw i32 %j121.0301.us, %ghosts
  %42 = load i32, i32* %pencil, align 8
  %mul141.us = mul nsw i32 %42, %add139.us
  %43 = load i64*, i64** %RedBlack_64bMask, align 8
  %44 = load double*, double** %arrayidx91, align 8
  %45 = load double*, double** %arrayidx106, align 8
  %add134.us = add nsw i32 %41, %ghosts
  %46 = sext i32 %add134.us to i64
  %47 = add i32 %41, %ghosts
  %48 = sext i32 %47 to i64
  %49 = icmp sgt i64 %36, %48
  %smax = select i1 %49, i64 %36, i64 %48
  %50 = sub nsw i64 %smax, %35
  %min.iters.check = icmp ult i64 %50, 2
  br i1 %min.iters.check, label %for.body137.us.preheader, label %min.iters.checked

for.body137.us.preheader:                         ; preds = %middle.block, %vector.memcheck, %min.iters.checked, %for.body137.lr.ph.us
  %indvars.iv.ph = phi i64 [ %33, %vector.memcheck ], [ %33, %min.iters.checked ], [ %33, %for.body137.lr.ph.us ], [ %ind.end, %middle.block ]
  %i120.0298.us.ph = phi i32 [ %sub122, %vector.memcheck ], [ %sub122, %min.iters.checked ], [ %sub122, %for.body137.lr.ph.us ], [ %ind.end325, %middle.block ]
  br label %for.body137.us

min.iters.checked:                                ; preds = %for.body137.lr.ph.us
  %n.vec = and i64 %50, -2
  %cmp.zero = icmp eq i64 %n.vec, 0
  br i1 %cmp.zero, label %for.body137.us.preheader, label %vector.memcheck

vector.memcheck:                                  ; preds = %min.iters.checked
  %51 = mul i32 %42, %indvar
  %52 = sext i32 %51 to i64
  %scevgep = getelementptr double, double* %44, i64 %52
  %scevgep315 = getelementptr double, double* %44, i64 %38
  %53 = add i32 %41, %ghosts
  %54 = sext i32 %53 to i64
  %55 = icmp sgt i64 %39, %54
  %smax316 = select i1 %55, i64 %39, i64 %54
  %56 = add nsw i64 %smax316, %52
  %scevgep317 = getelementptr double, double* %scevgep315, i64 %56
  %scevgep319 = getelementptr double, double* %45, i64 %52
  %scevgep321 = getelementptr double, double* %45, i64 %38
  %scevgep322 = getelementptr double, double* %scevgep321, i64 %56
  %bound0 = icmp ule double* %scevgep, %scevgep322
  %bound1 = icmp ule double* %scevgep319, %scevgep317
  %memcheck.conflict = and i1 %bound0, %bound1
  %ind.end = add nsw i64 %33, %n.vec
  %cast.crd = trunc i64 %n.vec to i32
  %ind.end325 = sub i32 %cast.crd, %ghosts
  br i1 %memcheck.conflict, label %for.body137.us.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %broadcast.splatinsert334 = insertelement <2 x i32> undef, i32 %j121.0301.us, i32 0
  %broadcast.splat335 = shufflevector <2 x i32> %broadcast.splatinsert334, <2 x i32> undef, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 %33, %index
  %broadcast.splatinsert = insertelement <2 x i64> undef, i64 %offset.idx, i32 0
  %broadcast.splat = shufflevector <2 x i64> %broadcast.splatinsert, <2 x i64> undef, <2 x i32> zeroinitializer
  %induction = add <2 x i64> %broadcast.splat, <i64 0, i64 1>
  %57 = trunc i64 %index to i32
  %58 = trunc <2 x i64> %induction to <2 x i32>
  %59 = xor <2 x i32> %58, %broadcast.splat335
  %60 = and <2 x i32> %59, <i32 1, i32 1>
  %61 = icmp ne <2 x i32> %60, zeroinitializer
  %62 = add i32 %57, %mul141.us
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i64, i64* %43, i64 %63
  %65 = sext <2 x i1> %61 to <2 x i64>
  %66 = bitcast i64* %64 to <2 x i64>*
  store <2 x i64> %65, <2 x i64>* %66, align 8, !tbaa !42
  %67 = getelementptr inbounds double, double* %44, i64 %63
  %68 = select <2 x i1> %61, <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double> zeroinitializer
  %69 = bitcast double* %67 to <2 x double>*
  store <2 x double> %68, <2 x double>* %69, align 8, !tbaa !34
  %70 = getelementptr inbounds double, double* %45, i64 %63
  %71 = select <2 x i1> %61, <2 x double> zeroinitializer, <2 x double> <double 1.000000e+00, double 1.000000e+00>
  %72 = bitcast double* %70 to <2 x double>*
  store <2 x double> %71, <2 x double>* %72, align 8, !tbaa !34
  %index.next = add i64 %index, 2
  %73 = icmp eq i64 %index.next, %n.vec
  br i1 %73, label %middle.block, label %vector.body, !llvm.loop !137

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %50, %n.vec
  br i1 %cmp.n, label %for.cond131.for.inc183_crit_edge.us, label %for.body137.us.preheader

for.cond131.for.inc183_crit_edge.us.loopexit:     ; preds = %for.body137.us
  br label %for.cond131.for.inc183_crit_edge.us

for.cond131.for.inc183_crit_edge.us:              ; preds = %for.cond131.for.inc183_crit_edge.us.loopexit, %middle.block
  %inc184.us = add nsw i32 %j121.0301.us, 1
  %cmp127.us = icmp slt i32 %inc184.us, %add126299
  br i1 %cmp127.us, label %for.cond131.for.inc183_crit_edge.us.for.body137.lr.ph.us_crit_edge, label %for.end185.loopexit

for.cond131.for.inc183_crit_edge.us.for.body137.lr.ph.us_crit_edge: ; preds = %for.cond131.for.inc183_crit_edge.us
  %.pre = load i32, i32* %i4, align 4
  %indvar.next = add i32 %indvar, 1
  br label %for.body137.lr.ph.us

for.end185.loopexit:                              ; preds = %for.cond131.for.inc183_crit_edge.us
  br label %for.end185

for.end185:                                       ; preds = %for.end185.loopexit, %for.cond131.preheader.lr.ph, %for.end
  %conv186 = trunc i64 %add119 to i32
  call void @llvm.lifetime.end(i64 8, i8* %3) #1
  ret i32 %conv186
}

; Function Attrs: nounwind uwtable
define void @destroy_box(%struct.box_type* nocapture readonly %box) #3 {
entry:
  %grids = getelementptr inbounds %struct.box_type, %struct.box_type* %box, i64 0, i32 10
  %0 = bitcast double*** %grids to i8***
  %1 = load i8**, i8*** %0, align 8, !tbaa !30
  %2 = load i8*, i8** %1, align 8, !tbaa !1
  tail call void @free(i8* %2) #1
  %3 = bitcast double*** %grids to i8**
  %4 = load i8*, i8** %3, align 8, !tbaa !30
  tail call void @free(i8* %4) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @TelescopingCABiCGStab(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b, double %desired_reduction_in_norm) #3 {
entry:
  %temp1 = alloca [17 x double], align 16
  %temp2 = alloca [17 x double], align 16
  %temp3 = alloca [17 x double], align 16
  %Tp = alloca [17 x [17 x double]], align 16
  %Tpp = alloca [17 x [17 x double]], align 16
  %aj = alloca [17 x double], align 16
  %z6.i = bitcast [17 x double]* %aj to i8*
  %cj = alloca [17 x double], align 16
  %z6.i1223 = bitcast [17 x double]* %cj to i8*
  %ej = alloca [17 x double], align 16
  %z6.i1219 = bitcast [17 x double]* %ej to i8*
  %Tpaj = alloca [17 x double], align 16
  %Tpcj = alloca [17 x double], align 16
  %Tppaj = alloca [17 x double], align 16
  %G = alloca [17 x [17 x double]], align 16
  %g = alloca [17 x double], align 16
  %Gg = alloca [306 x double], align 16
  %PRrt = alloca [18 x i32], align 16
  %0 = bitcast [17 x double]* %temp1 to i8*
  call void @llvm.lifetime.start(i64 136, i8* %0) #1
  %1 = bitcast [17 x double]* %temp2 to i8*
  call void @llvm.lifetime.start(i64 136, i8* %1) #1
  %2 = bitcast [17 x double]* %temp3 to i8*
  call void @llvm.lifetime.start(i64 136, i8* %2) #1
  %3 = bitcast [17 x [17 x double]]* %Tp to i8*
  call void @llvm.lifetime.start(i64 2312, i8* %3) #1
  %4 = bitcast [17 x [17 x double]]* %Tpp to i8*
  call void @llvm.lifetime.start(i64 2312, i8* %4) #1
  call void @llvm.lifetime.start(i64 136, i8* %z6.i) #1
  call void @llvm.lifetime.start(i64 136, i8* %z6.i1223) #1
  call void @llvm.lifetime.start(i64 136, i8* %z6.i1219) #1
  %5 = bitcast [17 x double]* %Tpaj to i8*
  call void @llvm.lifetime.start(i64 136, i8* %5) #1
  %6 = bitcast [17 x double]* %Tpcj to i8*
  call void @llvm.lifetime.start(i64 136, i8* %6) #1
  %7 = bitcast [17 x double]* %Tppaj to i8*
  call void @llvm.lifetime.start(i64 136, i8* %7) #1
  %8 = bitcast [17 x [17 x double]]* %G to i8*
  call void @llvm.lifetime.start(i64 2312, i8* %8) #1
  %9 = bitcast [17 x double]* %g to i8*
  call void @llvm.lifetime.start(i64 136, i8* %9) #1
  %10 = bitcast [306 x double]* %Gg to i8*
  call void @llvm.lifetime.start(i64 2448, i8* %10) #1
  %11 = bitcast [18 x i32]* %PRrt to i8*
  call void @llvm.lifetime.start(i64 72, i8* %11) #1
  tail call void @residual(%struct.domain_type* %domain, i32 %level, i32 12, i32 %e_id, i32 %R_id, double %a, double %b) #1
  tail call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 12) #1
  tail call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 12) #1
  %call = tail call double @norm(%struct.domain_type* %domain, i32 %level, i32 12) #1
  %call1 = tail call double @dot(%struct.domain_type* %domain, i32 %level, i32 13, i32 12) #1
  %call5 = tail call double @sqrt(double %call1) #1
  %12 = fcmp une double %call, 0.000000e+00
  %not.cmp2 = fcmp une double %call1, 0.000000e+00
  %13 = and i1 %not.cmp2, %12
  br i1 %13, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %arraydecay = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 0
  %arraydecay81226 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 0
  %arraydecay133 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 0
  %CAKrylov_formations_of_G = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 4
  %arraydecay166 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 0
  %Krylov_iterations = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 3
  %mul473 = fmul double %call5, %desired_reduction_in_norm
  %14 = bitcast [18 x i32]* %PRrt to <2 x i32>*
  %15 = getelementptr [18 x i32], [18 x i32]* %PRrt, i64 0, i64 2
  %16 = bitcast i32* %15 to <2 x i32>*
  %17 = bitcast [17 x double]* %aj to <2 x double>*
  %18 = getelementptr [17 x double], [17 x double]* %aj, i64 0, i64 2
  %19 = bitcast double* %18 to <2 x double>*
  %20 = bitcast [17 x double]* %Tpaj to <2 x double>*
  %21 = getelementptr [17 x double], [17 x double]* %Tpaj, i64 0, i64 2
  %22 = bitcast double* %21 to <2 x double>*
  %23 = bitcast [17 x double]* %aj to <2 x double>*
  %24 = bitcast double* %18 to <2 x double>*
  %25 = bitcast [17 x double]* %cj to <2 x double>*
  %26 = getelementptr [17 x double], [17 x double]* %cj, i64 0, i64 2
  %27 = bitcast double* %26 to <2 x double>*
  %28 = bitcast [17 x double]* %aj to <2 x double>*
  %29 = getelementptr [17 x double], [17 x double]* %aj, i64 0, i64 2
  %30 = bitcast double* %29 to <2 x double>*
  %31 = bitcast [17 x double]* %aj to <2 x double>*
  %32 = bitcast double* %29 to <2 x double>*
  %33 = bitcast [17 x double]* %cj to <2 x double>*
  %34 = getelementptr [17 x double], [17 x double]* %cj, i64 0, i64 2
  %35 = bitcast double* %34 to <2 x double>*
  %36 = bitcast [17 x double]* %Tppaj to <2 x double>*
  %37 = getelementptr [17 x double], [17 x double]* %Tppaj, i64 0, i64 2
  %38 = bitcast double* %37 to <2 x double>*
  %39 = bitcast [17 x double]* %cj to <2 x double>*
  %40 = bitcast double* %34 to <2 x double>*
  %41 = bitcast [17 x double]* %cj to <2 x double>*
  %42 = getelementptr [17 x double], [17 x double]* %cj, i64 0, i64 2
  %43 = bitcast double* %42 to <2 x double>*
  %44 = bitcast [17 x double]* %Tpaj to <2 x double>*
  %45 = getelementptr [17 x double], [17 x double]* %Tpaj, i64 0, i64 2
  %46 = bitcast double* %45 to <2 x double>*
  %47 = bitcast [17 x double]* %cj to <2 x double>*
  %48 = bitcast double* %42 to <2 x double>*
  %49 = bitcast [17 x double]* %cj to <2 x double>*
  %50 = getelementptr [17 x double], [17 x double]* %cj, i64 0, i64 2
  %51 = bitcast double* %50 to <2 x double>*
  %52 = bitcast [17 x double]* %Tpcj to <2 x double>*
  %53 = getelementptr [17 x double], [17 x double]* %Tpcj, i64 0, i64 2
  %54 = bitcast double* %53 to <2 x double>*
  %55 = bitcast [17 x double]* %cj to <2 x double>*
  %56 = bitcast double* %50 to <2 x double>*
  %57 = bitcast [17 x double]* %ej to <2 x double>*
  %58 = getelementptr [17 x double], [17 x double]* %ej, i64 0, i64 2
  %59 = bitcast double* %58 to <2 x double>*
  %60 = bitcast [17 x double]* %Tpaj to <2 x double>*
  %61 = getelementptr [17 x double], [17 x double]* %Tpaj, i64 0, i64 2
  %62 = bitcast double* %61 to <2 x double>*
  %63 = bitcast [17 x double]* %ej to <2 x double>*
  %64 = bitcast double* %58 to <2 x double>*
  %65 = bitcast [17 x double]* %ej to <2 x double>*
  %66 = getelementptr [17 x double], [17 x double]* %ej, i64 0, i64 2
  %67 = bitcast double* %66 to <2 x double>*
  %68 = bitcast [17 x double]* %cj to <2 x double>*
  %69 = getelementptr [17 x double], [17 x double]* %cj, i64 0, i64 2
  %70 = bitcast double* %69 to <2 x double>*
  %71 = bitcast [17 x double]* %ej to <2 x double>*
  %72 = bitcast double* %66 to <2 x double>*
  %73 = bitcast [17 x double]* %cj to <2 x double>*
  %74 = getelementptr [17 x double], [17 x double]* %cj, i64 0, i64 2
  %75 = bitcast double* %74 to <2 x double>*
  %76 = bitcast [17 x double]* %Tpaj to <2 x double>*
  %77 = getelementptr [17 x double], [17 x double]* %Tpaj, i64 0, i64 2
  %78 = bitcast double* %77 to <2 x double>*
  %79 = bitcast [17 x double]* %temp1 to <2 x double>*
  %80 = getelementptr [17 x double], [17 x double]* %temp1, i64 0, i64 2
  %81 = bitcast double* %80 to <2 x double>*
  %82 = bitcast [17 x double]* %ej to <2 x double>*
  %83 = getelementptr [17 x double], [17 x double]* %ej, i64 0, i64 2
  %84 = bitcast double* %83 to <2 x double>*
  %85 = bitcast [17 x double]* %aj to <2 x double>*
  %86 = getelementptr [17 x double], [17 x double]* %aj, i64 0, i64 2
  %87 = bitcast double* %86 to <2 x double>*
  %88 = bitcast [17 x double]* %ej to <2 x double>*
  %89 = bitcast double* %83 to <2 x double>*
  %90 = bitcast [17 x double]* %cj to <2 x double>*
  %91 = getelementptr [17 x double], [17 x double]* %cj, i64 0, i64 2
  %92 = bitcast double* %91 to <2 x double>*
  %93 = bitcast [17 x double]* %Tpaj to <2 x double>*
  %94 = getelementptr [17 x double], [17 x double]* %Tpaj, i64 0, i64 2
  %95 = bitcast double* %94 to <2 x double>*
  %96 = bitcast [17 x double]* %temp3 to <2 x double>*
  %97 = getelementptr [17 x double], [17 x double]* %temp3, i64 0, i64 2
  %98 = bitcast double* %97 to <2 x double>*
  %99 = bitcast [17 x double]* %Tpcj to <2 x double>*
  %100 = getelementptr [17 x double], [17 x double]* %Tpcj, i64 0, i64 2
  %101 = bitcast double* %100 to <2 x double>*
  %102 = bitcast [17 x double]* %Tppaj to <2 x double>*
  %103 = getelementptr [17 x double], [17 x double]* %Tppaj, i64 0, i64 2
  %104 = bitcast double* %103 to <2 x double>*
  %105 = bitcast [17 x double]* %temp1 to <2 x double>*
  %106 = getelementptr [17 x double], [17 x double]* %temp1, i64 0, i64 2
  %107 = bitcast double* %106 to <2 x double>*
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %if.end688
  %m.01442 = phi i32 [ 0, %while.body.lr.ph ], [ %add689, %if.end688 ]
  %__ca_krylov_s.01441 = phi i32 [ 1, %while.body.lr.ph ], [ %.mul690, %if.end688 ]
  %BiCGStabFailed.01440 = phi i32 [ 0, %while.body.lr.ph ], [ %BiCGStabFailed.11606, %if.end688 ]
  %BiCGStabConverged.21439 = phi i32 [ 0, %while.body.lr.ph ], [ %BiCGStabConverged.31605, %if.end688 ]
  %delta.01438 = phi double [ %call1, %while.body.lr.ph ], [ %delta.1.lcssa1604, %if.end688 ]
  %mul = shl i32 %__ca_krylov_s.01441, 2
  %add = or i32 %mul, 1
  %cmp4.i = icmp sgt i32 %add, 0
  br i1 %cmp4.i, label %for.body39.lr.ph.us.preheader, label %for.cond65.preheader

for.body39.lr.ph.us.preheader:                    ; preds = %while.body
  %108 = add i32 %add, -1
  %109 = zext i32 %108 to i64
  %110 = shl nuw nsw i64 %109, 3
  %111 = or i64 %110, 8
  call void @llvm.memset.p0i8.i64(i8* %z6.i, i8 0, i64 %111, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %z6.i1223, i8 0, i64 %111, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %z6.i1219, i8 0, i64 %111, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 %111, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 %111, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 %111, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 %111, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 %111, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 %111, i32 16, i1 false) #1
  %112 = or i32 %mul, 1
  %113 = zext i32 %mul to i64
  %114 = shl nuw nsw i64 %113, 3
  %115 = or i64 %114, 8
  %116 = shl i32 %__ca_krylov_s.01441, 2
  br i1 true, label %for.body39.lr.ph.us.prol.preheader, label %for.body39.lr.ph.us.preheader.split

for.body39.lr.ph.us.prol.preheader:               ; preds = %for.body39.lr.ph.us.preheader
  %117 = and i32 %116, 4
  %xtraiter = or i32 %117, 1
  br label %for.body39.lr.ph.us.prol

for.body39.lr.ph.us.prol:                         ; preds = %for.body39.lr.ph.us.prol, %for.body39.lr.ph.us.prol.preheader
  %indvars.iv1443.prol = phi i64 [ %indvars.iv.next1444.prol, %for.body39.lr.ph.us.prol ], [ 0, %for.body39.lr.ph.us.prol.preheader ]
  %prol.iter = phi i32 [ %prol.iter.sub, %for.body39.lr.ph.us.prol ], [ %xtraiter, %for.body39.lr.ph.us.prol.preheader ]
  %scevgep.prol = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1443.prol, i64 0
  %scevgep1599.prol = bitcast double* %scevgep.prol to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep1599.prol, i8 0, i64 %115, i32 8, i1 false)
  %indvars.iv.next1444.prol = add nuw nsw i64 %indvars.iv1443.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %for.body39.lr.ph.us.preheader.split.loopexit, label %for.body39.lr.ph.us.prol, !llvm.loop !138

for.body39.lr.ph.us.preheader.split.loopexit:     ; preds = %for.body39.lr.ph.us.prol
  %indvars.iv.next1444.prol.lcssa = phi i64 [ %indvars.iv.next1444.prol, %for.body39.lr.ph.us.prol ]
  br label %for.body39.lr.ph.us.preheader.split

for.body39.lr.ph.us.preheader.split:              ; preds = %for.body39.lr.ph.us.preheader.split.loopexit, %for.body39.lr.ph.us.preheader
  %indvars.iv1443.unr = phi i64 [ 0, %for.body39.lr.ph.us.preheader ], [ %indvars.iv.next1444.prol.lcssa, %for.body39.lr.ph.us.preheader.split.loopexit ]
  %118 = icmp ult i32 %116, 7
  br i1 %118, label %for.cond45.preheader, label %for.body39.lr.ph.us.preheader.split.split

for.body39.lr.ph.us.preheader.split.split:        ; preds = %for.body39.lr.ph.us.preheader.split
  br label %for.body39.lr.ph.us

for.body39.lr.ph.us:                              ; preds = %for.body39.lr.ph.us, %for.body39.lr.ph.us.preheader.split.split
  %indvars.iv1443 = phi i64 [ %indvars.iv1443.unr, %for.body39.lr.ph.us.preheader.split.split ], [ %indvars.iv.next1444.7, %for.body39.lr.ph.us ]
  %scevgep = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1443, i64 0
  %scevgep1599 = bitcast double* %scevgep to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep1599, i8 0, i64 %115, i32 8, i1 false)
  %indvars.iv.next1444 = add nuw nsw i64 %indvars.iv1443, 1
  %scevgep.1 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv.next1444, i64 0
  %scevgep1599.1 = bitcast double* %scevgep.1 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep1599.1, i8 0, i64 %115, i32 8, i1 false)
  %indvars.iv.next1444.1 = add nsw i64 %indvars.iv1443, 2
  %scevgep.2 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv.next1444.1, i64 0
  %scevgep1599.2 = bitcast double* %scevgep.2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep1599.2, i8 0, i64 %115, i32 8, i1 false)
  %indvars.iv.next1444.2 = add nsw i64 %indvars.iv1443, 3
  %scevgep.3 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv.next1444.2, i64 0
  %scevgep1599.3 = bitcast double* %scevgep.3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep1599.3, i8 0, i64 %115, i32 8, i1 false)
  %indvars.iv.next1444.3 = add nsw i64 %indvars.iv1443, 4
  %scevgep.4 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv.next1444.3, i64 0
  %scevgep1599.4 = bitcast double* %scevgep.4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep1599.4, i8 0, i64 %115, i32 8, i1 false)
  %indvars.iv.next1444.4 = add nsw i64 %indvars.iv1443, 5
  %scevgep.5 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv.next1444.4, i64 0
  %scevgep1599.5 = bitcast double* %scevgep.5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep1599.5, i8 0, i64 %115, i32 8, i1 false)
  %indvars.iv.next1444.5 = add nsw i64 %indvars.iv1443, 6
  %scevgep.6 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv.next1444.5, i64 0
  %scevgep1599.6 = bitcast double* %scevgep.6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep1599.6, i8 0, i64 %115, i32 8, i1 false)
  %indvars.iv.next1444.6 = add nsw i64 %indvars.iv1443, 7
  %scevgep.7 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv.next1444.6, i64 0
  %scevgep1599.7 = bitcast double* %scevgep.7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep1599.7, i8 0, i64 %115, i32 8, i1 false)
  %indvars.iv.next1444.7 = add nsw i64 %indvars.iv1443, 8
  %lftr.wideiv1445.7 = trunc i64 %indvars.iv.next1444.7 to i32
  %exitcond1446.7 = icmp eq i32 %lftr.wideiv1445.7, %112
  br i1 %exitcond1446.7, label %for.cond45.preheader.unr-lcssa, label %for.body39.lr.ph.us

for.cond45.preheader.unr-lcssa:                   ; preds = %for.body39.lr.ph.us
  br label %for.cond45.preheader

for.cond45.preheader:                             ; preds = %for.body39.lr.ph.us.preheader.split, %for.cond45.preheader.unr-lcssa
  br i1 %cmp4.i, label %for.body54.lr.ph.us.preheader, label %for.cond65.preheader

for.body54.lr.ph.us.preheader:                    ; preds = %for.cond45.preheader
  %119 = or i32 %mul, 1
  %120 = zext i32 %mul to i64
  %121 = shl nuw nsw i64 %120, 3
  %122 = or i64 %121, 8
  %123 = shl i32 %__ca_krylov_s.01441, 2
  br i1 true, label %for.body54.lr.ph.us.prol.preheader, label %for.body54.lr.ph.us.preheader.split

for.body54.lr.ph.us.prol.preheader:               ; preds = %for.body54.lr.ph.us.preheader
  %124 = and i32 %123, 4
  %xtraiter1906 = or i32 %124, 1
  br label %for.body54.lr.ph.us.prol

for.body54.lr.ph.us.prol:                         ; preds = %for.body54.lr.ph.us.prol, %for.body54.lr.ph.us.prol.preheader
  %indvars.iv1451.prol = phi i64 [ %indvars.iv.next1452.prol, %for.body54.lr.ph.us.prol ], [ 0, %for.body54.lr.ph.us.prol.preheader ]
  %prol.iter1908 = phi i32 [ %prol.iter1908.sub, %for.body54.lr.ph.us.prol ], [ %xtraiter1906, %for.body54.lr.ph.us.prol.preheader ]
  %scevgep1600.prol = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1451.prol, i64 0
  %scevgep16001601.prol = bitcast double* %scevgep1600.prol to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep16001601.prol, i8 0, i64 %122, i32 8, i1 false)
  %indvars.iv.next1452.prol = add nuw nsw i64 %indvars.iv1451.prol, 1
  %prol.iter1908.sub = add i32 %prol.iter1908, -1
  %prol.iter1908.cmp = icmp eq i32 %prol.iter1908.sub, 0
  br i1 %prol.iter1908.cmp, label %for.body54.lr.ph.us.preheader.split.loopexit, label %for.body54.lr.ph.us.prol, !llvm.loop !139

for.body54.lr.ph.us.preheader.split.loopexit:     ; preds = %for.body54.lr.ph.us.prol
  %indvars.iv.next1452.prol.lcssa = phi i64 [ %indvars.iv.next1452.prol, %for.body54.lr.ph.us.prol ]
  br label %for.body54.lr.ph.us.preheader.split

for.body54.lr.ph.us.preheader.split:              ; preds = %for.body54.lr.ph.us.preheader.split.loopexit, %for.body54.lr.ph.us.preheader
  %indvars.iv1451.unr = phi i64 [ 0, %for.body54.lr.ph.us.preheader ], [ %indvars.iv.next1452.prol.lcssa, %for.body54.lr.ph.us.preheader.split.loopexit ]
  %125 = icmp ult i32 %123, 7
  br i1 %125, label %for.cond65.preheader.loopexit, label %for.body54.lr.ph.us.preheader.split.split

for.body54.lr.ph.us.preheader.split.split:        ; preds = %for.body54.lr.ph.us.preheader.split
  br label %for.body54.lr.ph.us

for.body54.lr.ph.us:                              ; preds = %for.body54.lr.ph.us, %for.body54.lr.ph.us.preheader.split.split
  %indvars.iv1451 = phi i64 [ %indvars.iv1451.unr, %for.body54.lr.ph.us.preheader.split.split ], [ %indvars.iv.next1452.7, %for.body54.lr.ph.us ]
  %scevgep1600 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1451, i64 0
  %scevgep16001601 = bitcast double* %scevgep1600 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep16001601, i8 0, i64 %122, i32 8, i1 false)
  %indvars.iv.next1452 = add nuw nsw i64 %indvars.iv1451, 1
  %scevgep1600.1 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv.next1452, i64 0
  %scevgep16001601.1 = bitcast double* %scevgep1600.1 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep16001601.1, i8 0, i64 %122, i32 8, i1 false)
  %indvars.iv.next1452.1 = add nsw i64 %indvars.iv1451, 2
  %scevgep1600.2 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv.next1452.1, i64 0
  %scevgep16001601.2 = bitcast double* %scevgep1600.2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep16001601.2, i8 0, i64 %122, i32 8, i1 false)
  %indvars.iv.next1452.2 = add nsw i64 %indvars.iv1451, 3
  %scevgep1600.3 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv.next1452.2, i64 0
  %scevgep16001601.3 = bitcast double* %scevgep1600.3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep16001601.3, i8 0, i64 %122, i32 8, i1 false)
  %indvars.iv.next1452.3 = add nsw i64 %indvars.iv1451, 4
  %scevgep1600.4 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv.next1452.3, i64 0
  %scevgep16001601.4 = bitcast double* %scevgep1600.4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep16001601.4, i8 0, i64 %122, i32 8, i1 false)
  %indvars.iv.next1452.4 = add nsw i64 %indvars.iv1451, 5
  %scevgep1600.5 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv.next1452.4, i64 0
  %scevgep16001601.5 = bitcast double* %scevgep1600.5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep16001601.5, i8 0, i64 %122, i32 8, i1 false)
  %indvars.iv.next1452.5 = add nsw i64 %indvars.iv1451, 6
  %scevgep1600.6 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv.next1452.5, i64 0
  %scevgep16001601.6 = bitcast double* %scevgep1600.6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep16001601.6, i8 0, i64 %122, i32 8, i1 false)
  %indvars.iv.next1452.6 = add nsw i64 %indvars.iv1451, 7
  %scevgep1600.7 = getelementptr [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv.next1452.6, i64 0
  %scevgep16001601.7 = bitcast double* %scevgep1600.7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %scevgep16001601.7, i8 0, i64 %122, i32 8, i1 false)
  %indvars.iv.next1452.7 = add nsw i64 %indvars.iv1451, 8
  %lftr.wideiv1453.7 = trunc i64 %indvars.iv.next1452.7 to i32
  %exitcond1454.7 = icmp eq i32 %lftr.wideiv1453.7, %119
  br i1 %exitcond1454.7, label %for.cond65.preheader.loopexit.unr-lcssa, label %for.body54.lr.ph.us

for.cond65.preheader.loopexit.unr-lcssa:          ; preds = %for.body54.lr.ph.us
  br label %for.cond65.preheader.loopexit

for.cond65.preheader.loopexit:                    ; preds = %for.body54.lr.ph.us.preheader.split, %for.cond65.preheader.loopexit.unr-lcssa
  br label %for.cond65.preheader

for.cond65.preheader:                             ; preds = %for.cond65.preheader.loopexit, %while.body, %for.cond45.preheader
  %mul66 = shl i32 %__ca_krylov_s.01441, 1
  %cmp671332 = icmp sgt i32 %__ca_krylov_s.01441, 0
  br i1 %cmp671332, label %for.body68.preheader, label %for.end76

for.body68.preheader:                             ; preds = %for.cond65.preheader
  %126 = sext i32 %mul66 to i64
  br label %for.body68

for.body68:                                       ; preds = %for.body68.preheader, %for.body68
  %indvars.iv1455 = phi i64 [ 0, %for.body68.preheader ], [ %indvars.iv.next1456, %for.body68 ]
  %indvars.iv.next1456 = add nuw nsw i64 %indvars.iv1455, 1
  %arrayidx73 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv.next1456, i64 %indvars.iv1455
  store double 1.000000e+00, double* %arrayidx73, align 8, !tbaa !34
  %cmp67 = icmp slt i64 %indvars.iv.next1456, %126
  br i1 %cmp67, label %for.body68, label %for.end76.loopexit

for.end76.loopexit:                               ; preds = %for.body68
  br label %for.end76

for.end76:                                        ; preds = %for.end76.loopexit, %for.cond65.preheader
  %add78 = or i32 %mul66, 1
  %cmp811334 = icmp slt i32 %add78, %mul
  br i1 %cmp811334, label %for.body82.preheader, label %for.cond91.preheader

for.body82.preheader:                             ; preds = %for.end76
  %127 = sext i32 %mul66 to i64
  %128 = or i64 %127, 1
  %129 = shl i32 %__ca_krylov_s.01441, 1
  %130 = add i32 %129, -2
  br i1 true, label %for.body82.prol.preheader, label %for.body82.preheader.split

for.body82.prol.preheader:                        ; preds = %for.body82.preheader
  %131 = add i32 %129, 3
  %xtraiter1909 = and i32 %131, 3
  br label %for.body82.prol

for.body82.prol:                                  ; preds = %for.body82.prol, %for.body82.prol.preheader
  %indvars.iv1457.prol = phi i64 [ %indvars.iv.next1458.prol, %for.body82.prol ], [ %128, %for.body82.prol.preheader ]
  %i.31335.prol = phi i32 [ %add84.prol, %for.body82.prol ], [ %add78, %for.body82.prol.preheader ]
  %prol.iter1911 = phi i32 [ %prol.iter1911.sub, %for.body82.prol ], [ %xtraiter1909, %for.body82.prol.preheader ]
  %add84.prol = add nsw i32 %i.31335.prol, 1
  %idxprom85.prol = sext i32 %add84.prol to i64
  %arrayidx87.prol = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %idxprom85.prol, i64 %indvars.iv1457.prol
  store double 1.000000e+00, double* %arrayidx87.prol, align 8, !tbaa !34
  %indvars.iv.next1458.prol = add i64 %indvars.iv1457.prol, 1
  %prol.iter1911.sub = add i32 %prol.iter1911, -1
  %prol.iter1911.cmp = icmp eq i32 %prol.iter1911.sub, 0
  br i1 %prol.iter1911.cmp, label %for.body82.preheader.split.loopexit, label %for.body82.prol, !llvm.loop !140

for.body82.preheader.split.loopexit:              ; preds = %for.body82.prol
  %indvars.iv.next1458.prol.lcssa = phi i64 [ %indvars.iv.next1458.prol, %for.body82.prol ]
  %add84.prol.lcssa = phi i32 [ %add84.prol, %for.body82.prol ]
  br label %for.body82.preheader.split

for.body82.preheader.split:                       ; preds = %for.body82.preheader.split.loopexit, %for.body82.preheader
  %indvars.iv1457.unr = phi i64 [ %128, %for.body82.preheader ], [ %indvars.iv.next1458.prol.lcssa, %for.body82.preheader.split.loopexit ]
  %i.31335.unr = phi i32 [ %add78, %for.body82.preheader ], [ %add84.prol.lcssa, %for.body82.preheader.split.loopexit ]
  %132 = icmp ult i32 %130, 3
  br i1 %132, label %for.cond91.preheader.loopexit, label %for.body82.preheader.split.split

for.body82.preheader.split.split:                 ; preds = %for.body82.preheader.split
  br label %for.body82

for.cond91.preheader.loopexit.unr-lcssa:          ; preds = %for.body82
  br label %for.cond91.preheader.loopexit

for.cond91.preheader.loopexit:                    ; preds = %for.body82.preheader.split, %for.cond91.preheader.loopexit.unr-lcssa
  br label %for.cond91.preheader

for.cond91.preheader:                             ; preds = %for.cond91.preheader.loopexit, %for.end76
  %cmp931336 = icmp sgt i32 %mul66, 1
  br i1 %cmp931336, label %for.body94.preheader, label %for.cond105.preheader

for.body94.preheader:                             ; preds = %for.cond91.preheader
  %133 = add i32 %mul66, -1
  %134 = shl i32 %__ca_krylov_s.01441, 1
  %135 = add i32 %134, -2
  br i1 true, label %for.body94.prol.preheader, label %for.body94.preheader.split

for.body94.prol.preheader:                        ; preds = %for.body94.preheader
  %136 = add i32 %134, 3
  %xtraiter1912 = and i32 %136, 3
  br label %for.body94.prol

for.body94.prol:                                  ; preds = %for.body94.prol, %for.body94.prol.preheader
  %indvars.iv1460.prol = phi i64 [ %indvars.iv.next1461.prol, %for.body94.prol ], [ 0, %for.body94.prol.preheader ]
  %prol.iter1914 = phi i32 [ %prol.iter1914.sub, %for.body94.prol ], [ %xtraiter1912, %for.body94.prol.preheader ]
  %137 = add nuw nsw i64 %indvars.iv1460.prol, 2
  %arrayidx99.prol = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %137, i64 %indvars.iv1460.prol
  store double 1.000000e+00, double* %arrayidx99.prol, align 8, !tbaa !34
  %indvars.iv.next1461.prol = add nuw nsw i64 %indvars.iv1460.prol, 1
  %prol.iter1914.sub = add i32 %prol.iter1914, -1
  %prol.iter1914.cmp = icmp eq i32 %prol.iter1914.sub, 0
  br i1 %prol.iter1914.cmp, label %for.body94.preheader.split.loopexit, label %for.body94.prol, !llvm.loop !141

for.body94.preheader.split.loopexit:              ; preds = %for.body94.prol
  %indvars.iv.next1461.prol.lcssa = phi i64 [ %indvars.iv.next1461.prol, %for.body94.prol ]
  br label %for.body94.preheader.split

for.body94.preheader.split:                       ; preds = %for.body94.preheader.split.loopexit, %for.body94.preheader
  %indvars.iv1460.unr = phi i64 [ 0, %for.body94.preheader ], [ %indvars.iv.next1461.prol.lcssa, %for.body94.preheader.split.loopexit ]
  %138 = icmp ult i32 %135, 3
  br i1 %138, label %for.cond105.preheader.loopexit, label %for.body94.preheader.split.split

for.body94.preheader.split.split:                 ; preds = %for.body94.preheader.split
  br label %for.body94

for.body82:                                       ; preds = %for.body82, %for.body82.preheader.split.split
  %indvars.iv1457 = phi i64 [ %indvars.iv1457.unr, %for.body82.preheader.split.split ], [ %indvars.iv.next1458.3, %for.body82 ]
  %i.31335 = phi i32 [ %i.31335.unr, %for.body82.preheader.split.split ], [ %add84.3, %for.body82 ]
  %add84 = add nsw i32 %i.31335, 1
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx87 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %idxprom85, i64 %indvars.iv1457
  store double 1.000000e+00, double* %arrayidx87, align 8, !tbaa !34
  %indvars.iv.next1458 = add i64 %indvars.iv1457, 1
  %add84.1 = add nsw i32 %i.31335, 2
  %idxprom85.1 = sext i32 %add84.1 to i64
  %arrayidx87.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %idxprom85.1, i64 %indvars.iv.next1458
  store double 1.000000e+00, double* %arrayidx87.1, align 8, !tbaa !34
  %indvars.iv.next1458.1 = add i64 %indvars.iv1457, 2
  %add84.2 = add nsw i32 %i.31335, 3
  %idxprom85.2 = sext i32 %add84.2 to i64
  %arrayidx87.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %idxprom85.2, i64 %indvars.iv.next1458.1
  store double 1.000000e+00, double* %arrayidx87.2, align 8, !tbaa !34
  %indvars.iv.next1458.2 = add i64 %indvars.iv1457, 3
  %add84.3 = add nsw i32 %i.31335, 4
  %idxprom85.3 = sext i32 %add84.3 to i64
  %arrayidx87.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %idxprom85.3, i64 %indvars.iv.next1458.2
  store double 1.000000e+00, double* %arrayidx87.3, align 8, !tbaa !34
  %indvars.iv.next1458.3 = add i64 %indvars.iv1457, 4
  %exitcond1459.3 = icmp eq i32 %add84.3, %mul
  br i1 %exitcond1459.3, label %for.cond91.preheader.loopexit.unr-lcssa, label %for.body82

for.cond105.preheader.loopexit.unr-lcssa:         ; preds = %for.body94
  br label %for.cond105.preheader.loopexit

for.cond105.preheader.loopexit:                   ; preds = %for.body94.preheader.split, %for.cond105.preheader.loopexit.unr-lcssa
  br label %for.cond105.preheader

for.cond105.preheader:                            ; preds = %for.cond105.preheader.loopexit, %for.cond91.preheader
  %sub107 = add i32 %mul, -1
  %cmp1081338 = icmp slt i32 %add78, %sub107
  br i1 %cmp1081338, label %for.body109.preheader, label %for.cond118.preheader

for.body109.preheader:                            ; preds = %for.cond105.preheader
  %139 = sext i32 %mul66 to i64
  %140 = or i64 %139, 1
  %141 = shl i32 %__ca_krylov_s.01441, 1
  %142 = add i32 %141, -3
  %143 = and i32 %141, 2
  %lcmp.mod1916 = icmp eq i32 %143, 0
  br i1 %lcmp.mod1916, label %for.body109.prol.preheader, label %for.body109.preheader.split

for.body109.prol.preheader:                       ; preds = %for.body109.preheader
  %xtraiter1915 = xor i32 %143, 2
  br label %for.body109.prol

for.body109.prol:                                 ; preds = %for.body109.prol, %for.body109.prol.preheader
  %indvars.iv1465.prol = phi i64 [ %indvars.iv.next1466.prol, %for.body109.prol ], [ %140, %for.body109.prol.preheader ]
  %i.51339.prol = phi i32 [ %inc116.prol, %for.body109.prol ], [ %add78, %for.body109.prol.preheader ]
  %prol.iter1917 = phi i32 [ %prol.iter1917.sub, %for.body109.prol ], [ %xtraiter1915, %for.body109.prol.preheader ]
  %add111.prol = add nsw i32 %i.51339.prol, 2
  %idxprom112.prol = sext i32 %add111.prol to i64
  %arrayidx114.prol = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %idxprom112.prol, i64 %indvars.iv1465.prol
  store double 1.000000e+00, double* %arrayidx114.prol, align 8, !tbaa !34
  %inc116.prol = add nsw i32 %i.51339.prol, 1
  %indvars.iv.next1466.prol = add i64 %indvars.iv1465.prol, 1
  %prol.iter1917.sub = add i32 %prol.iter1917, -1
  %prol.iter1917.cmp = icmp eq i32 %prol.iter1917.sub, 0
  br i1 %prol.iter1917.cmp, label %for.body109.preheader.split.loopexit, label %for.body109.prol, !llvm.loop !142

for.body109.preheader.split.loopexit:             ; preds = %for.body109.prol
  %indvars.iv.next1466.prol.lcssa = phi i64 [ %indvars.iv.next1466.prol, %for.body109.prol ]
  %inc116.prol.lcssa = phi i32 [ %inc116.prol, %for.body109.prol ]
  br label %for.body109.preheader.split

for.body109.preheader.split:                      ; preds = %for.body109.preheader.split.loopexit, %for.body109.preheader
  %indvars.iv1465.unr = phi i64 [ %140, %for.body109.preheader ], [ %indvars.iv.next1466.prol.lcssa, %for.body109.preheader.split.loopexit ]
  %i.51339.unr = phi i32 [ %add78, %for.body109.preheader ], [ %inc116.prol.lcssa, %for.body109.preheader.split.loopexit ]
  %144 = icmp ult i32 %142, 3
  br i1 %144, label %for.cond118.preheader.loopexit, label %for.body109.preheader.split.split

for.body109.preheader.split.split:                ; preds = %for.body109.preheader.split
  br label %for.body109

for.body94:                                       ; preds = %for.body94, %for.body94.preheader.split.split
  %indvars.iv1460 = phi i64 [ %indvars.iv1460.unr, %for.body94.preheader.split.split ], [ %indvars.iv.next1461.3, %for.body94 ]
  %145 = add nuw nsw i64 %indvars.iv1460, 2
  %arrayidx99 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %145, i64 %indvars.iv1460
  store double 1.000000e+00, double* %arrayidx99, align 8, !tbaa !34
  %indvars.iv.next1461 = add nuw nsw i64 %indvars.iv1460, 1
  %146 = add nsw i64 %indvars.iv1460, 3
  %arrayidx99.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %146, i64 %indvars.iv.next1461
  store double 1.000000e+00, double* %arrayidx99.1, align 8, !tbaa !34
  %indvars.iv.next1461.1 = add nsw i64 %indvars.iv1460, 2
  %147 = add nsw i64 %indvars.iv1460, 4
  %arrayidx99.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %147, i64 %indvars.iv.next1461.1
  store double 1.000000e+00, double* %arrayidx99.2, align 8, !tbaa !34
  %indvars.iv.next1461.2 = add nsw i64 %indvars.iv1460, 3
  %148 = add nsw i64 %indvars.iv1460, 5
  %arrayidx99.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %148, i64 %indvars.iv.next1461.2
  store double 1.000000e+00, double* %arrayidx99.3, align 8, !tbaa !34
  %indvars.iv.next1461.3 = add nsw i64 %indvars.iv1460, 4
  %lftr.wideiv1463.3 = trunc i64 %indvars.iv.next1461.3 to i32
  %exitcond1464.3 = icmp eq i32 %lftr.wideiv1463.3, %133
  br i1 %exitcond1464.3, label %for.cond105.preheader.loopexit.unr-lcssa, label %for.body94

for.cond118.preheader.loopexit.unr-lcssa:         ; preds = %for.body109
  br label %for.cond118.preheader.loopexit

for.cond118.preheader.loopexit:                   ; preds = %for.body109.preheader.split, %for.cond118.preheader.loopexit.unr-lcssa
  br label %for.cond118.preheader

for.cond118.preheader:                            ; preds = %for.cond118.preheader.loopexit, %for.cond105.preheader
  br i1 %cmp4.i, label %for.body122.preheader, label %for.end128

for.body122.preheader:                            ; preds = %for.cond118.preheader
  %149 = or i32 %mul, 1
  %150 = shl i32 %__ca_krylov_s.01441, 2
  %151 = zext i32 %150 to i64
  %152 = or i64 %151, 1
  %min.iters.check1876 = icmp ult i64 %152, 4
  br i1 %min.iters.check1876, label %for.body122.preheader1904, label %min.iters.checked1877

for.body122.preheader1904.loopexit.unr-lcssa:     ; preds = %vector.body1873
  br label %for.body122.preheader1904.loopexit

for.body122.preheader1904.loopexit:               ; preds = %vector.body1873.preheader.split, %for.body122.preheader1904.loopexit.unr-lcssa
  br label %for.body122.preheader1904

for.body122.preheader1904:                        ; preds = %for.body122.preheader1904.loopexit, %min.iters.checked1877, %for.body122.preheader
  %indvars.iv1468.ph = phi i64 [ 0, %min.iters.checked1877 ], [ 0, %for.body122.preheader ], [ %n.vec1879, %for.body122.preheader1904.loopexit ]
  br label %for.body122

min.iters.checked1877:                            ; preds = %for.body122.preheader
  %n.vec1879 = add nsw i64 %152, -1
  %cmp.zero1880 = icmp eq i64 %n.vec1879, 0
  br i1 %cmp.zero1880, label %for.body122.preheader1904, label %vector.body1873.preheader

vector.body1873.preheader:                        ; preds = %min.iters.checked1877
  %153 = shl i32 %__ca_krylov_s.01441, 2
  %154 = zext i32 %153 to i64
  %155 = add nsw i64 %154, -4
  %156 = lshr exact i64 %155, 2
  %157 = and i64 %156, 1
  %lcmp.mod1919 = icmp eq i64 %157, 0
  br i1 %lcmp.mod1919, label %vector.body1873.prol, label %vector.body1873.preheader.split

vector.body1873.prol:                             ; preds = %vector.body1873.preheader
  store <2 x i32> <i32 15, i32 16>, <2 x i32>* %14, align 16, !tbaa !35
  store <2 x i32> <i32 17, i32 18>, <2 x i32>* %16, align 8, !tbaa !35
  br label %vector.body1873.preheader.split

vector.body1873.preheader.split:                  ; preds = %vector.body1873.prol, %vector.body1873.preheader
  %index1882.unr = phi i64 [ 0, %vector.body1873.preheader ], [ 4, %vector.body1873.prol ]
  %158 = icmp eq i64 %156, 0
  br i1 %158, label %for.body122.preheader1904.loopexit, label %vector.body1873.preheader.split.split

vector.body1873.preheader.split.split:            ; preds = %vector.body1873.preheader.split
  br label %vector.body1873

vector.body1873:                                  ; preds = %vector.body1873, %vector.body1873.preheader.split.split
  %index1882 = phi i64 [ %index1882.unr, %vector.body1873.preheader.split.split ], [ %index.next1883.1, %vector.body1873 ]
  %broadcast.splatinsert1886 = insertelement <2 x i64> undef, i64 %index1882, i32 0
  %broadcast.splat1887 = shufflevector <2 x i64> %broadcast.splatinsert1886, <2 x i64> undef, <2 x i32> zeroinitializer
  %159 = add <2 x i64> %broadcast.splat1887, <i64 15, i64 16>
  %160 = add <2 x i64> %broadcast.splat1887, <i64 17, i64 18>
  %161 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 %index1882
  %162 = trunc <2 x i64> %159 to <2 x i32>
  %163 = trunc <2 x i64> %160 to <2 x i32>
  %164 = bitcast i32* %161 to <2 x i32>*
  store <2 x i32> %162, <2 x i32>* %164, align 16, !tbaa !35
  %165 = getelementptr i32, i32* %161, i64 2
  %166 = bitcast i32* %165 to <2 x i32>*
  store <2 x i32> %163, <2 x i32>* %166, align 8, !tbaa !35
  %index.next1883 = add i64 %index1882, 4
  %broadcast.splatinsert1886.1 = insertelement <2 x i64> undef, i64 %index.next1883, i32 0
  %broadcast.splat1887.1 = shufflevector <2 x i64> %broadcast.splatinsert1886.1, <2 x i64> undef, <2 x i32> zeroinitializer
  %167 = add <2 x i64> %broadcast.splat1887.1, <i64 15, i64 16>
  %168 = add <2 x i64> %broadcast.splat1887.1, <i64 17, i64 18>
  %169 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 %index.next1883
  %170 = trunc <2 x i64> %167 to <2 x i32>
  %171 = trunc <2 x i64> %168 to <2 x i32>
  %172 = bitcast i32* %169 to <2 x i32>*
  store <2 x i32> %170, <2 x i32>* %172, align 16, !tbaa !35
  %173 = getelementptr i32, i32* %169, i64 2
  %174 = bitcast i32* %173 to <2 x i32>*
  store <2 x i32> %171, <2 x i32>* %174, align 8, !tbaa !35
  %index.next1883.1 = add i64 %index1882, 8
  %175 = icmp eq i64 %index.next1883.1, %n.vec1879
  br i1 %175, label %for.body122.preheader1904.loopexit.unr-lcssa, label %vector.body1873, !llvm.loop !143

for.body109:                                      ; preds = %for.body109, %for.body109.preheader.split.split
  %indvars.iv1465 = phi i64 [ %indvars.iv1465.unr, %for.body109.preheader.split.split ], [ %indvars.iv.next1466.3, %for.body109 ]
  %i.51339 = phi i32 [ %i.51339.unr, %for.body109.preheader.split.split ], [ %inc116.3, %for.body109 ]
  %add111 = add nsw i32 %i.51339, 2
  %idxprom112 = sext i32 %add111 to i64
  %arrayidx114 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %idxprom112, i64 %indvars.iv1465
  store double 1.000000e+00, double* %arrayidx114, align 8, !tbaa !34
  %indvars.iv.next1466 = add i64 %indvars.iv1465, 1
  %add111.1 = add nsw i32 %i.51339, 3
  %idxprom112.1 = sext i32 %add111.1 to i64
  %arrayidx114.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %idxprom112.1, i64 %indvars.iv.next1466
  store double 1.000000e+00, double* %arrayidx114.1, align 8, !tbaa !34
  %indvars.iv.next1466.1 = add i64 %indvars.iv1465, 2
  %add111.2 = add nsw i32 %i.51339, 4
  %idxprom112.2 = sext i32 %add111.2 to i64
  %arrayidx114.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %idxprom112.2, i64 %indvars.iv.next1466.1
  store double 1.000000e+00, double* %arrayidx114.2, align 8, !tbaa !34
  %indvars.iv.next1466.2 = add i64 %indvars.iv1465, 3
  %add111.3 = add nsw i32 %i.51339, 5
  %idxprom112.3 = sext i32 %add111.3 to i64
  %arrayidx114.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %idxprom112.3, i64 %indvars.iv.next1466.2
  store double 1.000000e+00, double* %arrayidx114.3, align 8, !tbaa !34
  %inc116.3 = add nsw i32 %i.51339, 4
  %indvars.iv.next1466.3 = add i64 %indvars.iv1465, 4
  %exitcond1467.3 = icmp eq i32 %inc116.3, %sub107
  br i1 %exitcond1467.3, label %for.cond118.preheader.loopexit.unr-lcssa, label %for.body109

for.body122:                                      ; preds = %for.body122.preheader1904, %for.body122
  %indvars.iv1468 = phi i64 [ %indvars.iv.next1469, %for.body122 ], [ %indvars.iv1468.ph, %for.body122.preheader1904 ]
  %176 = add nuw nsw i64 %indvars.iv1468, 15
  %arrayidx125 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 %indvars.iv1468
  %177 = trunc i64 %176 to i32
  store i32 %177, i32* %arrayidx125, align 4, !tbaa !35
  %indvars.iv.next1469 = add nuw nsw i64 %indvars.iv1468, 1
  %lftr.wideiv1471 = trunc i64 %indvars.iv.next1469 to i32
  %exitcond1472 = icmp eq i32 %lftr.wideiv1471, %149
  br i1 %exitcond1472, label %for.end128.loopexit, label %for.body122, !llvm.loop !144

for.end128.loopexit:                              ; preds = %for.body122
  br label %for.end128

for.end128:                                       ; preds = %for.end128.loopexit, %for.cond118.preheader
  %idxprom131 = sext i32 %add to i64
  %arrayidx132 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 %idxprom131
  store i32 12, i32* %arrayidx132, align 4, !tbaa !35
  %idx.ext = sext i32 %mul66 to i64
  %add.ptr136 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 %idx.ext
  %add.ptr137 = getelementptr inbounds i32, i32* %add.ptr136, i64 1
  %178 = load i32, i32* %arraydecay133, align 16, !tbaa !35
  call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 %178, double 1.000000e+00, i32 14) #1
  %cmp1421342 = icmp sgt i32 %add78, 1
  br i1 %cmp1421342, label %for.body143.preheader, label %for.end151

for.body143.preheader:                            ; preds = %for.end128
  %179 = or i32 %mul66, 1
  br label %for.body143

for.body143:                                      ; preds = %for.body143, %for.body143.preheader
  %indvars.iv1473 = phi i64 [ 1, %for.body143.preheader ], [ %indvars.iv.next1474, %for.body143 ]
  %180 = add nsw i64 %indvars.iv1473, -1
  %arrayidx146 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 %180
  %181 = load i32, i32* %arrayidx146, align 4, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %181) #1
  %arrayidx148 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 %indvars.iv1473
  %182 = load i32, i32* %arrayidx148, align 4, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %182, i32 10, double %a, double %b) #1
  %indvars.iv.next1474 = add nuw nsw i64 %indvars.iv1473, 1
  %lftr.wideiv1476 = trunc i64 %indvars.iv.next1474 to i32
  %exitcond1477 = icmp eq i32 %lftr.wideiv1476, %179
  br i1 %exitcond1477, label %for.end151.loopexit, label %for.body143

for.end151.loopexit:                              ; preds = %for.body143
  br label %for.end151

for.end151:                                       ; preds = %for.end151.loopexit, %for.end128
  %183 = load i32, i32* %add.ptr137, align 4, !tbaa !35
  call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 %183, double 1.000000e+00, i32 13) #1
  br i1 %cmp931336, label %for.body156.preheader, label %for.end164

for.body156.preheader:                            ; preds = %for.end151
  br label %for.body156

for.body156:                                      ; preds = %for.body156.preheader, %for.body156
  %indvars.iv1478 = phi i64 [ %indvars.iv.next1479, %for.body156 ], [ 1, %for.body156.preheader ]
  %184 = add nsw i64 %indvars.iv1478, -1
  %arrayidx159 = getelementptr inbounds i32, i32* %add.ptr137, i64 %184
  %185 = load i32, i32* %arrayidx159, align 4, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %185) #1
  %arrayidx161 = getelementptr inbounds i32, i32* %add.ptr137, i64 %indvars.iv1478
  %186 = load i32, i32* %arrayidx161, align 4, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %186, i32 10, double %a, double %b) #1
  %indvars.iv.next1479 = add nuw nsw i64 %indvars.iv1478, 1
  %lftr.wideiv1481 = trunc i64 %indvars.iv.next1479 to i32
  %exitcond1482 = icmp eq i32 %lftr.wideiv1481, %mul66
  br i1 %exitcond1482, label %for.end164.loopexit, label %for.body156

for.end164.loopexit:                              ; preds = %for.body156
  br label %for.end164

for.end164:                                       ; preds = %for.end164.loopexit, %for.end151
  %187 = load i32, i32* %CAKrylov_formations_of_G, align 4, !tbaa !146
  %inc165 = add nsw i32 %187, 1
  store i32 %inc165, i32* %CAKrylov_formations_of_G, align 4, !tbaa !146
  %add172 = or i32 %mul, 2
  call void @matmul_grids(%struct.domain_type* %domain, i32 %level, double* %arraydecay166, i32* nonnull %arraydecay133, i32* nonnull %arraydecay133, i32 %add, i32 %add172, i32 1) #1
  br i1 %cmp4.i, label %for.cond178.preheader.us.preheader, label %for.end221

for.cond178.preheader.us.preheader:               ; preds = %for.end164
  %188 = or i32 %mul, 2
  %189 = or i32 %mul, 1
  %190 = shl i32 %__ca_krylov_s.01441, 2
  %191 = icmp ult i32 %190, 3
  br label %for.cond178.preheader.us

for.cond178.preheader.us:                         ; preds = %for.cond178.for.end192_crit_edge.us, %for.cond178.preheader.us.preheader
  %indvars.iv1489 = phi i64 [ 0, %for.cond178.preheader.us.preheader ], [ %indvars.iv.next1490, %for.cond178.for.end192_crit_edge.us ]
  %k.01355.us = phi i32 [ 0, %for.cond178.preheader.us.preheader ], [ %212, %for.cond178.for.end192_crit_edge.us ]
  %inc1831347.us = or i32 %k.01355.us, 1
  %idxprom1841348.us = sext i32 %k.01355.us to i64
  %arrayidx1851349.us = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %idxprom1841348.us
  %192 = bitcast double* %arrayidx1851349.us to i64*
  %193 = load i64, i64* %192, align 16, !tbaa !34
  %194 = sext i32 %inc1831347.us to i64
  br i1 true, label %for.body182.us.prol.preheader, label %for.cond178.preheader.us.split

for.body182.us.prol.preheader:                    ; preds = %for.cond178.preheader.us
  br label %for.body182.us.prol

for.body182.us.prol:                              ; preds = %for.body182.us.prol, %for.body182.us.prol.preheader
  %indvars.iv1485.prol = phi i64 [ %indvars.iv.next1486.prol, %for.body182.us.prol ], [ 0, %for.body182.us.prol.preheader ]
  %indvars.iv1483.prol = phi i64 [ %indvars.iv.next1484.prol, %for.body182.us.prol ], [ %194, %for.body182.us.prol.preheader ]
  %195 = phi i64 [ %198, %for.body182.us.prol ], [ %193, %for.body182.us.prol.preheader ]
  %prol.iter1922 = phi i32 [ %prol.iter1922.sub, %for.body182.us.prol ], [ 1, %for.body182.us.prol.preheader ]
  %arrayidx189.us.prol = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1489, i64 %indvars.iv1485.prol
  %196 = bitcast double* %arrayidx189.us.prol to i64*
  store i64 %195, i64* %196, align 8, !tbaa !34
  %indvars.iv.next1486.prol = add nuw nsw i64 %indvars.iv1485.prol, 1
  %arrayidx185.us.prol = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv1483.prol
  %197 = bitcast double* %arrayidx185.us.prol to i64*
  %198 = load i64, i64* %197, align 8, !tbaa !34
  %indvars.iv.next1484.prol = add nsw i64 %indvars.iv1483.prol, 1
  %prol.iter1922.sub = add i32 %prol.iter1922, -1
  %prol.iter1922.cmp = icmp eq i32 %prol.iter1922.sub, 0
  br i1 %prol.iter1922.cmp, label %for.cond178.preheader.us.split.loopexit, label %for.body182.us.prol, !llvm.loop !147

for.cond178.preheader.us.split.loopexit:          ; preds = %for.body182.us.prol
  %indvars.iv.next1484.prol.lcssa = phi i64 [ %indvars.iv.next1484.prol, %for.body182.us.prol ]
  %.lcssa1982 = phi i64 [ %198, %for.body182.us.prol ]
  %indvars.iv.next1486.prol.lcssa = phi i64 [ %indvars.iv.next1486.prol, %for.body182.us.prol ]
  br label %for.cond178.preheader.us.split

for.cond178.preheader.us.split:                   ; preds = %for.cond178.preheader.us.split.loopexit, %for.cond178.preheader.us
  %.lcssa.unr = phi i64 [ undef, %for.cond178.preheader.us ], [ %.lcssa1982, %for.cond178.preheader.us.split.loopexit ]
  %indvars.iv1485.unr = phi i64 [ 0, %for.cond178.preheader.us ], [ %indvars.iv.next1486.prol.lcssa, %for.cond178.preheader.us.split.loopexit ]
  %indvars.iv1483.unr = phi i64 [ %194, %for.cond178.preheader.us ], [ %indvars.iv.next1484.prol.lcssa, %for.cond178.preheader.us.split.loopexit ]
  %.unr = phi i64 [ %193, %for.cond178.preheader.us ], [ %.lcssa1982, %for.cond178.preheader.us.split.loopexit ]
  br i1 %191, label %for.cond178.for.end192_crit_edge.us, label %for.cond178.preheader.us.split.split

for.cond178.preheader.us.split.split:             ; preds = %for.cond178.preheader.us.split
  br label %for.body182.us

for.body182.us:                                   ; preds = %for.body182.us, %for.cond178.preheader.us.split.split
  %indvars.iv1485 = phi i64 [ %indvars.iv1485.unr, %for.cond178.preheader.us.split.split ], [ %indvars.iv.next1486.3, %for.body182.us ]
  %indvars.iv1483 = phi i64 [ %indvars.iv1483.unr, %for.cond178.preheader.us.split.split ], [ %indvars.iv.next1484.3, %for.body182.us ]
  %199 = phi i64 [ %.unr, %for.cond178.preheader.us.split.split ], [ %211, %for.body182.us ]
  %arrayidx189.us = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1489, i64 %indvars.iv1485
  %200 = bitcast double* %arrayidx189.us to i64*
  store i64 %199, i64* %200, align 8, !tbaa !34
  %indvars.iv.next1486 = add nuw nsw i64 %indvars.iv1485, 1
  %arrayidx185.us = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv1483
  %201 = bitcast double* %arrayidx185.us to i64*
  %202 = load i64, i64* %201, align 8, !tbaa !34
  %indvars.iv.next1484 = add nsw i64 %indvars.iv1483, 1
  %arrayidx189.us.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1489, i64 %indvars.iv.next1486
  %203 = bitcast double* %arrayidx189.us.1 to i64*
  store i64 %202, i64* %203, align 8, !tbaa !34
  %indvars.iv.next1486.1 = add nsw i64 %indvars.iv1485, 2
  %arrayidx185.us.1 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv.next1484
  %204 = bitcast double* %arrayidx185.us.1 to i64*
  %205 = load i64, i64* %204, align 8, !tbaa !34
  %indvars.iv.next1484.1 = add nsw i64 %indvars.iv1483, 2
  %arrayidx189.us.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1489, i64 %indvars.iv.next1486.1
  %206 = bitcast double* %arrayidx189.us.2 to i64*
  store i64 %205, i64* %206, align 8, !tbaa !34
  %indvars.iv.next1486.2 = add nsw i64 %indvars.iv1485, 3
  %arrayidx185.us.2 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv.next1484.1
  %207 = bitcast double* %arrayidx185.us.2 to i64*
  %208 = load i64, i64* %207, align 8, !tbaa !34
  %indvars.iv.next1484.2 = add nsw i64 %indvars.iv1483, 3
  %arrayidx189.us.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1489, i64 %indvars.iv.next1486.2
  %209 = bitcast double* %arrayidx189.us.3 to i64*
  store i64 %208, i64* %209, align 8, !tbaa !34
  %indvars.iv.next1486.3 = add nsw i64 %indvars.iv1485, 4
  %arrayidx185.us.3 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv.next1484.2
  %210 = bitcast double* %arrayidx185.us.3 to i64*
  %211 = load i64, i64* %210, align 8, !tbaa !34
  %indvars.iv.next1484.3 = add nsw i64 %indvars.iv1483, 4
  %lftr.wideiv1487.3 = trunc i64 %indvars.iv.next1486.3 to i32
  %exitcond1488.3 = icmp eq i32 %lftr.wideiv1487.3, %189
  br i1 %exitcond1488.3, label %for.cond178.for.end192_crit_edge.us.unr-lcssa, label %for.body182.us

for.cond178.for.end192_crit_edge.us.unr-lcssa:    ; preds = %for.body182.us
  %.lcssa1981 = phi i64 [ %211, %for.body182.us ]
  br label %for.cond178.for.end192_crit_edge.us

for.cond178.for.end192_crit_edge.us:              ; preds = %for.cond178.preheader.us.split, %for.cond178.for.end192_crit_edge.us.unr-lcssa
  %.lcssa = phi i64 [ %.lcssa.unr, %for.cond178.preheader.us.split ], [ %.lcssa1981, %for.cond178.for.end192_crit_edge.us.unr-lcssa ]
  %212 = add i32 %188, %k.01355.us
  %arrayidx197.us = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 %indvars.iv1489
  %213 = bitcast double* %arrayidx197.us to i64*
  store i64 %.lcssa, i64* %213, align 8, !tbaa !34
  %indvars.iv.next1490 = add nuw nsw i64 %indvars.iv1489, 1
  %lftr.wideiv1491 = trunc i64 %indvars.iv.next1490 to i32
  %exitcond1492 = icmp eq i32 %lftr.wideiv1491, %189
  br i1 %exitcond1492, label %for.cond201.preheader, label %for.cond178.preheader.us

for.cond201.preheader:                            ; preds = %for.cond178.for.end192_crit_edge.us
  br i1 %cmp4.i, label %for.body230.preheader, label %for.end221

for.end221:                                       ; preds = %for.end164, %for.cond201.preheader
  store double 1.000000e+00, double* %arraydecay, align 16, !tbaa !34
  %idxprom224 = sext i32 %add78 to i64
  %arrayidx225 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %idxprom224
  store double 1.000000e+00, double* %arrayidx225, align 8, !tbaa !34
  br label %for.cond236.preheader

for.body230.preheader:                            ; preds = %for.cond201.preheader
  %214 = zext i32 %mul to i64
  %215 = shl nuw nsw i64 %214, 3
  %216 = or i64 %215, 8
  call void @llvm.memset.p0i8.i64(i8* %z6.i, i8 0, i64 %216, i32 16, i1 false)
  store double 1.000000e+00, double* %arraydecay, align 16, !tbaa !34
  %217 = zext i32 %mul to i64
  %218 = shl nuw nsw i64 %217, 3
  %219 = or i64 %218, 8
  call void @llvm.memset.p0i8.i64(i8* %z6.i1223, i8 0, i64 %219, i32 16, i1 false)
  %idxprom2241602 = sext i32 %add78 to i64
  %arrayidx2251603 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %idxprom2241602
  store double 1.000000e+00, double* %arrayidx2251603, align 8, !tbaa !34
  %220 = zext i32 %mul to i64
  %221 = shl nuw nsw i64 %220, 3
  %222 = or i64 %221, 8
  call void @llvm.memset.p0i8.i64(i8* %z6.i1219, i8 0, i64 %222, i32 16, i1 false)
  br label %for.cond236.preheader

for.cond236.preheader:                            ; preds = %for.end221, %for.body230.preheader
  br i1 %cmp671332, label %for.body238.lr.ph, label %for.end640

for.body238.lr.ph:                                ; preds = %for.cond236.preheader
  %223 = or i32 %mul, 1
  %224 = shl i32 %__ca_krylov_s.01441, 2
  %225 = zext i32 %224 to i64
  %226 = or i64 %225, 1
  %227 = zext i32 %224 to i64
  %228 = or i64 %227, 1
  %229 = zext i32 %224 to i64
  %230 = or i64 %229, 1
  %231 = shl i32 %__ca_krylov_s.01441, 2
  %232 = zext i32 %231 to i64
  %233 = or i64 %232, 1
  %234 = zext i32 %231 to i64
  %235 = or i64 %234, 1
  %236 = zext i32 %231 to i64
  %237 = or i64 %236, 1
  %238 = shl i32 %__ca_krylov_s.01441, 2
  %239 = zext i32 %238 to i64
  %240 = or i64 %239, 1
  %241 = zext i32 %238 to i64
  %242 = or i64 %241, 1
  %243 = zext i32 %238 to i64
  %244 = or i64 %243, 1
  %245 = shl i32 %__ca_krylov_s.01441, 2
  %246 = zext i32 %245 to i64
  %247 = or i64 %246, 1
  %248 = zext i32 %245 to i64
  %249 = or i64 %248, 1
  %250 = zext i32 %245 to i64
  %251 = add nsw i64 %250, -4
  %252 = lshr exact i64 %251, 2
  %253 = shl i32 %__ca_krylov_s.01441, 2
  %254 = zext i32 %253 to i64
  %255 = add nsw i64 %254, -4
  %256 = lshr exact i64 %255, 2
  %257 = zext i32 %253 to i64
  %258 = add nsw i64 %257, -4
  %259 = lshr exact i64 %258, 2
  %260 = shl i32 %__ca_krylov_s.01441, 2
  %261 = zext i32 %260 to i64
  %262 = add nsw i64 %261, -4
  %263 = lshr exact i64 %262, 2
  %264 = zext i32 %260 to i64
  %265 = add nsw i64 %264, -4
  %266 = lshr exact i64 %265, 2
  %267 = shl i32 %__ca_krylov_s.01441, 2
  %268 = zext i32 %267 to i64
  %269 = add nsw i64 %268, -4
  %270 = lshr exact i64 %269, 2
  %271 = zext i32 %267 to i64
  %272 = add nsw i64 %271, -4
  %273 = lshr exact i64 %272, 2
  %274 = shl i32 %__ca_krylov_s.01441, 2
  %275 = zext i32 %274 to i64
  %276 = add nsw i64 %275, -4
  %277 = lshr exact i64 %276, 2
  %278 = zext i32 %274 to i64
  %279 = add nsw i64 %278, -4
  %280 = lshr exact i64 %279, 2
  %281 = shl i32 %__ca_krylov_s.01441, 2
  %282 = zext i32 %281 to i64
  %283 = add nsw i64 %282, -4
  %284 = lshr exact i64 %283, 2
  %285 = zext i32 %281 to i64
  %286 = add nsw i64 %285, -4
  %287 = lshr exact i64 %286, 2
  %288 = icmp ult i32 %245, 3
  %289 = icmp ult i32 %245, 3
  %290 = icmp ult i32 %245, 3
  %291 = icmp ult i32 %245, 3
  %min.iters.check1851 = icmp ult i64 %249, 4
  %292 = icmp ult i32 %253, 3
  %min.iters.check1826 = icmp ult i64 %247, 4
  %293 = icmp ult i32 %253, 3
  %294 = icmp ult i32 %253, 3
  %min.iters.check1801 = icmp ult i64 %244, 4
  %min.iters.check1776 = icmp ult i64 %242, 4
  %295 = icmp ult i32 %260, 3
  %296 = icmp ult i32 %260, 3
  %min.iters.check1751 = icmp ult i64 %240, 4
  %min.iters.check1726 = icmp ult i64 %237, 4
  %min.iters.check1701 = icmp ult i64 %235, 4
  %min.iters.check1676 = icmp ult i64 %233, 4
  %min.iters.check1651 = icmp ult i64 %230, 4
  %297 = icmp ult i32 %281, 3
  %298 = icmp ult i32 %281, 3
  %299 = icmp ult i32 %281, 3
  %min.iters.check1626 = icmp ult i64 %228, 4
  %min.iters.check = icmp ult i64 %226, 4
  %n.vec = add nsw i64 %226, -1
  %cmp.zero = icmp eq i64 %n.vec, 0
  %300 = and i64 %287, 1
  %lcmp.mod1980 = icmp eq i64 %300, 0
  %301 = icmp eq i64 %287, 0
  %n.vec1629 = add nsw i64 %228, -1
  %cmp.zero1630 = icmp eq i64 %n.vec1629, 0
  %302 = and i64 %284, 1
  %lcmp.mod1978 = icmp eq i64 %302, 0
  %303 = icmp eq i64 %284, 0
  %n.vec1654 = add nsw i64 %230, -1
  %cmp.zero1655 = icmp eq i64 %n.vec1654, 0
  %304 = and i64 %280, 1
  %lcmp.mod1967 = icmp eq i64 %304, 0
  %305 = icmp eq i64 %280, 0
  %n.vec1679 = add nsw i64 %233, -1
  %cmp.zero1680 = icmp eq i64 %n.vec1679, 0
  %306 = and i64 %277, 1
  %lcmp.mod1965 = icmp eq i64 %306, 0
  %307 = icmp eq i64 %277, 0
  %n.vec1704 = add nsw i64 %235, -1
  %cmp.zero1705 = icmp eq i64 %n.vec1704, 0
  %308 = and i64 %273, 1
  %lcmp.mod1963 = icmp eq i64 %308, 0
  %309 = icmp eq i64 %273, 0
  %n.vec1729 = add nsw i64 %237, -1
  %cmp.zero1730 = icmp eq i64 %n.vec1729, 0
  %310 = and i64 %270, 1
  %lcmp.mod1961 = icmp eq i64 %310, 0
  %311 = icmp eq i64 %270, 0
  %n.vec1754 = add nsw i64 %240, -1
  %cmp.zero1755 = icmp eq i64 %n.vec1754, 0
  %312 = and i64 %266, 1
  %lcmp.mod1959 = icmp eq i64 %312, 0
  %313 = icmp eq i64 %266, 0
  %n.vec1779 = add nsw i64 %242, -1
  %cmp.zero1780 = icmp eq i64 %n.vec1779, 0
  %314 = and i64 %263, 1
  %lcmp.mod1951 = icmp eq i64 %314, 0
  %315 = icmp eq i64 %263, 0
  %n.vec1804 = add nsw i64 %244, -1
  %cmp.zero1805 = icmp eq i64 %n.vec1804, 0
  %316 = and i64 %259, 1
  %lcmp.mod1949 = icmp eq i64 %316, 0
  %317 = icmp eq i64 %259, 0
  %n.vec1829 = add nsw i64 %247, -1
  %cmp.zero1830 = icmp eq i64 %n.vec1829, 0
  %318 = and i64 %256, 1
  %lcmp.mod1941 = icmp eq i64 %318, 0
  %319 = icmp eq i64 %256, 0
  %n.vec1854 = add nsw i64 %249, -1
  %cmp.zero1855 = icmp eq i64 %n.vec1854, 0
  %320 = and i64 %252, 1
  %lcmp.mod1936 = icmp eq i64 %320, 0
  %321 = icmp eq i64 %252, 0
  br label %for.body238

for.body238:                                      ; preds = %for.body238.lr.ph, %__axpy.exit
  %n.21401 = phi i32 [ 0, %for.body238.lr.ph ], [ %inc639, %__axpy.exit ]
  %delta.11400 = phi double [ %delta.01438, %for.body238.lr.ph ], [ %add.i1016.lcssa, %__axpy.exit ]
  %322 = load i32, i32* %Krylov_iterations, align 8, !tbaa !128
  %inc239 = add nsw i32 %322, 1
  store i32 %inc239, i32* %Krylov_iterations, align 8, !tbaa !128
  br i1 %cmp4.i, label %for.body249.lr.ph.us.preheader, label %for.end653.loopexit1903

for.body249.lr.ph.us.preheader:                   ; preds = %for.body238
  br label %for.body249.lr.ph.us

for.body249.us:                                   ; preds = %for.body249.us, %for.body249.lr.ph.us.split.split
  %indvars.iv1505 = phi i64 [ %indvars.iv1505.unr, %for.body249.lr.ph.us.split.split ], [ %indvars.iv.next1506.3, %for.body249.us ]
  %sum.01365.us = phi double [ %sum.01365.us.unr, %for.body249.lr.ph.us.split.split ], [ %add257.us.3, %for.body249.us ]
  %arrayidx253.us = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1509, i64 %indvars.iv1505
  %323 = load double, double* %arrayidx253.us, align 8, !tbaa !34
  %arrayidx255.us = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv1505
  %324 = load double, double* %arrayidx255.us, align 8, !tbaa !34
  %mul256.us = fmul double %323, %324
  %add257.us = fadd double %sum.01365.us, %mul256.us
  %indvars.iv.next1506 = add nuw nsw i64 %indvars.iv1505, 1
  %arrayidx253.us.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1509, i64 %indvars.iv.next1506
  %325 = load double, double* %arrayidx253.us.1, align 8, !tbaa !34
  %arrayidx255.us.1 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv.next1506
  %326 = load double, double* %arrayidx255.us.1, align 8, !tbaa !34
  %mul256.us.1 = fmul double %325, %326
  %add257.us.1 = fadd double %add257.us, %mul256.us.1
  %indvars.iv.next1506.1 = add nsw i64 %indvars.iv1505, 2
  %arrayidx253.us.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1509, i64 %indvars.iv.next1506.1
  %327 = load double, double* %arrayidx253.us.2, align 8, !tbaa !34
  %arrayidx255.us.2 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv.next1506.1
  %328 = load double, double* %arrayidx255.us.2, align 8, !tbaa !34
  %mul256.us.2 = fmul double %327, %328
  %add257.us.2 = fadd double %add257.us.1, %mul256.us.2
  %indvars.iv.next1506.2 = add nsw i64 %indvars.iv1505, 3
  %arrayidx253.us.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1509, i64 %indvars.iv.next1506.2
  %329 = load double, double* %arrayidx253.us.3, align 8, !tbaa !34
  %arrayidx255.us.3 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv.next1506.2
  %330 = load double, double* %arrayidx255.us.3, align 8, !tbaa !34
  %mul256.us.3 = fmul double %329, %330
  %add257.us.3 = fadd double %add257.us.2, %mul256.us.3
  %indvars.iv.next1506.3 = add nsw i64 %indvars.iv1505, 4
  %lftr.wideiv1507.3 = trunc i64 %indvars.iv.next1506.3 to i32
  %exitcond1508.3 = icmp eq i32 %lftr.wideiv1507.3, %223
  br i1 %exitcond1508.3, label %for.cond245.for.end260_crit_edge.us.unr-lcssa, label %for.body249.us

for.body249.lr.ph.us:                             ; preds = %for.body249.lr.ph.us.preheader, %for.cond245.for.end260_crit_edge.us
  %indvars.iv1509 = phi i64 [ %indvars.iv.next1510, %for.cond245.for.end260_crit_edge.us ], [ 0, %for.body249.lr.ph.us.preheader ]
  br i1 true, label %for.body249.us.prol.preheader, label %for.body249.lr.ph.us.split

for.body249.us.prol.preheader:                    ; preds = %for.body249.lr.ph.us
  br label %for.body249.us.prol

for.body249.us.prol:                              ; preds = %for.body249.us.prol, %for.body249.us.prol.preheader
  %indvars.iv1505.prol = phi i64 [ %indvars.iv.next1506.prol, %for.body249.us.prol ], [ 0, %for.body249.us.prol.preheader ]
  %sum.01365.us.prol = phi double [ %add257.us.prol, %for.body249.us.prol ], [ 0.000000e+00, %for.body249.us.prol.preheader ]
  %prol.iter1925 = phi i32 [ %prol.iter1925.sub, %for.body249.us.prol ], [ 1, %for.body249.us.prol.preheader ]
  %arrayidx253.us.prol = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1509, i64 %indvars.iv1505.prol
  %331 = load double, double* %arrayidx253.us.prol, align 8, !tbaa !34
  %arrayidx255.us.prol = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv1505.prol
  %332 = load double, double* %arrayidx255.us.prol, align 8, !tbaa !34
  %mul256.us.prol = fmul double %331, %332
  %add257.us.prol = fadd double %sum.01365.us.prol, %mul256.us.prol
  %indvars.iv.next1506.prol = add nuw nsw i64 %indvars.iv1505.prol, 1
  %prol.iter1925.sub = add i32 %prol.iter1925, -1
  %prol.iter1925.cmp = icmp eq i32 %prol.iter1925.sub, 0
  br i1 %prol.iter1925.cmp, label %for.body249.lr.ph.us.split.loopexit, label %for.body249.us.prol, !llvm.loop !148

for.body249.lr.ph.us.split.loopexit:              ; preds = %for.body249.us.prol
  %indvars.iv.next1506.prol.lcssa = phi i64 [ %indvars.iv.next1506.prol, %for.body249.us.prol ]
  %add257.us.prol.lcssa = phi double [ %add257.us.prol, %for.body249.us.prol ]
  br label %for.body249.lr.ph.us.split

for.body249.lr.ph.us.split:                       ; preds = %for.body249.lr.ph.us.split.loopexit, %for.body249.lr.ph.us
  %add257.us.lcssa.unr = phi double [ undef, %for.body249.lr.ph.us ], [ %add257.us.prol.lcssa, %for.body249.lr.ph.us.split.loopexit ]
  %indvars.iv1505.unr = phi i64 [ 0, %for.body249.lr.ph.us ], [ %indvars.iv.next1506.prol.lcssa, %for.body249.lr.ph.us.split.loopexit ]
  %sum.01365.us.unr = phi double [ 0.000000e+00, %for.body249.lr.ph.us ], [ %add257.us.prol.lcssa, %for.body249.lr.ph.us.split.loopexit ]
  br i1 %288, label %for.cond245.for.end260_crit_edge.us, label %for.body249.lr.ph.us.split.split

for.body249.lr.ph.us.split.split:                 ; preds = %for.body249.lr.ph.us.split
  br label %for.body249.us

for.cond245.for.end260_crit_edge.us.unr-lcssa:    ; preds = %for.body249.us
  %add257.us.3.lcssa = phi double [ %add257.us.3, %for.body249.us ]
  br label %for.cond245.for.end260_crit_edge.us

for.cond245.for.end260_crit_edge.us:              ; preds = %for.body249.lr.ph.us.split, %for.cond245.for.end260_crit_edge.us.unr-lcssa
  %add257.us.lcssa = phi double [ %add257.us.lcssa.unr, %for.body249.lr.ph.us.split ], [ %add257.us.3.lcssa, %for.cond245.for.end260_crit_edge.us.unr-lcssa ]
  %arrayidx263.us = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %indvars.iv1509
  %333 = load double, double* %arrayidx263.us, align 8, !tbaa !34
  %mul264.us = fmul double %333, 0.000000e+00
  %add265.us = fadd double %add257.us.lcssa, %mul264.us
  store double %add265.us, double* %arrayidx263.us, align 8, !tbaa !34
  %indvars.iv.next1510 = add nuw nsw i64 %indvars.iv1509, 1
  %lftr.wideiv1511 = trunc i64 %indvars.iv.next1510 to i32
  %exitcond1512 = icmp eq i32 %lftr.wideiv1511, %223
  br i1 %exitcond1512, label %for.cond274.preheader, label %for.body249.lr.ph.us

for.cond274.preheader:                            ; preds = %for.cond245.for.end260_crit_edge.us
  br i1 %cmp4.i, label %for.body283.lr.ph.us.preheader, label %for.end653.loopexit1903

for.body283.lr.ph.us.preheader:                   ; preds = %for.cond274.preheader
  br label %for.body283.lr.ph.us

for.body283.us:                                   ; preds = %for.body283.us, %for.body283.lr.ph.us.split.split
  %indvars.iv1513 = phi i64 [ %indvars.iv1513.unr, %for.body283.lr.ph.us.split.split ], [ %indvars.iv.next1514.3, %for.body283.us ]
  %sum273.01371.us = phi double [ %sum273.01371.us.unr, %for.body283.lr.ph.us.split.split ], [ %add291.us.3, %for.body283.us ]
  %arrayidx287.us = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1517, i64 %indvars.iv1513
  %334 = load double, double* %arrayidx287.us, align 8, !tbaa !34
  %arrayidx289.us = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv1513
  %335 = load double, double* %arrayidx289.us, align 8, !tbaa !34
  %mul290.us = fmul double %334, %335
  %add291.us = fadd double %sum273.01371.us, %mul290.us
  %indvars.iv.next1514 = add nuw nsw i64 %indvars.iv1513, 1
  %arrayidx287.us.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1517, i64 %indvars.iv.next1514
  %336 = load double, double* %arrayidx287.us.1, align 8, !tbaa !34
  %arrayidx289.us.1 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.next1514
  %337 = load double, double* %arrayidx289.us.1, align 8, !tbaa !34
  %mul290.us.1 = fmul double %336, %337
  %add291.us.1 = fadd double %add291.us, %mul290.us.1
  %indvars.iv.next1514.1 = add nsw i64 %indvars.iv1513, 2
  %arrayidx287.us.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1517, i64 %indvars.iv.next1514.1
  %338 = load double, double* %arrayidx287.us.2, align 8, !tbaa !34
  %arrayidx289.us.2 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.next1514.1
  %339 = load double, double* %arrayidx289.us.2, align 8, !tbaa !34
  %mul290.us.2 = fmul double %338, %339
  %add291.us.2 = fadd double %add291.us.1, %mul290.us.2
  %indvars.iv.next1514.2 = add nsw i64 %indvars.iv1513, 3
  %arrayidx287.us.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1517, i64 %indvars.iv.next1514.2
  %340 = load double, double* %arrayidx287.us.3, align 8, !tbaa !34
  %arrayidx289.us.3 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.next1514.2
  %341 = load double, double* %arrayidx289.us.3, align 8, !tbaa !34
  %mul290.us.3 = fmul double %340, %341
  %add291.us.3 = fadd double %add291.us.2, %mul290.us.3
  %indvars.iv.next1514.3 = add nsw i64 %indvars.iv1513, 4
  %lftr.wideiv1515.3 = trunc i64 %indvars.iv.next1514.3 to i32
  %exitcond1516.3 = icmp eq i32 %lftr.wideiv1515.3, %223
  br i1 %exitcond1516.3, label %for.cond279.for.end294_crit_edge.us.unr-lcssa, label %for.body283.us

for.body283.lr.ph.us:                             ; preds = %for.body283.lr.ph.us.preheader, %for.cond279.for.end294_crit_edge.us
  %indvars.iv1517 = phi i64 [ %indvars.iv.next1518, %for.cond279.for.end294_crit_edge.us ], [ 0, %for.body283.lr.ph.us.preheader ]
  br i1 true, label %for.body283.us.prol.preheader, label %for.body283.lr.ph.us.split

for.body283.us.prol.preheader:                    ; preds = %for.body283.lr.ph.us
  br label %for.body283.us.prol

for.body283.us.prol:                              ; preds = %for.body283.us.prol, %for.body283.us.prol.preheader
  %indvars.iv1513.prol = phi i64 [ %indvars.iv.next1514.prol, %for.body283.us.prol ], [ 0, %for.body283.us.prol.preheader ]
  %sum273.01371.us.prol = phi double [ %add291.us.prol, %for.body283.us.prol ], [ 0.000000e+00, %for.body283.us.prol.preheader ]
  %prol.iter1928 = phi i32 [ %prol.iter1928.sub, %for.body283.us.prol ], [ 1, %for.body283.us.prol.preheader ]
  %arrayidx287.us.prol = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1517, i64 %indvars.iv1513.prol
  %342 = load double, double* %arrayidx287.us.prol, align 8, !tbaa !34
  %arrayidx289.us.prol = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv1513.prol
  %343 = load double, double* %arrayidx289.us.prol, align 8, !tbaa !34
  %mul290.us.prol = fmul double %342, %343
  %add291.us.prol = fadd double %sum273.01371.us.prol, %mul290.us.prol
  %indvars.iv.next1514.prol = add nuw nsw i64 %indvars.iv1513.prol, 1
  %prol.iter1928.sub = add i32 %prol.iter1928, -1
  %prol.iter1928.cmp = icmp eq i32 %prol.iter1928.sub, 0
  br i1 %prol.iter1928.cmp, label %for.body283.lr.ph.us.split.loopexit, label %for.body283.us.prol, !llvm.loop !149

for.body283.lr.ph.us.split.loopexit:              ; preds = %for.body283.us.prol
  %indvars.iv.next1514.prol.lcssa = phi i64 [ %indvars.iv.next1514.prol, %for.body283.us.prol ]
  %add291.us.prol.lcssa = phi double [ %add291.us.prol, %for.body283.us.prol ]
  br label %for.body283.lr.ph.us.split

for.body283.lr.ph.us.split:                       ; preds = %for.body283.lr.ph.us.split.loopexit, %for.body283.lr.ph.us
  %add291.us.lcssa.unr = phi double [ undef, %for.body283.lr.ph.us ], [ %add291.us.prol.lcssa, %for.body283.lr.ph.us.split.loopexit ]
  %indvars.iv1513.unr = phi i64 [ 0, %for.body283.lr.ph.us ], [ %indvars.iv.next1514.prol.lcssa, %for.body283.lr.ph.us.split.loopexit ]
  %sum273.01371.us.unr = phi double [ 0.000000e+00, %for.body283.lr.ph.us ], [ %add291.us.prol.lcssa, %for.body283.lr.ph.us.split.loopexit ]
  br i1 %289, label %for.cond279.for.end294_crit_edge.us, label %for.body283.lr.ph.us.split.split

for.body283.lr.ph.us.split.split:                 ; preds = %for.body283.lr.ph.us.split
  br label %for.body283.us

for.cond279.for.end294_crit_edge.us.unr-lcssa:    ; preds = %for.body283.us
  %add291.us.3.lcssa = phi double [ %add291.us.3, %for.body283.us ]
  br label %for.cond279.for.end294_crit_edge.us

for.cond279.for.end294_crit_edge.us:              ; preds = %for.body283.lr.ph.us.split, %for.cond279.for.end294_crit_edge.us.unr-lcssa
  %add291.us.lcssa = phi double [ %add291.us.lcssa.unr, %for.body283.lr.ph.us.split ], [ %add291.us.3.lcssa, %for.cond279.for.end294_crit_edge.us.unr-lcssa ]
  %arrayidx297.us = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 %indvars.iv1517
  %344 = load double, double* %arrayidx297.us, align 8, !tbaa !34
  %mul298.us = fmul double %344, 0.000000e+00
  %add299.us = fadd double %add291.us.lcssa, %mul298.us
  store double %add299.us, double* %arrayidx297.us, align 8, !tbaa !34
  %indvars.iv.next1518 = add nuw nsw i64 %indvars.iv1517, 1
  %lftr.wideiv1519 = trunc i64 %indvars.iv.next1518 to i32
  %exitcond1520 = icmp eq i32 %lftr.wideiv1519, %223
  br i1 %exitcond1520, label %for.cond308.preheader, label %for.body283.lr.ph.us

for.cond308.preheader:                            ; preds = %for.cond279.for.end294_crit_edge.us
  br i1 %cmp4.i, label %for.body317.lr.ph.us.preheader, label %for.end653.loopexit1903

for.body317.lr.ph.us.preheader:                   ; preds = %for.cond308.preheader
  br label %for.body317.lr.ph.us

for.body317.us:                                   ; preds = %for.body317.us, %for.body317.lr.ph.us.split.split
  %indvars.iv1521 = phi i64 [ %indvars.iv1521.unr, %for.body317.lr.ph.us.split.split ], [ %indvars.iv.next1522.3, %for.body317.us ]
  %sum307.01377.us = phi double [ %sum307.01377.us.unr, %for.body317.lr.ph.us.split.split ], [ %add325.us.3, %for.body317.us ]
  %arrayidx321.us = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1525, i64 %indvars.iv1521
  %345 = load double, double* %arrayidx321.us, align 8, !tbaa !34
  %arrayidx323.us = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv1521
  %346 = load double, double* %arrayidx323.us, align 8, !tbaa !34
  %mul324.us = fmul double %345, %346
  %add325.us = fadd double %sum307.01377.us, %mul324.us
  %indvars.iv.next1522 = add nuw nsw i64 %indvars.iv1521, 1
  %arrayidx321.us.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1525, i64 %indvars.iv.next1522
  %347 = load double, double* %arrayidx321.us.1, align 8, !tbaa !34
  %arrayidx323.us.1 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv.next1522
  %348 = load double, double* %arrayidx323.us.1, align 8, !tbaa !34
  %mul324.us.1 = fmul double %347, %348
  %add325.us.1 = fadd double %add325.us, %mul324.us.1
  %indvars.iv.next1522.1 = add nsw i64 %indvars.iv1521, 2
  %arrayidx321.us.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1525, i64 %indvars.iv.next1522.1
  %349 = load double, double* %arrayidx321.us.2, align 8, !tbaa !34
  %arrayidx323.us.2 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv.next1522.1
  %350 = load double, double* %arrayidx323.us.2, align 8, !tbaa !34
  %mul324.us.2 = fmul double %349, %350
  %add325.us.2 = fadd double %add325.us.1, %mul324.us.2
  %indvars.iv.next1522.2 = add nsw i64 %indvars.iv1521, 3
  %arrayidx321.us.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1525, i64 %indvars.iv.next1522.2
  %351 = load double, double* %arrayidx321.us.3, align 8, !tbaa !34
  %arrayidx323.us.3 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv.next1522.2
  %352 = load double, double* %arrayidx323.us.3, align 8, !tbaa !34
  %mul324.us.3 = fmul double %351, %352
  %add325.us.3 = fadd double %add325.us.2, %mul324.us.3
  %indvars.iv.next1522.3 = add nsw i64 %indvars.iv1521, 4
  %lftr.wideiv1523.3 = trunc i64 %indvars.iv.next1522.3 to i32
  %exitcond1524.3 = icmp eq i32 %lftr.wideiv1523.3, %223
  br i1 %exitcond1524.3, label %for.cond313.for.end328_crit_edge.us.unr-lcssa, label %for.body317.us

for.body317.lr.ph.us:                             ; preds = %for.body317.lr.ph.us.preheader, %for.cond313.for.end328_crit_edge.us
  %indvars.iv1525 = phi i64 [ %indvars.iv.next1526, %for.cond313.for.end328_crit_edge.us ], [ 0, %for.body317.lr.ph.us.preheader ]
  br i1 true, label %for.body317.us.prol.preheader, label %for.body317.lr.ph.us.split

for.body317.us.prol.preheader:                    ; preds = %for.body317.lr.ph.us
  br label %for.body317.us.prol

for.body317.us.prol:                              ; preds = %for.body317.us.prol, %for.body317.us.prol.preheader
  %indvars.iv1521.prol = phi i64 [ %indvars.iv.next1522.prol, %for.body317.us.prol ], [ 0, %for.body317.us.prol.preheader ]
  %sum307.01377.us.prol = phi double [ %add325.us.prol, %for.body317.us.prol ], [ 0.000000e+00, %for.body317.us.prol.preheader ]
  %prol.iter1931 = phi i32 [ %prol.iter1931.sub, %for.body317.us.prol ], [ 1, %for.body317.us.prol.preheader ]
  %arrayidx321.us.prol = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1525, i64 %indvars.iv1521.prol
  %353 = load double, double* %arrayidx321.us.prol, align 8, !tbaa !34
  %arrayidx323.us.prol = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv1521.prol
  %354 = load double, double* %arrayidx323.us.prol, align 8, !tbaa !34
  %mul324.us.prol = fmul double %353, %354
  %add325.us.prol = fadd double %sum307.01377.us.prol, %mul324.us.prol
  %indvars.iv.next1522.prol = add nuw nsw i64 %indvars.iv1521.prol, 1
  %prol.iter1931.sub = add i32 %prol.iter1931, -1
  %prol.iter1931.cmp = icmp eq i32 %prol.iter1931.sub, 0
  br i1 %prol.iter1931.cmp, label %for.body317.lr.ph.us.split.loopexit, label %for.body317.us.prol, !llvm.loop !150

for.body317.lr.ph.us.split.loopexit:              ; preds = %for.body317.us.prol
  %indvars.iv.next1522.prol.lcssa = phi i64 [ %indvars.iv.next1522.prol, %for.body317.us.prol ]
  %add325.us.prol.lcssa = phi double [ %add325.us.prol, %for.body317.us.prol ]
  br label %for.body317.lr.ph.us.split

for.body317.lr.ph.us.split:                       ; preds = %for.body317.lr.ph.us.split.loopexit, %for.body317.lr.ph.us
  %add325.us.lcssa.unr = phi double [ undef, %for.body317.lr.ph.us ], [ %add325.us.prol.lcssa, %for.body317.lr.ph.us.split.loopexit ]
  %indvars.iv1521.unr = phi i64 [ 0, %for.body317.lr.ph.us ], [ %indvars.iv.next1522.prol.lcssa, %for.body317.lr.ph.us.split.loopexit ]
  %sum307.01377.us.unr = phi double [ 0.000000e+00, %for.body317.lr.ph.us ], [ %add325.us.prol.lcssa, %for.body317.lr.ph.us.split.loopexit ]
  br i1 %290, label %for.cond313.for.end328_crit_edge.us, label %for.body317.lr.ph.us.split.split

for.body317.lr.ph.us.split.split:                 ; preds = %for.body317.lr.ph.us.split
  br label %for.body317.us

for.cond313.for.end328_crit_edge.us.unr-lcssa:    ; preds = %for.body317.us
  %add325.us.3.lcssa = phi double [ %add325.us.3, %for.body317.us ]
  br label %for.cond313.for.end328_crit_edge.us

for.cond313.for.end328_crit_edge.us:              ; preds = %for.body317.lr.ph.us.split, %for.cond313.for.end328_crit_edge.us.unr-lcssa
  %add325.us.lcssa = phi double [ %add325.us.lcssa.unr, %for.body317.lr.ph.us.split ], [ %add325.us.3.lcssa, %for.cond313.for.end328_crit_edge.us.unr-lcssa ]
  %arrayidx331.us = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 %indvars.iv1525
  %355 = load double, double* %arrayidx331.us, align 8, !tbaa !34
  %mul332.us = fmul double %355, 0.000000e+00
  %add333.us = fadd double %add325.us.lcssa, %mul332.us
  store double %add333.us, double* %arrayidx331.us, align 8, !tbaa !34
  %indvars.iv.next1526 = add nuw nsw i64 %indvars.iv1525, 1
  %lftr.wideiv1527 = trunc i64 %indvars.iv.next1526 to i32
  %exitcond1528 = icmp eq i32 %lftr.wideiv1527, %223
  br i1 %exitcond1528, label %for.end338, label %for.body317.lr.ph.us

for.end338:                                       ; preds = %for.cond313.for.end328_crit_edge.us
  br i1 %cmp4.i, label %for.body.i1191.preheader, label %for.end653.loopexit1903

for.body.i1191.preheader:                         ; preds = %for.end338
  br i1 true, label %for.body.i1191.prol.preheader, label %for.body.i1191.preheader.split

for.body.i1191.prol.preheader:                    ; preds = %for.body.i1191.preheader
  br label %for.body.i1191.prol

for.body.i1191.prol:                              ; preds = %for.body.i1191.prol, %for.body.i1191.prol.preheader
  %indvars.iv.i1182.prol = phi i64 [ %indvars.iv.next.i1188.prol, %for.body.i1191.prol ], [ 0, %for.body.i1191.prol.preheader ]
  %sum.011.i1183.prol = phi double [ %add.i1187.prol, %for.body.i1191.prol ], [ 0.000000e+00, %for.body.i1191.prol.preheader ]
  %prol.iter1934 = phi i32 [ %prol.iter1934.sub, %for.body.i1191.prol ], [ 1, %for.body.i1191.prol.preheader ]
  %arrayidx.i1184.prol = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 %indvars.iv.i1182.prol
  %356 = load double, double* %arrayidx.i1184.prol, align 8, !tbaa !34
  %arrayidx2.i1185.prol = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %indvars.iv.i1182.prol
  %357 = load double, double* %arrayidx2.i1185.prol, align 8, !tbaa !34
  %mul.i1186.prol = fmul double %356, %357
  %add.i1187.prol = fadd double %sum.011.i1183.prol, %mul.i1186.prol
  %indvars.iv.next.i1188.prol = add nuw nsw i64 %indvars.iv.i1182.prol, 1
  %prol.iter1934.sub = add i32 %prol.iter1934, -1
  %prol.iter1934.cmp = icmp eq i32 %prol.iter1934.sub, 0
  br i1 %prol.iter1934.cmp, label %for.body.i1191.preheader.split.loopexit, label %for.body.i1191.prol, !llvm.loop !151

for.body.i1191.preheader.split.loopexit:          ; preds = %for.body.i1191.prol
  %indvars.iv.next.i1188.prol.lcssa = phi i64 [ %indvars.iv.next.i1188.prol, %for.body.i1191.prol ]
  %add.i1187.prol.lcssa = phi double [ %add.i1187.prol, %for.body.i1191.prol ]
  br label %for.body.i1191.preheader.split

for.body.i1191.preheader.split:                   ; preds = %for.body.i1191.preheader.split.loopexit, %for.body.i1191.preheader
  %add.i1187.lcssa.unr = phi double [ undef, %for.body.i1191.preheader ], [ %add.i1187.prol.lcssa, %for.body.i1191.preheader.split.loopexit ]
  %indvars.iv.i1182.unr = phi i64 [ 0, %for.body.i1191.preheader ], [ %indvars.iv.next.i1188.prol.lcssa, %for.body.i1191.preheader.split.loopexit ]
  %sum.011.i1183.unr = phi double [ 0.000000e+00, %for.body.i1191.preheader ], [ %add.i1187.prol.lcssa, %for.body.i1191.preheader.split.loopexit ]
  br i1 %291, label %__dot.exit1193, label %for.body.i1191.preheader.split.split

for.body.i1191.preheader.split.split:             ; preds = %for.body.i1191.preheader.split
  br label %for.body.i1191

for.body.i1191:                                   ; preds = %for.body.i1191, %for.body.i1191.preheader.split.split
  %indvars.iv.i1182 = phi i64 [ %indvars.iv.i1182.unr, %for.body.i1191.preheader.split.split ], [ %indvars.iv.next.i1188.3, %for.body.i1191 ]
  %sum.011.i1183 = phi double [ %sum.011.i1183.unr, %for.body.i1191.preheader.split.split ], [ %add.i1187.3, %for.body.i1191 ]
  %arrayidx.i1184 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 %indvars.iv.i1182
  %358 = load double, double* %arrayidx.i1184, align 8, !tbaa !34
  %arrayidx2.i1185 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %indvars.iv.i1182
  %359 = load double, double* %arrayidx2.i1185, align 8, !tbaa !34
  %mul.i1186 = fmul double %358, %359
  %add.i1187 = fadd double %sum.011.i1183, %mul.i1186
  %indvars.iv.next.i1188 = add nuw nsw i64 %indvars.iv.i1182, 1
  %arrayidx.i1184.1 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 %indvars.iv.next.i1188
  %360 = load double, double* %arrayidx.i1184.1, align 8, !tbaa !34
  %arrayidx2.i1185.1 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %indvars.iv.next.i1188
  %361 = load double, double* %arrayidx2.i1185.1, align 8, !tbaa !34
  %mul.i1186.1 = fmul double %360, %361
  %add.i1187.1 = fadd double %add.i1187, %mul.i1186.1
  %indvars.iv.next.i1188.1 = add nsw i64 %indvars.iv.i1182, 2
  %arrayidx.i1184.2 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 %indvars.iv.next.i1188.1
  %362 = load double, double* %arrayidx.i1184.2, align 8, !tbaa !34
  %arrayidx2.i1185.2 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %indvars.iv.next.i1188.1
  %363 = load double, double* %arrayidx2.i1185.2, align 8, !tbaa !34
  %mul.i1186.2 = fmul double %362, %363
  %add.i1187.2 = fadd double %add.i1187.1, %mul.i1186.2
  %indvars.iv.next.i1188.2 = add nsw i64 %indvars.iv.i1182, 3
  %arrayidx.i1184.3 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 %indvars.iv.next.i1188.2
  %364 = load double, double* %arrayidx.i1184.3, align 8, !tbaa !34
  %arrayidx2.i1185.3 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %indvars.iv.next.i1188.2
  %365 = load double, double* %arrayidx2.i1185.3, align 8, !tbaa !34
  %mul.i1186.3 = fmul double %364, %365
  %add.i1187.3 = fadd double %add.i1187.2, %mul.i1186.3
  %indvars.iv.next.i1188.3 = add nsw i64 %indvars.iv.i1182, 4
  %lftr.wideiv1529.3 = trunc i64 %indvars.iv.next.i1188.3 to i32
  %exitcond1530.3 = icmp eq i32 %lftr.wideiv1529.3, %223
  br i1 %exitcond1530.3, label %__dot.exit1193.unr-lcssa, label %for.body.i1191

__dot.exit1193.unr-lcssa:                         ; preds = %for.body.i1191
  %add.i1187.3.lcssa = phi double [ %add.i1187.3, %for.body.i1191 ]
  br label %__dot.exit1193

__dot.exit1193:                                   ; preds = %for.body.i1191.preheader.split, %__dot.exit1193.unr-lcssa
  %add.i1187.lcssa = phi double [ %add.i1187.lcssa.unr, %for.body.i1191.preheader.split ], [ %add.i1187.3.lcssa, %__dot.exit1193.unr-lcssa ]
  %cmp344 = fcmp oeq double %add.i1187.lcssa, 0.000000e+00
  br i1 %cmp344, label %for.end640.loopexit, label %if.end346

if.end346:                                        ; preds = %__dot.exit1193
  %div = fdiv double %delta.11400, %add.i1187.lcssa
  %call350 = call i32 @__isinf(double %div) #11
  %tobool351 = icmp eq i32 %call350, 0
  br i1 %tobool351, label %for.body.i1179.preheader, label %for.end640.loopexit

for.body.i1179.preheader:                         ; preds = %if.end346
  %sub360 = fsub double -0.000000e+00, %div
  br i1 %min.iters.check1851, label %for.body.i1179.preheader1902, label %min.iters.checked1852

min.iters.checked1852:                            ; preds = %for.body.i1179.preheader
  br i1 %cmp.zero1855, label %for.body.i1179.preheader1902, label %vector.ph1856

vector.ph1856:                                    ; preds = %min.iters.checked1852
  %broadcast.splatinsert1869 = insertelement <2 x double> undef, double %sub360, i32 0
  %broadcast.splat1870 = shufflevector <2 x double> %broadcast.splatinsert1869, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %lcmp.mod1936, label %vector.body1848.prol, label %vector.ph1856.split

vector.body1848.prol:                             ; preds = %vector.ph1856
  %wide.load1865.prol = load <2 x double>, <2 x double>* %99, align 16, !tbaa !34
  %wide.load1866.prol = load <2 x double>, <2 x double>* %101, align 16, !tbaa !34
  %wide.load1867.prol = load <2 x double>, <2 x double>* %102, align 16, !tbaa !34
  %wide.load1868.prol = load <2 x double>, <2 x double>* %104, align 16, !tbaa !34
  %366 = fmul <2 x double> %wide.load1867.prol, %broadcast.splat1870
  %367 = fmul <2 x double> %wide.load1868.prol, %broadcast.splat1870
  %368 = fadd <2 x double> %wide.load1865.prol, %366
  %369 = fadd <2 x double> %wide.load1866.prol, %367
  store <2 x double> %368, <2 x double>* %105, align 16, !tbaa !34
  store <2 x double> %369, <2 x double>* %107, align 16, !tbaa !34
  br label %vector.ph1856.split

vector.ph1856.split:                              ; preds = %vector.body1848.prol, %vector.ph1856
  %index1857.unr = phi i64 [ 0, %vector.ph1856 ], [ 4, %vector.body1848.prol ]
  br i1 %321, label %for.body.i1179.preheader1902.loopexit, label %vector.ph1856.split.split

vector.ph1856.split.split:                        ; preds = %vector.ph1856.split
  br label %vector.body1848

vector.body1848:                                  ; preds = %vector.body1848, %vector.ph1856.split.split
  %index1857 = phi i64 [ %index1857.unr, %vector.ph1856.split.split ], [ %index.next1858.1, %vector.body1848 ]
  %370 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 %index1857
  %371 = bitcast double* %370 to <2 x double>*
  %wide.load1865 = load <2 x double>, <2 x double>* %371, align 16, !tbaa !34
  %372 = getelementptr double, double* %370, i64 2
  %373 = bitcast double* %372 to <2 x double>*
  %wide.load1866 = load <2 x double>, <2 x double>* %373, align 16, !tbaa !34
  %374 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 %index1857
  %375 = bitcast double* %374 to <2 x double>*
  %wide.load1867 = load <2 x double>, <2 x double>* %375, align 16, !tbaa !34
  %376 = getelementptr double, double* %374, i64 2
  %377 = bitcast double* %376 to <2 x double>*
  %wide.load1868 = load <2 x double>, <2 x double>* %377, align 16, !tbaa !34
  %378 = fmul <2 x double> %wide.load1867, %broadcast.splat1870
  %379 = fmul <2 x double> %wide.load1868, %broadcast.splat1870
  %380 = fadd <2 x double> %wide.load1865, %378
  %381 = fadd <2 x double> %wide.load1866, %379
  %382 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %index1857
  %383 = bitcast double* %382 to <2 x double>*
  store <2 x double> %380, <2 x double>* %383, align 16, !tbaa !34
  %384 = getelementptr double, double* %382, i64 2
  %385 = bitcast double* %384 to <2 x double>*
  store <2 x double> %381, <2 x double>* %385, align 16, !tbaa !34
  %index.next1858 = add i64 %index1857, 4
  %386 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 %index.next1858
  %387 = bitcast double* %386 to <2 x double>*
  %wide.load1865.1 = load <2 x double>, <2 x double>* %387, align 16, !tbaa !34
  %388 = getelementptr double, double* %386, i64 2
  %389 = bitcast double* %388 to <2 x double>*
  %wide.load1866.1 = load <2 x double>, <2 x double>* %389, align 16, !tbaa !34
  %390 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 %index.next1858
  %391 = bitcast double* %390 to <2 x double>*
  %wide.load1867.1 = load <2 x double>, <2 x double>* %391, align 16, !tbaa !34
  %392 = getelementptr double, double* %390, i64 2
  %393 = bitcast double* %392 to <2 x double>*
  %wide.load1868.1 = load <2 x double>, <2 x double>* %393, align 16, !tbaa !34
  %394 = fmul <2 x double> %wide.load1867.1, %broadcast.splat1870
  %395 = fmul <2 x double> %wide.load1868.1, %broadcast.splat1870
  %396 = fadd <2 x double> %wide.load1865.1, %394
  %397 = fadd <2 x double> %wide.load1866.1, %395
  %398 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %index.next1858
  %399 = bitcast double* %398 to <2 x double>*
  store <2 x double> %396, <2 x double>* %399, align 16, !tbaa !34
  %400 = getelementptr double, double* %398, i64 2
  %401 = bitcast double* %400 to <2 x double>*
  store <2 x double> %397, <2 x double>* %401, align 16, !tbaa !34
  %index.next1858.1 = add i64 %index1857, 8
  %402 = icmp eq i64 %index.next1858.1, %n.vec1854
  br i1 %402, label %for.body.i1179.preheader1902.loopexit.unr-lcssa, label %vector.body1848, !llvm.loop !152

for.body.i1179.preheader1902.loopexit.unr-lcssa:  ; preds = %vector.body1848
  br label %for.body.i1179.preheader1902.loopexit

for.body.i1179.preheader1902.loopexit:            ; preds = %vector.ph1856.split, %for.body.i1179.preheader1902.loopexit.unr-lcssa
  br label %for.body.i1179.preheader1902

for.body.i1179.preheader1902:                     ; preds = %for.body.i1179.preheader1902.loopexit, %min.iters.checked1852, %for.body.i1179.preheader
  %indvars.iv.i1170.ph = phi i64 [ 0, %min.iters.checked1852 ], [ 0, %for.body.i1179.preheader ], [ %n.vec1854, %for.body.i1179.preheader1902.loopexit ]
  br label %for.body.i1179

for.body.i1179:                                   ; preds = %for.body.i1179.preheader1902, %for.body.i1179
  %indvars.iv.i1170 = phi i64 [ %indvars.iv.next.i1176, %for.body.i1179 ], [ %indvars.iv.i1170.ph, %for.body.i1179.preheader1902 ]
  %arrayidx.i1171 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 %indvars.iv.i1170
  %403 = load double, double* %arrayidx.i1171, align 8, !tbaa !34
  %arrayidx2.i1172 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 %indvars.iv.i1170
  %404 = load double, double* %arrayidx2.i1172, align 8, !tbaa !34
  %mul3.i1173 = fmul double %404, %sub360
  %add.i1174 = fadd double %403, %mul3.i1173
  %arrayidx5.i1175 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.i1170
  store double %add.i1174, double* %arrayidx5.i1175, align 8, !tbaa !34
  %indvars.iv.next.i1176 = add nuw nsw i64 %indvars.iv.i1170, 1
  %lftr.wideiv1531 = trunc i64 %indvars.iv.next.i1176 to i32
  %exitcond1532 = icmp eq i32 %lftr.wideiv1531, %223
  br i1 %exitcond1532, label %for.body378.lr.ph.us.preheader, label %for.body.i1179, !llvm.loop !153

for.body378.lr.ph.us.preheader:                   ; preds = %for.body.i1179
  br label %for.body378.lr.ph.us

for.body378.us:                                   ; preds = %for.body378.us, %for.body378.lr.ph.us.split.split
  %indvars.iv1533 = phi i64 [ %indvars.iv1533.unr, %for.body378.lr.ph.us.split.split ], [ %indvars.iv.next1534.3, %for.body378.us ]
  %sum366.01383.us = phi double [ %sum366.01383.us.unr, %for.body378.lr.ph.us.split.split ], [ %add386.us.3, %for.body378.us ]
  %arrayidx382.us = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1537, i64 %indvars.iv1533
  %405 = load double, double* %arrayidx382.us, align 8, !tbaa !34
  %arrayidx384.us = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv1533
  %406 = load double, double* %arrayidx384.us, align 8, !tbaa !34
  %mul385.us = fmul double %405, %406
  %add386.us = fadd double %sum366.01383.us, %mul385.us
  %indvars.iv.next1534 = add nuw nsw i64 %indvars.iv1533, 1
  %arrayidx382.us.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1537, i64 %indvars.iv.next1534
  %407 = load double, double* %arrayidx382.us.1, align 8, !tbaa !34
  %arrayidx384.us.1 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next1534
  %408 = load double, double* %arrayidx384.us.1, align 8, !tbaa !34
  %mul385.us.1 = fmul double %407, %408
  %add386.us.1 = fadd double %add386.us, %mul385.us.1
  %indvars.iv.next1534.1 = add nsw i64 %indvars.iv1533, 2
  %arrayidx382.us.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1537, i64 %indvars.iv.next1534.1
  %409 = load double, double* %arrayidx382.us.2, align 8, !tbaa !34
  %arrayidx384.us.2 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next1534.1
  %410 = load double, double* %arrayidx384.us.2, align 8, !tbaa !34
  %mul385.us.2 = fmul double %409, %410
  %add386.us.2 = fadd double %add386.us.1, %mul385.us.2
  %indvars.iv.next1534.2 = add nsw i64 %indvars.iv1533, 3
  %arrayidx382.us.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1537, i64 %indvars.iv.next1534.2
  %411 = load double, double* %arrayidx382.us.3, align 8, !tbaa !34
  %arrayidx384.us.3 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next1534.2
  %412 = load double, double* %arrayidx384.us.3, align 8, !tbaa !34
  %mul385.us.3 = fmul double %411, %412
  %add386.us.3 = fadd double %add386.us.2, %mul385.us.3
  %indvars.iv.next1534.3 = add nsw i64 %indvars.iv1533, 4
  %lftr.wideiv1535.3 = trunc i64 %indvars.iv.next1534.3 to i32
  %exitcond1536.3 = icmp eq i32 %lftr.wideiv1535.3, %223
  br i1 %exitcond1536.3, label %for.cond373.for.end389_crit_edge.us.unr-lcssa, label %for.body378.us

for.body378.lr.ph.us:                             ; preds = %for.body378.lr.ph.us.preheader, %for.cond373.for.end389_crit_edge.us
  %indvars.iv1537 = phi i64 [ %indvars.iv.next1538, %for.cond373.for.end389_crit_edge.us ], [ 0, %for.body378.lr.ph.us.preheader ]
  br i1 true, label %for.body378.us.prol.preheader, label %for.body378.lr.ph.us.split

for.body378.us.prol.preheader:                    ; preds = %for.body378.lr.ph.us
  br label %for.body378.us.prol

for.body378.us.prol:                              ; preds = %for.body378.us.prol, %for.body378.us.prol.preheader
  %indvars.iv1533.prol = phi i64 [ %indvars.iv.next1534.prol, %for.body378.us.prol ], [ 0, %for.body378.us.prol.preheader ]
  %sum366.01383.us.prol = phi double [ %add386.us.prol, %for.body378.us.prol ], [ 0.000000e+00, %for.body378.us.prol.preheader ]
  %prol.iter1939 = phi i32 [ %prol.iter1939.sub, %for.body378.us.prol ], [ 1, %for.body378.us.prol.preheader ]
  %arrayidx382.us.prol = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1537, i64 %indvars.iv1533.prol
  %413 = load double, double* %arrayidx382.us.prol, align 8, !tbaa !34
  %arrayidx384.us.prol = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv1533.prol
  %414 = load double, double* %arrayidx384.us.prol, align 8, !tbaa !34
  %mul385.us.prol = fmul double %413, %414
  %add386.us.prol = fadd double %sum366.01383.us.prol, %mul385.us.prol
  %indvars.iv.next1534.prol = add nuw nsw i64 %indvars.iv1533.prol, 1
  %prol.iter1939.sub = add i32 %prol.iter1939, -1
  %prol.iter1939.cmp = icmp eq i32 %prol.iter1939.sub, 0
  br i1 %prol.iter1939.cmp, label %for.body378.lr.ph.us.split.loopexit, label %for.body378.us.prol, !llvm.loop !154

for.body378.lr.ph.us.split.loopexit:              ; preds = %for.body378.us.prol
  %indvars.iv.next1534.prol.lcssa = phi i64 [ %indvars.iv.next1534.prol, %for.body378.us.prol ]
  %add386.us.prol.lcssa = phi double [ %add386.us.prol, %for.body378.us.prol ]
  br label %for.body378.lr.ph.us.split

for.body378.lr.ph.us.split:                       ; preds = %for.body378.lr.ph.us.split.loopexit, %for.body378.lr.ph.us
  %add386.us.lcssa.unr = phi double [ undef, %for.body378.lr.ph.us ], [ %add386.us.prol.lcssa, %for.body378.lr.ph.us.split.loopexit ]
  %indvars.iv1533.unr = phi i64 [ 0, %for.body378.lr.ph.us ], [ %indvars.iv.next1534.prol.lcssa, %for.body378.lr.ph.us.split.loopexit ]
  %sum366.01383.us.unr = phi double [ 0.000000e+00, %for.body378.lr.ph.us ], [ %add386.us.prol.lcssa, %for.body378.lr.ph.us.split.loopexit ]
  br i1 %292, label %for.cond373.for.end389_crit_edge.us, label %for.body378.lr.ph.us.split.split

for.body378.lr.ph.us.split.split:                 ; preds = %for.body378.lr.ph.us.split
  br label %for.body378.us

for.cond373.for.end389_crit_edge.us.unr-lcssa:    ; preds = %for.body378.us
  %add386.us.3.lcssa = phi double [ %add386.us.3, %for.body378.us ]
  br label %for.cond373.for.end389_crit_edge.us

for.cond373.for.end389_crit_edge.us:              ; preds = %for.body378.lr.ph.us.split, %for.cond373.for.end389_crit_edge.us.unr-lcssa
  %add386.us.lcssa = phi double [ %add386.us.lcssa.unr, %for.body378.lr.ph.us.split ], [ %add386.us.3.lcssa, %for.cond373.for.end389_crit_edge.us.unr-lcssa ]
  %arrayidx392.us = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv1537
  %415 = load double, double* %arrayidx392.us, align 8, !tbaa !34
  %mul393.us = fmul double %415, 0.000000e+00
  %add394.us = fadd double %add386.us.lcssa, %mul393.us
  store double %add394.us, double* %arrayidx392.us, align 8, !tbaa !34
  %indvars.iv.next1538 = add nuw nsw i64 %indvars.iv1537, 1
  %lftr.wideiv1539 = trunc i64 %indvars.iv.next1538 to i32
  %exitcond1540 = icmp eq i32 %lftr.wideiv1539, %223
  br i1 %exitcond1540, label %for.body.i1167.preheader, label %for.body378.lr.ph.us

for.body.i1167.preheader:                         ; preds = %for.cond373.for.end389_crit_edge.us
  br i1 %min.iters.check1826, label %for.body.i1167.preheader1901, label %min.iters.checked1827

min.iters.checked1827:                            ; preds = %for.body.i1167.preheader
  br i1 %cmp.zero1830, label %for.body.i1167.preheader1901, label %vector.ph1831

vector.ph1831:                                    ; preds = %min.iters.checked1827
  %broadcast.splatinsert1844 = insertelement <2 x double> undef, double %sub360, i32 0
  %broadcast.splat1845 = shufflevector <2 x double> %broadcast.splatinsert1844, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %lcmp.mod1941, label %vector.body1823.prol, label %vector.ph1831.split

vector.body1823.prol:                             ; preds = %vector.ph1831
  %wide.load1840.prol = load <2 x double>, <2 x double>* %90, align 16, !tbaa !34
  %wide.load1841.prol = load <2 x double>, <2 x double>* %92, align 16, !tbaa !34
  %wide.load1842.prol = load <2 x double>, <2 x double>* %93, align 16, !tbaa !34
  %wide.load1843.prol = load <2 x double>, <2 x double>* %95, align 16, !tbaa !34
  %416 = fmul <2 x double> %wide.load1842.prol, %broadcast.splat1845
  %417 = fmul <2 x double> %wide.load1843.prol, %broadcast.splat1845
  %418 = fadd <2 x double> %wide.load1840.prol, %416
  %419 = fadd <2 x double> %wide.load1841.prol, %417
  store <2 x double> %418, <2 x double>* %96, align 16, !tbaa !34
  store <2 x double> %419, <2 x double>* %98, align 16, !tbaa !34
  br label %vector.ph1831.split

vector.ph1831.split:                              ; preds = %vector.body1823.prol, %vector.ph1831
  %index1832.unr = phi i64 [ 0, %vector.ph1831 ], [ 4, %vector.body1823.prol ]
  br i1 %319, label %for.body.i1167.preheader1901.loopexit, label %vector.ph1831.split.split

vector.ph1831.split.split:                        ; preds = %vector.ph1831.split
  br label %vector.body1823

vector.body1823:                                  ; preds = %vector.body1823, %vector.ph1831.split.split
  %index1832 = phi i64 [ %index1832.unr, %vector.ph1831.split.split ], [ %index.next1833.1, %vector.body1823 ]
  %420 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %index1832
  %421 = bitcast double* %420 to <2 x double>*
  %wide.load1840 = load <2 x double>, <2 x double>* %421, align 16, !tbaa !34
  %422 = getelementptr double, double* %420, i64 2
  %423 = bitcast double* %422 to <2 x double>*
  %wide.load1841 = load <2 x double>, <2 x double>* %423, align 16, !tbaa !34
  %424 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %index1832
  %425 = bitcast double* %424 to <2 x double>*
  %wide.load1842 = load <2 x double>, <2 x double>* %425, align 16, !tbaa !34
  %426 = getelementptr double, double* %424, i64 2
  %427 = bitcast double* %426 to <2 x double>*
  %wide.load1843 = load <2 x double>, <2 x double>* %427, align 16, !tbaa !34
  %428 = fmul <2 x double> %wide.load1842, %broadcast.splat1845
  %429 = fmul <2 x double> %wide.load1843, %broadcast.splat1845
  %430 = fadd <2 x double> %wide.load1840, %428
  %431 = fadd <2 x double> %wide.load1841, %429
  %432 = getelementptr inbounds [17 x double], [17 x double]* %temp3, i64 0, i64 %index1832
  %433 = bitcast double* %432 to <2 x double>*
  store <2 x double> %430, <2 x double>* %433, align 16, !tbaa !34
  %434 = getelementptr double, double* %432, i64 2
  %435 = bitcast double* %434 to <2 x double>*
  store <2 x double> %431, <2 x double>* %435, align 16, !tbaa !34
  %index.next1833 = add i64 %index1832, 4
  %436 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %index.next1833
  %437 = bitcast double* %436 to <2 x double>*
  %wide.load1840.1 = load <2 x double>, <2 x double>* %437, align 16, !tbaa !34
  %438 = getelementptr double, double* %436, i64 2
  %439 = bitcast double* %438 to <2 x double>*
  %wide.load1841.1 = load <2 x double>, <2 x double>* %439, align 16, !tbaa !34
  %440 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %index.next1833
  %441 = bitcast double* %440 to <2 x double>*
  %wide.load1842.1 = load <2 x double>, <2 x double>* %441, align 16, !tbaa !34
  %442 = getelementptr double, double* %440, i64 2
  %443 = bitcast double* %442 to <2 x double>*
  %wide.load1843.1 = load <2 x double>, <2 x double>* %443, align 16, !tbaa !34
  %444 = fmul <2 x double> %wide.load1842.1, %broadcast.splat1845
  %445 = fmul <2 x double> %wide.load1843.1, %broadcast.splat1845
  %446 = fadd <2 x double> %wide.load1840.1, %444
  %447 = fadd <2 x double> %wide.load1841.1, %445
  %448 = getelementptr inbounds [17 x double], [17 x double]* %temp3, i64 0, i64 %index.next1833
  %449 = bitcast double* %448 to <2 x double>*
  store <2 x double> %446, <2 x double>* %449, align 16, !tbaa !34
  %450 = getelementptr double, double* %448, i64 2
  %451 = bitcast double* %450 to <2 x double>*
  store <2 x double> %447, <2 x double>* %451, align 16, !tbaa !34
  %index.next1833.1 = add i64 %index1832, 8
  %452 = icmp eq i64 %index.next1833.1, %n.vec1829
  br i1 %452, label %for.body.i1167.preheader1901.loopexit.unr-lcssa, label %vector.body1823, !llvm.loop !155

for.body.i1167.preheader1901.loopexit.unr-lcssa:  ; preds = %vector.body1823
  br label %for.body.i1167.preheader1901.loopexit

for.body.i1167.preheader1901.loopexit:            ; preds = %vector.ph1831.split, %for.body.i1167.preheader1901.loopexit.unr-lcssa
  br label %for.body.i1167.preheader1901

for.body.i1167.preheader1901:                     ; preds = %for.body.i1167.preheader1901.loopexit, %min.iters.checked1827, %for.body.i1167.preheader
  %indvars.iv.i1158.ph = phi i64 [ 0, %min.iters.checked1827 ], [ 0, %for.body.i1167.preheader ], [ %n.vec1829, %for.body.i1167.preheader1901.loopexit ]
  br label %for.body.i1167

for.body.i1167:                                   ; preds = %for.body.i1167.preheader1901, %for.body.i1167
  %indvars.iv.i1158 = phi i64 [ %indvars.iv.next.i1164, %for.body.i1167 ], [ %indvars.iv.i1158.ph, %for.body.i1167.preheader1901 ]
  %arrayidx.i1159 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.i1158
  %453 = load double, double* %arrayidx.i1159, align 8, !tbaa !34
  %arrayidx2.i1160 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %indvars.iv.i1158
  %454 = load double, double* %arrayidx2.i1160, align 8, !tbaa !34
  %mul3.i1161 = fmul double %454, %sub360
  %add.i1162 = fadd double %453, %mul3.i1161
  %arrayidx5.i1163 = getelementptr inbounds [17 x double], [17 x double]* %temp3, i64 0, i64 %indvars.iv.i1158
  store double %add.i1162, double* %arrayidx5.i1163, align 8, !tbaa !34
  %indvars.iv.next.i1164 = add nuw nsw i64 %indvars.iv.i1158, 1
  %lftr.wideiv1541 = trunc i64 %indvars.iv.next.i1164 to i32
  %exitcond1542 = icmp eq i32 %lftr.wideiv1541, %223
  br i1 %exitcond1542, label %for.body.i1154.preheader, label %for.body.i1167, !llvm.loop !156

for.body.i1154.preheader:                         ; preds = %for.body.i1167
  br i1 true, label %for.body.i1154.prol.preheader, label %for.body.i1154.preheader.split

for.body.i1154.prol.preheader:                    ; preds = %for.body.i1154.preheader
  br label %for.body.i1154.prol

for.body.i1154.prol:                              ; preds = %for.body.i1154.prol, %for.body.i1154.prol.preheader
  %indvars.iv.i1145.prol = phi i64 [ %indvars.iv.next.i1151.prol, %for.body.i1154.prol ], [ 0, %for.body.i1154.prol.preheader ]
  %sum.011.i1146.prol = phi double [ %add.i1150.prol, %for.body.i1154.prol ], [ 0.000000e+00, %for.body.i1154.prol.preheader ]
  %prol.iter1944 = phi i32 [ %prol.iter1944.sub, %for.body.i1154.prol ], [ 1, %for.body.i1154.prol.preheader ]
  %arrayidx.i1147.prol = getelementptr inbounds [17 x double], [17 x double]* %temp3, i64 0, i64 %indvars.iv.i1145.prol
  %455 = load double, double* %arrayidx.i1147.prol, align 8, !tbaa !34
  %arrayidx2.i1148.prol = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.i1145.prol
  %456 = load double, double* %arrayidx2.i1148.prol, align 8, !tbaa !34
  %mul.i1149.prol = fmul double %455, %456
  %add.i1150.prol = fadd double %sum.011.i1146.prol, %mul.i1149.prol
  %indvars.iv.next.i1151.prol = add nuw nsw i64 %indvars.iv.i1145.prol, 1
  %prol.iter1944.sub = add i32 %prol.iter1944, -1
  %prol.iter1944.cmp = icmp eq i32 %prol.iter1944.sub, 0
  br i1 %prol.iter1944.cmp, label %for.body.i1154.preheader.split.loopexit, label %for.body.i1154.prol, !llvm.loop !157

for.body.i1154.preheader.split.loopexit:          ; preds = %for.body.i1154.prol
  %indvars.iv.next.i1151.prol.lcssa = phi i64 [ %indvars.iv.next.i1151.prol, %for.body.i1154.prol ]
  %add.i1150.prol.lcssa = phi double [ %add.i1150.prol, %for.body.i1154.prol ]
  br label %for.body.i1154.preheader.split

for.body.i1154.preheader.split:                   ; preds = %for.body.i1154.preheader.split.loopexit, %for.body.i1154.preheader
  %add.i1150.lcssa.unr = phi double [ undef, %for.body.i1154.preheader ], [ %add.i1150.prol.lcssa, %for.body.i1154.preheader.split.loopexit ]
  %indvars.iv.i1145.unr = phi i64 [ 0, %for.body.i1154.preheader ], [ %indvars.iv.next.i1151.prol.lcssa, %for.body.i1154.preheader.split.loopexit ]
  %sum.011.i1146.unr = phi double [ 0.000000e+00, %for.body.i1154.preheader ], [ %add.i1150.prol.lcssa, %for.body.i1154.preheader.split.loopexit ]
  br i1 %293, label %for.body.i1141.preheader, label %for.body.i1154.preheader.split.split

for.body.i1154.preheader.split.split:             ; preds = %for.body.i1154.preheader.split
  br label %for.body.i1154

for.body.i1154:                                   ; preds = %for.body.i1154, %for.body.i1154.preheader.split.split
  %indvars.iv.i1145 = phi i64 [ %indvars.iv.i1145.unr, %for.body.i1154.preheader.split.split ], [ %indvars.iv.next.i1151.3, %for.body.i1154 ]
  %sum.011.i1146 = phi double [ %sum.011.i1146.unr, %for.body.i1154.preheader.split.split ], [ %add.i1150.3, %for.body.i1154 ]
  %arrayidx.i1147 = getelementptr inbounds [17 x double], [17 x double]* %temp3, i64 0, i64 %indvars.iv.i1145
  %457 = load double, double* %arrayidx.i1147, align 8, !tbaa !34
  %arrayidx2.i1148 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.i1145
  %458 = load double, double* %arrayidx2.i1148, align 8, !tbaa !34
  %mul.i1149 = fmul double %457, %458
  %add.i1150 = fadd double %sum.011.i1146, %mul.i1149
  %indvars.iv.next.i1151 = add nuw nsw i64 %indvars.iv.i1145, 1
  %arrayidx.i1147.1 = getelementptr inbounds [17 x double], [17 x double]* %temp3, i64 0, i64 %indvars.iv.next.i1151
  %459 = load double, double* %arrayidx.i1147.1, align 8, !tbaa !34
  %arrayidx2.i1148.1 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.next.i1151
  %460 = load double, double* %arrayidx2.i1148.1, align 8, !tbaa !34
  %mul.i1149.1 = fmul double %459, %460
  %add.i1150.1 = fadd double %add.i1150, %mul.i1149.1
  %indvars.iv.next.i1151.1 = add nsw i64 %indvars.iv.i1145, 2
  %arrayidx.i1147.2 = getelementptr inbounds [17 x double], [17 x double]* %temp3, i64 0, i64 %indvars.iv.next.i1151.1
  %461 = load double, double* %arrayidx.i1147.2, align 8, !tbaa !34
  %arrayidx2.i1148.2 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.next.i1151.1
  %462 = load double, double* %arrayidx2.i1148.2, align 8, !tbaa !34
  %mul.i1149.2 = fmul double %461, %462
  %add.i1150.2 = fadd double %add.i1150.1, %mul.i1149.2
  %indvars.iv.next.i1151.2 = add nsw i64 %indvars.iv.i1145, 3
  %arrayidx.i1147.3 = getelementptr inbounds [17 x double], [17 x double]* %temp3, i64 0, i64 %indvars.iv.next.i1151.2
  %463 = load double, double* %arrayidx.i1147.3, align 8, !tbaa !34
  %arrayidx2.i1148.3 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.next.i1151.2
  %464 = load double, double* %arrayidx2.i1148.3, align 8, !tbaa !34
  %mul.i1149.3 = fmul double %463, %464
  %add.i1150.3 = fadd double %add.i1150.2, %mul.i1149.3
  %indvars.iv.next.i1151.3 = add nsw i64 %indvars.iv.i1145, 4
  %lftr.wideiv1543.3 = trunc i64 %indvars.iv.next.i1151.3 to i32
  %exitcond1544.3 = icmp eq i32 %lftr.wideiv1543.3, %223
  br i1 %exitcond1544.3, label %for.body.i1141.preheader.unr-lcssa, label %for.body.i1154

for.body.i1141.preheader.unr-lcssa:               ; preds = %for.body.i1154
  %add.i1150.3.lcssa = phi double [ %add.i1150.3, %for.body.i1154 ]
  br label %for.body.i1141.preheader

for.body.i1141.preheader:                         ; preds = %for.body.i1154.preheader.split, %for.body.i1141.preheader.unr-lcssa
  %add.i1150.lcssa = phi double [ %add.i1150.lcssa.unr, %for.body.i1154.preheader.split ], [ %add.i1150.3.lcssa, %for.body.i1141.preheader.unr-lcssa ]
  br i1 true, label %for.body.i1141.prol.preheader, label %for.body.i1141.preheader.split

for.body.i1141.prol.preheader:                    ; preds = %for.body.i1141.preheader
  br label %for.body.i1141.prol

for.body.i1141.prol:                              ; preds = %for.body.i1141.prol, %for.body.i1141.prol.preheader
  %indvars.iv.i1132.prol = phi i64 [ %indvars.iv.next.i1138.prol, %for.body.i1141.prol ], [ 0, %for.body.i1141.prol.preheader ]
  %sum.011.i1133.prol = phi double [ %add.i1137.prol, %for.body.i1141.prol ], [ 0.000000e+00, %for.body.i1141.prol.preheader ]
  %prol.iter1947 = phi i32 [ %prol.iter1947.sub, %for.body.i1141.prol ], [ 1, %for.body.i1141.prol.preheader ]
  %arrayidx.i1134.prol = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.i1132.prol
  %465 = load double, double* %arrayidx.i1134.prol, align 8, !tbaa !34
  %arrayidx2.i1135.prol = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.i1132.prol
  %466 = load double, double* %arrayidx2.i1135.prol, align 8, !tbaa !34
  %mul.i1136.prol = fmul double %465, %466
  %add.i1137.prol = fadd double %sum.011.i1133.prol, %mul.i1136.prol
  %indvars.iv.next.i1138.prol = add nuw nsw i64 %indvars.iv.i1132.prol, 1
  %prol.iter1947.sub = add i32 %prol.iter1947, -1
  %prol.iter1947.cmp = icmp eq i32 %prol.iter1947.sub, 0
  br i1 %prol.iter1947.cmp, label %for.body.i1141.preheader.split.loopexit, label %for.body.i1141.prol, !llvm.loop !158

for.body.i1141.preheader.split.loopexit:          ; preds = %for.body.i1141.prol
  %indvars.iv.next.i1138.prol.lcssa = phi i64 [ %indvars.iv.next.i1138.prol, %for.body.i1141.prol ]
  %add.i1137.prol.lcssa = phi double [ %add.i1137.prol, %for.body.i1141.prol ]
  br label %for.body.i1141.preheader.split

for.body.i1141.preheader.split:                   ; preds = %for.body.i1141.preheader.split.loopexit, %for.body.i1141.preheader
  %add.i1137.lcssa.unr = phi double [ undef, %for.body.i1141.preheader ], [ %add.i1137.prol.lcssa, %for.body.i1141.preheader.split.loopexit ]
  %indvars.iv.i1132.unr = phi i64 [ 0, %for.body.i1141.preheader ], [ %indvars.iv.next.i1138.prol.lcssa, %for.body.i1141.preheader.split.loopexit ]
  %sum.011.i1133.unr = phi double [ 0.000000e+00, %for.body.i1141.preheader ], [ %add.i1137.prol.lcssa, %for.body.i1141.preheader.split.loopexit ]
  br i1 %294, label %for.body.i1129.preheader, label %for.body.i1141.preheader.split.split

for.body.i1141.preheader.split.split:             ; preds = %for.body.i1141.preheader.split
  br label %for.body.i1141

for.body.i1141:                                   ; preds = %for.body.i1141, %for.body.i1141.preheader.split.split
  %indvars.iv.i1132 = phi i64 [ %indvars.iv.i1132.unr, %for.body.i1141.preheader.split.split ], [ %indvars.iv.next.i1138.3, %for.body.i1141 ]
  %sum.011.i1133 = phi double [ %sum.011.i1133.unr, %for.body.i1141.preheader.split.split ], [ %add.i1137.3, %for.body.i1141 ]
  %arrayidx.i1134 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.i1132
  %467 = load double, double* %arrayidx.i1134, align 8, !tbaa !34
  %arrayidx2.i1135 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.i1132
  %468 = load double, double* %arrayidx2.i1135, align 8, !tbaa !34
  %mul.i1136 = fmul double %467, %468
  %add.i1137 = fadd double %sum.011.i1133, %mul.i1136
  %indvars.iv.next.i1138 = add nuw nsw i64 %indvars.iv.i1132, 1
  %arrayidx.i1134.1 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next.i1138
  %469 = load double, double* %arrayidx.i1134.1, align 8, !tbaa !34
  %arrayidx2.i1135.1 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.next.i1138
  %470 = load double, double* %arrayidx2.i1135.1, align 8, !tbaa !34
  %mul.i1136.1 = fmul double %469, %470
  %add.i1137.1 = fadd double %add.i1137, %mul.i1136.1
  %indvars.iv.next.i1138.1 = add nsw i64 %indvars.iv.i1132, 2
  %arrayidx.i1134.2 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next.i1138.1
  %471 = load double, double* %arrayidx.i1134.2, align 8, !tbaa !34
  %arrayidx2.i1135.2 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.next.i1138.1
  %472 = load double, double* %arrayidx2.i1135.2, align 8, !tbaa !34
  %mul.i1136.2 = fmul double %471, %472
  %add.i1137.2 = fadd double %add.i1137.1, %mul.i1136.2
  %indvars.iv.next.i1138.2 = add nsw i64 %indvars.iv.i1132, 3
  %arrayidx.i1134.3 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next.i1138.2
  %473 = load double, double* %arrayidx.i1134.3, align 8, !tbaa !34
  %arrayidx2.i1135.3 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.next.i1138.2
  %474 = load double, double* %arrayidx2.i1135.3, align 8, !tbaa !34
  %mul.i1136.3 = fmul double %473, %474
  %add.i1137.3 = fadd double %add.i1137.2, %mul.i1136.3
  %indvars.iv.next.i1138.3 = add nsw i64 %indvars.iv.i1132, 4
  %lftr.wideiv1545.3 = trunc i64 %indvars.iv.next.i1138.3 to i32
  %exitcond1546.3 = icmp eq i32 %lftr.wideiv1545.3, %223
  br i1 %exitcond1546.3, label %for.body.i1129.preheader.unr-lcssa, label %for.body.i1141

for.body.i1129.preheader.unr-lcssa:               ; preds = %for.body.i1141
  %add.i1137.3.lcssa = phi double [ %add.i1137.3, %for.body.i1141 ]
  br label %for.body.i1129.preheader

for.body.i1129.preheader:                         ; preds = %for.body.i1141.preheader.split, %for.body.i1129.preheader.unr-lcssa
  %add.i1137.lcssa = phi double [ %add.i1137.lcssa.unr, %for.body.i1141.preheader.split ], [ %add.i1137.3.lcssa, %for.body.i1129.preheader.unr-lcssa ]
  br i1 %min.iters.check1801, label %for.body.i1129.preheader1900, label %min.iters.checked1802

min.iters.checked1802:                            ; preds = %for.body.i1129.preheader
  br i1 %cmp.zero1805, label %for.body.i1129.preheader1900, label %vector.ph1806

vector.ph1806:                                    ; preds = %min.iters.checked1802
  %broadcast.splatinsert1819 = insertelement <2 x double> undef, double %div, i32 0
  %broadcast.splat1820 = shufflevector <2 x double> %broadcast.splatinsert1819, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %lcmp.mod1949, label %vector.body1798.prol, label %vector.ph1806.split

vector.body1798.prol:                             ; preds = %vector.ph1806
  %wide.load1815.prol = load <2 x double>, <2 x double>* %82, align 16, !tbaa !34
  %wide.load1816.prol = load <2 x double>, <2 x double>* %84, align 16, !tbaa !34
  %wide.load1817.prol = load <2 x double>, <2 x double>* %85, align 16, !tbaa !34
  %wide.load1818.prol = load <2 x double>, <2 x double>* %87, align 16, !tbaa !34
  %475 = fmul <2 x double> %broadcast.splat1820, %wide.load1817.prol
  %476 = fmul <2 x double> %broadcast.splat1820, %wide.load1818.prol
  %477 = fadd <2 x double> %wide.load1815.prol, %475
  %478 = fadd <2 x double> %wide.load1816.prol, %476
  store <2 x double> %477, <2 x double>* %88, align 16, !tbaa !34
  store <2 x double> %478, <2 x double>* %89, align 16, !tbaa !34
  br label %vector.ph1806.split

vector.ph1806.split:                              ; preds = %vector.body1798.prol, %vector.ph1806
  %index1807.unr = phi i64 [ 0, %vector.ph1806 ], [ 4, %vector.body1798.prol ]
  br i1 %317, label %for.body.i1129.preheader1900.loopexit, label %vector.ph1806.split.split

vector.ph1806.split.split:                        ; preds = %vector.ph1806.split
  br label %vector.body1798

vector.body1798:                                  ; preds = %vector.body1798, %vector.ph1806.split.split
  %index1807 = phi i64 [ %index1807.unr, %vector.ph1806.split.split ], [ %index.next1808.1, %vector.body1798 ]
  %479 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 %index1807
  %480 = bitcast double* %479 to <2 x double>*
  %wide.load1815 = load <2 x double>, <2 x double>* %480, align 16, !tbaa !34
  %481 = getelementptr double, double* %479, i64 2
  %482 = bitcast double* %481 to <2 x double>*
  %wide.load1816 = load <2 x double>, <2 x double>* %482, align 16, !tbaa !34
  %483 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %index1807
  %484 = bitcast double* %483 to <2 x double>*
  %wide.load1817 = load <2 x double>, <2 x double>* %484, align 16, !tbaa !34
  %485 = getelementptr double, double* %483, i64 2
  %486 = bitcast double* %485 to <2 x double>*
  %wide.load1818 = load <2 x double>, <2 x double>* %486, align 16, !tbaa !34
  %487 = fmul <2 x double> %broadcast.splat1820, %wide.load1817
  %488 = fmul <2 x double> %broadcast.splat1820, %wide.load1818
  %489 = fadd <2 x double> %wide.load1815, %487
  %490 = fadd <2 x double> %wide.load1816, %488
  %491 = bitcast double* %479 to <2 x double>*
  store <2 x double> %489, <2 x double>* %491, align 16, !tbaa !34
  %492 = bitcast double* %481 to <2 x double>*
  store <2 x double> %490, <2 x double>* %492, align 16, !tbaa !34
  %index.next1808 = add i64 %index1807, 4
  %493 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 %index.next1808
  %494 = bitcast double* %493 to <2 x double>*
  %wide.load1815.1 = load <2 x double>, <2 x double>* %494, align 16, !tbaa !34
  %495 = getelementptr double, double* %493, i64 2
  %496 = bitcast double* %495 to <2 x double>*
  %wide.load1816.1 = load <2 x double>, <2 x double>* %496, align 16, !tbaa !34
  %497 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %index.next1808
  %498 = bitcast double* %497 to <2 x double>*
  %wide.load1817.1 = load <2 x double>, <2 x double>* %498, align 16, !tbaa !34
  %499 = getelementptr double, double* %497, i64 2
  %500 = bitcast double* %499 to <2 x double>*
  %wide.load1818.1 = load <2 x double>, <2 x double>* %500, align 16, !tbaa !34
  %501 = fmul <2 x double> %broadcast.splat1820, %wide.load1817.1
  %502 = fmul <2 x double> %broadcast.splat1820, %wide.load1818.1
  %503 = fadd <2 x double> %wide.load1815.1, %501
  %504 = fadd <2 x double> %wide.load1816.1, %502
  %505 = bitcast double* %493 to <2 x double>*
  store <2 x double> %503, <2 x double>* %505, align 16, !tbaa !34
  %506 = bitcast double* %495 to <2 x double>*
  store <2 x double> %504, <2 x double>* %506, align 16, !tbaa !34
  %index.next1808.1 = add i64 %index1807, 8
  %507 = icmp eq i64 %index.next1808.1, %n.vec1804
  br i1 %507, label %for.body.i1129.preheader1900.loopexit.unr-lcssa, label %vector.body1798, !llvm.loop !159

for.body.i1129.preheader1900.loopexit.unr-lcssa:  ; preds = %vector.body1798
  br label %for.body.i1129.preheader1900.loopexit

for.body.i1129.preheader1900.loopexit:            ; preds = %vector.ph1806.split, %for.body.i1129.preheader1900.loopexit.unr-lcssa
  br label %for.body.i1129.preheader1900

for.body.i1129.preheader1900:                     ; preds = %for.body.i1129.preheader1900.loopexit, %min.iters.checked1802, %for.body.i1129.preheader
  %indvars.iv.i1120.ph = phi i64 [ 0, %min.iters.checked1802 ], [ 0, %for.body.i1129.preheader ], [ %n.vec1804, %for.body.i1129.preheader1900.loopexit ]
  br label %for.body.i1129

for.body.i1129:                                   ; preds = %for.body.i1129.preheader1900, %for.body.i1129
  %indvars.iv.i1120 = phi i64 [ %indvars.iv.next.i1126, %for.body.i1129 ], [ %indvars.iv.i1120.ph, %for.body.i1129.preheader1900 ]
  %arrayidx.i1121 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 %indvars.iv.i1120
  %508 = load double, double* %arrayidx.i1121, align 8, !tbaa !34
  %arrayidx2.i1122 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv.i1120
  %509 = load double, double* %arrayidx2.i1122, align 8, !tbaa !34
  %mul3.i1123 = fmul double %div, %509
  %add.i1124 = fadd double %508, %mul3.i1123
  store double %add.i1124, double* %arrayidx.i1121, align 8, !tbaa !34
  %indvars.iv.next.i1126 = add nuw nsw i64 %indvars.iv.i1120, 1
  %lftr.wideiv1547 = trunc i64 %indvars.iv.next.i1126 to i32
  %exitcond1548 = icmp eq i32 %lftr.wideiv1547, %223
  br i1 %exitcond1548, label %for.body.i1117.preheader, label %for.body.i1129, !llvm.loop !160

for.body.i1117.preheader:                         ; preds = %for.body.i1129
  br i1 %min.iters.check1776, label %for.body.i1117.preheader1899, label %min.iters.checked1777

min.iters.checked1777:                            ; preds = %for.body.i1117.preheader
  br i1 %cmp.zero1780, label %for.body.i1117.preheader1899, label %vector.ph1781

vector.ph1781:                                    ; preds = %min.iters.checked1777
  %broadcast.splatinsert1794 = insertelement <2 x double> undef, double %sub360, i32 0
  %broadcast.splat1795 = shufflevector <2 x double> %broadcast.splatinsert1794, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %lcmp.mod1951, label %vector.body1773.prol, label %vector.ph1781.split

vector.body1773.prol:                             ; preds = %vector.ph1781
  %wide.load1790.prol = load <2 x double>, <2 x double>* %73, align 16, !tbaa !34
  %wide.load1791.prol = load <2 x double>, <2 x double>* %75, align 16, !tbaa !34
  %wide.load1792.prol = load <2 x double>, <2 x double>* %76, align 16, !tbaa !34
  %wide.load1793.prol = load <2 x double>, <2 x double>* %78, align 16, !tbaa !34
  %510 = fmul <2 x double> %wide.load1792.prol, %broadcast.splat1795
  %511 = fmul <2 x double> %wide.load1793.prol, %broadcast.splat1795
  %512 = fadd <2 x double> %wide.load1790.prol, %510
  %513 = fadd <2 x double> %wide.load1791.prol, %511
  store <2 x double> %512, <2 x double>* %79, align 16, !tbaa !34
  store <2 x double> %513, <2 x double>* %81, align 16, !tbaa !34
  br label %vector.ph1781.split

vector.ph1781.split:                              ; preds = %vector.body1773.prol, %vector.ph1781
  %index1782.unr = phi i64 [ 0, %vector.ph1781 ], [ 4, %vector.body1773.prol ]
  br i1 %315, label %for.body.i1117.preheader1899.loopexit, label %vector.ph1781.split.split

vector.ph1781.split.split:                        ; preds = %vector.ph1781.split
  br label %vector.body1773

vector.body1773:                                  ; preds = %vector.body1773, %vector.ph1781.split.split
  %index1782 = phi i64 [ %index1782.unr, %vector.ph1781.split.split ], [ %index.next1783.1, %vector.body1773 ]
  %514 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %index1782
  %515 = bitcast double* %514 to <2 x double>*
  %wide.load1790 = load <2 x double>, <2 x double>* %515, align 16, !tbaa !34
  %516 = getelementptr double, double* %514, i64 2
  %517 = bitcast double* %516 to <2 x double>*
  %wide.load1791 = load <2 x double>, <2 x double>* %517, align 16, !tbaa !34
  %518 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %index1782
  %519 = bitcast double* %518 to <2 x double>*
  %wide.load1792 = load <2 x double>, <2 x double>* %519, align 16, !tbaa !34
  %520 = getelementptr double, double* %518, i64 2
  %521 = bitcast double* %520 to <2 x double>*
  %wide.load1793 = load <2 x double>, <2 x double>* %521, align 16, !tbaa !34
  %522 = fmul <2 x double> %wide.load1792, %broadcast.splat1795
  %523 = fmul <2 x double> %wide.load1793, %broadcast.splat1795
  %524 = fadd <2 x double> %wide.load1790, %522
  %525 = fadd <2 x double> %wide.load1791, %523
  %526 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %index1782
  %527 = bitcast double* %526 to <2 x double>*
  store <2 x double> %524, <2 x double>* %527, align 16, !tbaa !34
  %528 = getelementptr double, double* %526, i64 2
  %529 = bitcast double* %528 to <2 x double>*
  store <2 x double> %525, <2 x double>* %529, align 16, !tbaa !34
  %index.next1783 = add i64 %index1782, 4
  %530 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %index.next1783
  %531 = bitcast double* %530 to <2 x double>*
  %wide.load1790.1 = load <2 x double>, <2 x double>* %531, align 16, !tbaa !34
  %532 = getelementptr double, double* %530, i64 2
  %533 = bitcast double* %532 to <2 x double>*
  %wide.load1791.1 = load <2 x double>, <2 x double>* %533, align 16, !tbaa !34
  %534 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %index.next1783
  %535 = bitcast double* %534 to <2 x double>*
  %wide.load1792.1 = load <2 x double>, <2 x double>* %535, align 16, !tbaa !34
  %536 = getelementptr double, double* %534, i64 2
  %537 = bitcast double* %536 to <2 x double>*
  %wide.load1793.1 = load <2 x double>, <2 x double>* %537, align 16, !tbaa !34
  %538 = fmul <2 x double> %wide.load1792.1, %broadcast.splat1795
  %539 = fmul <2 x double> %wide.load1793.1, %broadcast.splat1795
  %540 = fadd <2 x double> %wide.load1790.1, %538
  %541 = fadd <2 x double> %wide.load1791.1, %539
  %542 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %index.next1783
  %543 = bitcast double* %542 to <2 x double>*
  store <2 x double> %540, <2 x double>* %543, align 16, !tbaa !34
  %544 = getelementptr double, double* %542, i64 2
  %545 = bitcast double* %544 to <2 x double>*
  store <2 x double> %541, <2 x double>* %545, align 16, !tbaa !34
  %index.next1783.1 = add i64 %index1782, 8
  %546 = icmp eq i64 %index.next1783.1, %n.vec1779
  br i1 %546, label %for.body.i1117.preheader1899.loopexit.unr-lcssa, label %vector.body1773, !llvm.loop !161

for.body.i1117.preheader1899.loopexit.unr-lcssa:  ; preds = %vector.body1773
  br label %for.body.i1117.preheader1899.loopexit

for.body.i1117.preheader1899.loopexit:            ; preds = %vector.ph1781.split, %for.body.i1117.preheader1899.loopexit.unr-lcssa
  br label %for.body.i1117.preheader1899

for.body.i1117.preheader1899:                     ; preds = %for.body.i1117.preheader1899.loopexit, %min.iters.checked1777, %for.body.i1117.preheader
  %indvars.iv.i1108.ph = phi i64 [ 0, %min.iters.checked1777 ], [ 0, %for.body.i1117.preheader ], [ %n.vec1779, %for.body.i1117.preheader1899.loopexit ]
  br label %for.body.i1117

for.body.i1117:                                   ; preds = %for.body.i1117.preheader1899, %for.body.i1117
  %indvars.iv.i1108 = phi i64 [ %indvars.iv.next.i1114, %for.body.i1117 ], [ %indvars.iv.i1108.ph, %for.body.i1117.preheader1899 ]
  %arrayidx.i1109 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.i1108
  %547 = load double, double* %arrayidx.i1109, align 8, !tbaa !34
  %arrayidx2.i1110 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %indvars.iv.i1108
  %548 = load double, double* %arrayidx2.i1110, align 8, !tbaa !34
  %mul3.i1111 = fmul double %548, %sub360
  %add.i1112 = fadd double %547, %mul3.i1111
  %arrayidx5.i1113 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.i1108
  store double %add.i1112, double* %arrayidx5.i1113, align 8, !tbaa !34
  %indvars.iv.next.i1114 = add nuw nsw i64 %indvars.iv.i1108, 1
  %lftr.wideiv1549 = trunc i64 %indvars.iv.next.i1114 to i32
  %exitcond1550 = icmp eq i32 %lftr.wideiv1549, %223
  br i1 %exitcond1550, label %for.body441.lr.ph.us.preheader, label %for.body.i1117, !llvm.loop !162

for.body441.lr.ph.us.preheader:                   ; preds = %for.body.i1117
  br label %for.body441.lr.ph.us

for.body441.us:                                   ; preds = %for.body441.us, %for.body441.lr.ph.us.split.split
  %indvars.iv1551 = phi i64 [ %indvars.iv1551.unr, %for.body441.lr.ph.us.split.split ], [ %indvars.iv.next1552.3, %for.body441.us ]
  %sum429.01389.us = phi double [ %sum429.01389.us.unr, %for.body441.lr.ph.us.split.split ], [ %add449.us.3, %for.body441.us ]
  %arrayidx445.us = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1555, i64 %indvars.iv1551
  %549 = load double, double* %arrayidx445.us, align 8, !tbaa !34
  %arrayidx447.us = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv1551
  %550 = load double, double* %arrayidx447.us, align 8, !tbaa !34
  %mul448.us = fmul double %549, %550
  %add449.us = fadd double %sum429.01389.us, %mul448.us
  %indvars.iv.next1552 = add nuw nsw i64 %indvars.iv1551, 1
  %arrayidx445.us.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1555, i64 %indvars.iv.next1552
  %551 = load double, double* %arrayidx445.us.1, align 8, !tbaa !34
  %arrayidx447.us.1 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next1552
  %552 = load double, double* %arrayidx447.us.1, align 8, !tbaa !34
  %mul448.us.1 = fmul double %551, %552
  %add449.us.1 = fadd double %add449.us, %mul448.us.1
  %indvars.iv.next1552.1 = add nsw i64 %indvars.iv1551, 2
  %arrayidx445.us.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1555, i64 %indvars.iv.next1552.1
  %553 = load double, double* %arrayidx445.us.2, align 8, !tbaa !34
  %arrayidx447.us.2 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next1552.1
  %554 = load double, double* %arrayidx447.us.2, align 8, !tbaa !34
  %mul448.us.2 = fmul double %553, %554
  %add449.us.2 = fadd double %add449.us.1, %mul448.us.2
  %indvars.iv.next1552.2 = add nsw i64 %indvars.iv1551, 3
  %arrayidx445.us.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1555, i64 %indvars.iv.next1552.2
  %555 = load double, double* %arrayidx445.us.3, align 8, !tbaa !34
  %arrayidx447.us.3 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next1552.2
  %556 = load double, double* %arrayidx447.us.3, align 8, !tbaa !34
  %mul448.us.3 = fmul double %555, %556
  %add449.us.3 = fadd double %add449.us.2, %mul448.us.3
  %indvars.iv.next1552.3 = add nsw i64 %indvars.iv1551, 4
  %lftr.wideiv1553.3 = trunc i64 %indvars.iv.next1552.3 to i32
  %exitcond1554.3 = icmp eq i32 %lftr.wideiv1553.3, %223
  br i1 %exitcond1554.3, label %for.cond436.for.end452_crit_edge.us.unr-lcssa, label %for.body441.us

for.body441.lr.ph.us:                             ; preds = %for.body441.lr.ph.us.preheader, %for.cond436.for.end452_crit_edge.us
  %indvars.iv1555 = phi i64 [ %indvars.iv.next1556, %for.cond436.for.end452_crit_edge.us ], [ 0, %for.body441.lr.ph.us.preheader ]
  br i1 true, label %for.body441.us.prol.preheader, label %for.body441.lr.ph.us.split

for.body441.us.prol.preheader:                    ; preds = %for.body441.lr.ph.us
  br label %for.body441.us.prol

for.body441.us.prol:                              ; preds = %for.body441.us.prol, %for.body441.us.prol.preheader
  %indvars.iv1551.prol = phi i64 [ %indvars.iv.next1552.prol, %for.body441.us.prol ], [ 0, %for.body441.us.prol.preheader ]
  %sum429.01389.us.prol = phi double [ %add449.us.prol, %for.body441.us.prol ], [ 0.000000e+00, %for.body441.us.prol.preheader ]
  %prol.iter1954 = phi i32 [ %prol.iter1954.sub, %for.body441.us.prol ], [ 1, %for.body441.us.prol.preheader ]
  %arrayidx445.us.prol = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1555, i64 %indvars.iv1551.prol
  %557 = load double, double* %arrayidx445.us.prol, align 8, !tbaa !34
  %arrayidx447.us.prol = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv1551.prol
  %558 = load double, double* %arrayidx447.us.prol, align 8, !tbaa !34
  %mul448.us.prol = fmul double %557, %558
  %add449.us.prol = fadd double %sum429.01389.us.prol, %mul448.us.prol
  %indvars.iv.next1552.prol = add nuw nsw i64 %indvars.iv1551.prol, 1
  %prol.iter1954.sub = add i32 %prol.iter1954, -1
  %prol.iter1954.cmp = icmp eq i32 %prol.iter1954.sub, 0
  br i1 %prol.iter1954.cmp, label %for.body441.lr.ph.us.split.loopexit, label %for.body441.us.prol, !llvm.loop !163

for.body441.lr.ph.us.split.loopexit:              ; preds = %for.body441.us.prol
  %indvars.iv.next1552.prol.lcssa = phi i64 [ %indvars.iv.next1552.prol, %for.body441.us.prol ]
  %add449.us.prol.lcssa = phi double [ %add449.us.prol, %for.body441.us.prol ]
  br label %for.body441.lr.ph.us.split

for.body441.lr.ph.us.split:                       ; preds = %for.body441.lr.ph.us.split.loopexit, %for.body441.lr.ph.us
  %add449.us.lcssa.unr = phi double [ undef, %for.body441.lr.ph.us ], [ %add449.us.prol.lcssa, %for.body441.lr.ph.us.split.loopexit ]
  %indvars.iv1551.unr = phi i64 [ 0, %for.body441.lr.ph.us ], [ %indvars.iv.next1552.prol.lcssa, %for.body441.lr.ph.us.split.loopexit ]
  %sum429.01389.us.unr = phi double [ 0.000000e+00, %for.body441.lr.ph.us ], [ %add449.us.prol.lcssa, %for.body441.lr.ph.us.split.loopexit ]
  br i1 %295, label %for.cond436.for.end452_crit_edge.us, label %for.body441.lr.ph.us.split.split

for.body441.lr.ph.us.split.split:                 ; preds = %for.body441.lr.ph.us.split
  br label %for.body441.us

for.cond436.for.end452_crit_edge.us.unr-lcssa:    ; preds = %for.body441.us
  %add449.us.3.lcssa = phi double [ %add449.us.3, %for.body441.us ]
  br label %for.cond436.for.end452_crit_edge.us

for.cond436.for.end452_crit_edge.us:              ; preds = %for.body441.lr.ph.us.split, %for.cond436.for.end452_crit_edge.us.unr-lcssa
  %add449.us.lcssa = phi double [ %add449.us.lcssa.unr, %for.body441.lr.ph.us.split ], [ %add449.us.3.lcssa, %for.cond436.for.end452_crit_edge.us.unr-lcssa ]
  %arrayidx455.us = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv1555
  %559 = load double, double* %arrayidx455.us, align 8, !tbaa !34
  %mul456.us = fmul double %559, 0.000000e+00
  %add457.us = fadd double %add449.us.lcssa, %mul456.us
  store double %add457.us, double* %arrayidx455.us, align 8, !tbaa !34
  %indvars.iv.next1556 = add nuw nsw i64 %indvars.iv1555, 1
  %lftr.wideiv1557 = trunc i64 %indvars.iv.next1556 to i32
  %exitcond1558 = icmp eq i32 %lftr.wideiv1557, %223
  br i1 %exitcond1558, label %for.body.i1104.preheader, label %for.body441.lr.ph.us

for.body.i1104.preheader:                         ; preds = %for.cond436.for.end452_crit_edge.us
  br i1 true, label %for.body.i1104.prol.preheader, label %for.body.i1104.preheader.split

for.body.i1104.prol.preheader:                    ; preds = %for.body.i1104.preheader
  br label %for.body.i1104.prol

for.body.i1104.prol:                              ; preds = %for.body.i1104.prol, %for.body.i1104.prol.preheader
  %indvars.iv.i1095.prol = phi i64 [ %indvars.iv.next.i1101.prol, %for.body.i1104.prol ], [ 0, %for.body.i1104.prol.preheader ]
  %sum.011.i1096.prol = phi double [ %add.i1100.prol, %for.body.i1104.prol ], [ 0.000000e+00, %for.body.i1104.prol.preheader ]
  %prol.iter1957 = phi i32 [ %prol.iter1957.sub, %for.body.i1104.prol ], [ 1, %for.body.i1104.prol.preheader ]
  %arrayidx.i1097.prol = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.i1095.prol
  %560 = load double, double* %arrayidx.i1097.prol, align 8, !tbaa !34
  %arrayidx2.i1098.prol = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.i1095.prol
  %561 = load double, double* %arrayidx2.i1098.prol, align 8, !tbaa !34
  %mul.i1099.prol = fmul double %560, %561
  %add.i1100.prol = fadd double %sum.011.i1096.prol, %mul.i1099.prol
  %indvars.iv.next.i1101.prol = add nuw nsw i64 %indvars.iv.i1095.prol, 1
  %prol.iter1957.sub = add i32 %prol.iter1957, -1
  %prol.iter1957.cmp = icmp eq i32 %prol.iter1957.sub, 0
  br i1 %prol.iter1957.cmp, label %for.body.i1104.preheader.split.loopexit, label %for.body.i1104.prol, !llvm.loop !164

for.body.i1104.preheader.split.loopexit:          ; preds = %for.body.i1104.prol
  %indvars.iv.next.i1101.prol.lcssa = phi i64 [ %indvars.iv.next.i1101.prol, %for.body.i1104.prol ]
  %add.i1100.prol.lcssa = phi double [ %add.i1100.prol, %for.body.i1104.prol ]
  br label %for.body.i1104.preheader.split

for.body.i1104.preheader.split:                   ; preds = %for.body.i1104.preheader.split.loopexit, %for.body.i1104.preheader
  %add.i1100.lcssa.unr = phi double [ undef, %for.body.i1104.preheader ], [ %add.i1100.prol.lcssa, %for.body.i1104.preheader.split.loopexit ]
  %indvars.iv.i1095.unr = phi i64 [ 0, %for.body.i1104.preheader ], [ %indvars.iv.next.i1101.prol.lcssa, %for.body.i1104.preheader.split.loopexit ]
  %sum.011.i1096.unr = phi double [ 0.000000e+00, %for.body.i1104.preheader ], [ %add.i1100.prol.lcssa, %for.body.i1104.preheader.split.loopexit ]
  br i1 %296, label %__dot.exit1106, label %for.body.i1104.preheader.split.split

for.body.i1104.preheader.split.split:             ; preds = %for.body.i1104.preheader.split
  br label %for.body.i1104

for.body.i1104:                                   ; preds = %for.body.i1104, %for.body.i1104.preheader.split.split
  %indvars.iv.i1095 = phi i64 [ %indvars.iv.i1095.unr, %for.body.i1104.preheader.split.split ], [ %indvars.iv.next.i1101.3, %for.body.i1104 ]
  %sum.011.i1096 = phi double [ %sum.011.i1096.unr, %for.body.i1104.preheader.split.split ], [ %add.i1100.3, %for.body.i1104 ]
  %arrayidx.i1097 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.i1095
  %562 = load double, double* %arrayidx.i1097, align 8, !tbaa !34
  %arrayidx2.i1098 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.i1095
  %563 = load double, double* %arrayidx2.i1098, align 8, !tbaa !34
  %mul.i1099 = fmul double %562, %563
  %add.i1100 = fadd double %sum.011.i1096, %mul.i1099
  %indvars.iv.next.i1101 = add nuw nsw i64 %indvars.iv.i1095, 1
  %arrayidx.i1097.1 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next.i1101
  %564 = load double, double* %arrayidx.i1097.1, align 8, !tbaa !34
  %arrayidx2.i1098.1 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.next.i1101
  %565 = load double, double* %arrayidx2.i1098.1, align 8, !tbaa !34
  %mul.i1099.1 = fmul double %564, %565
  %add.i1100.1 = fadd double %add.i1100, %mul.i1099.1
  %indvars.iv.next.i1101.1 = add nsw i64 %indvars.iv.i1095, 2
  %arrayidx.i1097.2 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next.i1101.1
  %566 = load double, double* %arrayidx.i1097.2, align 8, !tbaa !34
  %arrayidx2.i1098.2 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.next.i1101.1
  %567 = load double, double* %arrayidx2.i1098.2, align 8, !tbaa !34
  %mul.i1099.2 = fmul double %566, %567
  %add.i1100.2 = fadd double %add.i1100.1, %mul.i1099.2
  %indvars.iv.next.i1101.2 = add nsw i64 %indvars.iv.i1095, 3
  %arrayidx.i1097.3 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next.i1101.2
  %568 = load double, double* %arrayidx.i1097.3, align 8, !tbaa !34
  %arrayidx2.i1098.3 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv.next.i1101.2
  %569 = load double, double* %arrayidx2.i1098.3, align 8, !tbaa !34
  %mul.i1099.3 = fmul double %568, %569
  %add.i1100.3 = fadd double %add.i1100.2, %mul.i1099.3
  %indvars.iv.next.i1101.3 = add nsw i64 %indvars.iv.i1095, 4
  %lftr.wideiv1559.3 = trunc i64 %indvars.iv.next.i1101.3 to i32
  %exitcond1560.3 = icmp eq i32 %lftr.wideiv1559.3, %223
  br i1 %exitcond1560.3, label %__dot.exit1106.unr-lcssa, label %for.body.i1104

__dot.exit1106.unr-lcssa:                         ; preds = %for.body.i1104
  %add.i1100.3.lcssa = phi double [ %add.i1100.3, %for.body.i1104 ]
  br label %__dot.exit1106

__dot.exit1106:                                   ; preds = %for.body.i1104.preheader.split, %__dot.exit1106.unr-lcssa
  %add.i1100.lcssa = phi double [ %add.i1100.lcssa.unr, %for.body.i1104.preheader.split ], [ %add.i1100.3.lcssa, %__dot.exit1106.unr-lcssa ]
  %cmp468 = fcmp olt double %add.i1100.lcssa, 0.000000e+00
  br i1 %cmp468, label %if.end472, label %if.else

if.else:                                          ; preds = %__dot.exit1106
  %call471 = call double @sqrt(double %add.i1100.lcssa) #1
  br label %if.end472

if.end472:                                        ; preds = %__dot.exit1106, %if.else
  %L2_norm_of_s.0 = phi double [ %call471, %if.else ], [ 0.000000e+00, %__dot.exit1106 ]
  %cmp474 = fcmp olt double %L2_norm_of_s.0, %mul473
  br i1 %cmp474, label %for.end640.loopexit, label %if.end477

if.end477:                                        ; preds = %if.end472
  %cmp478 = fcmp oeq double %add.i1137.lcssa, 0.000000e+00
  br i1 %cmp478, label %for.end640.loopexit, label %if.end481

if.end481:                                        ; preds = %if.end477
  %div482 = fdiv double %add.i1150.lcssa, %add.i1137.lcssa
  %call489 = call i32 @__isinf(double %div482) #11
  %tobool490 = icmp eq i32 %call489, 0
  br i1 %tobool490, label %for.body.i1092.preheader, label %for.end640.loopexit

for.body.i1092.preheader:                         ; preds = %if.end481
  br i1 %min.iters.check1751, label %for.body.i1092.preheader1898, label %min.iters.checked1752

min.iters.checked1752:                            ; preds = %for.body.i1092.preheader
  br i1 %cmp.zero1755, label %for.body.i1092.preheader1898, label %vector.ph1756

vector.ph1756:                                    ; preds = %min.iters.checked1752
  %broadcast.splatinsert1769 = insertelement <2 x double> undef, double %div482, i32 0
  %broadcast.splat1770 = shufflevector <2 x double> %broadcast.splatinsert1769, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %lcmp.mod1959, label %vector.body1748.prol, label %vector.ph1756.split

vector.body1748.prol:                             ; preds = %vector.ph1756
  %wide.load1765.prol = load <2 x double>, <2 x double>* %65, align 16, !tbaa !34
  %wide.load1766.prol = load <2 x double>, <2 x double>* %67, align 16, !tbaa !34
  %wide.load1767.prol = load <2 x double>, <2 x double>* %68, align 16, !tbaa !34
  %wide.load1768.prol = load <2 x double>, <2 x double>* %70, align 16, !tbaa !34
  %570 = fmul <2 x double> %broadcast.splat1770, %wide.load1767.prol
  %571 = fmul <2 x double> %broadcast.splat1770, %wide.load1768.prol
  %572 = fadd <2 x double> %wide.load1765.prol, %570
  %573 = fadd <2 x double> %wide.load1766.prol, %571
  store <2 x double> %572, <2 x double>* %71, align 16, !tbaa !34
  store <2 x double> %573, <2 x double>* %72, align 16, !tbaa !34
  br label %vector.ph1756.split

vector.ph1756.split:                              ; preds = %vector.body1748.prol, %vector.ph1756
  %index1757.unr = phi i64 [ 0, %vector.ph1756 ], [ 4, %vector.body1748.prol ]
  br i1 %313, label %for.body.i1092.preheader1898.loopexit, label %vector.ph1756.split.split

vector.ph1756.split.split:                        ; preds = %vector.ph1756.split
  br label %vector.body1748

vector.body1748:                                  ; preds = %vector.body1748, %vector.ph1756.split.split
  %index1757 = phi i64 [ %index1757.unr, %vector.ph1756.split.split ], [ %index.next1758.1, %vector.body1748 ]
  %574 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 %index1757
  %575 = bitcast double* %574 to <2 x double>*
  %wide.load1765 = load <2 x double>, <2 x double>* %575, align 16, !tbaa !34
  %576 = getelementptr double, double* %574, i64 2
  %577 = bitcast double* %576 to <2 x double>*
  %wide.load1766 = load <2 x double>, <2 x double>* %577, align 16, !tbaa !34
  %578 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %index1757
  %579 = bitcast double* %578 to <2 x double>*
  %wide.load1767 = load <2 x double>, <2 x double>* %579, align 16, !tbaa !34
  %580 = getelementptr double, double* %578, i64 2
  %581 = bitcast double* %580 to <2 x double>*
  %wide.load1768 = load <2 x double>, <2 x double>* %581, align 16, !tbaa !34
  %582 = fmul <2 x double> %broadcast.splat1770, %wide.load1767
  %583 = fmul <2 x double> %broadcast.splat1770, %wide.load1768
  %584 = fadd <2 x double> %wide.load1765, %582
  %585 = fadd <2 x double> %wide.load1766, %583
  %586 = bitcast double* %574 to <2 x double>*
  store <2 x double> %584, <2 x double>* %586, align 16, !tbaa !34
  %587 = bitcast double* %576 to <2 x double>*
  store <2 x double> %585, <2 x double>* %587, align 16, !tbaa !34
  %index.next1758 = add i64 %index1757, 4
  %588 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 %index.next1758
  %589 = bitcast double* %588 to <2 x double>*
  %wide.load1765.1 = load <2 x double>, <2 x double>* %589, align 16, !tbaa !34
  %590 = getelementptr double, double* %588, i64 2
  %591 = bitcast double* %590 to <2 x double>*
  %wide.load1766.1 = load <2 x double>, <2 x double>* %591, align 16, !tbaa !34
  %592 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %index.next1758
  %593 = bitcast double* %592 to <2 x double>*
  %wide.load1767.1 = load <2 x double>, <2 x double>* %593, align 16, !tbaa !34
  %594 = getelementptr double, double* %592, i64 2
  %595 = bitcast double* %594 to <2 x double>*
  %wide.load1768.1 = load <2 x double>, <2 x double>* %595, align 16, !tbaa !34
  %596 = fmul <2 x double> %broadcast.splat1770, %wide.load1767.1
  %597 = fmul <2 x double> %broadcast.splat1770, %wide.load1768.1
  %598 = fadd <2 x double> %wide.load1765.1, %596
  %599 = fadd <2 x double> %wide.load1766.1, %597
  %600 = bitcast double* %588 to <2 x double>*
  store <2 x double> %598, <2 x double>* %600, align 16, !tbaa !34
  %601 = bitcast double* %590 to <2 x double>*
  store <2 x double> %599, <2 x double>* %601, align 16, !tbaa !34
  %index.next1758.1 = add i64 %index1757, 8
  %602 = icmp eq i64 %index.next1758.1, %n.vec1754
  br i1 %602, label %for.body.i1092.preheader1898.loopexit.unr-lcssa, label %vector.body1748, !llvm.loop !165

for.body.i1092.preheader1898.loopexit.unr-lcssa:  ; preds = %vector.body1748
  br label %for.body.i1092.preheader1898.loopexit

for.body.i1092.preheader1898.loopexit:            ; preds = %vector.ph1756.split, %for.body.i1092.preheader1898.loopexit.unr-lcssa
  br label %for.body.i1092.preheader1898

for.body.i1092.preheader1898:                     ; preds = %for.body.i1092.preheader1898.loopexit, %min.iters.checked1752, %for.body.i1092.preheader
  %indvars.iv.i1083.ph = phi i64 [ 0, %min.iters.checked1752 ], [ 0, %for.body.i1092.preheader ], [ %n.vec1754, %for.body.i1092.preheader1898.loopexit ]
  br label %for.body.i1092

for.body.i1092:                                   ; preds = %for.body.i1092.preheader1898, %for.body.i1092
  %indvars.iv.i1083 = phi i64 [ %indvars.iv.next.i1089, %for.body.i1092 ], [ %indvars.iv.i1083.ph, %for.body.i1092.preheader1898 ]
  %arrayidx.i1084 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 %indvars.iv.i1083
  %603 = load double, double* %arrayidx.i1084, align 8, !tbaa !34
  %arrayidx2.i1085 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.i1083
  %604 = load double, double* %arrayidx2.i1085, align 8, !tbaa !34
  %mul3.i1086 = fmul double %div482, %604
  %add.i1087 = fadd double %603, %mul3.i1086
  store double %add.i1087, double* %arrayidx.i1084, align 8, !tbaa !34
  %indvars.iv.next.i1089 = add nuw nsw i64 %indvars.iv.i1083, 1
  %lftr.wideiv1561 = trunc i64 %indvars.iv.next.i1089 to i32
  %exitcond1562 = icmp eq i32 %lftr.wideiv1561, %223
  br i1 %exitcond1562, label %for.body.i1080.preheader, label %for.body.i1092, !llvm.loop !166

for.body.i1080.preheader:                         ; preds = %for.body.i1092
  %sub504 = fsub double -0.000000e+00, %div482
  %mul505 = fmul double %div, %sub504
  br i1 %min.iters.check1726, label %for.body.i1080.preheader1897, label %min.iters.checked1727

min.iters.checked1727:                            ; preds = %for.body.i1080.preheader
  br i1 %cmp.zero1730, label %for.body.i1080.preheader1897, label %vector.ph1731

vector.ph1731:                                    ; preds = %min.iters.checked1727
  %broadcast.splatinsert1744 = insertelement <2 x double> undef, double %mul505, i32 0
  %broadcast.splat1745 = shufflevector <2 x double> %broadcast.splatinsert1744, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %lcmp.mod1961, label %vector.body1723.prol, label %vector.ph1731.split

vector.body1723.prol:                             ; preds = %vector.ph1731
  %wide.load1740.prol = load <2 x double>, <2 x double>* %57, align 16, !tbaa !34
  %wide.load1741.prol = load <2 x double>, <2 x double>* %59, align 16, !tbaa !34
  %wide.load1742.prol = load <2 x double>, <2 x double>* %60, align 16, !tbaa !34
  %wide.load1743.prol = load <2 x double>, <2 x double>* %62, align 16, !tbaa !34
  %605 = fmul <2 x double> %broadcast.splat1745, %wide.load1742.prol
  %606 = fmul <2 x double> %broadcast.splat1745, %wide.load1743.prol
  %607 = fadd <2 x double> %wide.load1740.prol, %605
  %608 = fadd <2 x double> %wide.load1741.prol, %606
  store <2 x double> %607, <2 x double>* %63, align 16, !tbaa !34
  store <2 x double> %608, <2 x double>* %64, align 16, !tbaa !34
  br label %vector.ph1731.split

vector.ph1731.split:                              ; preds = %vector.body1723.prol, %vector.ph1731
  %index1732.unr = phi i64 [ 0, %vector.ph1731 ], [ 4, %vector.body1723.prol ]
  br i1 %311, label %for.body.i1080.preheader1897.loopexit, label %vector.ph1731.split.split

vector.ph1731.split.split:                        ; preds = %vector.ph1731.split
  br label %vector.body1723

vector.body1723:                                  ; preds = %vector.body1723, %vector.ph1731.split.split
  %index1732 = phi i64 [ %index1732.unr, %vector.ph1731.split.split ], [ %index.next1733.1, %vector.body1723 ]
  %609 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 %index1732
  %610 = bitcast double* %609 to <2 x double>*
  %wide.load1740 = load <2 x double>, <2 x double>* %610, align 16, !tbaa !34
  %611 = getelementptr double, double* %609, i64 2
  %612 = bitcast double* %611 to <2 x double>*
  %wide.load1741 = load <2 x double>, <2 x double>* %612, align 16, !tbaa !34
  %613 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %index1732
  %614 = bitcast double* %613 to <2 x double>*
  %wide.load1742 = load <2 x double>, <2 x double>* %614, align 16, !tbaa !34
  %615 = getelementptr double, double* %613, i64 2
  %616 = bitcast double* %615 to <2 x double>*
  %wide.load1743 = load <2 x double>, <2 x double>* %616, align 16, !tbaa !34
  %617 = fmul <2 x double> %broadcast.splat1745, %wide.load1742
  %618 = fmul <2 x double> %broadcast.splat1745, %wide.load1743
  %619 = fadd <2 x double> %wide.load1740, %617
  %620 = fadd <2 x double> %wide.load1741, %618
  %621 = bitcast double* %609 to <2 x double>*
  store <2 x double> %619, <2 x double>* %621, align 16, !tbaa !34
  %622 = bitcast double* %611 to <2 x double>*
  store <2 x double> %620, <2 x double>* %622, align 16, !tbaa !34
  %index.next1733 = add i64 %index1732, 4
  %623 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 %index.next1733
  %624 = bitcast double* %623 to <2 x double>*
  %wide.load1740.1 = load <2 x double>, <2 x double>* %624, align 16, !tbaa !34
  %625 = getelementptr double, double* %623, i64 2
  %626 = bitcast double* %625 to <2 x double>*
  %wide.load1741.1 = load <2 x double>, <2 x double>* %626, align 16, !tbaa !34
  %627 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %index.next1733
  %628 = bitcast double* %627 to <2 x double>*
  %wide.load1742.1 = load <2 x double>, <2 x double>* %628, align 16, !tbaa !34
  %629 = getelementptr double, double* %627, i64 2
  %630 = bitcast double* %629 to <2 x double>*
  %wide.load1743.1 = load <2 x double>, <2 x double>* %630, align 16, !tbaa !34
  %631 = fmul <2 x double> %broadcast.splat1745, %wide.load1742.1
  %632 = fmul <2 x double> %broadcast.splat1745, %wide.load1743.1
  %633 = fadd <2 x double> %wide.load1740.1, %631
  %634 = fadd <2 x double> %wide.load1741.1, %632
  %635 = bitcast double* %623 to <2 x double>*
  store <2 x double> %633, <2 x double>* %635, align 16, !tbaa !34
  %636 = bitcast double* %625 to <2 x double>*
  store <2 x double> %634, <2 x double>* %636, align 16, !tbaa !34
  %index.next1733.1 = add i64 %index1732, 8
  %637 = icmp eq i64 %index.next1733.1, %n.vec1729
  br i1 %637, label %for.body.i1080.preheader1897.loopexit.unr-lcssa, label %vector.body1723, !llvm.loop !167

for.body.i1080.preheader1897.loopexit.unr-lcssa:  ; preds = %vector.body1723
  br label %for.body.i1080.preheader1897.loopexit

for.body.i1080.preheader1897.loopexit:            ; preds = %vector.ph1731.split, %for.body.i1080.preheader1897.loopexit.unr-lcssa
  br label %for.body.i1080.preheader1897

for.body.i1080.preheader1897:                     ; preds = %for.body.i1080.preheader1897.loopexit, %min.iters.checked1727, %for.body.i1080.preheader
  %indvars.iv.i1071.ph = phi i64 [ 0, %min.iters.checked1727 ], [ 0, %for.body.i1080.preheader ], [ %n.vec1729, %for.body.i1080.preheader1897.loopexit ]
  br label %for.body.i1080

for.body.i1080:                                   ; preds = %for.body.i1080.preheader1897, %for.body.i1080
  %indvars.iv.i1071 = phi i64 [ %indvars.iv.next.i1077, %for.body.i1080 ], [ %indvars.iv.i1071.ph, %for.body.i1080.preheader1897 ]
  %arrayidx.i1072 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 %indvars.iv.i1071
  %638 = load double, double* %arrayidx.i1072, align 8, !tbaa !34
  %arrayidx2.i1073 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %indvars.iv.i1071
  %639 = load double, double* %arrayidx2.i1073, align 8, !tbaa !34
  %mul3.i1074 = fmul double %mul505, %639
  %add.i1075 = fadd double %638, %mul3.i1074
  store double %add.i1075, double* %arrayidx.i1072, align 8, !tbaa !34
  %indvars.iv.next.i1077 = add nuw nsw i64 %indvars.iv.i1071, 1
  %lftr.wideiv1563 = trunc i64 %indvars.iv.next.i1077 to i32
  %exitcond1564 = icmp eq i32 %lftr.wideiv1563, %223
  br i1 %exitcond1564, label %for.body.i1068.preheader, label %for.body.i1080, !llvm.loop !168

for.body.i1068.preheader:                         ; preds = %for.body.i1080
  br i1 %min.iters.check1701, label %for.body.i1068.preheader1896, label %min.iters.checked1702

min.iters.checked1702:                            ; preds = %for.body.i1068.preheader
  br i1 %cmp.zero1705, label %for.body.i1068.preheader1896, label %vector.ph1706

vector.ph1706:                                    ; preds = %min.iters.checked1702
  %broadcast.splatinsert1719 = insertelement <2 x double> undef, double %sub504, i32 0
  %broadcast.splat1720 = shufflevector <2 x double> %broadcast.splatinsert1719, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %lcmp.mod1963, label %vector.body1698.prol, label %vector.ph1706.split

vector.body1698.prol:                             ; preds = %vector.ph1706
  %wide.load1715.prol = load <2 x double>, <2 x double>* %49, align 16, !tbaa !34
  %wide.load1716.prol = load <2 x double>, <2 x double>* %51, align 16, !tbaa !34
  %wide.load1717.prol = load <2 x double>, <2 x double>* %52, align 16, !tbaa !34
  %wide.load1718.prol = load <2 x double>, <2 x double>* %54, align 16, !tbaa !34
  %640 = fmul <2 x double> %wide.load1717.prol, %broadcast.splat1720
  %641 = fmul <2 x double> %wide.load1718.prol, %broadcast.splat1720
  %642 = fadd <2 x double> %wide.load1715.prol, %640
  %643 = fadd <2 x double> %wide.load1716.prol, %641
  store <2 x double> %642, <2 x double>* %55, align 16, !tbaa !34
  store <2 x double> %643, <2 x double>* %56, align 16, !tbaa !34
  br label %vector.ph1706.split

vector.ph1706.split:                              ; preds = %vector.body1698.prol, %vector.ph1706
  %index1707.unr = phi i64 [ 0, %vector.ph1706 ], [ 4, %vector.body1698.prol ]
  br i1 %309, label %for.body.i1068.preheader1896.loopexit, label %vector.ph1706.split.split

vector.ph1706.split.split:                        ; preds = %vector.ph1706.split
  br label %vector.body1698

vector.body1698:                                  ; preds = %vector.body1698, %vector.ph1706.split.split
  %index1707 = phi i64 [ %index1707.unr, %vector.ph1706.split.split ], [ %index.next1708.1, %vector.body1698 ]
  %644 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %index1707
  %645 = bitcast double* %644 to <2 x double>*
  %wide.load1715 = load <2 x double>, <2 x double>* %645, align 16, !tbaa !34
  %646 = getelementptr double, double* %644, i64 2
  %647 = bitcast double* %646 to <2 x double>*
  %wide.load1716 = load <2 x double>, <2 x double>* %647, align 16, !tbaa !34
  %648 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 %index1707
  %649 = bitcast double* %648 to <2 x double>*
  %wide.load1717 = load <2 x double>, <2 x double>* %649, align 16, !tbaa !34
  %650 = getelementptr double, double* %648, i64 2
  %651 = bitcast double* %650 to <2 x double>*
  %wide.load1718 = load <2 x double>, <2 x double>* %651, align 16, !tbaa !34
  %652 = fmul <2 x double> %wide.load1717, %broadcast.splat1720
  %653 = fmul <2 x double> %wide.load1718, %broadcast.splat1720
  %654 = fadd <2 x double> %wide.load1715, %652
  %655 = fadd <2 x double> %wide.load1716, %653
  %656 = bitcast double* %644 to <2 x double>*
  store <2 x double> %654, <2 x double>* %656, align 16, !tbaa !34
  %657 = bitcast double* %646 to <2 x double>*
  store <2 x double> %655, <2 x double>* %657, align 16, !tbaa !34
  %index.next1708 = add i64 %index1707, 4
  %658 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %index.next1708
  %659 = bitcast double* %658 to <2 x double>*
  %wide.load1715.1 = load <2 x double>, <2 x double>* %659, align 16, !tbaa !34
  %660 = getelementptr double, double* %658, i64 2
  %661 = bitcast double* %660 to <2 x double>*
  %wide.load1716.1 = load <2 x double>, <2 x double>* %661, align 16, !tbaa !34
  %662 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 %index.next1708
  %663 = bitcast double* %662 to <2 x double>*
  %wide.load1717.1 = load <2 x double>, <2 x double>* %663, align 16, !tbaa !34
  %664 = getelementptr double, double* %662, i64 2
  %665 = bitcast double* %664 to <2 x double>*
  %wide.load1718.1 = load <2 x double>, <2 x double>* %665, align 16, !tbaa !34
  %666 = fmul <2 x double> %wide.load1717.1, %broadcast.splat1720
  %667 = fmul <2 x double> %wide.load1718.1, %broadcast.splat1720
  %668 = fadd <2 x double> %wide.load1715.1, %666
  %669 = fadd <2 x double> %wide.load1716.1, %667
  %670 = bitcast double* %658 to <2 x double>*
  store <2 x double> %668, <2 x double>* %670, align 16, !tbaa !34
  %671 = bitcast double* %660 to <2 x double>*
  store <2 x double> %669, <2 x double>* %671, align 16, !tbaa !34
  %index.next1708.1 = add i64 %index1707, 8
  %672 = icmp eq i64 %index.next1708.1, %n.vec1704
  br i1 %672, label %for.body.i1068.preheader1896.loopexit.unr-lcssa, label %vector.body1698, !llvm.loop !169

for.body.i1068.preheader1896.loopexit.unr-lcssa:  ; preds = %vector.body1698
  br label %for.body.i1068.preheader1896.loopexit

for.body.i1068.preheader1896.loopexit:            ; preds = %vector.ph1706.split, %for.body.i1068.preheader1896.loopexit.unr-lcssa
  br label %for.body.i1068.preheader1896

for.body.i1068.preheader1896:                     ; preds = %for.body.i1068.preheader1896.loopexit, %min.iters.checked1702, %for.body.i1068.preheader
  %indvars.iv.i1059.ph = phi i64 [ 0, %min.iters.checked1702 ], [ 0, %for.body.i1068.preheader ], [ %n.vec1704, %for.body.i1068.preheader1896.loopexit ]
  br label %for.body.i1068

for.body.i1068:                                   ; preds = %for.body.i1068.preheader1896, %for.body.i1068
  %indvars.iv.i1059 = phi i64 [ %indvars.iv.next.i1065, %for.body.i1068 ], [ %indvars.iv.i1059.ph, %for.body.i1068.preheader1896 ]
  %arrayidx.i1060 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.i1059
  %673 = load double, double* %arrayidx.i1060, align 8, !tbaa !34
  %arrayidx2.i1061 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 %indvars.iv.i1059
  %674 = load double, double* %arrayidx2.i1061, align 8, !tbaa !34
  %mul3.i1062 = fmul double %674, %sub504
  %add.i1063 = fadd double %673, %mul3.i1062
  store double %add.i1063, double* %arrayidx.i1060, align 8, !tbaa !34
  %indvars.iv.next.i1065 = add nuw nsw i64 %indvars.iv.i1059, 1
  %lftr.wideiv1565 = trunc i64 %indvars.iv.next.i1065 to i32
  %exitcond1566 = icmp eq i32 %lftr.wideiv1565, %223
  br i1 %exitcond1566, label %for.body.i1056.preheader, label %for.body.i1068, !llvm.loop !170

for.body.i1056.preheader:                         ; preds = %for.body.i1068
  br i1 %min.iters.check1676, label %for.body.i1056.preheader1895, label %min.iters.checked1677

min.iters.checked1677:                            ; preds = %for.body.i1056.preheader
  br i1 %cmp.zero1680, label %for.body.i1056.preheader1895, label %vector.ph1681

vector.ph1681:                                    ; preds = %min.iters.checked1677
  %broadcast.splatinsert1694 = insertelement <2 x double> undef, double %sub360, i32 0
  %broadcast.splat1695 = shufflevector <2 x double> %broadcast.splatinsert1694, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %lcmp.mod1965, label %vector.body1673.prol, label %vector.ph1681.split

vector.body1673.prol:                             ; preds = %vector.ph1681
  %wide.load1690.prol = load <2 x double>, <2 x double>* %41, align 16, !tbaa !34
  %wide.load1691.prol = load <2 x double>, <2 x double>* %43, align 16, !tbaa !34
  %wide.load1692.prol = load <2 x double>, <2 x double>* %44, align 16, !tbaa !34
  %wide.load1693.prol = load <2 x double>, <2 x double>* %46, align 16, !tbaa !34
  %675 = fmul <2 x double> %wide.load1692.prol, %broadcast.splat1695
  %676 = fmul <2 x double> %wide.load1693.prol, %broadcast.splat1695
  %677 = fadd <2 x double> %wide.load1690.prol, %675
  %678 = fadd <2 x double> %wide.load1691.prol, %676
  store <2 x double> %677, <2 x double>* %47, align 16, !tbaa !34
  store <2 x double> %678, <2 x double>* %48, align 16, !tbaa !34
  br label %vector.ph1681.split

vector.ph1681.split:                              ; preds = %vector.body1673.prol, %vector.ph1681
  %index1682.unr = phi i64 [ 0, %vector.ph1681 ], [ 4, %vector.body1673.prol ]
  br i1 %307, label %for.body.i1056.preheader1895.loopexit, label %vector.ph1681.split.split

vector.ph1681.split.split:                        ; preds = %vector.ph1681.split
  br label %vector.body1673

vector.body1673:                                  ; preds = %vector.body1673, %vector.ph1681.split.split
  %index1682 = phi i64 [ %index1682.unr, %vector.ph1681.split.split ], [ %index.next1683.1, %vector.body1673 ]
  %679 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %index1682
  %680 = bitcast double* %679 to <2 x double>*
  %wide.load1690 = load <2 x double>, <2 x double>* %680, align 16, !tbaa !34
  %681 = getelementptr double, double* %679, i64 2
  %682 = bitcast double* %681 to <2 x double>*
  %wide.load1691 = load <2 x double>, <2 x double>* %682, align 16, !tbaa !34
  %683 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %index1682
  %684 = bitcast double* %683 to <2 x double>*
  %wide.load1692 = load <2 x double>, <2 x double>* %684, align 16, !tbaa !34
  %685 = getelementptr double, double* %683, i64 2
  %686 = bitcast double* %685 to <2 x double>*
  %wide.load1693 = load <2 x double>, <2 x double>* %686, align 16, !tbaa !34
  %687 = fmul <2 x double> %wide.load1692, %broadcast.splat1695
  %688 = fmul <2 x double> %wide.load1693, %broadcast.splat1695
  %689 = fadd <2 x double> %wide.load1690, %687
  %690 = fadd <2 x double> %wide.load1691, %688
  %691 = bitcast double* %679 to <2 x double>*
  store <2 x double> %689, <2 x double>* %691, align 16, !tbaa !34
  %692 = bitcast double* %681 to <2 x double>*
  store <2 x double> %690, <2 x double>* %692, align 16, !tbaa !34
  %index.next1683 = add i64 %index1682, 4
  %693 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %index.next1683
  %694 = bitcast double* %693 to <2 x double>*
  %wide.load1690.1 = load <2 x double>, <2 x double>* %694, align 16, !tbaa !34
  %695 = getelementptr double, double* %693, i64 2
  %696 = bitcast double* %695 to <2 x double>*
  %wide.load1691.1 = load <2 x double>, <2 x double>* %696, align 16, !tbaa !34
  %697 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %index.next1683
  %698 = bitcast double* %697 to <2 x double>*
  %wide.load1692.1 = load <2 x double>, <2 x double>* %698, align 16, !tbaa !34
  %699 = getelementptr double, double* %697, i64 2
  %700 = bitcast double* %699 to <2 x double>*
  %wide.load1693.1 = load <2 x double>, <2 x double>* %700, align 16, !tbaa !34
  %701 = fmul <2 x double> %wide.load1692.1, %broadcast.splat1695
  %702 = fmul <2 x double> %wide.load1693.1, %broadcast.splat1695
  %703 = fadd <2 x double> %wide.load1690.1, %701
  %704 = fadd <2 x double> %wide.load1691.1, %702
  %705 = bitcast double* %693 to <2 x double>*
  store <2 x double> %703, <2 x double>* %705, align 16, !tbaa !34
  %706 = bitcast double* %695 to <2 x double>*
  store <2 x double> %704, <2 x double>* %706, align 16, !tbaa !34
  %index.next1683.1 = add i64 %index1682, 8
  %707 = icmp eq i64 %index.next1683.1, %n.vec1679
  br i1 %707, label %for.body.i1056.preheader1895.loopexit.unr-lcssa, label %vector.body1673, !llvm.loop !171

for.body.i1056.preheader1895.loopexit.unr-lcssa:  ; preds = %vector.body1673
  br label %for.body.i1056.preheader1895.loopexit

for.body.i1056.preheader1895.loopexit:            ; preds = %vector.ph1681.split, %for.body.i1056.preheader1895.loopexit.unr-lcssa
  br label %for.body.i1056.preheader1895

for.body.i1056.preheader1895:                     ; preds = %for.body.i1056.preheader1895.loopexit, %min.iters.checked1677, %for.body.i1056.preheader
  %indvars.iv.i1047.ph = phi i64 [ 0, %min.iters.checked1677 ], [ 0, %for.body.i1056.preheader ], [ %n.vec1679, %for.body.i1056.preheader1895.loopexit ]
  br label %for.body.i1056

for.body.i1056:                                   ; preds = %for.body.i1056.preheader1895, %for.body.i1056
  %indvars.iv.i1047 = phi i64 [ %indvars.iv.next.i1053, %for.body.i1056 ], [ %indvars.iv.i1047.ph, %for.body.i1056.preheader1895 ]
  %arrayidx.i1048 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.i1047
  %708 = load double, double* %arrayidx.i1048, align 8, !tbaa !34
  %arrayidx2.i1049 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %indvars.iv.i1047
  %709 = load double, double* %arrayidx2.i1049, align 8, !tbaa !34
  %mul3.i1050 = fmul double %709, %sub360
  %add.i1051 = fadd double %708, %mul3.i1050
  store double %add.i1051, double* %arrayidx.i1048, align 8, !tbaa !34
  %indvars.iv.next.i1053 = add nuw nsw i64 %indvars.iv.i1047, 1
  %lftr.wideiv1567 = trunc i64 %indvars.iv.next.i1053 to i32
  %exitcond1568 = icmp eq i32 %lftr.wideiv1567, %223
  br i1 %exitcond1568, label %for.body.i1044.preheader, label %for.body.i1056, !llvm.loop !172

for.body.i1044.preheader:                         ; preds = %for.body.i1056
  %mul523 = fmul double %div, %div482
  br i1 %min.iters.check1651, label %for.body.i1044.preheader1894, label %min.iters.checked1652

min.iters.checked1652:                            ; preds = %for.body.i1044.preheader
  br i1 %cmp.zero1655, label %for.body.i1044.preheader1894, label %vector.ph1656

vector.ph1656:                                    ; preds = %min.iters.checked1652
  %broadcast.splatinsert1669 = insertelement <2 x double> undef, double %mul523, i32 0
  %broadcast.splat1670 = shufflevector <2 x double> %broadcast.splatinsert1669, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %lcmp.mod1967, label %vector.body1648.prol, label %vector.ph1656.split

vector.body1648.prol:                             ; preds = %vector.ph1656
  %wide.load1665.prol = load <2 x double>, <2 x double>* %33, align 16, !tbaa !34
  %wide.load1666.prol = load <2 x double>, <2 x double>* %35, align 16, !tbaa !34
  %wide.load1667.prol = load <2 x double>, <2 x double>* %36, align 16, !tbaa !34
  %wide.load1668.prol = load <2 x double>, <2 x double>* %38, align 16, !tbaa !34
  %710 = fmul <2 x double> %broadcast.splat1670, %wide.load1667.prol
  %711 = fmul <2 x double> %broadcast.splat1670, %wide.load1668.prol
  %712 = fadd <2 x double> %wide.load1665.prol, %710
  %713 = fadd <2 x double> %wide.load1666.prol, %711
  store <2 x double> %712, <2 x double>* %39, align 16, !tbaa !34
  store <2 x double> %713, <2 x double>* %40, align 16, !tbaa !34
  br label %vector.ph1656.split

vector.ph1656.split:                              ; preds = %vector.body1648.prol, %vector.ph1656
  %index1657.unr = phi i64 [ 0, %vector.ph1656 ], [ 4, %vector.body1648.prol ]
  br i1 %305, label %for.body.i1044.preheader1894.loopexit, label %vector.ph1656.split.split

vector.ph1656.split.split:                        ; preds = %vector.ph1656.split
  br label %vector.body1648

vector.body1648:                                  ; preds = %vector.body1648, %vector.ph1656.split.split
  %index1657 = phi i64 [ %index1657.unr, %vector.ph1656.split.split ], [ %index.next1658.1, %vector.body1648 ]
  %714 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %index1657
  %715 = bitcast double* %714 to <2 x double>*
  %wide.load1665 = load <2 x double>, <2 x double>* %715, align 16, !tbaa !34
  %716 = getelementptr double, double* %714, i64 2
  %717 = bitcast double* %716 to <2 x double>*
  %wide.load1666 = load <2 x double>, <2 x double>* %717, align 16, !tbaa !34
  %718 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 %index1657
  %719 = bitcast double* %718 to <2 x double>*
  %wide.load1667 = load <2 x double>, <2 x double>* %719, align 16, !tbaa !34
  %720 = getelementptr double, double* %718, i64 2
  %721 = bitcast double* %720 to <2 x double>*
  %wide.load1668 = load <2 x double>, <2 x double>* %721, align 16, !tbaa !34
  %722 = fmul <2 x double> %broadcast.splat1670, %wide.load1667
  %723 = fmul <2 x double> %broadcast.splat1670, %wide.load1668
  %724 = fadd <2 x double> %wide.load1665, %722
  %725 = fadd <2 x double> %wide.load1666, %723
  %726 = bitcast double* %714 to <2 x double>*
  store <2 x double> %724, <2 x double>* %726, align 16, !tbaa !34
  %727 = bitcast double* %716 to <2 x double>*
  store <2 x double> %725, <2 x double>* %727, align 16, !tbaa !34
  %index.next1658 = add i64 %index1657, 4
  %728 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %index.next1658
  %729 = bitcast double* %728 to <2 x double>*
  %wide.load1665.1 = load <2 x double>, <2 x double>* %729, align 16, !tbaa !34
  %730 = getelementptr double, double* %728, i64 2
  %731 = bitcast double* %730 to <2 x double>*
  %wide.load1666.1 = load <2 x double>, <2 x double>* %731, align 16, !tbaa !34
  %732 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 %index.next1658
  %733 = bitcast double* %732 to <2 x double>*
  %wide.load1667.1 = load <2 x double>, <2 x double>* %733, align 16, !tbaa !34
  %734 = getelementptr double, double* %732, i64 2
  %735 = bitcast double* %734 to <2 x double>*
  %wide.load1668.1 = load <2 x double>, <2 x double>* %735, align 16, !tbaa !34
  %736 = fmul <2 x double> %broadcast.splat1670, %wide.load1667.1
  %737 = fmul <2 x double> %broadcast.splat1670, %wide.load1668.1
  %738 = fadd <2 x double> %wide.load1665.1, %736
  %739 = fadd <2 x double> %wide.load1666.1, %737
  %740 = bitcast double* %728 to <2 x double>*
  store <2 x double> %738, <2 x double>* %740, align 16, !tbaa !34
  %741 = bitcast double* %730 to <2 x double>*
  store <2 x double> %739, <2 x double>* %741, align 16, !tbaa !34
  %index.next1658.1 = add i64 %index1657, 8
  %742 = icmp eq i64 %index.next1658.1, %n.vec1654
  br i1 %742, label %for.body.i1044.preheader1894.loopexit.unr-lcssa, label %vector.body1648, !llvm.loop !173

for.body.i1044.preheader1894.loopexit.unr-lcssa:  ; preds = %vector.body1648
  br label %for.body.i1044.preheader1894.loopexit

for.body.i1044.preheader1894.loopexit:            ; preds = %vector.ph1656.split, %for.body.i1044.preheader1894.loopexit.unr-lcssa
  br label %for.body.i1044.preheader1894

for.body.i1044.preheader1894:                     ; preds = %for.body.i1044.preheader1894.loopexit, %min.iters.checked1652, %for.body.i1044.preheader
  %indvars.iv.i1035.ph = phi i64 [ 0, %min.iters.checked1652 ], [ 0, %for.body.i1044.preheader ], [ %n.vec1654, %for.body.i1044.preheader1894.loopexit ]
  br label %for.body.i1044

for.body.i1044:                                   ; preds = %for.body.i1044.preheader1894, %for.body.i1044
  %indvars.iv.i1035 = phi i64 [ %indvars.iv.next.i1041, %for.body.i1044 ], [ %indvars.iv.i1035.ph, %for.body.i1044.preheader1894 ]
  %arrayidx.i1036 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.i1035
  %743 = load double, double* %arrayidx.i1036, align 8, !tbaa !34
  %arrayidx2.i1037 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 %indvars.iv.i1035
  %744 = load double, double* %arrayidx2.i1037, align 8, !tbaa !34
  %mul3.i1038 = fmul double %mul523, %744
  %add.i1039 = fadd double %743, %mul3.i1038
  store double %add.i1039, double* %arrayidx.i1036, align 8, !tbaa !34
  %indvars.iv.next.i1041 = add nuw nsw i64 %indvars.iv.i1035, 1
  %lftr.wideiv1569 = trunc i64 %indvars.iv.next.i1041 to i32
  %exitcond1570 = icmp eq i32 %lftr.wideiv1569, %223
  br i1 %exitcond1570, label %for.body541.lr.ph.us.preheader, label %for.body.i1044, !llvm.loop !174

for.body541.lr.ph.us.preheader:                   ; preds = %for.body.i1044
  br label %for.body541.lr.ph.us

for.body541.us:                                   ; preds = %for.body541.us, %for.body541.lr.ph.us.split.split
  %indvars.iv1571 = phi i64 [ %indvars.iv1571.unr, %for.body541.lr.ph.us.split.split ], [ %indvars.iv.next1572.3, %for.body541.us ]
  %sum529.01395.us = phi double [ %sum529.01395.us.unr, %for.body541.lr.ph.us.split.split ], [ %add549.us.3, %for.body541.us ]
  %arrayidx545.us = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1575, i64 %indvars.iv1571
  %745 = load double, double* %arrayidx545.us, align 8, !tbaa !34
  %arrayidx547.us = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv1571
  %746 = load double, double* %arrayidx547.us, align 8, !tbaa !34
  %mul548.us = fmul double %745, %746
  %add549.us = fadd double %sum529.01395.us, %mul548.us
  %indvars.iv.next1572 = add nuw nsw i64 %indvars.iv1571, 1
  %arrayidx545.us.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1575, i64 %indvars.iv.next1572
  %747 = load double, double* %arrayidx545.us.1, align 8, !tbaa !34
  %arrayidx547.us.1 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.next1572
  %748 = load double, double* %arrayidx547.us.1, align 8, !tbaa !34
  %mul548.us.1 = fmul double %747, %748
  %add549.us.1 = fadd double %add549.us, %mul548.us.1
  %indvars.iv.next1572.1 = add nsw i64 %indvars.iv1571, 2
  %arrayidx545.us.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1575, i64 %indvars.iv.next1572.1
  %749 = load double, double* %arrayidx545.us.2, align 8, !tbaa !34
  %arrayidx547.us.2 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.next1572.1
  %750 = load double, double* %arrayidx547.us.2, align 8, !tbaa !34
  %mul548.us.2 = fmul double %749, %750
  %add549.us.2 = fadd double %add549.us.1, %mul548.us.2
  %indvars.iv.next1572.2 = add nsw i64 %indvars.iv1571, 3
  %arrayidx545.us.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1575, i64 %indvars.iv.next1572.2
  %751 = load double, double* %arrayidx545.us.3, align 8, !tbaa !34
  %arrayidx547.us.3 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.next1572.2
  %752 = load double, double* %arrayidx547.us.3, align 8, !tbaa !34
  %mul548.us.3 = fmul double %751, %752
  %add549.us.3 = fadd double %add549.us.2, %mul548.us.3
  %indvars.iv.next1572.3 = add nsw i64 %indvars.iv1571, 4
  %lftr.wideiv1573.3 = trunc i64 %indvars.iv.next1572.3 to i32
  %exitcond1574.3 = icmp eq i32 %lftr.wideiv1573.3, %223
  br i1 %exitcond1574.3, label %for.cond536.for.end552_crit_edge.us.unr-lcssa, label %for.body541.us

for.body541.lr.ph.us:                             ; preds = %for.body541.lr.ph.us.preheader, %for.cond536.for.end552_crit_edge.us
  %indvars.iv1575 = phi i64 [ %indvars.iv.next1576, %for.cond536.for.end552_crit_edge.us ], [ 0, %for.body541.lr.ph.us.preheader ]
  br i1 true, label %for.body541.us.prol.preheader, label %for.body541.lr.ph.us.split

for.body541.us.prol.preheader:                    ; preds = %for.body541.lr.ph.us
  br label %for.body541.us.prol

for.body541.us.prol:                              ; preds = %for.body541.us.prol, %for.body541.us.prol.preheader
  %indvars.iv1571.prol = phi i64 [ %indvars.iv.next1572.prol, %for.body541.us.prol ], [ 0, %for.body541.us.prol.preheader ]
  %sum529.01395.us.prol = phi double [ %add549.us.prol, %for.body541.us.prol ], [ 0.000000e+00, %for.body541.us.prol.preheader ]
  %prol.iter1970 = phi i32 [ %prol.iter1970.sub, %for.body541.us.prol ], [ 1, %for.body541.us.prol.preheader ]
  %arrayidx545.us.prol = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1575, i64 %indvars.iv1571.prol
  %753 = load double, double* %arrayidx545.us.prol, align 8, !tbaa !34
  %arrayidx547.us.prol = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv1571.prol
  %754 = load double, double* %arrayidx547.us.prol, align 8, !tbaa !34
  %mul548.us.prol = fmul double %753, %754
  %add549.us.prol = fadd double %sum529.01395.us.prol, %mul548.us.prol
  %indvars.iv.next1572.prol = add nuw nsw i64 %indvars.iv1571.prol, 1
  %prol.iter1970.sub = add i32 %prol.iter1970, -1
  %prol.iter1970.cmp = icmp eq i32 %prol.iter1970.sub, 0
  br i1 %prol.iter1970.cmp, label %for.body541.lr.ph.us.split.loopexit, label %for.body541.us.prol, !llvm.loop !175

for.body541.lr.ph.us.split.loopexit:              ; preds = %for.body541.us.prol
  %indvars.iv.next1572.prol.lcssa = phi i64 [ %indvars.iv.next1572.prol, %for.body541.us.prol ]
  %add549.us.prol.lcssa = phi double [ %add549.us.prol, %for.body541.us.prol ]
  br label %for.body541.lr.ph.us.split

for.body541.lr.ph.us.split:                       ; preds = %for.body541.lr.ph.us.split.loopexit, %for.body541.lr.ph.us
  %add549.us.lcssa.unr = phi double [ undef, %for.body541.lr.ph.us ], [ %add549.us.prol.lcssa, %for.body541.lr.ph.us.split.loopexit ]
  %indvars.iv1571.unr = phi i64 [ 0, %for.body541.lr.ph.us ], [ %indvars.iv.next1572.prol.lcssa, %for.body541.lr.ph.us.split.loopexit ]
  %sum529.01395.us.unr = phi double [ 0.000000e+00, %for.body541.lr.ph.us ], [ %add549.us.prol.lcssa, %for.body541.lr.ph.us.split.loopexit ]
  br i1 %297, label %for.cond536.for.end552_crit_edge.us, label %for.body541.lr.ph.us.split.split

for.body541.lr.ph.us.split.split:                 ; preds = %for.body541.lr.ph.us.split
  br label %for.body541.us

for.cond536.for.end552_crit_edge.us.unr-lcssa:    ; preds = %for.body541.us
  %add549.us.3.lcssa = phi double [ %add549.us.3, %for.body541.us ]
  br label %for.cond536.for.end552_crit_edge.us

for.cond536.for.end552_crit_edge.us:              ; preds = %for.body541.lr.ph.us.split, %for.cond536.for.end552_crit_edge.us.unr-lcssa
  %add549.us.lcssa = phi double [ %add549.us.lcssa.unr, %for.body541.lr.ph.us.split ], [ %add549.us.3.lcssa, %for.cond536.for.end552_crit_edge.us.unr-lcssa ]
  %arrayidx555.us = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv1575
  %755 = load double, double* %arrayidx555.us, align 8, !tbaa !34
  %mul556.us = fmul double %755, 0.000000e+00
  %add557.us = fadd double %add549.us.lcssa, %mul556.us
  store double %add557.us, double* %arrayidx555.us, align 8, !tbaa !34
  %indvars.iv.next1576 = add nuw nsw i64 %indvars.iv1575, 1
  %lftr.wideiv1577 = trunc i64 %indvars.iv.next1576 to i32
  %exitcond1578 = icmp eq i32 %lftr.wideiv1577, %223
  br i1 %exitcond1578, label %for.body.i1031.preheader, label %for.body541.lr.ph.us

for.body.i1031.preheader:                         ; preds = %for.cond536.for.end552_crit_edge.us
  br i1 true, label %for.body.i1031.prol.preheader, label %for.body.i1031.preheader.split

for.body.i1031.prol.preheader:                    ; preds = %for.body.i1031.preheader
  br label %for.body.i1031.prol

for.body.i1031.prol:                              ; preds = %for.body.i1031.prol, %for.body.i1031.prol.preheader
  %indvars.iv.i1022.prol = phi i64 [ %indvars.iv.next.i1028.prol, %for.body.i1031.prol ], [ 0, %for.body.i1031.prol.preheader ]
  %sum.011.i1023.prol = phi double [ %add.i1027.prol, %for.body.i1031.prol ], [ 0.000000e+00, %for.body.i1031.prol.preheader ]
  %prol.iter1973 = phi i32 [ %prol.iter1973.sub, %for.body.i1031.prol ], [ 1, %for.body.i1031.prol.preheader ]
  %arrayidx.i1024.prol = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.i1022.prol
  %756 = load double, double* %arrayidx.i1024.prol, align 8, !tbaa !34
  %arrayidx2.i1025.prol = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.i1022.prol
  %757 = load double, double* %arrayidx2.i1025.prol, align 8, !tbaa !34
  %mul.i1026.prol = fmul double %756, %757
  %add.i1027.prol = fadd double %sum.011.i1023.prol, %mul.i1026.prol
  %indvars.iv.next.i1028.prol = add nuw nsw i64 %indvars.iv.i1022.prol, 1
  %prol.iter1973.sub = add i32 %prol.iter1973, -1
  %prol.iter1973.cmp = icmp eq i32 %prol.iter1973.sub, 0
  br i1 %prol.iter1973.cmp, label %for.body.i1031.preheader.split.loopexit, label %for.body.i1031.prol, !llvm.loop !176

for.body.i1031.preheader.split.loopexit:          ; preds = %for.body.i1031.prol
  %indvars.iv.next.i1028.prol.lcssa = phi i64 [ %indvars.iv.next.i1028.prol, %for.body.i1031.prol ]
  %add.i1027.prol.lcssa = phi double [ %add.i1027.prol, %for.body.i1031.prol ]
  br label %for.body.i1031.preheader.split

for.body.i1031.preheader.split:                   ; preds = %for.body.i1031.preheader.split.loopexit, %for.body.i1031.preheader
  %add.i1027.lcssa.unr = phi double [ undef, %for.body.i1031.preheader ], [ %add.i1027.prol.lcssa, %for.body.i1031.preheader.split.loopexit ]
  %indvars.iv.i1022.unr = phi i64 [ 0, %for.body.i1031.preheader ], [ %indvars.iv.next.i1028.prol.lcssa, %for.body.i1031.preheader.split.loopexit ]
  %sum.011.i1023.unr = phi double [ 0.000000e+00, %for.body.i1031.preheader ], [ %add.i1027.prol.lcssa, %for.body.i1031.preheader.split.loopexit ]
  br i1 %298, label %__dot.exit1033, label %for.body.i1031.preheader.split.split

for.body.i1031.preheader.split.split:             ; preds = %for.body.i1031.preheader.split
  br label %for.body.i1031

for.body.i1031:                                   ; preds = %for.body.i1031, %for.body.i1031.preheader.split.split
  %indvars.iv.i1022 = phi i64 [ %indvars.iv.i1022.unr, %for.body.i1031.preheader.split.split ], [ %indvars.iv.next.i1028.3, %for.body.i1031 ]
  %sum.011.i1023 = phi double [ %sum.011.i1023.unr, %for.body.i1031.preheader.split.split ], [ %add.i1027.3, %for.body.i1031 ]
  %arrayidx.i1024 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.i1022
  %758 = load double, double* %arrayidx.i1024, align 8, !tbaa !34
  %arrayidx2.i1025 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.i1022
  %759 = load double, double* %arrayidx2.i1025, align 8, !tbaa !34
  %mul.i1026 = fmul double %758, %759
  %add.i1027 = fadd double %sum.011.i1023, %mul.i1026
  %indvars.iv.next.i1028 = add nuw nsw i64 %indvars.iv.i1022, 1
  %arrayidx.i1024.1 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.next.i1028
  %760 = load double, double* %arrayidx.i1024.1, align 8, !tbaa !34
  %arrayidx2.i1025.1 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next.i1028
  %761 = load double, double* %arrayidx2.i1025.1, align 8, !tbaa !34
  %mul.i1026.1 = fmul double %760, %761
  %add.i1027.1 = fadd double %add.i1027, %mul.i1026.1
  %indvars.iv.next.i1028.1 = add nsw i64 %indvars.iv.i1022, 2
  %arrayidx.i1024.2 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.next.i1028.1
  %762 = load double, double* %arrayidx.i1024.2, align 8, !tbaa !34
  %arrayidx2.i1025.2 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next.i1028.1
  %763 = load double, double* %arrayidx2.i1025.2, align 8, !tbaa !34
  %mul.i1026.2 = fmul double %762, %763
  %add.i1027.2 = fadd double %add.i1027.1, %mul.i1026.2
  %indvars.iv.next.i1028.2 = add nsw i64 %indvars.iv.i1022, 3
  %arrayidx.i1024.3 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.next.i1028.2
  %764 = load double, double* %arrayidx.i1024.3, align 8, !tbaa !34
  %arrayidx2.i1025.3 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv.next.i1028.2
  %765 = load double, double* %arrayidx2.i1025.3, align 8, !tbaa !34
  %mul.i1026.3 = fmul double %764, %765
  %add.i1027.3 = fadd double %add.i1027.2, %mul.i1026.3
  %indvars.iv.next.i1028.3 = add nsw i64 %indvars.iv.i1022, 4
  %lftr.wideiv1579.3 = trunc i64 %indvars.iv.next.i1028.3 to i32
  %exitcond1580.3 = icmp eq i32 %lftr.wideiv1579.3, %223
  br i1 %exitcond1580.3, label %__dot.exit1033.unr-lcssa, label %for.body.i1031

__dot.exit1033.unr-lcssa:                         ; preds = %for.body.i1031
  %add.i1027.3.lcssa = phi double [ %add.i1027.3, %for.body.i1031 ]
  br label %__dot.exit1033

__dot.exit1033:                                   ; preds = %for.body.i1031.preheader.split, %__dot.exit1033.unr-lcssa
  %add.i1027.lcssa = phi double [ %add.i1027.lcssa.unr, %for.body.i1031.preheader.split ], [ %add.i1027.3.lcssa, %__dot.exit1033.unr-lcssa ]
  %cmp568 = fcmp ogt double %add.i1027.lcssa, 0.000000e+00
  br i1 %cmp568, label %if.then570, label %if.end572

if.then570:                                       ; preds = %__dot.exit1033
  %call571 = call double @sqrt(double %add.i1027.lcssa) #1
  br label %if.end572

if.end572:                                        ; preds = %if.then570, %__dot.exit1033
  %L2_norm_of_residual.0 = phi double [ %call571, %if.then570 ], [ 0.000000e+00, %__dot.exit1033 ]
  %cmp574 = fcmp olt double %L2_norm_of_residual.0, %mul473
  br i1 %cmp574, label %for.end640.loopexit, label %for.body.i1020.preheader

for.body.i1020.preheader:                         ; preds = %if.end572
  br i1 true, label %for.body.i1020.prol.preheader, label %for.body.i1020.preheader.split

for.body.i1020.prol.preheader:                    ; preds = %for.body.i1020.preheader
  br label %for.body.i1020.prol

for.body.i1020.prol:                              ; preds = %for.body.i1020.prol, %for.body.i1020.prol.preheader
  %indvars.iv.i1013.prol = phi i64 [ %indvars.iv.next.i1017.prol, %for.body.i1020.prol ], [ 0, %for.body.i1020.prol.preheader ]
  %sum.011.i.prol = phi double [ %add.i1016.prol, %for.body.i1020.prol ], [ 0.000000e+00, %for.body.i1020.prol.preheader ]
  %prol.iter1976 = phi i32 [ %prol.iter1976.sub, %for.body.i1020.prol ], [ 1, %for.body.i1020.prol.preheader ]
  %arrayidx.i1014.prol = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 %indvars.iv.i1013.prol
  %766 = load double, double* %arrayidx.i1014.prol, align 8, !tbaa !34
  %arrayidx2.i1015.prol = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.i1013.prol
  %767 = load double, double* %arrayidx2.i1015.prol, align 8, !tbaa !34
  %mul.i.prol = fmul double %766, %767
  %add.i1016.prol = fadd double %sum.011.i.prol, %mul.i.prol
  %indvars.iv.next.i1017.prol = add nuw nsw i64 %indvars.iv.i1013.prol, 1
  %prol.iter1976.sub = add i32 %prol.iter1976, -1
  %prol.iter1976.cmp = icmp eq i32 %prol.iter1976.sub, 0
  br i1 %prol.iter1976.cmp, label %for.body.i1020.preheader.split.loopexit, label %for.body.i1020.prol, !llvm.loop !177

for.body.i1020.preheader.split.loopexit:          ; preds = %for.body.i1020.prol
  %indvars.iv.next.i1017.prol.lcssa = phi i64 [ %indvars.iv.next.i1017.prol, %for.body.i1020.prol ]
  %add.i1016.prol.lcssa = phi double [ %add.i1016.prol, %for.body.i1020.prol ]
  br label %for.body.i1020.preheader.split

for.body.i1020.preheader.split:                   ; preds = %for.body.i1020.preheader.split.loopexit, %for.body.i1020.preheader
  %add.i1016.lcssa.unr = phi double [ undef, %for.body.i1020.preheader ], [ %add.i1016.prol.lcssa, %for.body.i1020.preheader.split.loopexit ]
  %indvars.iv.i1013.unr = phi i64 [ 0, %for.body.i1020.preheader ], [ %indvars.iv.next.i1017.prol.lcssa, %for.body.i1020.preheader.split.loopexit ]
  %sum.011.i.unr = phi double [ 0.000000e+00, %for.body.i1020.preheader ], [ %add.i1016.prol.lcssa, %for.body.i1020.preheader.split.loopexit ]
  br i1 %299, label %__dot.exit, label %for.body.i1020.preheader.split.split

for.body.i1020.preheader.split.split:             ; preds = %for.body.i1020.preheader.split
  br label %for.body.i1020

for.body.i1020:                                   ; preds = %for.body.i1020, %for.body.i1020.preheader.split.split
  %indvars.iv.i1013 = phi i64 [ %indvars.iv.i1013.unr, %for.body.i1020.preheader.split.split ], [ %indvars.iv.next.i1017.3, %for.body.i1020 ]
  %sum.011.i = phi double [ %sum.011.i.unr, %for.body.i1020.preheader.split.split ], [ %add.i1016.3, %for.body.i1020 ]
  %arrayidx.i1014 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 %indvars.iv.i1013
  %768 = load double, double* %arrayidx.i1014, align 8, !tbaa !34
  %arrayidx2.i1015 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.i1013
  %769 = load double, double* %arrayidx2.i1015, align 8, !tbaa !34
  %mul.i = fmul double %768, %769
  %add.i1016 = fadd double %sum.011.i, %mul.i
  %indvars.iv.next.i1017 = add nuw nsw i64 %indvars.iv.i1013, 1
  %arrayidx.i1014.1 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 %indvars.iv.next.i1017
  %770 = load double, double* %arrayidx.i1014.1, align 8, !tbaa !34
  %arrayidx2.i1015.1 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.next.i1017
  %771 = load double, double* %arrayidx2.i1015.1, align 8, !tbaa !34
  %mul.i.1 = fmul double %770, %771
  %add.i1016.1 = fadd double %add.i1016, %mul.i.1
  %indvars.iv.next.i1017.1 = add nsw i64 %indvars.iv.i1013, 2
  %arrayidx.i1014.2 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 %indvars.iv.next.i1017.1
  %772 = load double, double* %arrayidx.i1014.2, align 8, !tbaa !34
  %arrayidx2.i1015.2 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.next.i1017.1
  %773 = load double, double* %arrayidx2.i1015.2, align 8, !tbaa !34
  %mul.i.2 = fmul double %772, %773
  %add.i1016.2 = fadd double %add.i1016.1, %mul.i.2
  %indvars.iv.next.i1017.2 = add nsw i64 %indvars.iv.i1013, 3
  %arrayidx.i1014.3 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 %indvars.iv.next.i1017.2
  %774 = load double, double* %arrayidx.i1014.3, align 8, !tbaa !34
  %arrayidx2.i1015.3 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.next.i1017.2
  %775 = load double, double* %arrayidx2.i1015.3, align 8, !tbaa !34
  %mul.i.3 = fmul double %774, %775
  %add.i1016.3 = fadd double %add.i1016.2, %mul.i.3
  %indvars.iv.next.i1017.3 = add nsw i64 %indvars.iv.i1013, 4
  %lftr.wideiv1581.3 = trunc i64 %indvars.iv.next.i1017.3 to i32
  %exitcond1582.3 = icmp eq i32 %lftr.wideiv1581.3, %223
  br i1 %exitcond1582.3, label %__dot.exit.unr-lcssa, label %for.body.i1020

__dot.exit.unr-lcssa:                             ; preds = %for.body.i1020
  %add.i1016.3.lcssa = phi double [ %add.i1016.3, %for.body.i1020 ]
  br label %__dot.exit

__dot.exit:                                       ; preds = %for.body.i1020.preheader.split, %__dot.exit.unr-lcssa
  %add.i1016.lcssa = phi double [ %add.i1016.lcssa.unr, %for.body.i1020.preheader.split ], [ %add.i1016.3.lcssa, %__dot.exit.unr-lcssa ]
  %call589 = call i32 @__isinf(double %add.i1016.lcssa) #11
  %tobool590 = icmp ne i32 %call589, 0
  %cmp597 = fcmp oeq double %add.i1016.lcssa, 0.000000e+00
  %or.cond998 = or i1 %cmp597, %tobool590
  %cmp601 = fcmp oeq double %div482, 0.000000e+00
  %or.cond999 = or i1 %cmp601, %or.cond998
  br i1 %or.cond999, label %for.end640.loopexit, label %if.end604

if.end604:                                        ; preds = %__dot.exit
  %div605 = fdiv double %add.i1016.lcssa, %delta.11400
  %div606 = fdiv double %div, %div482
  %mul607 = fmul double %div606, %div605
  %call614 = call i32 @__isinf(double %mul607) #11
  %tobool615 = icmp ne i32 %call614, 0
  %cmp622 = fcmp oeq double %mul607, 0.000000e+00
  %or.cond1000 = or i1 %cmp622, %tobool615
  br i1 %or.cond1000, label %for.end640.loopexit, label %for.body.i1011.preheader

for.body.i1011.preheader:                         ; preds = %if.end604
  br i1 %min.iters.check1626, label %for.body.i1011.preheader1893, label %min.iters.checked1627

min.iters.checked1627:                            ; preds = %for.body.i1011.preheader
  br i1 %cmp.zero1630, label %for.body.i1011.preheader1893, label %vector.ph1631

vector.ph1631:                                    ; preds = %min.iters.checked1627
  %broadcast.splatinsert1644 = insertelement <2 x double> undef, double %mul607, i32 0
  %broadcast.splat1645 = shufflevector <2 x double> %broadcast.splatinsert1644, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %lcmp.mod1978, label %vector.body1623.prol, label %vector.ph1631.split

vector.body1623.prol:                             ; preds = %vector.ph1631
  %wide.load1640.prol = load <2 x double>, <2 x double>* %25, align 16, !tbaa !34
  %wide.load1641.prol = load <2 x double>, <2 x double>* %27, align 16, !tbaa !34
  %wide.load1642.prol = load <2 x double>, <2 x double>* %28, align 16, !tbaa !34
  %wide.load1643.prol = load <2 x double>, <2 x double>* %30, align 16, !tbaa !34
  %776 = fmul <2 x double> %broadcast.splat1645, %wide.load1642.prol
  %777 = fmul <2 x double> %broadcast.splat1645, %wide.load1643.prol
  %778 = fadd <2 x double> %wide.load1640.prol, %776
  %779 = fadd <2 x double> %wide.load1641.prol, %777
  store <2 x double> %778, <2 x double>* %31, align 16, !tbaa !34
  store <2 x double> %779, <2 x double>* %32, align 16, !tbaa !34
  br label %vector.ph1631.split

vector.ph1631.split:                              ; preds = %vector.body1623.prol, %vector.ph1631
  %index1632.unr = phi i64 [ 0, %vector.ph1631 ], [ 4, %vector.body1623.prol ]
  br i1 %303, label %for.body.i1011.preheader1893.loopexit, label %vector.ph1631.split.split

vector.ph1631.split.split:                        ; preds = %vector.ph1631.split
  br label %vector.body1623

vector.body1623:                                  ; preds = %vector.body1623, %vector.ph1631.split.split
  %index1632 = phi i64 [ %index1632.unr, %vector.ph1631.split.split ], [ %index.next1633.1, %vector.body1623 ]
  %780 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %index1632
  %781 = bitcast double* %780 to <2 x double>*
  %wide.load1640 = load <2 x double>, <2 x double>* %781, align 16, !tbaa !34
  %782 = getelementptr double, double* %780, i64 2
  %783 = bitcast double* %782 to <2 x double>*
  %wide.load1641 = load <2 x double>, <2 x double>* %783, align 16, !tbaa !34
  %784 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %index1632
  %785 = bitcast double* %784 to <2 x double>*
  %wide.load1642 = load <2 x double>, <2 x double>* %785, align 16, !tbaa !34
  %786 = getelementptr double, double* %784, i64 2
  %787 = bitcast double* %786 to <2 x double>*
  %wide.load1643 = load <2 x double>, <2 x double>* %787, align 16, !tbaa !34
  %788 = fmul <2 x double> %broadcast.splat1645, %wide.load1642
  %789 = fmul <2 x double> %broadcast.splat1645, %wide.load1643
  %790 = fadd <2 x double> %wide.load1640, %788
  %791 = fadd <2 x double> %wide.load1641, %789
  %792 = bitcast double* %784 to <2 x double>*
  store <2 x double> %790, <2 x double>* %792, align 16, !tbaa !34
  %793 = bitcast double* %786 to <2 x double>*
  store <2 x double> %791, <2 x double>* %793, align 16, !tbaa !34
  %index.next1633 = add i64 %index1632, 4
  %794 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %index.next1633
  %795 = bitcast double* %794 to <2 x double>*
  %wide.load1640.1 = load <2 x double>, <2 x double>* %795, align 16, !tbaa !34
  %796 = getelementptr double, double* %794, i64 2
  %797 = bitcast double* %796 to <2 x double>*
  %wide.load1641.1 = load <2 x double>, <2 x double>* %797, align 16, !tbaa !34
  %798 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %index.next1633
  %799 = bitcast double* %798 to <2 x double>*
  %wide.load1642.1 = load <2 x double>, <2 x double>* %799, align 16, !tbaa !34
  %800 = getelementptr double, double* %798, i64 2
  %801 = bitcast double* %800 to <2 x double>*
  %wide.load1643.1 = load <2 x double>, <2 x double>* %801, align 16, !tbaa !34
  %802 = fmul <2 x double> %broadcast.splat1645, %wide.load1642.1
  %803 = fmul <2 x double> %broadcast.splat1645, %wide.load1643.1
  %804 = fadd <2 x double> %wide.load1640.1, %802
  %805 = fadd <2 x double> %wide.load1641.1, %803
  %806 = bitcast double* %798 to <2 x double>*
  store <2 x double> %804, <2 x double>* %806, align 16, !tbaa !34
  %807 = bitcast double* %800 to <2 x double>*
  store <2 x double> %805, <2 x double>* %807, align 16, !tbaa !34
  %index.next1633.1 = add i64 %index1632, 8
  %808 = icmp eq i64 %index.next1633.1, %n.vec1629
  br i1 %808, label %for.body.i1011.preheader1893.loopexit.unr-lcssa, label %vector.body1623, !llvm.loop !178

for.body.i1011.preheader1893.loopexit.unr-lcssa:  ; preds = %vector.body1623
  br label %for.body.i1011.preheader1893.loopexit

for.body.i1011.preheader1893.loopexit:            ; preds = %vector.ph1631.split, %for.body.i1011.preheader1893.loopexit.unr-lcssa
  br label %for.body.i1011.preheader1893

for.body.i1011.preheader1893:                     ; preds = %for.body.i1011.preheader1893.loopexit, %min.iters.checked1627, %for.body.i1011.preheader
  %indvars.iv.i1002.ph = phi i64 [ 0, %min.iters.checked1627 ], [ 0, %for.body.i1011.preheader ], [ %n.vec1629, %for.body.i1011.preheader1893.loopexit ]
  br label %for.body.i1011

for.body.i1011:                                   ; preds = %for.body.i1011.preheader1893, %for.body.i1011
  %indvars.iv.i1002 = phi i64 [ %indvars.iv.next.i1008, %for.body.i1011 ], [ %indvars.iv.i1002.ph, %for.body.i1011.preheader1893 ]
  %arrayidx.i1003 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv.i1002
  %809 = load double, double* %arrayidx.i1003, align 8, !tbaa !34
  %arrayidx2.i1004 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv.i1002
  %810 = load double, double* %arrayidx2.i1004, align 8, !tbaa !34
  %mul3.i1005 = fmul double %mul607, %810
  %add.i1006 = fadd double %809, %mul3.i1005
  store double %add.i1006, double* %arrayidx2.i1004, align 8, !tbaa !34
  %indvars.iv.next.i1008 = add nuw nsw i64 %indvars.iv.i1002, 1
  %lftr.wideiv1583 = trunc i64 %indvars.iv.next.i1008 to i32
  %exitcond1584 = icmp eq i32 %lftr.wideiv1583, %223
  br i1 %exitcond1584, label %for.body.i.preheader, label %for.body.i1011, !llvm.loop !179

for.body.i.preheader:                             ; preds = %for.body.i1011
  %mul634 = fmul double %mul607, %sub504
  br i1 %min.iters.check, label %for.body.i.preheader1892, label %min.iters.checked

min.iters.checked:                                ; preds = %for.body.i.preheader
  br i1 %cmp.zero, label %for.body.i.preheader1892, label %vector.ph

vector.ph:                                        ; preds = %min.iters.checked
  %broadcast.splatinsert1619 = insertelement <2 x double> undef, double %mul634, i32 0
  %broadcast.splat1620 = shufflevector <2 x double> %broadcast.splatinsert1619, <2 x double> undef, <2 x i32> zeroinitializer
  br i1 %lcmp.mod1980, label %vector.body.prol, label %vector.ph.split

vector.body.prol:                                 ; preds = %vector.ph
  %wide.load.prol = load <2 x double>, <2 x double>* %17, align 16, !tbaa !34
  %wide.load1616.prol = load <2 x double>, <2 x double>* %19, align 16, !tbaa !34
  %wide.load1617.prol = load <2 x double>, <2 x double>* %20, align 16, !tbaa !34
  %wide.load1618.prol = load <2 x double>, <2 x double>* %22, align 16, !tbaa !34
  %811 = fmul <2 x double> %broadcast.splat1620, %wide.load1617.prol
  %812 = fmul <2 x double> %broadcast.splat1620, %wide.load1618.prol
  %813 = fadd <2 x double> %wide.load.prol, %811
  %814 = fadd <2 x double> %wide.load1616.prol, %812
  store <2 x double> %813, <2 x double>* %23, align 16, !tbaa !34
  store <2 x double> %814, <2 x double>* %24, align 16, !tbaa !34
  br label %vector.ph.split

vector.ph.split:                                  ; preds = %vector.body.prol, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ 4, %vector.body.prol ]
  br i1 %301, label %for.body.i.preheader1892.loopexit, label %vector.ph.split.split

vector.ph.split.split:                            ; preds = %vector.ph.split
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.split.split
  %index = phi i64 [ %index.unr, %vector.ph.split.split ], [ %index.next.1, %vector.body ]
  %815 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %index
  %816 = bitcast double* %815 to <2 x double>*
  %wide.load = load <2 x double>, <2 x double>* %816, align 16, !tbaa !34
  %817 = getelementptr double, double* %815, i64 2
  %818 = bitcast double* %817 to <2 x double>*
  %wide.load1616 = load <2 x double>, <2 x double>* %818, align 16, !tbaa !34
  %819 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %index
  %820 = bitcast double* %819 to <2 x double>*
  %wide.load1617 = load <2 x double>, <2 x double>* %820, align 16, !tbaa !34
  %821 = getelementptr double, double* %819, i64 2
  %822 = bitcast double* %821 to <2 x double>*
  %wide.load1618 = load <2 x double>, <2 x double>* %822, align 16, !tbaa !34
  %823 = fmul <2 x double> %broadcast.splat1620, %wide.load1617
  %824 = fmul <2 x double> %broadcast.splat1620, %wide.load1618
  %825 = fadd <2 x double> %wide.load, %823
  %826 = fadd <2 x double> %wide.load1616, %824
  %827 = bitcast double* %815 to <2 x double>*
  store <2 x double> %825, <2 x double>* %827, align 16, !tbaa !34
  %828 = bitcast double* %817 to <2 x double>*
  store <2 x double> %826, <2 x double>* %828, align 16, !tbaa !34
  %index.next = add i64 %index, 4
  %829 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %index.next
  %830 = bitcast double* %829 to <2 x double>*
  %wide.load.1 = load <2 x double>, <2 x double>* %830, align 16, !tbaa !34
  %831 = getelementptr double, double* %829, i64 2
  %832 = bitcast double* %831 to <2 x double>*
  %wide.load1616.1 = load <2 x double>, <2 x double>* %832, align 16, !tbaa !34
  %833 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %index.next
  %834 = bitcast double* %833 to <2 x double>*
  %wide.load1617.1 = load <2 x double>, <2 x double>* %834, align 16, !tbaa !34
  %835 = getelementptr double, double* %833, i64 2
  %836 = bitcast double* %835 to <2 x double>*
  %wide.load1618.1 = load <2 x double>, <2 x double>* %836, align 16, !tbaa !34
  %837 = fmul <2 x double> %broadcast.splat1620, %wide.load1617.1
  %838 = fmul <2 x double> %broadcast.splat1620, %wide.load1618.1
  %839 = fadd <2 x double> %wide.load.1, %837
  %840 = fadd <2 x double> %wide.load1616.1, %838
  %841 = bitcast double* %829 to <2 x double>*
  store <2 x double> %839, <2 x double>* %841, align 16, !tbaa !34
  %842 = bitcast double* %831 to <2 x double>*
  store <2 x double> %840, <2 x double>* %842, align 16, !tbaa !34
  %index.next.1 = add i64 %index, 8
  %843 = icmp eq i64 %index.next.1, %n.vec
  br i1 %843, label %for.body.i.preheader1892.loopexit.unr-lcssa, label %vector.body, !llvm.loop !180

for.body.i.preheader1892.loopexit.unr-lcssa:      ; preds = %vector.body
  br label %for.body.i.preheader1892.loopexit

for.body.i.preheader1892.loopexit:                ; preds = %vector.ph.split, %for.body.i.preheader1892.loopexit.unr-lcssa
  br label %for.body.i.preheader1892

for.body.i.preheader1892:                         ; preds = %for.body.i.preheader1892.loopexit, %min.iters.checked, %for.body.i.preheader
  %indvars.iv.i.ph = phi i64 [ 0, %min.iters.checked ], [ 0, %for.body.i.preheader ], [ %n.vec, %for.body.i.preheader1892.loopexit ]
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.preheader1892, %for.body.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ %indvars.iv.i.ph, %for.body.i.preheader1892 ]
  %arrayidx.i = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv.i
  %844 = load double, double* %arrayidx.i, align 8, !tbaa !34
  %arrayidx2.i = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %indvars.iv.i
  %845 = load double, double* %arrayidx2.i, align 8, !tbaa !34
  %mul3.i = fmul double %mul634, %845
  %add.i = fadd double %844, %mul3.i
  store double %add.i, double* %arrayidx.i, align 8, !tbaa !34
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %lftr.wideiv1585 = trunc i64 %indvars.iv.next.i to i32
  %exitcond1586 = icmp eq i32 %lftr.wideiv1585, %223
  br i1 %exitcond1586, label %__axpy.exit, label %for.body.i, !llvm.loop !181

__axpy.exit:                                      ; preds = %for.body.i
  %inc639 = add nuw nsw i32 %n.21401, 1
  %cmp237 = icmp slt i32 %inc639, %__ca_krylov_s.01441
  br i1 %cmp237, label %for.body238, label %for.end640.loopexit

for.end640.loopexit:                              ; preds = %if.end604, %__dot.exit, %if.end572, %if.end481, %if.end477, %if.end472, %if.end346, %__dot.exit1193, %__axpy.exit
  %delta.1.lcssa.ph = phi double [ %delta.11400, %if.end604 ], [ %delta.11400, %__dot.exit ], [ %delta.11400, %if.end572 ], [ %delta.11400, %if.end481 ], [ %delta.11400, %if.end477 ], [ %delta.11400, %if.end472 ], [ %delta.11400, %if.end346 ], [ %delta.11400, %__dot.exit1193 ], [ %add.i1016.lcssa, %__axpy.exit ]
  %BiCGStabConverged.3.ph = phi i32 [ %BiCGStabConverged.21439, %if.end604 ], [ %BiCGStabConverged.21439, %__dot.exit ], [ 1, %if.end572 ], [ %BiCGStabConverged.21439, %if.end481 ], [ %BiCGStabConverged.21439, %if.end477 ], [ 1, %if.end472 ], [ %BiCGStabConverged.21439, %if.end346 ], [ %BiCGStabConverged.21439, %__dot.exit1193 ], [ %BiCGStabConverged.21439, %__axpy.exit ]
  %BiCGStabFailed.1.ph = phi i32 [ 1, %if.end604 ], [ 1, %__dot.exit ], [ %BiCGStabFailed.01440, %if.end572 ], [ 1, %if.end481 ], [ 1, %if.end477 ], [ %BiCGStabFailed.01440, %if.end472 ], [ 1, %if.end346 ], [ 1, %__dot.exit1193 ], [ %BiCGStabFailed.01440, %__axpy.exit ]
  br label %for.end640

for.end640:                                       ; preds = %for.end640.loopexit, %for.cond236.preheader
  %delta.1.lcssa = phi double [ %delta.01438, %for.cond236.preheader ], [ %delta.1.lcssa.ph, %for.end640.loopexit ]
  %BiCGStabConverged.3 = phi i32 [ %BiCGStabConverged.21439, %for.cond236.preheader ], [ %BiCGStabConverged.3.ph, %for.end640.loopexit ]
  %BiCGStabFailed.1 = phi i32 [ %BiCGStabFailed.01440, %for.cond236.preheader ], [ %BiCGStabFailed.1.ph, %for.end640.loopexit ]
  br i1 %cmp4.i, label %for.body646.preheader, label %for.end653

for.body646.preheader:                            ; preds = %for.end640
  %846 = or i32 %mul, 1
  br label %for.body646

for.body646:                                      ; preds = %for.body646, %for.body646.preheader
  %indvars.iv1587 = phi i64 [ 0, %for.body646.preheader ], [ %indvars.iv.next1588, %for.body646 ]
  %arrayidx648 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 %indvars.iv1587
  %847 = load double, double* %arrayidx648, align 8, !tbaa !34
  %arrayidx650 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 %indvars.iv1587
  %848 = load i32, i32* %arrayidx650, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 %e_id, double 1.000000e+00, i32 %e_id, double %847, i32 %848) #1
  %indvars.iv.next1588 = add nuw nsw i64 %indvars.iv1587, 1
  %lftr.wideiv1589 = trunc i64 %indvars.iv.next1588 to i32
  %exitcond1590 = icmp eq i32 %lftr.wideiv1589, %846
  br i1 %exitcond1590, label %for.end653.loopexit, label %for.body646

for.end653.loopexit:                              ; preds = %for.body646
  br label %for.end653

for.end653.loopexit1903:                          ; preds = %for.end338, %for.cond308.preheader, %for.cond274.preheader, %for.body238
  %delta.11400.lcssa = phi double [ %delta.11400, %for.end338 ], [ %delta.11400, %for.cond308.preheader ], [ %delta.11400, %for.cond274.preheader ], [ %delta.11400, %for.body238 ]
  br label %for.end653

for.end653:                                       ; preds = %for.end653.loopexit1903, %for.end653.loopexit, %for.end640
  %BiCGStabFailed.11606 = phi i32 [ %BiCGStabFailed.1, %for.end640 ], [ %BiCGStabFailed.1, %for.end653.loopexit ], [ 1, %for.end653.loopexit1903 ]
  %BiCGStabConverged.31605 = phi i32 [ %BiCGStabConverged.3, %for.end640 ], [ %BiCGStabConverged.3, %for.end653.loopexit ], [ %BiCGStabConverged.21439, %for.end653.loopexit1903 ]
  %delta.1.lcssa1604 = phi double [ %delta.1.lcssa, %for.end640 ], [ %delta.1.lcssa, %for.end653.loopexit ], [ %delta.11400.lcssa, %for.end653.loopexit1903 ]
  %849 = or i32 %BiCGStabFailed.11606, %BiCGStabConverged.31605
  %850 = icmp eq i32 %849, 0
  br i1 %850, label %if.then657, label %while.end.loopexit

if.then657:                                       ; preds = %for.end653
  %851 = load double, double* %arraydecay, align 16, !tbaa !34
  %852 = load i32, i32* %arraydecay133, align 16, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 14, double 0.000000e+00, i32 14, double %851, i32 %852) #1
  %cmp6631434 = icmp sgt i32 %add, 1
  br i1 %cmp6631434, label %for.body665.preheader, label %for.end672.thread

for.end672.thread:                                ; preds = %if.then657
  %853 = load double, double* %arraydecay81226, align 16, !tbaa !34
  %854 = load i32, i32* %arraydecay133, align 16, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 13, double 0.000000e+00, i32 13, double %853, i32 %854) #1
  br label %if.end688

for.body665.preheader:                            ; preds = %if.then657
  %855 = or i32 %mul, 1
  br label %for.body665

for.body665:                                      ; preds = %for.body665, %for.body665.preheader
  %indvars.iv1591 = phi i64 [ 1, %for.body665.preheader ], [ %indvars.iv.next1592, %for.body665 ]
  %arrayidx667 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv1591
  %856 = load double, double* %arrayidx667, align 8, !tbaa !34
  %arrayidx669 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 %indvars.iv1591
  %857 = load i32, i32* %arrayidx669, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 14, double %856, i32 %857) #1
  %indvars.iv.next1592 = add nuw nsw i64 %indvars.iv1591, 1
  %lftr.wideiv1593 = trunc i64 %indvars.iv.next1592 to i32
  %exitcond1594 = icmp eq i32 %lftr.wideiv1593, %855
  br i1 %exitcond1594, label %for.end672, label %for.body665

for.end672:                                       ; preds = %for.body665
  %858 = load double, double* %arraydecay81226, align 16, !tbaa !34
  %859 = load i32, i32* %arraydecay133, align 16, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 13, double 0.000000e+00, i32 13, double %858, i32 %859) #1
  br i1 %cmp6631434, label %for.body680.preheader, label %if.end688

for.body680.preheader:                            ; preds = %for.end672
  %860 = or i32 %mul, 1
  br label %for.body680

for.body680:                                      ; preds = %for.body680, %for.body680.preheader
  %indvars.iv1595 = phi i64 [ 1, %for.body680.preheader ], [ %indvars.iv.next1596, %for.body680 ]
  %arrayidx682 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv1595
  %861 = load double, double* %arrayidx682, align 8, !tbaa !34
  %arrayidx684 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 %indvars.iv1595
  %862 = load i32, i32* %arrayidx684, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 13, double %861, i32 %862) #1
  %indvars.iv.next1596 = add nuw nsw i64 %indvars.iv1595, 1
  %lftr.wideiv1597 = trunc i64 %indvars.iv.next1596 to i32
  %exitcond1598 = icmp eq i32 %lftr.wideiv1597, %860
  br i1 %exitcond1598, label %if.end688.loopexit, label %for.body680

if.end688.loopexit:                               ; preds = %for.body680
  br label %if.end688

if.end688:                                        ; preds = %if.end688.loopexit, %for.end672.thread, %for.end672
  %add689 = add nsw i32 %m.01442, %__ca_krylov_s.01441
  %cmp691 = icmp sgt i32 %mul66, 4
  %.mul690 = select i1 %cmp691, i32 4, i32 %mul66
  %notlhs = icmp slt i32 %add689, 200
  %863 = and i1 %850, %notlhs
  br i1 %863, label %while.body, label %while.end.loopexit

while.end.loopexit:                               ; preds = %if.end688, %for.end653
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 %e_id, double 1.000000e+00, i32 4, i32 %e_id) #1
  call void @llvm.lifetime.end(i64 72, i8* %11) #1
  call void @llvm.lifetime.end(i64 2448, i8* %10) #1
  call void @llvm.lifetime.end(i64 136, i8* %9) #1
  call void @llvm.lifetime.end(i64 2312, i8* %8) #1
  call void @llvm.lifetime.end(i64 136, i8* %7) #1
  call void @llvm.lifetime.end(i64 136, i8* %6) #1
  call void @llvm.lifetime.end(i64 136, i8* %5) #1
  call void @llvm.lifetime.end(i64 136, i8* %z6.i1219) #1
  call void @llvm.lifetime.end(i64 136, i8* %z6.i1223) #1
  call void @llvm.lifetime.end(i64 136, i8* %z6.i) #1
  call void @llvm.lifetime.end(i64 2312, i8* %4) #1
  call void @llvm.lifetime.end(i64 2312, i8* %3) #1
  call void @llvm.lifetime.end(i64 136, i8* %2) #1
  call void @llvm.lifetime.end(i64 136, i8* %1) #1
  call void @llvm.lifetime.end(i64 136, i8* %0) #1
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @__isinf(double) #6

; Function Attrs: nounwind uwtable
define void @CABiCGStab(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b, double %desired_reduction_in_norm) #3 {
entry:
  %temp1 = alloca [17 x double], align 16
  %temp2 = alloca [17 x double], align 16
  %Tp = alloca [17 x [17 x double]], align 16
  %0 = bitcast [17 x [17 x double]]* %Tp to i8*
  %Tpp = alloca [17 x [17 x double]], align 16
  %1 = bitcast [17 x [17 x double]]* %Tpp to i8*
  %aj = alloca [17 x double], align 16
  %z6.i = bitcast [17 x double]* %aj to i8*
  %cj = alloca [17 x double], align 16
  %z6.i1172 = bitcast [17 x double]* %cj to i8*
  %ej = alloca [17 x double], align 16
  %z6.i1171 = bitcast [17 x double]* %ej to i8*
  %Tpaj = alloca [17 x double], align 16
  %Tpcj = alloca [17 x double], align 16
  %Tppaj = alloca [17 x double], align 16
  %G = alloca [17 x [17 x double]], align 16
  %g = alloca [17 x double], align 16
  %Gg = alloca [306 x double], align 16
  %PRrt = alloca [18 x i32], align 16
  %2 = bitcast [17 x double]* %temp1 to i8*
  call void @llvm.lifetime.start(i64 136, i8* %2) #1
  %3 = bitcast [17 x double]* %temp2 to i8*
  call void @llvm.lifetime.start(i64 136, i8* %3) #1
  call void @llvm.lifetime.start(i64 2312, i8* %0) #1
  call void @llvm.lifetime.start(i64 2312, i8* %1) #1
  call void @llvm.lifetime.start(i64 136, i8* %z6.i) #1
  call void @llvm.lifetime.start(i64 136, i8* %z6.i1172) #1
  call void @llvm.lifetime.start(i64 136, i8* %z6.i1171) #1
  %4 = bitcast [17 x double]* %Tpaj to i8*
  call void @llvm.lifetime.start(i64 136, i8* %4) #1
  %5 = bitcast [17 x double]* %Tpcj to i8*
  call void @llvm.lifetime.start(i64 136, i8* %5) #1
  %6 = bitcast [17 x double]* %Tppaj to i8*
  call void @llvm.lifetime.start(i64 136, i8* %6) #1
  %7 = bitcast [17 x [17 x double]]* %G to i8*
  call void @llvm.lifetime.start(i64 2312, i8* %7) #1
  %8 = bitcast [17 x double]* %g to i8*
  call void @llvm.lifetime.start(i64 136, i8* %8) #1
  %9 = bitcast [306 x double]* %Gg to i8*
  call void @llvm.lifetime.start(i64 2448, i8* %9) #1
  %10 = bitcast [18 x i32]* %PRrt to i8*
  call void @llvm.lifetime.start(i64 72, i8* %10) #1
  %arraydecay = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 0
  tail call void @residual(%struct.domain_type* %domain, i32 %level, i32 12, i32 %e_id, i32 %R_id, double %a, double %b) #1
  tail call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 12) #1
  tail call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 12) #1
  %call = tail call double @norm(%struct.domain_type* %domain, i32 %level, i32 12) #1
  %call4 = tail call double @dot(%struct.domain_type* %domain, i32 %level, i32 13, i32 12) #1
  %call8 = tail call double @sqrt(double %call4) #1
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 2312, i32 16, i1 false)
  %add.ptr3 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 9
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 2312, i32 16, i1 false)
  %arrayidx48 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 1, i64 0
  store double 1.000000e+00, double* %arrayidx48, align 8, !tbaa !34
  %arrayidx48.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 2, i64 1
  store double 1.000000e+00, double* %arrayidx48.1, align 8, !tbaa !34
  %arrayidx48.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 3, i64 2
  store double 1.000000e+00, double* %arrayidx48.2, align 8, !tbaa !34
  %arrayidx48.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 4, i64 3
  store double 1.000000e+00, double* %arrayidx48.3, align 8, !tbaa !34
  %arrayidx48.4 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 5, i64 4
  store double 1.000000e+00, double* %arrayidx48.4, align 8, !tbaa !34
  %arrayidx48.5 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 6, i64 5
  store double 1.000000e+00, double* %arrayidx48.5, align 8, !tbaa !34
  %arrayidx48.6 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 7, i64 6
  store double 1.000000e+00, double* %arrayidx48.6, align 8, !tbaa !34
  %arrayidx48.7 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 8, i64 7
  store double 1.000000e+00, double* %arrayidx48.7, align 8, !tbaa !34
  %arrayidx62 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 10, i64 9
  store double 1.000000e+00, double* %arrayidx62, align 8, !tbaa !34
  %arrayidx62.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 11, i64 10
  store double 1.000000e+00, double* %arrayidx62.1, align 8, !tbaa !34
  %arrayidx62.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 12, i64 11
  store double 1.000000e+00, double* %arrayidx62.2, align 8, !tbaa !34
  %arrayidx62.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 13, i64 12
  store double 1.000000e+00, double* %arrayidx62.3, align 8, !tbaa !34
  %arrayidx62.4 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 14, i64 13
  store double 1.000000e+00, double* %arrayidx62.4, align 8, !tbaa !34
  %arrayidx62.5 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 15, i64 14
  store double 1.000000e+00, double* %arrayidx62.5, align 8, !tbaa !34
  %arrayidx62.6 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 16, i64 15
  store double 1.000000e+00, double* %arrayidx62.6, align 8, !tbaa !34
  %arrayidx74 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 2, i64 0
  store double 1.000000e+00, double* %arrayidx74, align 16, !tbaa !34
  %arrayidx74.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 3, i64 1
  store double 1.000000e+00, double* %arrayidx74.1, align 8, !tbaa !34
  %arrayidx74.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 4, i64 2
  store double 1.000000e+00, double* %arrayidx74.2, align 16, !tbaa !34
  %arrayidx74.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 5, i64 3
  store double 1.000000e+00, double* %arrayidx74.3, align 8, !tbaa !34
  %arrayidx74.4 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 6, i64 4
  store double 1.000000e+00, double* %arrayidx74.4, align 16, !tbaa !34
  %arrayidx74.5 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 7, i64 5
  store double 1.000000e+00, double* %arrayidx74.5, align 8, !tbaa !34
  %arrayidx74.6 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 8, i64 6
  store double 1.000000e+00, double* %arrayidx74.6, align 16, !tbaa !34
  %arrayidx89 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 11, i64 9
  store double 1.000000e+00, double* %arrayidx89, align 8, !tbaa !34
  %arrayidx89.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 12, i64 10
  store double 1.000000e+00, double* %arrayidx89.1, align 16, !tbaa !34
  %arrayidx89.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 13, i64 11
  store double 1.000000e+00, double* %arrayidx89.2, align 8, !tbaa !34
  %arrayidx89.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 14, i64 12
  store double 1.000000e+00, double* %arrayidx89.3, align 16, !tbaa !34
  %arrayidx89.4 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 15, i64 13
  store double 1.000000e+00, double* %arrayidx89.4, align 8, !tbaa !34
  %arrayidx89.5 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 16, i64 14
  store double 1.000000e+00, double* %arrayidx89.5, align 16, !tbaa !34
  %arrayidx100.1 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 1
  %arrayidx100.2 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 2
  %arrayidx100.3 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 3
  %11 = bitcast [18 x i32]* %PRrt to <4 x i32>*
  store <4 x i32> <i32 15, i32 16, i32 17, i32 18>, <4 x i32>* %11, align 16, !tbaa !35
  %arrayidx100.4 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 4
  %arrayidx100.5 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 5
  %arrayidx100.6 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 6
  %arrayidx100.7 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 7
  %12 = bitcast i32* %arrayidx100.4 to <4 x i32>*
  store <4 x i32> <i32 19, i32 20, i32 21, i32 22>, <4 x i32>* %12, align 16, !tbaa !35
  %arrayidx100.8 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 8
  %13 = bitcast i32* %arrayidx100.8 to <4 x i32>*
  store <4 x i32> <i32 23, i32 24, i32 25, i32 26>, <4 x i32>* %13, align 16, !tbaa !35
  %arrayidx100.12 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 12
  %14 = bitcast i32* %arrayidx100.12 to <4 x i32>*
  store <4 x i32> <i32 27, i32 28, i32 29, i32 30>, <4 x i32>* %14, align 16, !tbaa !35
  %arrayidx100.16 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 16
  store i32 31, i32* %arrayidx100.16, align 16, !tbaa !35
  %arrayidx107 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 17
  store i32 12, i32* %arrayidx107, align 4, !tbaa !35
  %15 = fcmp une double %call, 0.000000e+00
  %not.cmp5 = fcmp une double %call4, 0.000000e+00
  %16 = and i1 %not.cmp5, %15
  br i1 %16, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %arraydecay110 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 0
  %arraydecay113 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 0
  %CAKrylov_formations_of_G = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 4
  %arraydecay165 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 0
  %arrayidx224 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 9
  %Krylov_iterations = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 3
  %mul472 = fmul double %call8, %desired_reduction_in_norm
  %arrayidx160 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 10
  %arrayidx160.1 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 11
  %arrayidx160.2 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 12
  %arrayidx160.3 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 13
  %arrayidx160.4 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 14
  %arrayidx160.5 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 15
  %arrayidx160.6 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 16
  %arrayidx.i1156 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 0
  %arrayidx254.2.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 2
  %arrayidx254.4.le = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 4
  %arrayidx254.6.le = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 6
  %arrayidx254.8.le = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 8
  %arrayidx254.10.le = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 10
  %arrayidx254.12.le = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 12
  %arrayidx254.14.le = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 14
  %arrayidx254.16.le = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 16
  %arrayidx288.2.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 2
  %arrayidx288.3.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 3
  %arrayidx288.4.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 4
  %arrayidx288.5.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 5
  %arrayidx288.6.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 6
  %arrayidx288.7.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 7
  %arrayidx288.8.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 8
  %arrayidx288.10.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 10
  %arrayidx288.11.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 11
  %arrayidx288.12.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 12
  %arrayidx288.13.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 13
  %arrayidx288.14.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 14
  %arrayidx288.15.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 15
  %arrayidx288.16.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 16
  %arrayidx288.1.phi.trans.insert = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 1
  %arrayidx2.i1157 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 0
  %arrayidx.i1156.1 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 1
  %arrayidx2.i1157.1 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 1
  %arrayidx.i1156.2 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 2
  %arrayidx2.i1157.2 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 2
  %arrayidx.i1156.3 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 3
  %arrayidx2.i1157.3 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 3
  %arrayidx.i1156.4 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 4
  %arrayidx2.i1157.4 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 4
  %arrayidx.i1156.5 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 5
  %arrayidx2.i1157.5 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 5
  %arrayidx.i1156.6 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 6
  %arrayidx2.i1157.6 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 6
  %arrayidx.i1156.7 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 7
  %arrayidx2.i1157.7 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 7
  %arrayidx.i1156.8 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 8
  %arrayidx2.i1157.8 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 8
  %arrayidx.i1156.9 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 9
  %arrayidx2.i1157.9 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 9
  %arrayidx.i1156.10 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 10
  %arrayidx2.i1157.10 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 10
  %arrayidx.i1156.11 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 11
  %arrayidx2.i1157.11 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 11
  %arrayidx.i1156.12 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 12
  %arrayidx2.i1157.12 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 12
  %arrayidx.i1156.13 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 13
  %arrayidx2.i1157.13 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 13
  %arrayidx.i1156.14 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 14
  %arrayidx2.i1157.14 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 14
  %arrayidx.i1156.15 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 15
  %arrayidx2.i1157.15 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 15
  %arrayidx.i1156.16 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 16
  %arrayidx2.i1157.16 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 16
  %arrayidx5.i1148 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 0
  %arrayidx5.i1148.1 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 1
  %arrayidx.i1144.2 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 2
  %arrayidx2.i1145.2 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 2
  %arrayidx5.i1148.2 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 2
  %arrayidx5.i1148.3 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 3
  %arrayidx.i1144.4 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 4
  %arrayidx2.i1145.4 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 4
  %arrayidx5.i1148.4 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 4
  %arrayidx5.i1148.5 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 5
  %arrayidx.i1144.6 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 6
  %arrayidx2.i1145.6 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 6
  %arrayidx5.i1148.6 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 6
  %arrayidx5.i1148.7 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 7
  %arrayidx.i1144.8 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 8
  %arrayidx2.i1145.8 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 8
  %arrayidx5.i1148.8 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 8
  %arrayidx5.i1148.9 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 9
  %arrayidx.i1144.10 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 10
  %arrayidx2.i1145.10 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 10
  %arrayidx5.i1148.10 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 10
  %arrayidx5.i1148.11 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 11
  %arrayidx.i1144.12 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 12
  %arrayidx2.i1145.12 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 12
  %arrayidx5.i1148.12 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 12
  %arrayidx5.i1148.13 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 13
  %arrayidx.i1144.14 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 14
  %arrayidx2.i1145.14 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 14
  %arrayidx5.i1148.14 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 14
  %arrayidx5.i1148.15 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 15
  %arrayidx.i1144.16 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 16
  %arrayidx2.i1145.16 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 16
  %arrayidx5.i1148.16 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 16
  %arrayidx2.i1124 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 0
  %arrayidx2.i1124.1 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 1
  %arrayidx2.i1124.2 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 2
  %arrayidx2.i1124.3 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 3
  %arrayidx2.i1124.4 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 4
  %arrayidx2.i1124.5 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 5
  %arrayidx2.i1124.6 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 6
  %arrayidx2.i1124.7 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 7
  %arrayidx2.i1124.8 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 8
  %arrayidx2.i1124.9 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 9
  %arrayidx2.i1124.10 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 10
  %arrayidx2.i1124.11 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 11
  %arrayidx2.i1124.12 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 12
  %arrayidx2.i1124.13 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 13
  %arrayidx2.i1124.14 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 14
  %arrayidx2.i1124.15 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 15
  %arrayidx2.i1124.16 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 16
  %arrayidx.i1100.2 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 2
  %arrayidx.i1100.4 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 4
  %arrayidx.i1100.6 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 6
  %arrayidx.i1100.8 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 8
  %arrayidx.i1100.10 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 10
  %arrayidx.i1100.12 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 12
  %arrayidx.i1100.14 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 14
  %arrayidx.i1100.16 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 16
  %17 = bitcast double* %arrayidx.i1156.14 to <2 x double>*
  %18 = bitcast [17 x double]* %aj to <2 x double>*
  %19 = bitcast [17 x double]* %Tpcj to <2 x double>*
  %20 = bitcast [17 x double]* %Tppaj to <2 x double>*
  %21 = bitcast [17 x double]* %temp1 to <2 x double>*
  %22 = bitcast double* %arrayidx.i1144.2 to <2 x double>*
  %23 = bitcast double* %arrayidx2.i1145.2 to <2 x double>*
  %24 = bitcast double* %arrayidx5.i1148.2 to <2 x double>*
  %25 = bitcast double* %arrayidx.i1144.4 to <2 x double>*
  %26 = bitcast double* %arrayidx2.i1145.4 to <2 x double>*
  %27 = bitcast double* %arrayidx5.i1148.4 to <2 x double>*
  %28 = bitcast double* %arrayidx.i1144.6 to <2 x double>*
  %29 = bitcast double* %arrayidx2.i1145.6 to <2 x double>*
  %30 = bitcast double* %arrayidx5.i1148.6 to <2 x double>*
  %31 = bitcast double* %arrayidx.i1144.8 to <2 x double>*
  %32 = bitcast double* %arrayidx2.i1145.8 to <2 x double>*
  %33 = bitcast double* %arrayidx5.i1148.8 to <2 x double>*
  %34 = bitcast double* %arrayidx.i1144.10 to <2 x double>*
  %35 = bitcast double* %arrayidx2.i1145.10 to <2 x double>*
  %36 = bitcast double* %arrayidx5.i1148.10 to <2 x double>*
  %37 = bitcast double* %arrayidx.i1144.12 to <2 x double>*
  %38 = bitcast double* %arrayidx2.i1145.12 to <2 x double>*
  %39 = bitcast double* %arrayidx5.i1148.12 to <2 x double>*
  %40 = bitcast double* %arrayidx.i1144.14 to <2 x double>*
  %41 = bitcast double* %arrayidx2.i1145.14 to <2 x double>*
  %42 = bitcast double* %arrayidx5.i1148.14 to <2 x double>*
  %43 = bitcast [17 x double]* %ej to <2 x double>*
  %44 = bitcast [17 x double]* %aj to <2 x double>*
  %45 = bitcast [17 x double]* %ej to <2 x double>*
  %46 = bitcast double* %arrayidx.i1100.2 to <2 x double>*
  %47 = bitcast double* %arrayidx254.2.phi.trans.insert to <2 x double>*
  %48 = bitcast double* %arrayidx.i1100.2 to <2 x double>*
  %49 = bitcast double* %arrayidx.i1100.4 to <2 x double>*
  %50 = bitcast double* %arrayidx254.4.le to <2 x double>*
  %51 = bitcast double* %arrayidx.i1100.4 to <2 x double>*
  %52 = bitcast double* %arrayidx.i1100.6 to <2 x double>*
  %53 = bitcast double* %arrayidx254.6.le to <2 x double>*
  %54 = bitcast double* %arrayidx.i1100.6 to <2 x double>*
  %55 = bitcast double* %arrayidx.i1100.8 to <2 x double>*
  %56 = bitcast double* %arrayidx254.8.le to <2 x double>*
  %57 = bitcast double* %arrayidx.i1100.8 to <2 x double>*
  %58 = bitcast double* %arrayidx.i1100.10 to <2 x double>*
  %59 = bitcast double* %arrayidx254.10.le to <2 x double>*
  %60 = bitcast double* %arrayidx.i1100.10 to <2 x double>*
  %61 = bitcast double* %arrayidx.i1100.12 to <2 x double>*
  %62 = bitcast double* %arrayidx254.12.le to <2 x double>*
  %63 = bitcast double* %arrayidx.i1100.12 to <2 x double>*
  %64 = bitcast double* %arrayidx.i1100.14 to <2 x double>*
  %65 = bitcast double* %arrayidx254.14.le to <2 x double>*
  %66 = bitcast double* %arrayidx.i1100.14 to <2 x double>*
  %67 = bitcast [17 x double]* %Tpaj to <2 x double>*
  %68 = bitcast [17 x double]* %cj to <2 x double>*
  %69 = bitcast [17 x double]* %temp1 to <2 x double>*
  %70 = bitcast double* %arrayidx2.i1157.2 to <2 x double>*
  %71 = bitcast double* %arrayidx288.2.phi.trans.insert to <2 x double>*
  %72 = bitcast double* %arrayidx5.i1148.2 to <2 x double>*
  %73 = bitcast double* %arrayidx288.4.phi.trans.insert to <2 x double>*
  %74 = bitcast double* %arrayidx2.i1157.4 to <2 x double>*
  %75 = bitcast double* %arrayidx5.i1148.4 to <2 x double>*
  %76 = bitcast double* %arrayidx288.6.phi.trans.insert to <2 x double>*
  %77 = bitcast double* %arrayidx2.i1157.6 to <2 x double>*
  %78 = bitcast double* %arrayidx5.i1148.6 to <2 x double>*
  %79 = bitcast double* %arrayidx288.8.phi.trans.insert to <2 x double>*
  %80 = bitcast double* %arrayidx2.i1157.8 to <2 x double>*
  %81 = bitcast double* %arrayidx5.i1148.8 to <2 x double>*
  %82 = bitcast double* %arrayidx288.10.phi.trans.insert to <2 x double>*
  %83 = bitcast double* %arrayidx2.i1157.10 to <2 x double>*
  %84 = bitcast double* %arrayidx5.i1148.10 to <2 x double>*
  %85 = bitcast double* %arrayidx288.12.phi.trans.insert to <2 x double>*
  %86 = bitcast double* %arrayidx2.i1157.12 to <2 x double>*
  %87 = bitcast double* %arrayidx5.i1148.12 to <2 x double>*
  %88 = bitcast double* %arrayidx288.14.phi.trans.insert to <2 x double>*
  %89 = bitcast double* %arrayidx2.i1157.14 to <2 x double>*
  %90 = bitcast double* %arrayidx5.i1148.14 to <2 x double>*
  %91 = bitcast [17 x double]* %ej to <2 x double>*
  %92 = bitcast double* %arrayidx.i1100.2 to <2 x double>*
  %93 = bitcast double* %arrayidx.i1100.4 to <2 x double>*
  %94 = bitcast double* %arrayidx.i1100.6 to <2 x double>*
  %95 = bitcast double* %arrayidx.i1100.8 to <2 x double>*
  %96 = bitcast double* %arrayidx.i1100.10 to <2 x double>*
  %97 = bitcast double* %arrayidx.i1100.12 to <2 x double>*
  %98 = bitcast [17 x double]* %ej to <2 x double>*
  %99 = bitcast double* %arrayidx.i1100.2 to <2 x double>*
  %100 = bitcast double* %arrayidx2.i1157.4 to <2 x double>*
  %101 = bitcast double* %arrayidx.i1100.4 to <2 x double>*
  %102 = bitcast double* %arrayidx2.i1157.6 to <2 x double>*
  %103 = bitcast double* %arrayidx.i1100.6 to <2 x double>*
  %104 = bitcast double* %arrayidx2.i1157.8 to <2 x double>*
  %105 = bitcast double* %arrayidx.i1100.8 to <2 x double>*
  %106 = bitcast double* %arrayidx2.i1157.10 to <2 x double>*
  %107 = bitcast double* %arrayidx.i1100.10 to <2 x double>*
  %108 = bitcast double* %arrayidx2.i1157.12 to <2 x double>*
  %109 = bitcast double* %arrayidx.i1100.12 to <2 x double>*
  %110 = bitcast double* %arrayidx2.i1157.14 to <2 x double>*
  %111 = bitcast double* %arrayidx.i1100.14 to <2 x double>*
  %112 = bitcast [17 x double]* %cj to <2 x double>*
  %113 = bitcast [17 x double]* %Tpcj to <2 x double>*
  %114 = bitcast double* %arrayidx288.2.phi.trans.insert to <2 x double>*
  %115 = bitcast double* %arrayidx.i1144.2 to <2 x double>*
  %116 = bitcast double* %arrayidx288.4.phi.trans.insert to <2 x double>*
  %117 = bitcast double* %arrayidx.i1144.4 to <2 x double>*
  %118 = bitcast double* %arrayidx288.6.phi.trans.insert to <2 x double>*
  %119 = bitcast double* %arrayidx.i1144.6 to <2 x double>*
  %120 = bitcast double* %arrayidx288.8.phi.trans.insert to <2 x double>*
  %121 = bitcast double* %arrayidx.i1144.8 to <2 x double>*
  %122 = bitcast double* %arrayidx288.10.phi.trans.insert to <2 x double>*
  %123 = bitcast double* %arrayidx.i1144.10 to <2 x double>*
  %124 = bitcast double* %arrayidx288.12.phi.trans.insert to <2 x double>*
  %125 = bitcast double* %arrayidx.i1144.12 to <2 x double>*
  %126 = bitcast double* %arrayidx288.14.phi.trans.insert to <2 x double>*
  %127 = bitcast double* %arrayidx.i1144.14 to <2 x double>*
  %128 = bitcast [17 x double]* %Tpaj to <2 x double>*
  %129 = bitcast double* %arrayidx2.i1157.2 to <2 x double>*
  %130 = bitcast double* %arrayidx2.i1157.4 to <2 x double>*
  %131 = bitcast double* %arrayidx2.i1157.6 to <2 x double>*
  %132 = bitcast double* %arrayidx2.i1157.8 to <2 x double>*
  %133 = bitcast double* %arrayidx2.i1157.10 to <2 x double>*
  %134 = bitcast double* %arrayidx2.i1157.12 to <2 x double>*
  %135 = bitcast double* %arrayidx2.i1157.14 to <2 x double>*
  %136 = bitcast [17 x double]* %Tppaj to <2 x double>*
  %137 = bitcast [17 x double]* %cj to <2 x double>*
  %138 = bitcast double* %arrayidx2.i1145.2 to <2 x double>*
  %139 = bitcast double* %arrayidx288.2.phi.trans.insert to <2 x double>*
  %140 = bitcast double* %arrayidx2.i1145.4 to <2 x double>*
  %141 = bitcast double* %arrayidx288.4.phi.trans.insert to <2 x double>*
  %142 = bitcast double* %arrayidx2.i1145.6 to <2 x double>*
  %143 = bitcast double* %arrayidx288.6.phi.trans.insert to <2 x double>*
  %144 = bitcast double* %arrayidx2.i1145.8 to <2 x double>*
  %145 = bitcast double* %arrayidx288.8.phi.trans.insert to <2 x double>*
  %146 = bitcast double* %arrayidx2.i1145.10 to <2 x double>*
  %147 = bitcast double* %arrayidx288.10.phi.trans.insert to <2 x double>*
  %148 = bitcast double* %arrayidx2.i1145.12 to <2 x double>*
  %149 = bitcast double* %arrayidx288.12.phi.trans.insert to <2 x double>*
  %150 = bitcast double* %arrayidx2.i1145.14 to <2 x double>*
  %151 = bitcast double* %arrayidx288.14.phi.trans.insert to <2 x double>*
  %152 = bitcast double* %arrayidx254.2.phi.trans.insert to <2 x double>*
  %153 = bitcast double* %arrayidx254.4.le to <2 x double>*
  %154 = bitcast double* %arrayidx254.6.le to <2 x double>*
  %155 = bitcast double* %arrayidx254.8.le to <2 x double>*
  %156 = bitcast double* %arrayidx254.10.le to <2 x double>*
  %157 = bitcast double* %arrayidx254.12.le to <2 x double>*
  %158 = bitcast double* %arrayidx254.14.le to <2 x double>*
  %159 = bitcast [17 x double]* %Tpaj to <2 x double>*
  %160 = bitcast [17 x double]* %aj to <2 x double>*
  %161 = bitcast double* %arrayidx2.i1157.2 to <2 x double>*
  %162 = bitcast double* %arrayidx254.2.phi.trans.insert to <2 x double>*
  %163 = bitcast double* %arrayidx2.i1157.4 to <2 x double>*
  %164 = bitcast double* %arrayidx254.4.le to <2 x double>*
  %165 = bitcast double* %arrayidx2.i1157.6 to <2 x double>*
  %166 = bitcast double* %arrayidx254.6.le to <2 x double>*
  %167 = bitcast double* %arrayidx2.i1157.8 to <2 x double>*
  %168 = bitcast double* %arrayidx254.8.le to <2 x double>*
  %169 = bitcast double* %arrayidx2.i1157.10 to <2 x double>*
  %170 = bitcast double* %arrayidx254.10.le to <2 x double>*
  %171 = bitcast double* %arrayidx2.i1157.12 to <2 x double>*
  %172 = bitcast double* %arrayidx254.12.le to <2 x double>*
  %173 = bitcast double* %arrayidx2.i1157.14 to <2 x double>*
  %174 = bitcast double* %arrayidx254.14.le to <2 x double>*
  br label %while.body

while.body:                                       ; preds = %if.end687.while.body_crit_edge, %while.body.lr.ph
  %175 = phi i32 [ 15, %while.body.lr.ph ], [ %.pre, %if.end687.while.body_crit_edge ]
  %m.01211 = phi i32 [ 0, %while.body.lr.ph ], [ %add688, %if.end687.while.body_crit_edge ]
  %BiCGStabFailed.01210 = phi i32 [ 0, %while.body.lr.ph ], [ %BiCGStabFailed.1, %if.end687.while.body_crit_edge ]
  %delta.01209 = phi double [ %call4, %while.body.lr.ph ], [ %delta.1.lcssa, %if.end687.while.body_crit_edge ]
  %BiCGStabConverged.21208 = phi i32 [ 0, %while.body.lr.ph ], [ %BiCGStabConverged.3, %if.end687.while.body_crit_edge ]
  call void @llvm.memset.p0i8.i64(i8* %z6.i, i8 0, i64 136, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %z6.i1172, i8 0, i64 136, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %z6.i1171, i8 0, i64 136, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 136, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 136, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 136, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 136, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 136, i32 16, i1 false) #1
  call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 %175, double 1.000000e+00, i32 14) #1
  %176 = load i32, i32* %arraydecay, align 16, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %176) #1
  %177 = load i32, i32* %arrayidx100.1, align 4, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %177, i32 10, double %a, double %b) #1
  %178 = load i32, i32* %arrayidx100.1, align 4, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %178) #1
  %179 = load i32, i32* %arrayidx100.2, align 8, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %179, i32 10, double %a, double %b) #1
  %180 = load i32, i32* %arrayidx100.2, align 8, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %180) #1
  %181 = load i32, i32* %arrayidx100.3, align 4, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %181, i32 10, double %a, double %b) #1
  %182 = load i32, i32* %arrayidx100.3, align 4, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %182) #1
  %183 = load i32, i32* %arrayidx100.4, align 16, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %183, i32 10, double %a, double %b) #1
  %184 = load i32, i32* %arrayidx100.4, align 16, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %184) #1
  %185 = load i32, i32* %arrayidx100.5, align 4, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %185, i32 10, double %a, double %b) #1
  %186 = load i32, i32* %arrayidx100.5, align 4, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %186) #1
  %187 = load i32, i32* %arrayidx100.6, align 8, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %187, i32 10, double %a, double %b) #1
  %188 = load i32, i32* %arrayidx100.6, align 8, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %188) #1
  %189 = load i32, i32* %arrayidx100.7, align 4, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %189, i32 10, double %a, double %b) #1
  %190 = load i32, i32* %arrayidx100.7, align 4, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %190) #1
  %191 = load i32, i32* %arrayidx100.8, align 16, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %191, i32 10, double %a, double %b) #1
  %192 = load i32, i32* %add.ptr3, align 4, !tbaa !35
  call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 %192, double 1.000000e+00, i32 13) #1
  %193 = load i32, i32* %add.ptr3, align 4, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %193) #1
  %194 = load i32, i32* %arrayidx160, align 8, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %194, i32 10, double %a, double %b) #1
  %195 = load i32, i32* %arrayidx160, align 8, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %195) #1
  %196 = load i32, i32* %arrayidx160.1, align 4, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %196, i32 10, double %a, double %b) #1
  %197 = load i32, i32* %arrayidx160.1, align 4, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %197) #1
  %198 = load i32, i32* %arrayidx160.2, align 16, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %198, i32 10, double %a, double %b) #1
  %199 = load i32, i32* %arrayidx160.2, align 16, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %199) #1
  %200 = load i32, i32* %arrayidx160.3, align 4, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %200, i32 10, double %a, double %b) #1
  %201 = load i32, i32* %arrayidx160.3, align 4, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %201) #1
  %202 = load i32, i32* %arrayidx160.4, align 8, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %202, i32 10, double %a, double %b) #1
  %203 = load i32, i32* %arrayidx160.4, align 8, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %203) #1
  %204 = load i32, i32* %arrayidx160.5, align 4, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %204, i32 10, double %a, double %b) #1
  %205 = load i32, i32* %arrayidx160.5, align 4, !tbaa !35
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 %205) #1
  %206 = load i32, i32* %arrayidx160.6, align 16, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %206, i32 10, double %a, double %b) #1
  %207 = load i32, i32* %CAKrylov_formations_of_G, align 4, !tbaa !146
  %inc164 = add nsw i32 %207, 1
  store i32 %inc164, i32* %CAKrylov_formations_of_G, align 4, !tbaa !146
  call void @matmul_grids(%struct.domain_type* %domain, i32 %level, double* %arraydecay165, i32* nonnull %arraydecay, i32* nonnull %arraydecay, i32 17, i32 18, i32 1) #1
  br label %for.cond177.preheader

for.cond177.preheader:                            ; preds = %for.cond177.preheader, %while.body
  %indvars.iv1233 = phi i64 [ 0, %while.body ], [ %indvars.iv.next1234, %for.cond177.preheader ]
  %indvars.iv1231 = phi i64 [ 0, %while.body ], [ %indvars.iv.next1232, %for.cond177.preheader ]
  %208 = or i64 %indvars.iv1233, 1
  %arrayidx1841177 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv1233
  %arrayidx188 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1231, i64 0
  %209 = bitcast double* %arrayidx1841177 to <2 x i64>*
  %210 = load <2 x i64>, <2 x i64>* %209, align 16, !tbaa !34
  %indvars.iv.next1227 = add nsw i64 %208, 1
  %211 = bitcast double* %arrayidx188 to <2 x i64>*
  store <2 x i64> %210, <2 x i64>* %211, align 8, !tbaa !34
  %arrayidx184.1 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv.next1227
  %arrayidx188.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1231, i64 2
  %212 = bitcast double* %arrayidx184.1 to <2 x i64>*
  %213 = load <2 x i64>, <2 x i64>* %212, align 16, !tbaa !34
  %indvars.iv.next1227.2 = add nsw i64 %208, 3
  %214 = bitcast double* %arrayidx188.2 to <2 x i64>*
  store <2 x i64> %213, <2 x i64>* %214, align 8, !tbaa !34
  %arrayidx184.3 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv.next1227.2
  %arrayidx188.4 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1231, i64 4
  %215 = bitcast double* %arrayidx184.3 to <2 x i64>*
  %216 = load <2 x i64>, <2 x i64>* %215, align 16, !tbaa !34
  %indvars.iv.next1227.4 = add nsw i64 %208, 5
  %217 = bitcast double* %arrayidx188.4 to <2 x i64>*
  store <2 x i64> %216, <2 x i64>* %217, align 8, !tbaa !34
  %arrayidx184.5 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv.next1227.4
  %arrayidx188.6 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1231, i64 6
  %218 = bitcast double* %arrayidx184.5 to <2 x i64>*
  %219 = load <2 x i64>, <2 x i64>* %218, align 16, !tbaa !34
  %indvars.iv.next1227.6 = add nsw i64 %208, 7
  %220 = bitcast double* %arrayidx188.6 to <2 x i64>*
  store <2 x i64> %219, <2 x i64>* %220, align 8, !tbaa !34
  %arrayidx184.7 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv.next1227.6
  %arrayidx188.8 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1231, i64 8
  %221 = bitcast double* %arrayidx184.7 to <2 x i64>*
  %222 = load <2 x i64>, <2 x i64>* %221, align 16, !tbaa !34
  %indvars.iv.next1227.8 = add nsw i64 %208, 9
  %223 = bitcast double* %arrayidx188.8 to <2 x i64>*
  store <2 x i64> %222, <2 x i64>* %223, align 8, !tbaa !34
  %arrayidx184.9 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv.next1227.8
  %arrayidx188.10 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1231, i64 10
  %224 = bitcast double* %arrayidx184.9 to <2 x i64>*
  %225 = load <2 x i64>, <2 x i64>* %224, align 16, !tbaa !34
  %indvars.iv.next1227.10 = add nsw i64 %208, 11
  %226 = bitcast double* %arrayidx188.10 to <2 x i64>*
  store <2 x i64> %225, <2 x i64>* %226, align 8, !tbaa !34
  %arrayidx184.11 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv.next1227.10
  %arrayidx188.12 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1231, i64 12
  %227 = bitcast double* %arrayidx184.11 to <2 x i64>*
  %228 = load <2 x i64>, <2 x i64>* %227, align 16, !tbaa !34
  %indvars.iv.next1227.12 = add nsw i64 %208, 13
  %229 = bitcast double* %arrayidx188.12 to <2 x i64>*
  store <2 x i64> %228, <2 x i64>* %229, align 8, !tbaa !34
  %arrayidx184.13 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv.next1227.12
  %arrayidx188.14 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1231, i64 14
  %230 = bitcast double* %arrayidx184.13 to <2 x i64>*
  %231 = load <2 x i64>, <2 x i64>* %230, align 16, !tbaa !34
  %indvars.iv.next1227.14 = add nsw i64 %208, 15
  %232 = bitcast double* %arrayidx188.14 to <2 x i64>*
  store <2 x i64> %231, <2 x i64>* %232, align 8, !tbaa !34
  %arrayidx184.15 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv.next1227.14
  %233 = bitcast double* %arrayidx184.15 to i64*
  %234 = load i64, i64* %233, align 16, !tbaa !34
  %indvars.iv.next1227.15 = add nsw i64 %208, 16
  %arrayidx188.16 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1231, i64 16
  %235 = bitcast double* %arrayidx188.16 to i64*
  store i64 %234, i64* %235, align 8, !tbaa !34
  %arrayidx184.16 = getelementptr inbounds [306 x double], [306 x double]* %Gg, i64 0, i64 %indvars.iv.next1227.15
  %236 = bitcast double* %arrayidx184.16 to i64*
  %237 = load i64, i64* %236, align 8, !tbaa !34
  %indvars.iv.next1234 = add nuw nsw i64 %indvars.iv1233, 18
  %arrayidx196 = getelementptr inbounds [17 x double], [17 x double]* %g, i64 0, i64 %indvars.iv1231
  %238 = bitcast double* %arrayidx196 to i64*
  store i64 %237, i64* %238, align 8, !tbaa !34
  %indvars.iv.next1232 = add nuw nsw i64 %indvars.iv1231, 1
  %exitcond1236 = icmp eq i64 %indvars.iv.next1232, 17
  br i1 %exitcond1236, label %for.body204.preheader, label %for.cond177.preheader

for.body204.preheader:                            ; preds = %for.cond177.preheader
  call void @llvm.memset.p0i8.i64(i8* %z6.i, i8 0, i64 136, i32 16, i1 false)
  store double 1.000000e+00, double* %arraydecay110, align 16, !tbaa !34
  call void @llvm.memset.p0i8.i64(i8* %z6.i1172, i8 0, i64 136, i32 16, i1 false)
  store double 1.000000e+00, double* %arrayidx224, align 8, !tbaa !34
  call void @llvm.memset.p0i8.i64(i8* %z6.i1171, i8 0, i64 136, i32 16, i1 false)
  %239 = load double, double* %arrayidx.i1156, align 16
  %240 = load double, double* %arrayidx.i1156.1, align 8
  %241 = load double, double* %arrayidx.i1156.2, align 16
  %242 = load double, double* %arrayidx.i1156.3, align 8
  %243 = load double, double* %arrayidx.i1156.4, align 16
  %244 = load double, double* %arrayidx.i1156.5, align 8
  %245 = load double, double* %arrayidx.i1156.6, align 16
  %246 = load double, double* %arrayidx.i1156.7, align 8
  %247 = load double, double* %arrayidx.i1156.8, align 16
  %248 = load double, double* %arrayidx.i1156.9, align 8
  %249 = load double, double* %arrayidx.i1156.10, align 16
  %250 = load double, double* %arrayidx.i1156.11, align 8
  %251 = load double, double* %arrayidx.i1156.12, align 16
  %252 = load double, double* %arrayidx.i1156.13, align 8
  %253 = load double, double* %arrayidx.i1156.14, align 16
  %254 = load double, double* %arrayidx.i1156.15, align 8
  %255 = load double, double* %arrayidx.i1156.16, align 16
  %256 = load double, double* %arrayidx.i1156, align 16
  %257 = load double, double* %arrayidx.i1156.1, align 8
  %258 = load double, double* %arrayidx.i1156.2, align 16
  %259 = load double, double* %arrayidx.i1156.3, align 8
  %260 = load double, double* %arrayidx.i1156.4, align 16
  %261 = load double, double* %arrayidx.i1156.5, align 8
  %262 = load double, double* %arrayidx.i1156.6, align 16
  %263 = load double, double* %arrayidx.i1156.7, align 8
  %264 = load double, double* %arrayidx.i1156.8, align 16
  %265 = load double, double* %arrayidx.i1156.9, align 8
  %266 = load double, double* %arrayidx.i1156.10, align 16
  %267 = load double, double* %arrayidx.i1156.11, align 8
  %268 = load double, double* %arrayidx.i1156.12, align 16
  %269 = load double, double* %arrayidx.i1156.13, align 8
  %270 = load <2 x double>, <2 x double>* %17, align 16
  %271 = load double, double* %arrayidx.i1156.16, align 16
  br label %for.body237

for.body237:                                      ; preds = %for.body204.preheader, %for.body.i1001.preheader
  %272 = phi double [ %949, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %273 = phi double [ %948, %for.body.i1001.preheader ], [ 1.000000e+00, %for.body204.preheader ]
  %.pre1356 = phi double [ %950, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %.pre1370 = phi double [ %add.i.16, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %.pre1369 = phi double [ %963, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %.pre1368 = phi double [ %962, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %.pre1367 = phi double [ %961, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %.pre1366 = phi double [ %960, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %.pre1365 = phi double [ %959, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %.pre1364 = phi double [ %958, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %.pre1363 = phi double [ %957, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %.pre1362 = phi double [ %956, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %.pre1361 = phi double [ %955, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %.pre1360 = phi double [ %954, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %.pre1359 = phi double [ %953, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %.pre1358 = phi double [ %952, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %.pre1357 = phi double [ %951, %for.body.i1001.preheader ], [ 0.000000e+00, %for.body204.preheader ]
  %n.21204 = phi i32 [ %inc638, %for.body.i1001.preheader ], [ 0, %for.body204.preheader ]
  %delta.11203 = phi double [ %add.i1006.16, %for.body.i1001.preheader ], [ %delta.01209, %for.body204.preheader ]
  %274 = load i32, i32* %Krylov_iterations, align 8, !tbaa !128
  %inc238 = add nsw i32 %274, 1
  store i32 %inc238, i32* %Krylov_iterations, align 8, !tbaa !128
  br label %for.cond244.preheader

for.cond244.preheader:                            ; preds = %for.cond244.preheader, %for.body237
  %indvars.iv1249 = phi i64 [ 0, %for.body237 ], [ %indvars.iv.next1250, %for.cond244.preheader ]
  %arrayidx252 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 0
  %275 = load double, double* %arrayidx252, align 8, !tbaa !34
  %mul255 = fmul double %275, %273
  %add256 = fadd double %mul255, 0.000000e+00
  %arrayidx252.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 1
  %276 = load double, double* %arrayidx252.1, align 8, !tbaa !34
  %mul255.1 = fmul double %276, %272
  %add256.1 = fadd double %add256, %mul255.1
  %arrayidx252.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 2
  %277 = load double, double* %arrayidx252.2, align 8, !tbaa !34
  %mul255.2 = fmul double %277, %.pre1356
  %add256.2 = fadd double %add256.1, %mul255.2
  %arrayidx252.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 3
  %278 = load double, double* %arrayidx252.3, align 8, !tbaa !34
  %mul255.3 = fmul double %278, %.pre1357
  %add256.3 = fadd double %add256.2, %mul255.3
  %arrayidx252.4 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 4
  %279 = load double, double* %arrayidx252.4, align 8, !tbaa !34
  %mul255.4 = fmul double %279, %.pre1358
  %add256.4 = fadd double %add256.3, %mul255.4
  %arrayidx252.5 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 5
  %280 = load double, double* %arrayidx252.5, align 8, !tbaa !34
  %mul255.5 = fmul double %280, %.pre1359
  %add256.5 = fadd double %add256.4, %mul255.5
  %arrayidx252.6 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 6
  %281 = load double, double* %arrayidx252.6, align 8, !tbaa !34
  %mul255.6 = fmul double %281, %.pre1360
  %add256.6 = fadd double %add256.5, %mul255.6
  %arrayidx252.7 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 7
  %282 = load double, double* %arrayidx252.7, align 8, !tbaa !34
  %mul255.7 = fmul double %282, %.pre1361
  %add256.7 = fadd double %add256.6, %mul255.7
  %arrayidx252.8 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 8
  %283 = load double, double* %arrayidx252.8, align 8, !tbaa !34
  %mul255.8 = fmul double %283, %.pre1362
  %add256.8 = fadd double %add256.7, %mul255.8
  %arrayidx252.9 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 9
  %284 = load double, double* %arrayidx252.9, align 8, !tbaa !34
  %mul255.9 = fmul double %284, %.pre1363
  %add256.9 = fadd double %add256.8, %mul255.9
  %arrayidx252.10 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 10
  %285 = load double, double* %arrayidx252.10, align 8, !tbaa !34
  %mul255.10 = fmul double %285, %.pre1364
  %add256.10 = fadd double %add256.9, %mul255.10
  %arrayidx252.11 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 11
  %286 = load double, double* %arrayidx252.11, align 8, !tbaa !34
  %mul255.11 = fmul double %286, %.pre1365
  %add256.11 = fadd double %add256.10, %mul255.11
  %arrayidx252.12 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 12
  %287 = load double, double* %arrayidx252.12, align 8, !tbaa !34
  %mul255.12 = fmul double %287, %.pre1366
  %add256.12 = fadd double %add256.11, %mul255.12
  %arrayidx252.13 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 13
  %288 = load double, double* %arrayidx252.13, align 8, !tbaa !34
  %mul255.13 = fmul double %288, %.pre1367
  %add256.13 = fadd double %add256.12, %mul255.13
  %arrayidx252.14 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 14
  %289 = load double, double* %arrayidx252.14, align 8, !tbaa !34
  %mul255.14 = fmul double %289, %.pre1368
  %add256.14 = fadd double %add256.13, %mul255.14
  %arrayidx252.15 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 15
  %290 = load double, double* %arrayidx252.15, align 8, !tbaa !34
  %mul255.15 = fmul double %290, %.pre1369
  %add256.15 = fadd double %add256.14, %mul255.15
  %arrayidx252.16 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1249, i64 16
  %291 = load double, double* %arrayidx252.16, align 8, !tbaa !34
  %mul255.16 = fmul double %291, %.pre1370
  %add256.16 = fadd double %add256.15, %mul255.16
  %arrayidx262 = getelementptr inbounds [17 x double], [17 x double]* %Tpaj, i64 0, i64 %indvars.iv1249
  %292 = load double, double* %arrayidx262, align 8, !tbaa !34
  %mul263 = fmul double %292, 0.000000e+00
  %add264 = fadd double %add256.16, %mul263
  store double %add264, double* %arrayidx262, align 8, !tbaa !34
  %indvars.iv.next1250 = add nuw nsw i64 %indvars.iv1249, 1
  %exitcond1251 = icmp eq i64 %indvars.iv.next1250, 17
  br i1 %exitcond1251, label %for.cond278.preheader.preheader, label %for.cond244.preheader

for.cond278.preheader.preheader:                  ; preds = %for.cond244.preheader
  %.pre1341 = load double, double* %arrayidx288.2.phi.trans.insert, align 16, !tbaa !34
  %.pre1342 = load double, double* %arrayidx288.3.phi.trans.insert, align 8, !tbaa !34
  %.pre1343 = load double, double* %arrayidx288.4.phi.trans.insert, align 16, !tbaa !34
  %.pre1344 = load double, double* %arrayidx288.5.phi.trans.insert, align 8, !tbaa !34
  %.pre1345 = load double, double* %arrayidx288.6.phi.trans.insert, align 16, !tbaa !34
  %.pre1346 = load double, double* %arrayidx288.7.phi.trans.insert, align 8, !tbaa !34
  %.pre1347 = load double, double* %arrayidx288.8.phi.trans.insert, align 16, !tbaa !34
  %.pre1348 = load double, double* %arrayidx224, align 8, !tbaa !34
  %.pre1349 = load double, double* %arrayidx288.10.phi.trans.insert, align 16, !tbaa !34
  %.pre1350 = load double, double* %arrayidx288.11.phi.trans.insert, align 8, !tbaa !34
  %.pre1351 = load double, double* %arrayidx288.12.phi.trans.insert, align 16, !tbaa !34
  %.pre1352 = load double, double* %arrayidx288.13.phi.trans.insert, align 8, !tbaa !34
  %.pre1353 = load double, double* %arrayidx288.14.phi.trans.insert, align 16, !tbaa !34
  %.pre1354 = load double, double* %arrayidx288.15.phi.trans.insert, align 8, !tbaa !34
  %.pre1355 = load double, double* %arrayidx288.16.phi.trans.insert, align 16, !tbaa !34
  %.pre1379 = load double, double* %arraydecay113, align 16, !tbaa !34
  %.pre1380 = load double, double* %arrayidx288.1.phi.trans.insert, align 8, !tbaa !34
  br label %for.cond278.preheader

for.cond278.preheader:                            ; preds = %for.cond278.preheader, %for.cond278.preheader.preheader
  %indvars.iv1255 = phi i64 [ 0, %for.cond278.preheader.preheader ], [ %indvars.iv.next1256, %for.cond278.preheader ]
  %arrayidx286 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 0
  %293 = load double, double* %arrayidx286, align 8, !tbaa !34
  %mul289 = fmul double %293, %.pre1379
  %add290 = fadd double %mul289, 0.000000e+00
  %arrayidx286.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 1
  %294 = load double, double* %arrayidx286.1, align 8, !tbaa !34
  %mul289.1 = fmul double %294, %.pre1380
  %add290.1 = fadd double %add290, %mul289.1
  %arrayidx286.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 2
  %295 = load double, double* %arrayidx286.2, align 8, !tbaa !34
  %mul289.2 = fmul double %295, %.pre1341
  %add290.2 = fadd double %add290.1, %mul289.2
  %arrayidx286.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 3
  %296 = load double, double* %arrayidx286.3, align 8, !tbaa !34
  %mul289.3 = fmul double %296, %.pre1342
  %add290.3 = fadd double %add290.2, %mul289.3
  %arrayidx286.4 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 4
  %297 = load double, double* %arrayidx286.4, align 8, !tbaa !34
  %mul289.4 = fmul double %297, %.pre1343
  %add290.4 = fadd double %add290.3, %mul289.4
  %arrayidx286.5 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 5
  %298 = load double, double* %arrayidx286.5, align 8, !tbaa !34
  %mul289.5 = fmul double %298, %.pre1344
  %add290.5 = fadd double %add290.4, %mul289.5
  %arrayidx286.6 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 6
  %299 = load double, double* %arrayidx286.6, align 8, !tbaa !34
  %mul289.6 = fmul double %299, %.pre1345
  %add290.6 = fadd double %add290.5, %mul289.6
  %arrayidx286.7 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 7
  %300 = load double, double* %arrayidx286.7, align 8, !tbaa !34
  %mul289.7 = fmul double %300, %.pre1346
  %add290.7 = fadd double %add290.6, %mul289.7
  %arrayidx286.8 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 8
  %301 = load double, double* %arrayidx286.8, align 8, !tbaa !34
  %mul289.8 = fmul double %301, %.pre1347
  %add290.8 = fadd double %add290.7, %mul289.8
  %arrayidx286.9 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 9
  %302 = load double, double* %arrayidx286.9, align 8, !tbaa !34
  %mul289.9 = fmul double %302, %.pre1348
  %add290.9 = fadd double %add290.8, %mul289.9
  %arrayidx286.10 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 10
  %303 = load double, double* %arrayidx286.10, align 8, !tbaa !34
  %mul289.10 = fmul double %303, %.pre1349
  %add290.10 = fadd double %add290.9, %mul289.10
  %arrayidx286.11 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 11
  %304 = load double, double* %arrayidx286.11, align 8, !tbaa !34
  %mul289.11 = fmul double %304, %.pre1350
  %add290.11 = fadd double %add290.10, %mul289.11
  %arrayidx286.12 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 12
  %305 = load double, double* %arrayidx286.12, align 8, !tbaa !34
  %mul289.12 = fmul double %305, %.pre1351
  %add290.12 = fadd double %add290.11, %mul289.12
  %arrayidx286.13 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 13
  %306 = load double, double* %arrayidx286.13, align 8, !tbaa !34
  %mul289.13 = fmul double %306, %.pre1352
  %add290.13 = fadd double %add290.12, %mul289.13
  %arrayidx286.14 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 14
  %307 = load double, double* %arrayidx286.14, align 8, !tbaa !34
  %mul289.14 = fmul double %307, %.pre1353
  %add290.14 = fadd double %add290.13, %mul289.14
  %arrayidx286.15 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 15
  %308 = load double, double* %arrayidx286.15, align 8, !tbaa !34
  %mul289.15 = fmul double %308, %.pre1354
  %add290.15 = fadd double %add290.14, %mul289.15
  %arrayidx286.16 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tp, i64 0, i64 %indvars.iv1255, i64 16
  %309 = load double, double* %arrayidx286.16, align 8, !tbaa !34
  %mul289.16 = fmul double %309, %.pre1355
  %add290.16 = fadd double %add290.15, %mul289.16
  %arrayidx296 = getelementptr inbounds [17 x double], [17 x double]* %Tpcj, i64 0, i64 %indvars.iv1255
  %310 = load double, double* %arrayidx296, align 8, !tbaa !34
  %mul297 = fmul double %310, 0.000000e+00
  %add298 = fadd double %add290.16, %mul297
  store double %add298, double* %arrayidx296, align 8, !tbaa !34
  %indvars.iv.next1256 = add nuw nsw i64 %indvars.iv1255, 1
  %exitcond1257 = icmp eq i64 %indvars.iv.next1256, 17
  br i1 %exitcond1257, label %for.cond312.preheader.preheader, label %for.cond278.preheader

for.cond312.preheader.preheader:                  ; preds = %for.cond278.preheader
  br label %for.cond312.preheader

for.cond312.preheader:                            ; preds = %for.cond312.preheader.preheader, %for.cond312.preheader
  %indvars.iv1261 = phi i64 [ %indvars.iv.next1262, %for.cond312.preheader ], [ 0, %for.cond312.preheader.preheader ]
  %arrayidx320 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 0
  %311 = load double, double* %arrayidx320, align 8, !tbaa !34
  %mul323 = fmul double %311, %273
  %add324 = fadd double %mul323, 0.000000e+00
  %arrayidx320.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 1
  %312 = load double, double* %arrayidx320.1, align 8, !tbaa !34
  %mul323.1 = fmul double %312, %272
  %add324.1 = fadd double %add324, %mul323.1
  %arrayidx320.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 2
  %313 = load double, double* %arrayidx320.2, align 8, !tbaa !34
  %mul323.2 = fmul double %313, %.pre1356
  %add324.2 = fadd double %add324.1, %mul323.2
  %arrayidx320.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 3
  %314 = load double, double* %arrayidx320.3, align 8, !tbaa !34
  %mul323.3 = fmul double %314, %.pre1357
  %add324.3 = fadd double %add324.2, %mul323.3
  %arrayidx320.4 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 4
  %315 = load double, double* %arrayidx320.4, align 8, !tbaa !34
  %mul323.4 = fmul double %315, %.pre1358
  %add324.4 = fadd double %add324.3, %mul323.4
  %arrayidx320.5 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 5
  %316 = load double, double* %arrayidx320.5, align 8, !tbaa !34
  %mul323.5 = fmul double %316, %.pre1359
  %add324.5 = fadd double %add324.4, %mul323.5
  %arrayidx320.6 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 6
  %317 = load double, double* %arrayidx320.6, align 8, !tbaa !34
  %mul323.6 = fmul double %317, %.pre1360
  %add324.6 = fadd double %add324.5, %mul323.6
  %arrayidx320.7 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 7
  %318 = load double, double* %arrayidx320.7, align 8, !tbaa !34
  %mul323.7 = fmul double %318, %.pre1361
  %add324.7 = fadd double %add324.6, %mul323.7
  %arrayidx320.8 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 8
  %319 = load double, double* %arrayidx320.8, align 8, !tbaa !34
  %mul323.8 = fmul double %319, %.pre1362
  %add324.8 = fadd double %add324.7, %mul323.8
  %arrayidx320.9 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 9
  %320 = load double, double* %arrayidx320.9, align 8, !tbaa !34
  %mul323.9 = fmul double %320, %.pre1363
  %add324.9 = fadd double %add324.8, %mul323.9
  %arrayidx320.10 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 10
  %321 = load double, double* %arrayidx320.10, align 8, !tbaa !34
  %mul323.10 = fmul double %321, %.pre1364
  %add324.10 = fadd double %add324.9, %mul323.10
  %arrayidx320.11 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 11
  %322 = load double, double* %arrayidx320.11, align 8, !tbaa !34
  %mul323.11 = fmul double %322, %.pre1365
  %add324.11 = fadd double %add324.10, %mul323.11
  %arrayidx320.12 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 12
  %323 = load double, double* %arrayidx320.12, align 8, !tbaa !34
  %mul323.12 = fmul double %323, %.pre1366
  %add324.12 = fadd double %add324.11, %mul323.12
  %arrayidx320.13 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 13
  %324 = load double, double* %arrayidx320.13, align 8, !tbaa !34
  %mul323.13 = fmul double %324, %.pre1367
  %add324.13 = fadd double %add324.12, %mul323.13
  %arrayidx320.14 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 14
  %325 = load double, double* %arrayidx320.14, align 8, !tbaa !34
  %mul323.14 = fmul double %325, %.pre1368
  %add324.14 = fadd double %add324.13, %mul323.14
  %arrayidx320.15 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 15
  %326 = load double, double* %arrayidx320.15, align 8, !tbaa !34
  %mul323.15 = fmul double %326, %.pre1369
  %add324.15 = fadd double %add324.14, %mul323.15
  %arrayidx320.16 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %Tpp, i64 0, i64 %indvars.iv1261, i64 16
  %327 = load double, double* %arrayidx320.16, align 8, !tbaa !34
  %mul323.16 = fmul double %327, %.pre1370
  %add324.16 = fadd double %add324.15, %mul323.16
  %arrayidx330 = getelementptr inbounds [17 x double], [17 x double]* %Tppaj, i64 0, i64 %indvars.iv1261
  %328 = load double, double* %arrayidx330, align 8, !tbaa !34
  %mul331 = fmul double %328, 0.000000e+00
  %add332 = fadd double %add324.16, %mul331
  store double %add332, double* %arrayidx330, align 8, !tbaa !34
  %indvars.iv.next1262 = add nuw nsw i64 %indvars.iv1261, 1
  %exitcond1263 = icmp eq i64 %indvars.iv.next1262, 17
  br i1 %exitcond1263, label %for.body.i1163.preheader, label %for.cond312.preheader

for.body.i1163.preheader:                         ; preds = %for.cond312.preheader
  %329 = load double, double* %arrayidx2.i1157, align 16, !tbaa !34
  %mul.i1158 = fmul double %239, %329
  %add.i1159 = fadd double %mul.i1158, 0.000000e+00
  %330 = load double, double* %arrayidx2.i1157.1, align 8, !tbaa !34
  %mul.i1158.1 = fmul double %240, %330
  %add.i1159.1 = fadd double %add.i1159, %mul.i1158.1
  %331 = load double, double* %arrayidx2.i1157.2, align 16, !tbaa !34
  %mul.i1158.2 = fmul double %241, %331
  %add.i1159.2 = fadd double %add.i1159.1, %mul.i1158.2
  %332 = load double, double* %arrayidx2.i1157.3, align 8, !tbaa !34
  %mul.i1158.3 = fmul double %242, %332
  %add.i1159.3 = fadd double %add.i1159.2, %mul.i1158.3
  %333 = load double, double* %arrayidx2.i1157.4, align 16, !tbaa !34
  %mul.i1158.4 = fmul double %243, %333
  %add.i1159.4 = fadd double %add.i1159.3, %mul.i1158.4
  %334 = load double, double* %arrayidx2.i1157.5, align 8, !tbaa !34
  %mul.i1158.5 = fmul double %244, %334
  %add.i1159.5 = fadd double %add.i1159.4, %mul.i1158.5
  %335 = load double, double* %arrayidx2.i1157.6, align 16, !tbaa !34
  %mul.i1158.6 = fmul double %245, %335
  %add.i1159.6 = fadd double %add.i1159.5, %mul.i1158.6
  %336 = load double, double* %arrayidx2.i1157.7, align 8, !tbaa !34
  %mul.i1158.7 = fmul double %246, %336
  %add.i1159.7 = fadd double %add.i1159.6, %mul.i1158.7
  %337 = load double, double* %arrayidx2.i1157.8, align 16, !tbaa !34
  %mul.i1158.8 = fmul double %247, %337
  %add.i1159.8 = fadd double %add.i1159.7, %mul.i1158.8
  %338 = load double, double* %arrayidx2.i1157.9, align 8, !tbaa !34
  %mul.i1158.9 = fmul double %248, %338
  %add.i1159.9 = fadd double %add.i1159.8, %mul.i1158.9
  %339 = load double, double* %arrayidx2.i1157.10, align 16, !tbaa !34
  %mul.i1158.10 = fmul double %249, %339
  %add.i1159.10 = fadd double %add.i1159.9, %mul.i1158.10
  %340 = load double, double* %arrayidx2.i1157.11, align 8, !tbaa !34
  %mul.i1158.11 = fmul double %250, %340
  %add.i1159.11 = fadd double %add.i1159.10, %mul.i1158.11
  %341 = load double, double* %arrayidx2.i1157.12, align 16, !tbaa !34
  %mul.i1158.12 = fmul double %251, %341
  %add.i1159.12 = fadd double %add.i1159.11, %mul.i1158.12
  %342 = load double, double* %arrayidx2.i1157.13, align 8, !tbaa !34
  %mul.i1158.13 = fmul double %252, %342
  %add.i1159.13 = fadd double %add.i1159.12, %mul.i1158.13
  %343 = load double, double* %arrayidx2.i1157.14, align 16, !tbaa !34
  %mul.i1158.14 = fmul double %253, %343
  %add.i1159.14 = fadd double %add.i1159.13, %mul.i1158.14
  %344 = load double, double* %arrayidx2.i1157.15, align 8, !tbaa !34
  %mul.i1158.15 = fmul double %254, %344
  %add.i1159.15 = fadd double %add.i1159.14, %mul.i1158.15
  %345 = load double, double* %arrayidx2.i1157.16, align 16, !tbaa !34
  %mul.i1158.16 = fmul double %255, %345
  %add.i1159.16 = fadd double %add.i1159.15, %mul.i1158.16
  %cmp343 = fcmp oeq double %add.i1159.16, 0.000000e+00
  br i1 %cmp343, label %for.end639, label %if.end345

if.end345:                                        ; preds = %for.body.i1163.preheader
  %div = fdiv double %delta.11203, %add.i1159.16
  %call349 = call i32 @__isinf(double %div) #11
  %tobool350 = icmp eq i32 %call349, 0
  br i1 %tobool350, label %if.end356, label %for.end639

if.end356:                                        ; preds = %if.end345
  %sub359 = fsub double -0.000000e+00, %div
  %346 = load <2 x double>, <2 x double>* %19, align 16, !tbaa !34
  %347 = load <2 x double>, <2 x double>* %20, align 16, !tbaa !34
  %348 = insertelement <2 x double> undef, double %sub359, i32 0
  %349 = insertelement <2 x double> %348, double %sub359, i32 1
  %350 = fmul <2 x double> %347, %349
  %351 = fadd <2 x double> %346, %350
  store <2 x double> %351, <2 x double>* %21, align 16, !tbaa !34
  %352 = load <2 x double>, <2 x double>* %22, align 16, !tbaa !34
  %353 = load <2 x double>, <2 x double>* %23, align 16, !tbaa !34
  %354 = fmul <2 x double> %353, %349
  %355 = fadd <2 x double> %352, %354
  store <2 x double> %355, <2 x double>* %24, align 16, !tbaa !34
  %356 = load <2 x double>, <2 x double>* %25, align 16, !tbaa !34
  %357 = load <2 x double>, <2 x double>* %26, align 16, !tbaa !34
  %358 = fmul <2 x double> %357, %349
  %359 = fadd <2 x double> %356, %358
  store <2 x double> %359, <2 x double>* %27, align 16, !tbaa !34
  %360 = load <2 x double>, <2 x double>* %28, align 16, !tbaa !34
  %361 = load <2 x double>, <2 x double>* %29, align 16, !tbaa !34
  %362 = fmul <2 x double> %361, %349
  %363 = fadd <2 x double> %360, %362
  store <2 x double> %363, <2 x double>* %30, align 16, !tbaa !34
  %364 = load <2 x double>, <2 x double>* %31, align 16, !tbaa !34
  %365 = load <2 x double>, <2 x double>* %32, align 16, !tbaa !34
  %366 = fmul <2 x double> %365, %349
  %367 = fadd <2 x double> %364, %366
  store <2 x double> %367, <2 x double>* %33, align 16, !tbaa !34
  %368 = load <2 x double>, <2 x double>* %34, align 16, !tbaa !34
  %369 = load <2 x double>, <2 x double>* %35, align 16, !tbaa !34
  %370 = fmul <2 x double> %369, %349
  %371 = fadd <2 x double> %368, %370
  store <2 x double> %371, <2 x double>* %36, align 16, !tbaa !34
  %372 = load <2 x double>, <2 x double>* %37, align 16, !tbaa !34
  %373 = load <2 x double>, <2 x double>* %38, align 16, !tbaa !34
  %374 = fmul <2 x double> %373, %349
  %375 = fadd <2 x double> %372, %374
  store <2 x double> %375, <2 x double>* %39, align 16, !tbaa !34
  %376 = load <2 x double>, <2 x double>* %40, align 16, !tbaa !34
  %377 = load <2 x double>, <2 x double>* %41, align 16, !tbaa !34
  %378 = fmul <2 x double> %377, %349
  %379 = fadd <2 x double> %376, %378
  store <2 x double> %379, <2 x double>* %42, align 16, !tbaa !34
  %380 = load double, double* %arrayidx.i1144.16, align 16, !tbaa !34
  %381 = load double, double* %arrayidx2.i1145.16, align 16, !tbaa !34
  %mul3.i1146.16 = fmul double %381, %sub359
  %add.i1147.16 = fadd double %380, %mul3.i1146.16
  store double %add.i1147.16, double* %arrayidx5.i1148.16, align 16, !tbaa !34
  %.pre1371 = load double, double* %arrayidx5.i1148.2, align 16, !tbaa !34
  %.pre1372 = load double, double* %arrayidx5.i1148.3, align 8, !tbaa !34
  %.pre1381 = load double, double* %arrayidx5.i1148, align 16, !tbaa !34
  %.pre1382 = load double, double* %arrayidx5.i1148.1, align 8, !tbaa !34
  %382 = extractelement <2 x double> %359, i32 0
  %383 = extractelement <2 x double> %359, i32 1
  %384 = extractelement <2 x double> %363, i32 0
  %385 = extractelement <2 x double> %363, i32 1
  %386 = extractelement <2 x double> %367, i32 0
  %387 = extractelement <2 x double> %367, i32 1
  %388 = extractelement <2 x double> %371, i32 0
  %389 = extractelement <2 x double> %371, i32 1
  %390 = extractelement <2 x double> %375, i32 0
  %391 = extractelement <2 x double> %375, i32 1
  %392 = extractelement <2 x double> %379, i32 0
  %393 = extractelement <2 x double> %379, i32 1
  br label %for.cond372.preheader

for.cond372.preheader:                            ; preds = %for.cond372.preheader, %if.end356
  %indvars.iv1269 = phi i64 [ 0, %if.end356 ], [ %indvars.iv.next1270, %for.cond372.preheader ]
  %arrayidx381 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 0
  %394 = load double, double* %arrayidx381, align 8, !tbaa !34
  %mul384 = fmul double %394, %.pre1381
  %add385 = fadd double %mul384, 0.000000e+00
  %arrayidx381.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 1
  %395 = load double, double* %arrayidx381.1, align 8, !tbaa !34
  %mul384.1 = fmul double %395, %.pre1382
  %add385.1 = fadd double %add385, %mul384.1
  %arrayidx381.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 2
  %396 = load double, double* %arrayidx381.2, align 8, !tbaa !34
  %mul384.2 = fmul double %396, %.pre1371
  %add385.2 = fadd double %add385.1, %mul384.2
  %arrayidx381.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 3
  %397 = load double, double* %arrayidx381.3, align 8, !tbaa !34
  %mul384.3 = fmul double %397, %.pre1372
  %add385.3 = fadd double %add385.2, %mul384.3
  %arrayidx381.4 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 4
  %398 = load double, double* %arrayidx381.4, align 8, !tbaa !34
  %mul384.4 = fmul double %398, %382
  %add385.4 = fadd double %add385.3, %mul384.4
  %arrayidx381.5 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 5
  %399 = load double, double* %arrayidx381.5, align 8, !tbaa !34
  %mul384.5 = fmul double %399, %383
  %add385.5 = fadd double %add385.4, %mul384.5
  %arrayidx381.6 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 6
  %400 = load double, double* %arrayidx381.6, align 8, !tbaa !34
  %mul384.6 = fmul double %400, %384
  %add385.6 = fadd double %add385.5, %mul384.6
  %arrayidx381.7 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 7
  %401 = load double, double* %arrayidx381.7, align 8, !tbaa !34
  %mul384.7 = fmul double %401, %385
  %add385.7 = fadd double %add385.6, %mul384.7
  %arrayidx381.8 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 8
  %402 = load double, double* %arrayidx381.8, align 8, !tbaa !34
  %mul384.8 = fmul double %402, %386
  %add385.8 = fadd double %add385.7, %mul384.8
  %arrayidx381.9 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 9
  %403 = load double, double* %arrayidx381.9, align 8, !tbaa !34
  %mul384.9 = fmul double %403, %387
  %add385.9 = fadd double %add385.8, %mul384.9
  %arrayidx381.10 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 10
  %404 = load double, double* %arrayidx381.10, align 8, !tbaa !34
  %mul384.10 = fmul double %404, %388
  %add385.10 = fadd double %add385.9, %mul384.10
  %arrayidx381.11 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 11
  %405 = load double, double* %arrayidx381.11, align 8, !tbaa !34
  %mul384.11 = fmul double %405, %389
  %add385.11 = fadd double %add385.10, %mul384.11
  %arrayidx381.12 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 12
  %406 = load double, double* %arrayidx381.12, align 8, !tbaa !34
  %mul384.12 = fmul double %406, %390
  %add385.12 = fadd double %add385.11, %mul384.12
  %arrayidx381.13 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 13
  %407 = load double, double* %arrayidx381.13, align 8, !tbaa !34
  %mul384.13 = fmul double %407, %391
  %add385.13 = fadd double %add385.12, %mul384.13
  %arrayidx381.14 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 14
  %408 = load double, double* %arrayidx381.14, align 8, !tbaa !34
  %mul384.14 = fmul double %408, %392
  %add385.14 = fadd double %add385.13, %mul384.14
  %arrayidx381.15 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 15
  %409 = load double, double* %arrayidx381.15, align 8, !tbaa !34
  %mul384.15 = fmul double %409, %393
  %add385.15 = fadd double %add385.14, %mul384.15
  %arrayidx381.16 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1269, i64 16
  %410 = load double, double* %arrayidx381.16, align 8, !tbaa !34
  %mul384.16 = fmul double %410, %add.i1147.16
  %add385.16 = fadd double %add385.15, %mul384.16
  %arrayidx391 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv1269
  %411 = load double, double* %arrayidx391, align 8, !tbaa !34
  %mul392 = fmul double %411, 0.000000e+00
  %add393 = fadd double %add385.16, %mul392
  store double %add393, double* %arrayidx391, align 8, !tbaa !34
  %indvars.iv.next1270 = add nuw nsw i64 %indvars.iv1269, 1
  %exitcond1271 = icmp eq i64 %indvars.iv.next1270, 17
  br i1 %exitcond1271, label %for.body.i1141.preheader, label %for.cond372.preheader

for.body.i1141.preheader:                         ; preds = %for.cond372.preheader
  %412 = load double, double* %arraydecay113, align 16, !tbaa !34
  %413 = load double, double* %arrayidx2.i1157, align 16, !tbaa !34
  %mul3.i1135 = fmul double %413, %sub359
  %add.i1136 = fadd double %412, %mul3.i1135
  %414 = load double, double* %arrayidx288.1.phi.trans.insert, align 8, !tbaa !34
  %415 = load double, double* %arrayidx2.i1157.1, align 8, !tbaa !34
  %mul3.i1135.1 = fmul double %415, %sub359
  %add.i1136.1 = fadd double %414, %mul3.i1135.1
  %416 = load double, double* %arrayidx288.2.phi.trans.insert, align 16, !tbaa !34
  %417 = load double, double* %arrayidx2.i1157.2, align 16, !tbaa !34
  %mul3.i1135.2 = fmul double %417, %sub359
  %add.i1136.2 = fadd double %416, %mul3.i1135.2
  %418 = load double, double* %arrayidx288.3.phi.trans.insert, align 8, !tbaa !34
  %419 = load double, double* %arrayidx2.i1157.3, align 8, !tbaa !34
  %mul3.i1135.3 = fmul double %419, %sub359
  %add.i1136.3 = fadd double %418, %mul3.i1135.3
  %420 = load double, double* %arrayidx288.4.phi.trans.insert, align 16, !tbaa !34
  %421 = load double, double* %arrayidx2.i1157.4, align 16, !tbaa !34
  %mul3.i1135.4 = fmul double %421, %sub359
  %add.i1136.4 = fadd double %420, %mul3.i1135.4
  %422 = load double, double* %arrayidx288.5.phi.trans.insert, align 8, !tbaa !34
  %423 = load double, double* %arrayidx2.i1157.5, align 8, !tbaa !34
  %mul3.i1135.5 = fmul double %423, %sub359
  %add.i1136.5 = fadd double %422, %mul3.i1135.5
  %424 = load double, double* %arrayidx288.6.phi.trans.insert, align 16, !tbaa !34
  %425 = load double, double* %arrayidx2.i1157.6, align 16, !tbaa !34
  %mul3.i1135.6 = fmul double %425, %sub359
  %add.i1136.6 = fadd double %424, %mul3.i1135.6
  %426 = load double, double* %arrayidx288.7.phi.trans.insert, align 8, !tbaa !34
  %427 = load double, double* %arrayidx2.i1157.7, align 8, !tbaa !34
  %mul3.i1135.7 = fmul double %427, %sub359
  %add.i1136.7 = fadd double %426, %mul3.i1135.7
  %428 = load double, double* %arrayidx288.8.phi.trans.insert, align 16, !tbaa !34
  %429 = load double, double* %arrayidx2.i1157.8, align 16, !tbaa !34
  %mul3.i1135.8 = fmul double %429, %sub359
  %add.i1136.8 = fadd double %428, %mul3.i1135.8
  %430 = load double, double* %arrayidx224, align 8, !tbaa !34
  %431 = load double, double* %arrayidx2.i1157.9, align 8, !tbaa !34
  %mul3.i1135.9 = fmul double %431, %sub359
  %add.i1136.9 = fadd double %430, %mul3.i1135.9
  %432 = load double, double* %arrayidx288.10.phi.trans.insert, align 16, !tbaa !34
  %433 = load double, double* %arrayidx2.i1157.10, align 16, !tbaa !34
  %mul3.i1135.10 = fmul double %433, %sub359
  %add.i1136.10 = fadd double %432, %mul3.i1135.10
  %434 = load double, double* %arrayidx288.11.phi.trans.insert, align 8, !tbaa !34
  %435 = load double, double* %arrayidx2.i1157.11, align 8, !tbaa !34
  %mul3.i1135.11 = fmul double %435, %sub359
  %add.i1136.11 = fadd double %434, %mul3.i1135.11
  %436 = load double, double* %arrayidx288.12.phi.trans.insert, align 16, !tbaa !34
  %437 = load double, double* %arrayidx2.i1157.12, align 16, !tbaa !34
  %mul3.i1135.12 = fmul double %437, %sub359
  %add.i1136.12 = fadd double %436, %mul3.i1135.12
  %438 = load double, double* %arrayidx288.13.phi.trans.insert, align 8, !tbaa !34
  %439 = load double, double* %arrayidx2.i1157.13, align 8, !tbaa !34
  %mul3.i1135.13 = fmul double %439, %sub359
  %add.i1136.13 = fadd double %438, %mul3.i1135.13
  %440 = load double, double* %arrayidx288.14.phi.trans.insert, align 16, !tbaa !34
  %441 = load double, double* %arrayidx2.i1157.14, align 16, !tbaa !34
  %mul3.i1135.14 = fmul double %441, %sub359
  %add.i1136.14 = fadd double %440, %mul3.i1135.14
  %442 = load double, double* %arrayidx288.15.phi.trans.insert, align 8, !tbaa !34
  %443 = load double, double* %arrayidx2.i1157.15, align 8, !tbaa !34
  %mul3.i1135.15 = fmul double %443, %sub359
  %add.i1136.15 = fadd double %442, %mul3.i1135.15
  %444 = load double, double* %arrayidx288.16.phi.trans.insert, align 16, !tbaa !34
  %445 = load double, double* %arrayidx2.i1157.16, align 16, !tbaa !34
  %mul3.i1135.16 = fmul double %445, %sub359
  %add.i1136.16 = fadd double %444, %mul3.i1135.16
  %446 = load double, double* %arrayidx2.i1124, align 16, !tbaa !34
  %447 = load double, double* %arrayidx2.i1124.1, align 8, !tbaa !34
  %448 = load double, double* %arrayidx2.i1124.2, align 16, !tbaa !34
  %449 = load double, double* %arrayidx2.i1124.3, align 8, !tbaa !34
  %450 = load double, double* %arrayidx2.i1124.4, align 16, !tbaa !34
  %451 = load double, double* %arrayidx2.i1124.5, align 8, !tbaa !34
  %mul.i1125.5 = fmul double %add.i1136.5, %451
  %452 = load double, double* %arrayidx2.i1124.6, align 16, !tbaa !34
  %453 = load double, double* %arrayidx2.i1124.7, align 8, !tbaa !34
  %454 = load double, double* %arrayidx2.i1124.8, align 16, !tbaa !34
  %455 = load double, double* %arrayidx2.i1124.9, align 8, !tbaa !34
  %456 = load double, double* %arrayidx2.i1124.10, align 16, !tbaa !34
  %457 = load double, double* %arrayidx2.i1124.11, align 8, !tbaa !34
  %458 = load double, double* %arrayidx2.i1124.12, align 16, !tbaa !34
  %459 = load double, double* %arrayidx2.i1124.13, align 8, !tbaa !34
  %460 = load double, double* %arrayidx2.i1124.14, align 16, !tbaa !34
  %461 = load double, double* %arrayidx2.i1124.15, align 8, !tbaa !34
  %462 = load double, double* %arrayidx2.i1124.16, align 16, !tbaa !34
  %463 = load double, double* %arrayidx5.i1148, align 16, !tbaa !34
  %464 = insertelement <2 x double> undef, double %add.i1136, i32 0
  %465 = insertelement <2 x double> %464, double %463, i32 1
  %466 = insertelement <2 x double> undef, double %446, i32 0
  %467 = insertelement <2 x double> %466, double %446, i32 1
  %468 = fmul <2 x double> %465, %467
  %469 = fadd <2 x double> %468, zeroinitializer
  %470 = load double, double* %arrayidx5.i1148.1, align 8, !tbaa !34
  %471 = insertelement <2 x double> undef, double %add.i1136.1, i32 0
  %472 = insertelement <2 x double> %471, double %470, i32 1
  %473 = insertelement <2 x double> undef, double %447, i32 0
  %474 = insertelement <2 x double> %473, double %447, i32 1
  %475 = fmul <2 x double> %472, %474
  %476 = fadd <2 x double> %469, %475
  %477 = load double, double* %arrayidx5.i1148.2, align 16, !tbaa !34
  %478 = insertelement <2 x double> undef, double %add.i1136.2, i32 0
  %479 = insertelement <2 x double> %478, double %477, i32 1
  %480 = insertelement <2 x double> undef, double %448, i32 0
  %481 = insertelement <2 x double> %480, double %448, i32 1
  %482 = fmul <2 x double> %479, %481
  %483 = fadd <2 x double> %476, %482
  %484 = load double, double* %arrayidx5.i1148.3, align 8, !tbaa !34
  %485 = insertelement <2 x double> undef, double %add.i1136.3, i32 0
  %486 = insertelement <2 x double> %485, double %484, i32 1
  %487 = insertelement <2 x double> undef, double %449, i32 0
  %488 = insertelement <2 x double> %487, double %449, i32 1
  %489 = fmul <2 x double> %486, %488
  %490 = fadd <2 x double> %483, %489
  %491 = load double, double* %arrayidx5.i1148.4, align 16, !tbaa !34
  %492 = insertelement <2 x double> undef, double %add.i1136.4, i32 0
  %493 = insertelement <2 x double> %492, double %491, i32 1
  %494 = insertelement <2 x double> undef, double %450, i32 0
  %495 = insertelement <2 x double> %494, double %450, i32 1
  %496 = fmul <2 x double> %493, %495
  %497 = fadd <2 x double> %490, %496
  %498 = load double, double* %arrayidx5.i1148.5, align 8, !tbaa !34
  %mul.i1114.5 = fmul double %498, %451
  %499 = insertelement <2 x double> undef, double %mul.i1125.5, i32 0
  %500 = insertelement <2 x double> %499, double %mul.i1114.5, i32 1
  %501 = fadd <2 x double> %497, %500
  %502 = load double, double* %arrayidx5.i1148.6, align 16, !tbaa !34
  %503 = insertelement <2 x double> undef, double %add.i1136.6, i32 0
  %504 = insertelement <2 x double> %503, double %502, i32 1
  %505 = insertelement <2 x double> undef, double %452, i32 0
  %506 = insertelement <2 x double> %505, double %452, i32 1
  %507 = fmul <2 x double> %504, %506
  %508 = fadd <2 x double> %501, %507
  %509 = load double, double* %arrayidx5.i1148.7, align 8, !tbaa !34
  %510 = insertelement <2 x double> undef, double %add.i1136.7, i32 0
  %511 = insertelement <2 x double> %510, double %509, i32 1
  %512 = insertelement <2 x double> undef, double %453, i32 0
  %513 = insertelement <2 x double> %512, double %453, i32 1
  %514 = fmul <2 x double> %511, %513
  %515 = fadd <2 x double> %508, %514
  %516 = load double, double* %arrayidx5.i1148.8, align 16, !tbaa !34
  %517 = insertelement <2 x double> undef, double %add.i1136.8, i32 0
  %518 = insertelement <2 x double> %517, double %516, i32 1
  %519 = insertelement <2 x double> undef, double %454, i32 0
  %520 = insertelement <2 x double> %519, double %454, i32 1
  %521 = fmul <2 x double> %518, %520
  %522 = fadd <2 x double> %515, %521
  %523 = load double, double* %arrayidx5.i1148.9, align 8, !tbaa !34
  %524 = insertelement <2 x double> undef, double %add.i1136.9, i32 0
  %525 = insertelement <2 x double> %524, double %523, i32 1
  %526 = insertelement <2 x double> undef, double %455, i32 0
  %527 = insertelement <2 x double> %526, double %455, i32 1
  %528 = fmul <2 x double> %525, %527
  %529 = fadd <2 x double> %522, %528
  %530 = load double, double* %arrayidx5.i1148.10, align 16, !tbaa !34
  %531 = insertelement <2 x double> undef, double %add.i1136.10, i32 0
  %532 = insertelement <2 x double> %531, double %530, i32 1
  %533 = insertelement <2 x double> undef, double %456, i32 0
  %534 = insertelement <2 x double> %533, double %456, i32 1
  %535 = fmul <2 x double> %532, %534
  %536 = fadd <2 x double> %529, %535
  %537 = load double, double* %arrayidx5.i1148.11, align 8, !tbaa !34
  %538 = insertelement <2 x double> undef, double %add.i1136.11, i32 0
  %539 = insertelement <2 x double> %538, double %537, i32 1
  %540 = insertelement <2 x double> undef, double %457, i32 0
  %541 = insertelement <2 x double> %540, double %457, i32 1
  %542 = fmul <2 x double> %539, %541
  %543 = fadd <2 x double> %536, %542
  %544 = load double, double* %arrayidx5.i1148.12, align 16, !tbaa !34
  %545 = insertelement <2 x double> undef, double %add.i1136.12, i32 0
  %546 = insertelement <2 x double> %545, double %544, i32 1
  %547 = insertelement <2 x double> undef, double %458, i32 0
  %548 = insertelement <2 x double> %547, double %458, i32 1
  %549 = fmul <2 x double> %546, %548
  %550 = fadd <2 x double> %543, %549
  %551 = load double, double* %arrayidx5.i1148.13, align 8, !tbaa !34
  %552 = insertelement <2 x double> undef, double %add.i1136.13, i32 0
  %553 = insertelement <2 x double> %552, double %551, i32 1
  %554 = insertelement <2 x double> undef, double %459, i32 0
  %555 = insertelement <2 x double> %554, double %459, i32 1
  %556 = fmul <2 x double> %553, %555
  %557 = fadd <2 x double> %550, %556
  %558 = load double, double* %arrayidx5.i1148.14, align 16, !tbaa !34
  %559 = insertelement <2 x double> undef, double %add.i1136.14, i32 0
  %560 = insertelement <2 x double> %559, double %558, i32 1
  %561 = insertelement <2 x double> undef, double %460, i32 0
  %562 = insertelement <2 x double> %561, double %460, i32 1
  %563 = fmul <2 x double> %560, %562
  %564 = fadd <2 x double> %557, %563
  %565 = load double, double* %arrayidx5.i1148.15, align 8, !tbaa !34
  %566 = insertelement <2 x double> undef, double %add.i1136.15, i32 0
  %567 = insertelement <2 x double> %566, double %565, i32 1
  %568 = insertelement <2 x double> undef, double %461, i32 0
  %569 = insertelement <2 x double> %568, double %461, i32 1
  %570 = fmul <2 x double> %567, %569
  %571 = fadd <2 x double> %564, %570
  %572 = load double, double* %arrayidx5.i1148.16, align 16, !tbaa !34
  %573 = insertelement <2 x double> undef, double %add.i1136.16, i32 0
  %574 = insertelement <2 x double> %573, double %572, i32 1
  %575 = insertelement <2 x double> undef, double %462, i32 0
  %576 = insertelement <2 x double> %575, double %462, i32 1
  %577 = fmul <2 x double> %574, %576
  %578 = fadd <2 x double> %571, %577
  %579 = load <2 x double>, <2 x double>* %43, align 16, !tbaa !34
  %580 = load <2 x double>, <2 x double>* %44, align 16, !tbaa !34
  %581 = insertelement <2 x double> undef, double %div, i32 0
  %582 = insertelement <2 x double> %581, double %div, i32 1
  %583 = fmul <2 x double> %582, %580
  %584 = fadd <2 x double> %579, %583
  store <2 x double> %584, <2 x double>* %45, align 16, !tbaa !34
  %585 = load <2 x double>, <2 x double>* %46, align 16, !tbaa !34
  %586 = load <2 x double>, <2 x double>* %47, align 16, !tbaa !34
  %587 = fmul <2 x double> %582, %586
  %588 = fadd <2 x double> %585, %587
  store <2 x double> %588, <2 x double>* %48, align 16, !tbaa !34
  %589 = load <2 x double>, <2 x double>* %49, align 16, !tbaa !34
  %590 = load <2 x double>, <2 x double>* %50, align 16, !tbaa !34
  %591 = fmul <2 x double> %582, %590
  %592 = fadd <2 x double> %589, %591
  store <2 x double> %592, <2 x double>* %51, align 16, !tbaa !34
  %593 = load <2 x double>, <2 x double>* %52, align 16, !tbaa !34
  %594 = load <2 x double>, <2 x double>* %53, align 16, !tbaa !34
  %595 = fmul <2 x double> %582, %594
  %596 = fadd <2 x double> %593, %595
  store <2 x double> %596, <2 x double>* %54, align 16, !tbaa !34
  %597 = load <2 x double>, <2 x double>* %55, align 16, !tbaa !34
  %598 = load <2 x double>, <2 x double>* %56, align 16, !tbaa !34
  %599 = fmul <2 x double> %582, %598
  %600 = fadd <2 x double> %597, %599
  store <2 x double> %600, <2 x double>* %57, align 16, !tbaa !34
  %601 = load <2 x double>, <2 x double>* %58, align 16, !tbaa !34
  %602 = load <2 x double>, <2 x double>* %59, align 16, !tbaa !34
  %603 = fmul <2 x double> %582, %602
  %604 = fadd <2 x double> %601, %603
  store <2 x double> %604, <2 x double>* %60, align 16, !tbaa !34
  %605 = load <2 x double>, <2 x double>* %61, align 16, !tbaa !34
  %606 = load <2 x double>, <2 x double>* %62, align 16, !tbaa !34
  %607 = fmul <2 x double> %582, %606
  %608 = fadd <2 x double> %605, %607
  store <2 x double> %608, <2 x double>* %63, align 16, !tbaa !34
  %609 = load <2 x double>, <2 x double>* %64, align 16, !tbaa !34
  %610 = load <2 x double>, <2 x double>* %65, align 16, !tbaa !34
  %611 = fmul <2 x double> %582, %610
  %612 = fadd <2 x double> %609, %611
  store <2 x double> %612, <2 x double>* %66, align 16, !tbaa !34
  %613 = load double, double* %arrayidx.i1100.16, align 16, !tbaa !34
  %614 = load double, double* %arrayidx254.16.le, align 16, !tbaa !34
  %mul3.i1102.16 = fmul double %div, %614
  %add.i1103.16 = fadd double %613, %mul3.i1102.16
  store double %add.i1103.16, double* %arrayidx.i1100.16, align 16, !tbaa !34
  %615 = load <2 x double>, <2 x double>* %67, align 16, !tbaa !34
  %616 = load <2 x double>, <2 x double>* %68, align 16, !tbaa !34
  %617 = fmul <2 x double> %615, %349
  %618 = fadd <2 x double> %616, %617
  store <2 x double> %618, <2 x double>* %69, align 16, !tbaa !34
  %619 = load <2 x double>, <2 x double>* %70, align 16, !tbaa !34
  %620 = load <2 x double>, <2 x double>* %71, align 16, !tbaa !34
  %621 = fmul <2 x double> %619, %349
  %622 = fadd <2 x double> %620, %621
  store <2 x double> %622, <2 x double>* %72, align 16, !tbaa !34
  %623 = load <2 x double>, <2 x double>* %73, align 16, !tbaa !34
  %624 = load <2 x double>, <2 x double>* %74, align 16, !tbaa !34
  %625 = fmul <2 x double> %624, %349
  %626 = fadd <2 x double> %623, %625
  store <2 x double> %626, <2 x double>* %75, align 16, !tbaa !34
  %627 = load <2 x double>, <2 x double>* %76, align 16, !tbaa !34
  %628 = load <2 x double>, <2 x double>* %77, align 16, !tbaa !34
  %629 = fmul <2 x double> %628, %349
  %630 = fadd <2 x double> %627, %629
  store <2 x double> %630, <2 x double>* %78, align 16, !tbaa !34
  %631 = load <2 x double>, <2 x double>* %79, align 16, !tbaa !34
  %632 = load <2 x double>, <2 x double>* %80, align 16, !tbaa !34
  %633 = fmul <2 x double> %632, %349
  %634 = fadd <2 x double> %631, %633
  store <2 x double> %634, <2 x double>* %81, align 16, !tbaa !34
  %635 = load <2 x double>, <2 x double>* %82, align 16, !tbaa !34
  %636 = load <2 x double>, <2 x double>* %83, align 16, !tbaa !34
  %637 = fmul <2 x double> %636, %349
  %638 = fadd <2 x double> %635, %637
  store <2 x double> %638, <2 x double>* %84, align 16, !tbaa !34
  %639 = load <2 x double>, <2 x double>* %85, align 16, !tbaa !34
  %640 = load <2 x double>, <2 x double>* %86, align 16, !tbaa !34
  %641 = fmul <2 x double> %640, %349
  %642 = fadd <2 x double> %639, %641
  store <2 x double> %642, <2 x double>* %87, align 16, !tbaa !34
  %643 = load <2 x double>, <2 x double>* %88, align 16, !tbaa !34
  %644 = load <2 x double>, <2 x double>* %89, align 16, !tbaa !34
  %645 = fmul <2 x double> %644, %349
  %646 = fadd <2 x double> %643, %645
  store <2 x double> %646, <2 x double>* %90, align 16, !tbaa !34
  %647 = load double, double* %arrayidx288.16.phi.trans.insert, align 16, !tbaa !34
  %648 = load double, double* %arrayidx2.i1157.16, align 16, !tbaa !34
  %mul3.i1091.16 = fmul double %648, %sub359
  %add.i1092.16 = fadd double %647, %mul3.i1091.16
  store double %add.i1092.16, double* %arrayidx5.i1148.16, align 16, !tbaa !34
  %649 = extractelement <2 x double> %618, i32 0
  %650 = extractelement <2 x double> %618, i32 1
  %651 = extractelement <2 x double> %622, i32 0
  %652 = extractelement <2 x double> %622, i32 1
  %653 = extractelement <2 x double> %626, i32 0
  %654 = extractelement <2 x double> %626, i32 1
  %655 = extractelement <2 x double> %630, i32 0
  %656 = extractelement <2 x double> %630, i32 1
  %657 = extractelement <2 x double> %634, i32 0
  %658 = extractelement <2 x double> %634, i32 1
  %659 = extractelement <2 x double> %638, i32 0
  %660 = extractelement <2 x double> %638, i32 1
  %661 = extractelement <2 x double> %642, i32 0
  %662 = extractelement <2 x double> %642, i32 1
  %663 = extractelement <2 x double> %646, i32 0
  %664 = extractelement <2 x double> %646, i32 1
  br label %for.cond435.preheader

for.cond435.preheader:                            ; preds = %for.cond435.preheader, %for.body.i1141.preheader
  %indvars.iv1280 = phi i64 [ 0, %for.body.i1141.preheader ], [ %indvars.iv.next1281, %for.cond435.preheader ]
  %arrayidx444 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 0
  %665 = load double, double* %arrayidx444, align 8, !tbaa !34
  %mul447 = fmul double %665, %649
  %add448 = fadd double %mul447, 0.000000e+00
  %arrayidx444.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 1
  %666 = load double, double* %arrayidx444.1, align 8, !tbaa !34
  %mul447.1 = fmul double %666, %650
  %add448.1 = fadd double %add448, %mul447.1
  %arrayidx444.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 2
  %667 = load double, double* %arrayidx444.2, align 8, !tbaa !34
  %mul447.2 = fmul double %667, %651
  %add448.2 = fadd double %add448.1, %mul447.2
  %arrayidx444.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 3
  %668 = load double, double* %arrayidx444.3, align 8, !tbaa !34
  %mul447.3 = fmul double %668, %652
  %add448.3 = fadd double %add448.2, %mul447.3
  %arrayidx444.4 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 4
  %669 = load double, double* %arrayidx444.4, align 8, !tbaa !34
  %mul447.4 = fmul double %669, %653
  %add448.4 = fadd double %add448.3, %mul447.4
  %arrayidx444.5 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 5
  %670 = load double, double* %arrayidx444.5, align 8, !tbaa !34
  %mul447.5 = fmul double %670, %654
  %add448.5 = fadd double %add448.4, %mul447.5
  %arrayidx444.6 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 6
  %671 = load double, double* %arrayidx444.6, align 8, !tbaa !34
  %mul447.6 = fmul double %671, %655
  %add448.6 = fadd double %add448.5, %mul447.6
  %arrayidx444.7 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 7
  %672 = load double, double* %arrayidx444.7, align 8, !tbaa !34
  %mul447.7 = fmul double %672, %656
  %add448.7 = fadd double %add448.6, %mul447.7
  %arrayidx444.8 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 8
  %673 = load double, double* %arrayidx444.8, align 8, !tbaa !34
  %mul447.8 = fmul double %673, %657
  %add448.8 = fadd double %add448.7, %mul447.8
  %arrayidx444.9 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 9
  %674 = load double, double* %arrayidx444.9, align 8, !tbaa !34
  %mul447.9 = fmul double %674, %658
  %add448.9 = fadd double %add448.8, %mul447.9
  %arrayidx444.10 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 10
  %675 = load double, double* %arrayidx444.10, align 8, !tbaa !34
  %mul447.10 = fmul double %675, %659
  %add448.10 = fadd double %add448.9, %mul447.10
  %arrayidx444.11 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 11
  %676 = load double, double* %arrayidx444.11, align 8, !tbaa !34
  %mul447.11 = fmul double %676, %660
  %add448.11 = fadd double %add448.10, %mul447.11
  %arrayidx444.12 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 12
  %677 = load double, double* %arrayidx444.12, align 8, !tbaa !34
  %mul447.12 = fmul double %677, %661
  %add448.12 = fadd double %add448.11, %mul447.12
  %arrayidx444.13 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 13
  %678 = load double, double* %arrayidx444.13, align 8, !tbaa !34
  %mul447.13 = fmul double %678, %662
  %add448.13 = fadd double %add448.12, %mul447.13
  %arrayidx444.14 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 14
  %679 = load double, double* %arrayidx444.14, align 8, !tbaa !34
  %mul447.14 = fmul double %679, %663
  %add448.14 = fadd double %add448.13, %mul447.14
  %arrayidx444.15 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 15
  %680 = load double, double* %arrayidx444.15, align 8, !tbaa !34
  %mul447.15 = fmul double %680, %664
  %add448.15 = fadd double %add448.14, %mul447.15
  %arrayidx444.16 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1280, i64 16
  %681 = load double, double* %arrayidx444.16, align 8, !tbaa !34
  %mul447.16 = fmul double %681, %add.i1092.16
  %add448.16 = fadd double %add448.15, %mul447.16
  %arrayidx454 = getelementptr inbounds [17 x double], [17 x double]* %temp2, i64 0, i64 %indvars.iv1280
  %682 = load double, double* %arrayidx454, align 8, !tbaa !34
  %mul455 = fmul double %682, 0.000000e+00
  %add456 = fadd double %add448.16, %mul455
  store double %add456, double* %arrayidx454, align 8, !tbaa !34
  %indvars.iv.next1281 = add nuw nsw i64 %indvars.iv1280, 1
  %exitcond1282 = icmp eq i64 %indvars.iv.next1281, 17
  br i1 %exitcond1282, label %for.body.i1086.preheader, label %for.cond435.preheader

for.body.i1086.preheader:                         ; preds = %for.cond435.preheader
  %.lcssa1430 = phi double [ %664, %for.cond435.preheader ]
  %.lcssa1429 = phi double [ %663, %for.cond435.preheader ]
  %.lcssa1428 = phi double [ %662, %for.cond435.preheader ]
  %.lcssa1427 = phi double [ %661, %for.cond435.preheader ]
  %.lcssa1426 = phi double [ %660, %for.cond435.preheader ]
  %.lcssa1425 = phi double [ %659, %for.cond435.preheader ]
  %.lcssa1424 = phi double [ %658, %for.cond435.preheader ]
  %.lcssa1423 = phi double [ %657, %for.cond435.preheader ]
  %.lcssa1422 = phi double [ %656, %for.cond435.preheader ]
  %.lcssa1421 = phi double [ %655, %for.cond435.preheader ]
  %.lcssa1420 = phi double [ %654, %for.cond435.preheader ]
  %.lcssa1419 = phi double [ %653, %for.cond435.preheader ]
  %.lcssa1418 = phi double [ %652, %for.cond435.preheader ]
  %.lcssa1417 = phi double [ %651, %for.cond435.preheader ]
  %.lcssa1416 = phi double [ %650, %for.cond435.preheader ]
  %.lcssa = phi double [ %649, %for.cond435.preheader ]
  %683 = load double, double* %arrayidx2.i1124, align 16, !tbaa !34
  %mul.i1081 = fmul double %.lcssa, %683
  %add.i1082 = fadd double %mul.i1081, 0.000000e+00
  %684 = load double, double* %arrayidx2.i1124.1, align 8, !tbaa !34
  %mul.i1081.1 = fmul double %.lcssa1416, %684
  %add.i1082.1 = fadd double %add.i1082, %mul.i1081.1
  %685 = load double, double* %arrayidx2.i1124.2, align 16, !tbaa !34
  %mul.i1081.2 = fmul double %.lcssa1417, %685
  %add.i1082.2 = fadd double %add.i1082.1, %mul.i1081.2
  %686 = load double, double* %arrayidx2.i1124.3, align 8, !tbaa !34
  %mul.i1081.3 = fmul double %.lcssa1418, %686
  %add.i1082.3 = fadd double %add.i1082.2, %mul.i1081.3
  %687 = load double, double* %arrayidx2.i1124.4, align 16, !tbaa !34
  %mul.i1081.4 = fmul double %.lcssa1419, %687
  %add.i1082.4 = fadd double %add.i1082.3, %mul.i1081.4
  %688 = load double, double* %arrayidx2.i1124.5, align 8, !tbaa !34
  %mul.i1081.5 = fmul double %.lcssa1420, %688
  %add.i1082.5 = fadd double %add.i1082.4, %mul.i1081.5
  %689 = load double, double* %arrayidx2.i1124.6, align 16, !tbaa !34
  %mul.i1081.6 = fmul double %.lcssa1421, %689
  %add.i1082.6 = fadd double %add.i1082.5, %mul.i1081.6
  %690 = load double, double* %arrayidx2.i1124.7, align 8, !tbaa !34
  %mul.i1081.7 = fmul double %.lcssa1422, %690
  %add.i1082.7 = fadd double %add.i1082.6, %mul.i1081.7
  %691 = load double, double* %arrayidx2.i1124.8, align 16, !tbaa !34
  %mul.i1081.8 = fmul double %.lcssa1423, %691
  %add.i1082.8 = fadd double %add.i1082.7, %mul.i1081.8
  %692 = load double, double* %arrayidx2.i1124.9, align 8, !tbaa !34
  %mul.i1081.9 = fmul double %.lcssa1424, %692
  %add.i1082.9 = fadd double %add.i1082.8, %mul.i1081.9
  %693 = load double, double* %arrayidx2.i1124.10, align 16, !tbaa !34
  %mul.i1081.10 = fmul double %.lcssa1425, %693
  %add.i1082.10 = fadd double %add.i1082.9, %mul.i1081.10
  %694 = load double, double* %arrayidx2.i1124.11, align 8, !tbaa !34
  %mul.i1081.11 = fmul double %.lcssa1426, %694
  %add.i1082.11 = fadd double %add.i1082.10, %mul.i1081.11
  %695 = load double, double* %arrayidx2.i1124.12, align 16, !tbaa !34
  %mul.i1081.12 = fmul double %.lcssa1427, %695
  %add.i1082.12 = fadd double %add.i1082.11, %mul.i1081.12
  %696 = load double, double* %arrayidx2.i1124.13, align 8, !tbaa !34
  %mul.i1081.13 = fmul double %.lcssa1428, %696
  %add.i1082.13 = fadd double %add.i1082.12, %mul.i1081.13
  %697 = load double, double* %arrayidx2.i1124.14, align 16, !tbaa !34
  %mul.i1081.14 = fmul double %.lcssa1429, %697
  %add.i1082.14 = fadd double %add.i1082.13, %mul.i1081.14
  %698 = load double, double* %arrayidx2.i1124.15, align 8, !tbaa !34
  %mul.i1081.15 = fmul double %.lcssa1430, %698
  %add.i1082.15 = fadd double %add.i1082.14, %mul.i1081.15
  %699 = load double, double* %arrayidx2.i1124.16, align 16, !tbaa !34
  %mul.i1081.16 = fmul double %add.i1092.16, %699
  %add.i1082.16 = fadd double %add.i1082.15, %mul.i1081.16
  %cmp467 = fcmp olt double %add.i1082.16, 0.000000e+00
  br i1 %cmp467, label %if.end471, label %if.else

if.else:                                          ; preds = %for.body.i1086.preheader
  %call470 = call double @sqrt(double %add.i1082.16) #1
  br label %if.end471

if.end471:                                        ; preds = %for.body.i1086.preheader, %if.else
  %L2_norm_of_s.0 = phi double [ %call470, %if.else ], [ 0.000000e+00, %for.body.i1086.preheader ]
  %cmp473 = fcmp olt double %L2_norm_of_s.0, %mul472
  br i1 %cmp473, label %for.end639, label %if.end476

if.end476:                                        ; preds = %if.end471
  %700 = extractelement <2 x double> %578, i32 1
  %cmp477 = fcmp oeq double %700, 0.000000e+00
  br i1 %cmp477, label %for.end639, label %if.end480

if.end480:                                        ; preds = %if.end476
  %701 = extractelement <2 x double> %578, i32 0
  %div481 = fdiv double %701, %700
  %call488 = call i32 @__isinf(double %div481) #11
  %tobool489 = icmp eq i32 %call488, 0
  br i1 %tobool489, label %for.body.i1075.preheader, label %for.end639

for.body.i1075.preheader:                         ; preds = %if.end480
  %702 = load <2 x double>, <2 x double>* %91, align 16, !tbaa !34
  %703 = insertelement <2 x double> undef, double %div481, i32 0
  %704 = insertelement <2 x double> %703, double %div481, i32 1
  %705 = fmul <2 x double> %704, %616
  %706 = fadd <2 x double> %702, %705
  %707 = load <2 x double>, <2 x double>* %92, align 16, !tbaa !34
  %708 = fmul <2 x double> %704, %620
  %709 = fadd <2 x double> %707, %708
  %710 = load <2 x double>, <2 x double>* %93, align 16, !tbaa !34
  %711 = fmul <2 x double> %704, %623
  %712 = fadd <2 x double> %710, %711
  %713 = load <2 x double>, <2 x double>* %94, align 16, !tbaa !34
  %714 = fmul <2 x double> %704, %627
  %715 = fadd <2 x double> %713, %714
  %716 = load <2 x double>, <2 x double>* %95, align 16, !tbaa !34
  %717 = fmul <2 x double> %704, %631
  %718 = fadd <2 x double> %716, %717
  %719 = load <2 x double>, <2 x double>* %96, align 16, !tbaa !34
  %720 = fmul <2 x double> %704, %635
  %721 = fadd <2 x double> %719, %720
  %722 = load <2 x double>, <2 x double>* %97, align 16, !tbaa !34
  %723 = fmul <2 x double> %704, %639
  %724 = fadd <2 x double> %722, %723
  %725 = fmul <2 x double> %704, %643
  %726 = fadd <2 x double> %612, %725
  %mul3.i1069.16 = fmul double %div481, %647
  %add.i1070.16 = fadd double %add.i1103.16, %mul3.i1069.16
  %sub503 = fsub double -0.000000e+00, %div481
  %mul504 = fmul double %div, %sub503
  %727 = insertelement <2 x double> undef, double %mul504, i32 0
  %728 = insertelement <2 x double> %727, double %mul504, i32 1
  %729 = fmul <2 x double> %728, %615
  %730 = fadd <2 x double> %706, %729
  store <2 x double> %730, <2 x double>* %98, align 16, !tbaa !34
  %731 = fmul <2 x double> %728, %619
  %732 = fadd <2 x double> %709, %731
  store <2 x double> %732, <2 x double>* %99, align 16, !tbaa !34
  %733 = load <2 x double>, <2 x double>* %100, align 16, !tbaa !34
  %734 = fmul <2 x double> %728, %733
  %735 = fadd <2 x double> %712, %734
  store <2 x double> %735, <2 x double>* %101, align 16, !tbaa !34
  %736 = load <2 x double>, <2 x double>* %102, align 16, !tbaa !34
  %737 = fmul <2 x double> %728, %736
  %738 = fadd <2 x double> %715, %737
  store <2 x double> %738, <2 x double>* %103, align 16, !tbaa !34
  %739 = load <2 x double>, <2 x double>* %104, align 16, !tbaa !34
  %740 = fmul <2 x double> %728, %739
  %741 = fadd <2 x double> %718, %740
  store <2 x double> %741, <2 x double>* %105, align 16, !tbaa !34
  %742 = load <2 x double>, <2 x double>* %106, align 16, !tbaa !34
  %743 = fmul <2 x double> %728, %742
  %744 = fadd <2 x double> %721, %743
  store <2 x double> %744, <2 x double>* %107, align 16, !tbaa !34
  %745 = load <2 x double>, <2 x double>* %108, align 16, !tbaa !34
  %746 = fmul <2 x double> %728, %745
  %747 = fadd <2 x double> %724, %746
  store <2 x double> %747, <2 x double>* %109, align 16, !tbaa !34
  %748 = load <2 x double>, <2 x double>* %110, align 16, !tbaa !34
  %749 = fmul <2 x double> %728, %748
  %750 = fadd <2 x double> %726, %749
  store <2 x double> %750, <2 x double>* %111, align 16, !tbaa !34
  %751 = load double, double* %arrayidx2.i1157.16, align 16, !tbaa !34
  %mul3.i1058.16 = fmul double %mul504, %751
  %add.i1059.16 = fadd double %add.i1070.16, %mul3.i1058.16
  store double %add.i1059.16, double* %arrayidx.i1100.16, align 16, !tbaa !34
  %752 = load <2 x double>, <2 x double>* %112, align 16, !tbaa !34
  %753 = load <2 x double>, <2 x double>* %113, align 16, !tbaa !34
  %754 = insertelement <2 x double> undef, double %sub503, i32 0
  %755 = insertelement <2 x double> %754, double %sub503, i32 1
  %756 = fmul <2 x double> %753, %755
  %757 = fadd <2 x double> %752, %756
  %758 = load <2 x double>, <2 x double>* %114, align 16, !tbaa !34
  %759 = load <2 x double>, <2 x double>* %115, align 16, !tbaa !34
  %760 = fmul <2 x double> %759, %755
  %761 = fadd <2 x double> %758, %760
  %762 = load <2 x double>, <2 x double>* %116, align 16, !tbaa !34
  %763 = load <2 x double>, <2 x double>* %117, align 16, !tbaa !34
  %764 = fmul <2 x double> %763, %755
  %765 = fadd <2 x double> %762, %764
  %766 = load <2 x double>, <2 x double>* %118, align 16, !tbaa !34
  %767 = load <2 x double>, <2 x double>* %119, align 16, !tbaa !34
  %768 = fmul <2 x double> %767, %755
  %769 = fadd <2 x double> %766, %768
  %770 = load <2 x double>, <2 x double>* %120, align 16, !tbaa !34
  %771 = load <2 x double>, <2 x double>* %121, align 16, !tbaa !34
  %772 = fmul <2 x double> %771, %755
  %773 = fadd <2 x double> %770, %772
  %774 = load <2 x double>, <2 x double>* %122, align 16, !tbaa !34
  %775 = load <2 x double>, <2 x double>* %123, align 16, !tbaa !34
  %776 = fmul <2 x double> %775, %755
  %777 = fadd <2 x double> %774, %776
  %778 = load <2 x double>, <2 x double>* %124, align 16, !tbaa !34
  %779 = load <2 x double>, <2 x double>* %125, align 16, !tbaa !34
  %780 = fmul <2 x double> %779, %755
  %781 = fadd <2 x double> %778, %780
  %782 = load <2 x double>, <2 x double>* %126, align 16, !tbaa !34
  %783 = load <2 x double>, <2 x double>* %127, align 16, !tbaa !34
  %784 = fmul <2 x double> %783, %755
  %785 = fadd <2 x double> %782, %784
  %786 = load double, double* %arrayidx288.16.phi.trans.insert, align 16, !tbaa !34
  %787 = load double, double* %arrayidx.i1144.16, align 16, !tbaa !34
  %mul3.i1047.16 = fmul double %787, %sub503
  %add.i1048.16 = fadd double %786, %mul3.i1047.16
  %788 = load <2 x double>, <2 x double>* %128, align 16, !tbaa !34
  %789 = fmul <2 x double> %788, %349
  %790 = fadd <2 x double> %757, %789
  %791 = load <2 x double>, <2 x double>* %129, align 16, !tbaa !34
  %792 = fmul <2 x double> %791, %349
  %793 = fadd <2 x double> %761, %792
  %794 = load <2 x double>, <2 x double>* %130, align 16, !tbaa !34
  %795 = fmul <2 x double> %794, %349
  %796 = fadd <2 x double> %765, %795
  %797 = load <2 x double>, <2 x double>* %131, align 16, !tbaa !34
  %798 = fmul <2 x double> %797, %349
  %799 = fadd <2 x double> %769, %798
  %800 = load <2 x double>, <2 x double>* %132, align 16, !tbaa !34
  %801 = fmul <2 x double> %800, %349
  %802 = fadd <2 x double> %773, %801
  %803 = load <2 x double>, <2 x double>* %133, align 16, !tbaa !34
  %804 = fmul <2 x double> %803, %349
  %805 = fadd <2 x double> %777, %804
  %806 = load <2 x double>, <2 x double>* %134, align 16, !tbaa !34
  %807 = fmul <2 x double> %806, %349
  %808 = fadd <2 x double> %781, %807
  %809 = load <2 x double>, <2 x double>* %135, align 16, !tbaa !34
  %810 = fmul <2 x double> %809, %349
  %811 = fadd <2 x double> %785, %810
  %812 = load double, double* %arrayidx2.i1157.16, align 16, !tbaa !34
  %mul3.i1036.16 = fmul double %812, %sub359
  %add.i1037.16 = fadd double %add.i1048.16, %mul3.i1036.16
  %mul522 = fmul double %div, %div481
  %813 = load <2 x double>, <2 x double>* %136, align 16, !tbaa !34
  %814 = insertelement <2 x double> undef, double %mul522, i32 0
  %815 = insertelement <2 x double> %814, double %mul522, i32 1
  %816 = fmul <2 x double> %815, %813
  %817 = fadd <2 x double> %790, %816
  store <2 x double> %817, <2 x double>* %137, align 16, !tbaa !34
  %818 = load <2 x double>, <2 x double>* %138, align 16, !tbaa !34
  %819 = fmul <2 x double> %815, %818
  %820 = fadd <2 x double> %793, %819
  store <2 x double> %820, <2 x double>* %139, align 16, !tbaa !34
  %821 = load <2 x double>, <2 x double>* %140, align 16, !tbaa !34
  %822 = fmul <2 x double> %815, %821
  %823 = fadd <2 x double> %796, %822
  store <2 x double> %823, <2 x double>* %141, align 16, !tbaa !34
  %824 = load <2 x double>, <2 x double>* %142, align 16, !tbaa !34
  %825 = fmul <2 x double> %815, %824
  %826 = fadd <2 x double> %799, %825
  store <2 x double> %826, <2 x double>* %143, align 16, !tbaa !34
  %827 = load <2 x double>, <2 x double>* %144, align 16, !tbaa !34
  %828 = fmul <2 x double> %815, %827
  %829 = fadd <2 x double> %802, %828
  store <2 x double> %829, <2 x double>* %145, align 16, !tbaa !34
  %830 = load <2 x double>, <2 x double>* %146, align 16, !tbaa !34
  %831 = fmul <2 x double> %815, %830
  %832 = fadd <2 x double> %805, %831
  store <2 x double> %832, <2 x double>* %147, align 16, !tbaa !34
  %833 = load <2 x double>, <2 x double>* %148, align 16, !tbaa !34
  %834 = fmul <2 x double> %815, %833
  %835 = fadd <2 x double> %808, %834
  store <2 x double> %835, <2 x double>* %149, align 16, !tbaa !34
  %836 = load <2 x double>, <2 x double>* %150, align 16, !tbaa !34
  %837 = fmul <2 x double> %815, %836
  %838 = fadd <2 x double> %811, %837
  store <2 x double> %838, <2 x double>* %151, align 16, !tbaa !34
  %839 = load double, double* %arrayidx2.i1145.16, align 16, !tbaa !34
  %mul3.i1025.16 = fmul double %mul522, %839
  %add.i1026.16 = fadd double %add.i1037.16, %mul3.i1025.16
  store double %add.i1026.16, double* %arrayidx288.16.phi.trans.insert, align 16, !tbaa !34
  %840 = extractelement <2 x double> %817, i32 0
  %841 = extractelement <2 x double> %817, i32 1
  %842 = extractelement <2 x double> %820, i32 0
  %843 = extractelement <2 x double> %820, i32 1
  %844 = extractelement <2 x double> %823, i32 0
  %845 = extractelement <2 x double> %823, i32 1
  %846 = extractelement <2 x double> %826, i32 0
  %847 = extractelement <2 x double> %826, i32 1
  %848 = extractelement <2 x double> %829, i32 0
  %849 = extractelement <2 x double> %829, i32 1
  %850 = extractelement <2 x double> %832, i32 0
  %851 = extractelement <2 x double> %832, i32 1
  %852 = extractelement <2 x double> %835, i32 0
  %853 = extractelement <2 x double> %835, i32 1
  %854 = extractelement <2 x double> %838, i32 0
  %855 = extractelement <2 x double> %838, i32 1
  br label %for.cond535.preheader

for.cond535.preheader:                            ; preds = %for.cond535.preheader, %for.body.i1075.preheader
  %indvars.iv1292 = phi i64 [ 0, %for.body.i1075.preheader ], [ %indvars.iv.next1293, %for.cond535.preheader ]
  %arrayidx544 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 0
  %856 = load double, double* %arrayidx544, align 8, !tbaa !34
  %mul547 = fmul double %856, %840
  %add548 = fadd double %mul547, 0.000000e+00
  %arrayidx544.1 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 1
  %857 = load double, double* %arrayidx544.1, align 8, !tbaa !34
  %mul547.1 = fmul double %857, %841
  %add548.1 = fadd double %add548, %mul547.1
  %arrayidx544.2 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 2
  %858 = load double, double* %arrayidx544.2, align 8, !tbaa !34
  %mul547.2 = fmul double %858, %842
  %add548.2 = fadd double %add548.1, %mul547.2
  %arrayidx544.3 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 3
  %859 = load double, double* %arrayidx544.3, align 8, !tbaa !34
  %mul547.3 = fmul double %859, %843
  %add548.3 = fadd double %add548.2, %mul547.3
  %arrayidx544.4 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 4
  %860 = load double, double* %arrayidx544.4, align 8, !tbaa !34
  %mul547.4 = fmul double %860, %844
  %add548.4 = fadd double %add548.3, %mul547.4
  %arrayidx544.5 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 5
  %861 = load double, double* %arrayidx544.5, align 8, !tbaa !34
  %mul547.5 = fmul double %861, %845
  %add548.5 = fadd double %add548.4, %mul547.5
  %arrayidx544.6 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 6
  %862 = load double, double* %arrayidx544.6, align 8, !tbaa !34
  %mul547.6 = fmul double %862, %846
  %add548.6 = fadd double %add548.5, %mul547.6
  %arrayidx544.7 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 7
  %863 = load double, double* %arrayidx544.7, align 8, !tbaa !34
  %mul547.7 = fmul double %863, %847
  %add548.7 = fadd double %add548.6, %mul547.7
  %arrayidx544.8 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 8
  %864 = load double, double* %arrayidx544.8, align 8, !tbaa !34
  %mul547.8 = fmul double %864, %848
  %add548.8 = fadd double %add548.7, %mul547.8
  %arrayidx544.9 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 9
  %865 = load double, double* %arrayidx544.9, align 8, !tbaa !34
  %mul547.9 = fmul double %865, %849
  %add548.9 = fadd double %add548.8, %mul547.9
  %arrayidx544.10 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 10
  %866 = load double, double* %arrayidx544.10, align 8, !tbaa !34
  %mul547.10 = fmul double %866, %850
  %add548.10 = fadd double %add548.9, %mul547.10
  %arrayidx544.11 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 11
  %867 = load double, double* %arrayidx544.11, align 8, !tbaa !34
  %mul547.11 = fmul double %867, %851
  %add548.11 = fadd double %add548.10, %mul547.11
  %arrayidx544.12 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 12
  %868 = load double, double* %arrayidx544.12, align 8, !tbaa !34
  %mul547.12 = fmul double %868, %852
  %add548.12 = fadd double %add548.11, %mul547.12
  %arrayidx544.13 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 13
  %869 = load double, double* %arrayidx544.13, align 8, !tbaa !34
  %mul547.13 = fmul double %869, %853
  %add548.13 = fadd double %add548.12, %mul547.13
  %arrayidx544.14 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 14
  %870 = load double, double* %arrayidx544.14, align 8, !tbaa !34
  %mul547.14 = fmul double %870, %854
  %add548.14 = fadd double %add548.13, %mul547.14
  %arrayidx544.15 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 15
  %871 = load double, double* %arrayidx544.15, align 8, !tbaa !34
  %mul547.15 = fmul double %871, %855
  %add548.15 = fadd double %add548.14, %mul547.15
  %arrayidx544.16 = getelementptr inbounds [17 x [17 x double]], [17 x [17 x double]]* %G, i64 0, i64 %indvars.iv1292, i64 16
  %872 = load double, double* %arrayidx544.16, align 8, !tbaa !34
  %mul547.16 = fmul double %872, %add.i1026.16
  %add548.16 = fadd double %add548.15, %mul547.16
  %arrayidx554 = getelementptr inbounds [17 x double], [17 x double]* %temp1, i64 0, i64 %indvars.iv1292
  %873 = load double, double* %arrayidx554, align 8, !tbaa !34
  %mul555 = fmul double %873, 0.000000e+00
  %add556 = fadd double %add548.16, %mul555
  store double %add556, double* %arrayidx554, align 8, !tbaa !34
  %indvars.iv.next1293 = add nuw nsw i64 %indvars.iv1292, 1
  %exitcond1294 = icmp eq i64 %indvars.iv.next1293, 17
  br i1 %exitcond1294, label %for.body.i1020.preheader, label %for.cond535.preheader

for.body.i1020.preheader:                         ; preds = %for.cond535.preheader
  %.lcssa1446 = phi double [ %855, %for.cond535.preheader ]
  %.lcssa1445 = phi double [ %854, %for.cond535.preheader ]
  %.lcssa1444 = phi double [ %853, %for.cond535.preheader ]
  %.lcssa1443 = phi double [ %852, %for.cond535.preheader ]
  %.lcssa1442 = phi double [ %851, %for.cond535.preheader ]
  %.lcssa1441 = phi double [ %850, %for.cond535.preheader ]
  %.lcssa1440 = phi double [ %849, %for.cond535.preheader ]
  %.lcssa1439 = phi double [ %848, %for.cond535.preheader ]
  %.lcssa1438 = phi double [ %847, %for.cond535.preheader ]
  %.lcssa1437 = phi double [ %846, %for.cond535.preheader ]
  %.lcssa1436 = phi double [ %845, %for.cond535.preheader ]
  %.lcssa1435 = phi double [ %844, %for.cond535.preheader ]
  %.lcssa1434 = phi double [ %843, %for.cond535.preheader ]
  %.lcssa1433 = phi double [ %842, %for.cond535.preheader ]
  %.lcssa1432 = phi double [ %841, %for.cond535.preheader ]
  %.lcssa1431 = phi double [ %840, %for.cond535.preheader ]
  %874 = load double, double* %arrayidx5.i1148, align 16, !tbaa !34
  %mul.i1015 = fmul double %.lcssa1431, %874
  %add.i1016 = fadd double %mul.i1015, 0.000000e+00
  %875 = load double, double* %arrayidx5.i1148.1, align 8, !tbaa !34
  %mul.i1015.1 = fmul double %.lcssa1432, %875
  %add.i1016.1 = fadd double %add.i1016, %mul.i1015.1
  %876 = load double, double* %arrayidx5.i1148.2, align 16, !tbaa !34
  %mul.i1015.2 = fmul double %.lcssa1433, %876
  %add.i1016.2 = fadd double %add.i1016.1, %mul.i1015.2
  %877 = load double, double* %arrayidx5.i1148.3, align 8, !tbaa !34
  %mul.i1015.3 = fmul double %.lcssa1434, %877
  %add.i1016.3 = fadd double %add.i1016.2, %mul.i1015.3
  %878 = load double, double* %arrayidx5.i1148.4, align 16, !tbaa !34
  %mul.i1015.4 = fmul double %.lcssa1435, %878
  %add.i1016.4 = fadd double %add.i1016.3, %mul.i1015.4
  %879 = load double, double* %arrayidx5.i1148.5, align 8, !tbaa !34
  %mul.i1015.5 = fmul double %.lcssa1436, %879
  %add.i1016.5 = fadd double %add.i1016.4, %mul.i1015.5
  %880 = load double, double* %arrayidx5.i1148.6, align 16, !tbaa !34
  %mul.i1015.6 = fmul double %.lcssa1437, %880
  %add.i1016.6 = fadd double %add.i1016.5, %mul.i1015.6
  %881 = load double, double* %arrayidx5.i1148.7, align 8, !tbaa !34
  %mul.i1015.7 = fmul double %.lcssa1438, %881
  %add.i1016.7 = fadd double %add.i1016.6, %mul.i1015.7
  %882 = load double, double* %arrayidx5.i1148.8, align 16, !tbaa !34
  %mul.i1015.8 = fmul double %.lcssa1439, %882
  %add.i1016.8 = fadd double %add.i1016.7, %mul.i1015.8
  %883 = load double, double* %arrayidx5.i1148.9, align 8, !tbaa !34
  %mul.i1015.9 = fmul double %.lcssa1440, %883
  %add.i1016.9 = fadd double %add.i1016.8, %mul.i1015.9
  %884 = load double, double* %arrayidx5.i1148.10, align 16, !tbaa !34
  %mul.i1015.10 = fmul double %.lcssa1441, %884
  %add.i1016.10 = fadd double %add.i1016.9, %mul.i1015.10
  %885 = load double, double* %arrayidx5.i1148.11, align 8, !tbaa !34
  %mul.i1015.11 = fmul double %.lcssa1442, %885
  %add.i1016.11 = fadd double %add.i1016.10, %mul.i1015.11
  %886 = load double, double* %arrayidx5.i1148.12, align 16, !tbaa !34
  %mul.i1015.12 = fmul double %.lcssa1443, %886
  %add.i1016.12 = fadd double %add.i1016.11, %mul.i1015.12
  %887 = load double, double* %arrayidx5.i1148.13, align 8, !tbaa !34
  %mul.i1015.13 = fmul double %.lcssa1444, %887
  %add.i1016.13 = fadd double %add.i1016.12, %mul.i1015.13
  %888 = load double, double* %arrayidx5.i1148.14, align 16, !tbaa !34
  %mul.i1015.14 = fmul double %.lcssa1445, %888
  %add.i1016.14 = fadd double %add.i1016.13, %mul.i1015.14
  %889 = load double, double* %arrayidx5.i1148.15, align 8, !tbaa !34
  %mul.i1015.15 = fmul double %.lcssa1446, %889
  %add.i1016.15 = fadd double %add.i1016.14, %mul.i1015.15
  %890 = load double, double* %arrayidx5.i1148.16, align 16, !tbaa !34
  %mul.i1015.16 = fmul double %add.i1026.16, %890
  %add.i1016.16 = fadd double %add.i1016.15, %mul.i1015.16
  %cmp567 = fcmp ogt double %add.i1016.16, 0.000000e+00
  br i1 %cmp567, label %if.then569, label %if.end571

if.then569:                                       ; preds = %for.body.i1020.preheader
  %call570 = call double @sqrt(double %add.i1016.16) #1
  br label %if.end571

if.end571:                                        ; preds = %if.then569, %for.body.i1020.preheader
  %L2_norm_of_residual.0 = phi double [ %call570, %if.then569 ], [ 0.000000e+00, %for.body.i1020.preheader ]
  %cmp573 = fcmp olt double %L2_norm_of_residual.0, %mul472
  br i1 %cmp573, label %for.end639, label %for.body.i1010.preheader

for.body.i1010.preheader:                         ; preds = %if.end571
  %mul.i = fmul double %256, %.lcssa1431
  %add.i1006 = fadd double %mul.i, 0.000000e+00
  %mul.i.1 = fmul double %257, %.lcssa1432
  %add.i1006.1 = fadd double %add.i1006, %mul.i.1
  %mul.i.2 = fmul double %258, %.lcssa1433
  %add.i1006.2 = fadd double %add.i1006.1, %mul.i.2
  %mul.i.3 = fmul double %259, %.lcssa1434
  %add.i1006.3 = fadd double %add.i1006.2, %mul.i.3
  %mul.i.4 = fmul double %260, %.lcssa1435
  %add.i1006.4 = fadd double %add.i1006.3, %mul.i.4
  %mul.i.5 = fmul double %261, %.lcssa1436
  %add.i1006.5 = fadd double %add.i1006.4, %mul.i.5
  %mul.i.6 = fmul double %262, %.lcssa1437
  %add.i1006.6 = fadd double %add.i1006.5, %mul.i.6
  %mul.i.7 = fmul double %263, %.lcssa1438
  %add.i1006.7 = fadd double %add.i1006.6, %mul.i.7
  %mul.i.8 = fmul double %264, %.lcssa1439
  %add.i1006.8 = fadd double %add.i1006.7, %mul.i.8
  %mul.i.9 = fmul double %265, %.lcssa1440
  %add.i1006.9 = fadd double %add.i1006.8, %mul.i.9
  %mul.i.10 = fmul double %266, %.lcssa1441
  %add.i1006.10 = fadd double %add.i1006.9, %mul.i.10
  %mul.i.11 = fmul double %267, %.lcssa1442
  %add.i1006.11 = fadd double %add.i1006.10, %mul.i.11
  %mul.i.12 = fmul double %268, %.lcssa1443
  %add.i1006.12 = fadd double %add.i1006.11, %mul.i.12
  %mul.i.13 = fmul double %269, %.lcssa1444
  %add.i1006.13 = fadd double %add.i1006.12, %mul.i.13
  %891 = fmul <2 x double> %270, %838
  %892 = extractelement <2 x double> %891, i32 0
  %add.i1006.14 = fadd double %add.i1006.13, %892
  %893 = extractelement <2 x double> %891, i32 1
  %add.i1006.15 = fadd double %add.i1006.14, %893
  %mul.i.16 = fmul double %271, %add.i1026.16
  %add.i1006.16 = fadd double %add.i1006.15, %mul.i.16
  %call588 = call i32 @__isinf(double %add.i1006.16) #11
  %tobool589 = icmp ne i32 %call588, 0
  %cmp596 = fcmp oeq double %add.i1006.16, 0.000000e+00
  %or.cond989 = or i1 %cmp596, %tobool589
  %cmp600 = fcmp oeq double %div481, 0.000000e+00
  %or.cond990 = or i1 %cmp600, %or.cond989
  br i1 %or.cond990, label %for.end639, label %if.end603

if.end603:                                        ; preds = %for.body.i1010.preheader
  %div604 = fdiv double %add.i1006.16, %delta.11203
  %div605 = fdiv double %div, %div481
  %mul606 = fmul double %div605, %div604
  %call613 = call i32 @__isinf(double %mul606) #11
  %tobool614 = icmp ne i32 %call613, 0
  %cmp621 = fcmp oeq double %mul606, 0.000000e+00
  %or.cond991 = or i1 %cmp621, %tobool614
  br i1 %or.cond991, label %for.end639, label %for.body.i1001.preheader

for.body.i1001.preheader:                         ; preds = %if.end603
  %894 = load <2 x double>, <2 x double>* %18, align 16, !tbaa !34
  %895 = insertelement <2 x double> undef, double %mul606, i32 0
  %896 = insertelement <2 x double> %895, double %mul606, i32 1
  %897 = fmul <2 x double> %896, %894
  %898 = fadd <2 x double> %817, %897
  %899 = load <2 x double>, <2 x double>* %152, align 16, !tbaa !34
  %900 = fmul <2 x double> %896, %899
  %901 = fadd <2 x double> %820, %900
  %902 = load <2 x double>, <2 x double>* %153, align 16, !tbaa !34
  %903 = fmul <2 x double> %896, %902
  %904 = fadd <2 x double> %823, %903
  %905 = load <2 x double>, <2 x double>* %154, align 16, !tbaa !34
  %906 = fmul <2 x double> %896, %905
  %907 = fadd <2 x double> %826, %906
  %908 = load <2 x double>, <2 x double>* %155, align 16, !tbaa !34
  %909 = fmul <2 x double> %896, %908
  %910 = fadd <2 x double> %829, %909
  %911 = load <2 x double>, <2 x double>* %156, align 16, !tbaa !34
  %912 = fmul <2 x double> %896, %911
  %913 = fadd <2 x double> %832, %912
  %914 = load <2 x double>, <2 x double>* %157, align 16, !tbaa !34
  %915 = fmul <2 x double> %896, %914
  %916 = fadd <2 x double> %835, %915
  %917 = load <2 x double>, <2 x double>* %158, align 16, !tbaa !34
  %918 = fmul <2 x double> %896, %917
  %919 = fadd <2 x double> %838, %918
  %920 = load double, double* %arrayidx254.16.le, align 16, !tbaa !34
  %mul3.i995.16 = fmul double %mul606, %920
  %add.i996.16 = fadd double %add.i1026.16, %mul3.i995.16
  %mul633 = fmul double %mul606, %sub503
  %921 = load <2 x double>, <2 x double>* %159, align 16, !tbaa !34
  %922 = insertelement <2 x double> undef, double %mul633, i32 0
  %923 = insertelement <2 x double> %922, double %mul633, i32 1
  %924 = fmul <2 x double> %923, %921
  %925 = fadd <2 x double> %898, %924
  store <2 x double> %925, <2 x double>* %160, align 16, !tbaa !34
  %926 = load <2 x double>, <2 x double>* %161, align 16, !tbaa !34
  %927 = fmul <2 x double> %923, %926
  %928 = fadd <2 x double> %901, %927
  store <2 x double> %928, <2 x double>* %162, align 16, !tbaa !34
  %929 = load <2 x double>, <2 x double>* %163, align 16, !tbaa !34
  %930 = fmul <2 x double> %923, %929
  %931 = fadd <2 x double> %904, %930
  store <2 x double> %931, <2 x double>* %164, align 16, !tbaa !34
  %932 = load <2 x double>, <2 x double>* %165, align 16, !tbaa !34
  %933 = fmul <2 x double> %923, %932
  %934 = fadd <2 x double> %907, %933
  store <2 x double> %934, <2 x double>* %166, align 16, !tbaa !34
  %935 = load <2 x double>, <2 x double>* %167, align 16, !tbaa !34
  %936 = fmul <2 x double> %923, %935
  %937 = fadd <2 x double> %910, %936
  store <2 x double> %937, <2 x double>* %168, align 16, !tbaa !34
  %938 = load <2 x double>, <2 x double>* %169, align 16, !tbaa !34
  %939 = fmul <2 x double> %923, %938
  %940 = fadd <2 x double> %913, %939
  store <2 x double> %940, <2 x double>* %170, align 16, !tbaa !34
  %941 = load <2 x double>, <2 x double>* %171, align 16, !tbaa !34
  %942 = fmul <2 x double> %923, %941
  %943 = fadd <2 x double> %916, %942
  store <2 x double> %943, <2 x double>* %172, align 16, !tbaa !34
  %944 = load <2 x double>, <2 x double>* %173, align 16, !tbaa !34
  %945 = fmul <2 x double> %923, %944
  %946 = fadd <2 x double> %919, %945
  store <2 x double> %946, <2 x double>* %174, align 16, !tbaa !34
  %947 = load double, double* %arrayidx2.i1157.16, align 16, !tbaa !34
  %mul3.i.16 = fmul double %mul633, %947
  %add.i.16 = fadd double %add.i996.16, %mul3.i.16
  store double %add.i.16, double* %arrayidx254.16.le, align 16, !tbaa !34
  %inc638 = add nuw nsw i32 %n.21204, 1
  %cmp236 = icmp slt i32 %inc638, 4
  %948 = extractelement <2 x double> %925, i32 0
  %949 = extractelement <2 x double> %925, i32 1
  %950 = extractelement <2 x double> %928, i32 0
  %951 = extractelement <2 x double> %928, i32 1
  %952 = extractelement <2 x double> %931, i32 0
  %953 = extractelement <2 x double> %931, i32 1
  %954 = extractelement <2 x double> %934, i32 0
  %955 = extractelement <2 x double> %934, i32 1
  %956 = extractelement <2 x double> %937, i32 0
  %957 = extractelement <2 x double> %937, i32 1
  %958 = extractelement <2 x double> %940, i32 0
  %959 = extractelement <2 x double> %940, i32 1
  %960 = extractelement <2 x double> %943, i32 0
  %961 = extractelement <2 x double> %943, i32 1
  %962 = extractelement <2 x double> %946, i32 0
  %963 = extractelement <2 x double> %946, i32 1
  br i1 %cmp236, label %for.body237, label %for.end639

for.end639:                                       ; preds = %if.end603, %for.body.i1010.preheader, %if.end571, %if.end480, %if.end476, %if.end471, %if.end345, %for.body.i1163.preheader, %for.body.i1001.preheader
  %delta.1.lcssa = phi double [ %delta.11203, %if.end603 ], [ %delta.11203, %for.body.i1010.preheader ], [ %delta.11203, %if.end571 ], [ %delta.11203, %if.end480 ], [ %delta.11203, %if.end476 ], [ %delta.11203, %if.end471 ], [ %delta.11203, %if.end345 ], [ %delta.11203, %for.body.i1163.preheader ], [ %add.i1006.16, %for.body.i1001.preheader ]
  %BiCGStabConverged.3 = phi i32 [ %BiCGStabConverged.21208, %if.end603 ], [ %BiCGStabConverged.21208, %for.body.i1010.preheader ], [ 1, %if.end571 ], [ %BiCGStabConverged.21208, %if.end480 ], [ %BiCGStabConverged.21208, %if.end476 ], [ 1, %if.end471 ], [ %BiCGStabConverged.21208, %if.end345 ], [ %BiCGStabConverged.21208, %for.body.i1163.preheader ], [ %BiCGStabConverged.21208, %for.body.i1001.preheader ]
  %BiCGStabFailed.1 = phi i32 [ 1, %if.end603 ], [ 1, %for.body.i1010.preheader ], [ %BiCGStabFailed.01210, %if.end571 ], [ 1, %if.end480 ], [ 1, %if.end476 ], [ %BiCGStabFailed.01210, %if.end471 ], [ 1, %if.end345 ], [ 1, %for.body.i1163.preheader ], [ %BiCGStabFailed.01210, %for.body.i1001.preheader ]
  br label %for.body645

for.body645:                                      ; preds = %for.body645, %for.end639
  %indvars.iv1299 = phi i64 [ 0, %for.end639 ], [ %indvars.iv.next1300, %for.body645 ]
  %arrayidx647 = getelementptr inbounds [17 x double], [17 x double]* %ej, i64 0, i64 %indvars.iv1299
  %964 = load double, double* %arrayidx647, align 8, !tbaa !34
  %arrayidx649 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 %indvars.iv1299
  %965 = load i32, i32* %arrayidx649, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 %e_id, double 1.000000e+00, i32 %e_id, double %964, i32 %965) #1
  %indvars.iv.next1300 = add nuw nsw i64 %indvars.iv1299, 1
  %exitcond1301 = icmp eq i64 %indvars.iv.next1300, 17
  br i1 %exitcond1301, label %for.end652, label %for.body645

for.end652:                                       ; preds = %for.body645
  %966 = or i32 %BiCGStabFailed.1, %BiCGStabConverged.3
  %967 = icmp eq i32 %966, 0
  br i1 %967, label %if.then656, label %while.end.loopexit

if.then656:                                       ; preds = %for.end652
  %968 = load double, double* %arraydecay110, align 16, !tbaa !34
  %969 = load i32, i32* %arraydecay, align 16, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 14, double 0.000000e+00, i32 14, double %968, i32 %969) #1
  br label %for.body664

for.body664:                                      ; preds = %for.body664, %if.then656
  %indvars.iv1302 = phi i64 [ 1, %if.then656 ], [ %indvars.iv.next1303, %for.body664 ]
  %arrayidx666 = getelementptr inbounds [17 x double], [17 x double]* %aj, i64 0, i64 %indvars.iv1302
  %970 = load double, double* %arrayidx666, align 8, !tbaa !34
  %arrayidx668 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 %indvars.iv1302
  %971 = load i32, i32* %arrayidx668, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 14, double %970, i32 %971) #1
  %indvars.iv.next1303 = add nuw nsw i64 %indvars.iv1302, 1
  %exitcond1304 = icmp eq i64 %indvars.iv.next1303, 17
  br i1 %exitcond1304, label %for.end671, label %for.body664

for.end671:                                       ; preds = %for.body664
  %972 = load double, double* %arraydecay113, align 16, !tbaa !34
  %973 = load i32, i32* %arraydecay, align 16, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 13, double 0.000000e+00, i32 13, double %972, i32 %973) #1
  br label %for.body679

for.body679:                                      ; preds = %for.body679, %for.end671
  %indvars.iv1305 = phi i64 [ 1, %for.end671 ], [ %indvars.iv.next1306, %for.body679 ]
  %arrayidx681 = getelementptr inbounds [17 x double], [17 x double]* %cj, i64 0, i64 %indvars.iv1305
  %974 = load double, double* %arrayidx681, align 8, !tbaa !34
  %arrayidx683 = getelementptr inbounds [18 x i32], [18 x i32]* %PRrt, i64 0, i64 %indvars.iv1305
  %975 = load i32, i32* %arrayidx683, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 13, double %974, i32 %975) #1
  %indvars.iv.next1306 = add nuw nsw i64 %indvars.iv1305, 1
  %exitcond1307 = icmp eq i64 %indvars.iv.next1306, 17
  br i1 %exitcond1307, label %if.end687, label %for.body679

if.end687:                                        ; preds = %for.body679
  %add688 = add nuw nsw i32 %m.01211, 4
  %notlhs = icmp slt i32 %add688, 200
  %976 = and i1 %967, %notlhs
  br i1 %976, label %if.end687.while.body_crit_edge, label %while.end.loopexit

if.end687.while.body_crit_edge:                   ; preds = %if.end687
  %.pre = load i32, i32* %arraydecay, align 16, !tbaa !35
  br label %while.body

while.end.loopexit:                               ; preds = %if.end687, %for.end652
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 %e_id, double 1.000000e+00, i32 4, i32 %e_id) #1
  call void @llvm.lifetime.end(i64 72, i8* %10) #1
  call void @llvm.lifetime.end(i64 2448, i8* %9) #1
  call void @llvm.lifetime.end(i64 136, i8* %8) #1
  call void @llvm.lifetime.end(i64 2312, i8* %7) #1
  call void @llvm.lifetime.end(i64 136, i8* %6) #1
  call void @llvm.lifetime.end(i64 136, i8* %5) #1
  call void @llvm.lifetime.end(i64 136, i8* %4) #1
  call void @llvm.lifetime.end(i64 136, i8* %z6.i1171) #1
  call void @llvm.lifetime.end(i64 136, i8* %z6.i1172) #1
  call void @llvm.lifetime.end(i64 136, i8* %z6.i) #1
  call void @llvm.lifetime.end(i64 2312, i8* %1) #1
  call void @llvm.lifetime.end(i64 2312, i8* %0) #1
  call void @llvm.lifetime.end(i64 136, i8* %3) #1
  call void @llvm.lifetime.end(i64 136, i8* %2) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @BiCGStab(%struct.domain_type* %domain, i32 %level, i32 %x_id, i32 %R_id, double %a, double %b, double %desired_reduction_in_norm) #3 {
entry:
  tail call void @residual(%struct.domain_type* %domain, i32 %level, i32 12, i32 %x_id, i32 %R_id, double %a, double %b) #1
  tail call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 12) #1
  tail call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 12) #1
  %call = tail call double @dot(%struct.domain_type* %domain, i32 %level, i32 13, i32 12) #1
  %call1 = tail call double @norm(%struct.domain_type* %domain, i32 %level, i32 13) #1
  %mul = fmul double %call1, %desired_reduction_in_norm
  %lnot193 = fcmp une double %call, 0.000000e+00
  %not.cmp2 = fcmp une double %call1, 0.000000e+00
  %lnot = and i1 %not.cmp2, %lnot193
  br i1 %lnot, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %Krylov_iterations = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 3
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %cleanup98
  %j.0192 = phi i32 [ 0, %while.body.lr.ph ], [ %inc, %cleanup98 ]
  %r_dot_r0.0191 = phi double [ %call, %while.body.lr.ph ], [ %call68, %cleanup98 ]
  %inc = add nuw nsw i32 %j.0192, 1
  %0 = load i32, i32* %Krylov_iterations, align 8, !tbaa !128
  %inc7 = add nsw i32 %0, 1
  store i32 %inc7, i32* %Krylov_iterations, align 8, !tbaa !128
  tail call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 14) #1
  tail call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 16, i32 10, double %a, double %b) #1
  %call8 = tail call double @dot(%struct.domain_type* %domain, i32 %level, i32 16, i32 12) #1
  %cmp9 = fcmp oeq double %call8, 0.000000e+00
  br i1 %cmp9, label %while.end.loopexit, label %if.end11

if.end11:                                         ; preds = %while.body
  %div = fdiv double %r_dot_r0.0191, %call8
  %call15 = tail call i32 @__isinf(double %div) #11
  %tobool16 = icmp eq i32 %call15, 0
  br i1 %tobool16, label %if.end22, label %while.end.loopexit

if.end22:                                         ; preds = %if.end11
  tail call void @add_grids(%struct.domain_type* nonnull %domain, i32 %level, i32 %x_id, double 1.000000e+00, i32 %x_id, double %div, i32 14) #1
  %sub = fsub double -0.000000e+00, %div
  tail call void @add_grids(%struct.domain_type* nonnull %domain, i32 %level, i32 15, double 1.000000e+00, i32 13, double %sub, i32 16) #1
  %call23 = tail call double @norm(%struct.domain_type* nonnull %domain, i32 %level, i32 15) #1
  %cmp24 = fcmp oeq double %call23, 0.000000e+00
  %cmp28 = fcmp olt double %call23, %mul
  %or.cond = or i1 %cmp24, %cmp28
  br i1 %or.cond, label %while.end.loopexit, label %if.end31

if.end31:                                         ; preds = %if.end22
  tail call void @mul_grids(%struct.domain_type* nonnull %domain, i32 %level, i32 10, double 1.000000e+00, i32 4, i32 15) #1
  tail call void @apply_op(%struct.domain_type* nonnull %domain, i32 %level, i32 17, i32 10, double %a, double %b) #1
  %call32 = tail call double @dot(%struct.domain_type* nonnull %domain, i32 %level, i32 17, i32 17) #1
  %call33 = tail call double @dot(%struct.domain_type* nonnull %domain, i32 %level, i32 17, i32 15) #1
  %cmp34 = fcmp oeq double %call32, 0.000000e+00
  br i1 %cmp34, label %while.end.loopexit, label %if.end37

if.end37:                                         ; preds = %if.end31
  %div38 = fdiv double %call33, %call32
  %cmp39 = fcmp oeq double %div38, 0.000000e+00
  br i1 %cmp39, label %while.end.loopexit, label %cond.true48

cond.true48:                                      ; preds = %if.end37
  %call49 = tail call i32 @__isinf(double %div38) #11
  %tobool50 = icmp eq i32 %call49, 0
  br i1 %tobool50, label %if.end56, label %while.end.loopexit

if.end56:                                         ; preds = %cond.true48
  tail call void @add_grids(%struct.domain_type* nonnull %domain, i32 %level, i32 %x_id, double 1.000000e+00, i32 %x_id, double %div38, i32 15) #1
  %sub57 = fsub double -0.000000e+00, %div38
  tail call void @add_grids(%struct.domain_type* nonnull %domain, i32 %level, i32 13, double 1.000000e+00, i32 15, double %sub57, i32 17) #1
  %call58 = tail call double @norm(%struct.domain_type* nonnull %domain, i32 %level, i32 13) #1
  %cmp59 = fcmp oeq double %call58, 0.000000e+00
  %cmp64 = fcmp olt double %call58, %mul
  %or.cond189 = or i1 %cmp59, %cmp64
  br i1 %or.cond189, label %while.end.loopexit, label %if.end67

if.end67:                                         ; preds = %if.end56
  %call68 = tail call double @dot(%struct.domain_type* nonnull %domain, i32 %level, i32 13, i32 12) #1
  %cmp69 = fcmp oeq double %call68, 0.000000e+00
  br i1 %cmp69, label %while.end.loopexit, label %if.end72

if.end72:                                         ; preds = %if.end67
  %div73 = fdiv double %call68, %r_dot_r0.0191
  %div74 = fdiv double %div, %div38
  %mul75 = fmul double %div74, %div73
  %call82 = tail call i32 @__isinf(double %mul75) #11
  %tobool83 = icmp eq i32 %call82, 0
  br i1 %tobool83, label %cleanup98, label %while.end.loopexit

cleanup98:                                        ; preds = %if.end72
  tail call void @add_grids(%struct.domain_type* nonnull %domain, i32 %level, i32 10, double 1.000000e+00, i32 14, double %sub57, i32 16) #1
  tail call void @add_grids(%struct.domain_type* nonnull %domain, i32 %level, i32 14, double 1.000000e+00, i32 13, double %mul75, i32 10) #1
  %or.cond.not = icmp slt i32 %inc, 200
  br i1 %or.cond.not, label %while.body, label %while.end.loopexit

while.end.loopexit:                               ; preds = %if.end72, %if.end67, %if.end56, %cond.true48, %if.end37, %if.end31, %if.end22, %if.end11, %while.body, %cleanup98
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  tail call void @mul_grids(%struct.domain_type* %domain, i32 %level, i32 %x_id, double 1.000000e+00, i32 4, i32 %x_id) #1
  ret void
}

; Function Attrs: nounwind uwtable
define void @CACG(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b, double %desired_reduction_in_norm) #3 {
entry:
  %temp1 = alloca [9 x double], align 16
  %temp2 = alloca [9 x double], align 16
  %aj = alloca [9 x double], align 16
  %z6.i = bitcast [9 x double]* %aj to i8*
  %cj = alloca [9 x double], align 16
  %z6.i586 = bitcast [9 x double]* %cj to i8*
  %ej = alloca [9 x double], align 16
  %z6.i585 = bitcast [9 x double]* %ej to i8*
  %Tpaj = alloca [9 x double], align 16
  %Tp = alloca [9 x [9 x double]], align 16
  %0 = bitcast [9 x [9 x double]]* %Tp to i8*
  %G = alloca [9 x [9 x double]], align 16
  %Gbuf = alloca [81 x double], align 16
  %PR = alloca [9 x i32], align 16
  %1 = bitcast [9 x double]* %temp1 to i8*
  call void @llvm.lifetime.start(i64 72, i8* %1) #1
  %2 = bitcast [9 x double]* %temp2 to i8*
  call void @llvm.lifetime.start(i64 72, i8* %2) #1
  call void @llvm.lifetime.start(i64 72, i8* %z6.i) #1
  call void @llvm.lifetime.start(i64 72, i8* %z6.i586) #1
  call void @llvm.lifetime.start(i64 72, i8* %z6.i585) #1
  %3 = bitcast [9 x double]* %Tpaj to i8*
  call void @llvm.lifetime.start(i64 72, i8* %3) #1
  call void @llvm.lifetime.start(i64 648, i8* %0) #1
  %4 = bitcast [9 x [9 x double]]* %G to i8*
  call void @llvm.lifetime.start(i64 648, i8* %4) #1
  %5 = bitcast [81 x double]* %Gbuf to i8*
  call void @llvm.lifetime.start(i64 648, i8* %5) #1
  %6 = bitcast [9 x i32]* %PR to i8*
  call void @llvm.lifetime.start(i64 36, i8* %6) #1
  %arraydecay = getelementptr inbounds [9 x i32], [9 x i32]* %PR, i64 0, i64 0
  tail call void @residual(%struct.domain_type* %domain, i32 %level, i32 12, i32 %e_id, i32 %R_id, double %a, double %b) #1
  tail call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 12) #1
  tail call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 12) #1
  %call = tail call double @norm(%struct.domain_type* %domain, i32 %level, i32 12) #1
  %call4 = tail call double @dot(%struct.domain_type* %domain, i32 %level, i32 13, i32 12) #1
  %call8 = tail call double @sqrt(double %call4) #1
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 648, i32 16, i1 false)
  %add.ptr3 = getelementptr inbounds [9 x i32], [9 x i32]* %PR, i64 0, i64 5
  %arrayidx24 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 1, i64 0
  store double 1.000000e+00, double* %arrayidx24, align 8, !tbaa !34
  %arrayidx24.1 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 2, i64 1
  store double 1.000000e+00, double* %arrayidx24.1, align 8, !tbaa !34
  %arrayidx24.2 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 3, i64 2
  store double 1.000000e+00, double* %arrayidx24.2, align 8, !tbaa !34
  %arrayidx24.3 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 4, i64 3
  store double 1.000000e+00, double* %arrayidx24.3, align 8, !tbaa !34
  %arrayidx35 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 6, i64 5
  store double 1.000000e+00, double* %arrayidx35, align 8, !tbaa !34
  %arrayidx35.1 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 7, i64 6
  store double 1.000000e+00, double* %arrayidx35.1, align 8, !tbaa !34
  %arrayidx35.2 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 8, i64 7
  store double 1.000000e+00, double* %arrayidx35.2, align 8, !tbaa !34
  %arrayidx44.1 = getelementptr inbounds [9 x i32], [9 x i32]* %PR, i64 0, i64 1
  %arrayidx44.2 = getelementptr inbounds [9 x i32], [9 x i32]* %PR, i64 0, i64 2
  %arrayidx44.3 = getelementptr inbounds [9 x i32], [9 x i32]* %PR, i64 0, i64 3
  %7 = bitcast [9 x i32]* %PR to <4 x i32>*
  store <4 x i32> <i32 15, i32 16, i32 17, i32 18>, <4 x i32>* %7, align 16, !tbaa !35
  %arrayidx44.4 = getelementptr inbounds [9 x i32], [9 x i32]* %PR, i64 0, i64 4
  %arrayidx44.6 = getelementptr inbounds [9 x i32], [9 x i32]* %PR, i64 0, i64 6
  %arrayidx44.7 = getelementptr inbounds [9 x i32], [9 x i32]* %PR, i64 0, i64 7
  %8 = bitcast i32* %arrayidx44.4 to <4 x i32>*
  store <4 x i32> <i32 19, i32 20, i32 21, i32 22>, <4 x i32>* %8, align 16, !tbaa !35
  %arrayidx44.8 = getelementptr inbounds [9 x i32], [9 x i32]* %PR, i64 0, i64 8
  store i32 23, i32* %arrayidx44.8, align 16, !tbaa !35
  %9 = fcmp une double %call, 0.000000e+00
  %not.cmp5 = fcmp une double %call4, 0.000000e+00
  %10 = and i1 %not.cmp5, %9
  br i1 %10, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %arraydecay50 = getelementptr inbounds [9 x double], [9 x double]* %aj, i64 0, i64 0
  %arraydecay51 = getelementptr inbounds [9 x double], [9 x double]* %cj, i64 0, i64 0
  %CAKrylov_formations_of_G = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 4
  %arraydecay81 = getelementptr inbounds [81 x double], [81 x double]* %Gbuf, i64 0, i64 0
  %arrayidx120 = getelementptr inbounds [9 x double], [9 x double]* %cj, i64 0, i64 5
  %Krylov_iterations = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 3
  %mul286 = fmul double %call8, %desired_reduction_in_norm
  %arrayidx73 = getelementptr inbounds [9 x i32], [9 x i32]* %PR, i64 0, i64 6
  %arrayidx73.1 = getelementptr inbounds [9 x i32], [9 x i32]* %PR, i64 0, i64 7
  %arrayidx73.2 = getelementptr inbounds [9 x i32], [9 x i32]* %PR, i64 0, i64 8
  %scevgep700 = bitcast [9 x [9 x double]]* %G to i8*
  %scevgep701702 = bitcast [81 x double]* %Gbuf to i8*
  %scevgep.1 = getelementptr [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 1, i64 0
  %scevgep700.1 = bitcast double* %scevgep.1 to i8*
  %scevgep701.1 = getelementptr [81 x double], [81 x double]* %Gbuf, i64 0, i64 9
  %scevgep701702.1 = bitcast double* %scevgep701.1 to i8*
  %scevgep.2 = getelementptr [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 2, i64 0
  %scevgep700.2 = bitcast double* %scevgep.2 to i8*
  %scevgep701.2 = getelementptr [81 x double], [81 x double]* %Gbuf, i64 0, i64 18
  %scevgep701702.2 = bitcast double* %scevgep701.2 to i8*
  %scevgep.3 = getelementptr [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 3, i64 0
  %scevgep700.3 = bitcast double* %scevgep.3 to i8*
  %scevgep701.3 = getelementptr [81 x double], [81 x double]* %Gbuf, i64 0, i64 27
  %scevgep701702.3 = bitcast double* %scevgep701.3 to i8*
  %scevgep.4 = getelementptr [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 4, i64 0
  %scevgep700.4 = bitcast double* %scevgep.4 to i8*
  %scevgep701.4 = getelementptr [81 x double], [81 x double]* %Gbuf, i64 0, i64 36
  %scevgep701702.4 = bitcast double* %scevgep701.4 to i8*
  %scevgep.5 = getelementptr [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 5, i64 0
  %scevgep700.5 = bitcast double* %scevgep.5 to i8*
  %scevgep701.5 = getelementptr [81 x double], [81 x double]* %Gbuf, i64 0, i64 45
  %scevgep701702.5 = bitcast double* %scevgep701.5 to i8*
  %scevgep.6 = getelementptr [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 6, i64 0
  %scevgep700.6 = bitcast double* %scevgep.6 to i8*
  %scevgep701.6 = getelementptr [81 x double], [81 x double]* %Gbuf, i64 0, i64 54
  %scevgep701702.6 = bitcast double* %scevgep701.6 to i8*
  %scevgep.7 = getelementptr [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 7, i64 0
  %scevgep700.7 = bitcast double* %scevgep.7 to i8*
  %scevgep701.7 = getelementptr [81 x double], [81 x double]* %Gbuf, i64 0, i64 63
  %scevgep701702.7 = bitcast double* %scevgep701.7 to i8*
  %scevgep.8 = getelementptr [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 8, i64 0
  %scevgep700.8 = bitcast double* %scevgep.8 to i8*
  %scevgep701.8 = getelementptr [81 x double], [81 x double]* %Gbuf, i64 0, i64 72
  %scevgep701702.8 = bitcast double* %scevgep701.8 to i8*
  %arrayidx2.i573 = getelementptr inbounds [9 x double], [9 x double]* %temp1, i64 0, i64 0
  %arrayidx144.2.le = getelementptr inbounds [9 x double], [9 x double]* %aj, i64 0, i64 2
  %arrayidx144.3.le = getelementptr inbounds [9 x double], [9 x double]* %aj, i64 0, i64 3
  %arrayidx144.4.le = getelementptr inbounds [9 x double], [9 x double]* %aj, i64 0, i64 4
  %arrayidx144.5.le = getelementptr inbounds [9 x double], [9 x double]* %aj, i64 0, i64 5
  %arrayidx144.6.le = getelementptr inbounds [9 x double], [9 x double]* %aj, i64 0, i64 6
  %arrayidx144.7.le = getelementptr inbounds [9 x double], [9 x double]* %aj, i64 0, i64 7
  %arrayidx144.8.le = getelementptr inbounds [9 x double], [9 x double]* %aj, i64 0, i64 8
  %arrayidx173.2.phi.trans.insert = getelementptr inbounds [9 x double], [9 x double]* %Tpaj, i64 0, i64 2
  %arrayidx173.3.phi.trans.insert = getelementptr inbounds [9 x double], [9 x double]* %Tpaj, i64 0, i64 3
  %arrayidx173.4.phi.trans.insert = getelementptr inbounds [9 x double], [9 x double]* %Tpaj, i64 0, i64 4
  %arrayidx173.5.phi.trans.insert = getelementptr inbounds [9 x double], [9 x double]* %Tpaj, i64 0, i64 5
  %arrayidx173.6.phi.trans.insert = getelementptr inbounds [9 x double], [9 x double]* %Tpaj, i64 0, i64 6
  %arrayidx173.7.phi.trans.insert = getelementptr inbounds [9 x double], [9 x double]* %Tpaj, i64 0, i64 7
  %arrayidx173.8.phi.trans.insert = getelementptr inbounds [9 x double], [9 x double]* %Tpaj, i64 0, i64 8
  %arrayidx203.2.le = getelementptr inbounds [9 x double], [9 x double]* %cj, i64 0, i64 2
  %arrayidx203.3.le = getelementptr inbounds [9 x double], [9 x double]* %cj, i64 0, i64 3
  %arrayidx203.4.le = getelementptr inbounds [9 x double], [9 x double]* %cj, i64 0, i64 4
  %arrayidx203.6.le = getelementptr inbounds [9 x double], [9 x double]* %cj, i64 0, i64 6
  %arrayidx203.7.le = getelementptr inbounds [9 x double], [9 x double]* %cj, i64 0, i64 7
  %arrayidx203.8.le = getelementptr inbounds [9 x double], [9 x double]* %cj, i64 0, i64 8
  %arrayidx2.i573.1 = getelementptr inbounds [9 x double], [9 x double]* %temp1, i64 0, i64 1
  %arrayidx2.i573.2 = getelementptr inbounds [9 x double], [9 x double]* %temp1, i64 0, i64 2
  %arrayidx2.i573.3 = getelementptr inbounds [9 x double], [9 x double]* %temp1, i64 0, i64 3
  %arrayidx2.i573.4 = getelementptr inbounds [9 x double], [9 x double]* %temp1, i64 0, i64 4
  %arrayidx2.i573.5 = getelementptr inbounds [9 x double], [9 x double]* %temp1, i64 0, i64 5
  %arrayidx2.i573.6 = getelementptr inbounds [9 x double], [9 x double]* %temp1, i64 0, i64 6
  %arrayidx2.i573.7 = getelementptr inbounds [9 x double], [9 x double]* %temp1, i64 0, i64 7
  %arrayidx2.i573.8 = getelementptr inbounds [9 x double], [9 x double]* %temp1, i64 0, i64 8
  %arrayidx2.i562 = getelementptr inbounds [9 x double], [9 x double]* %temp2, i64 0, i64 0
  %arrayidx2.i562.1 = getelementptr inbounds [9 x double], [9 x double]* %temp2, i64 0, i64 1
  %arrayidx2.i562.2 = getelementptr inbounds [9 x double], [9 x double]* %temp2, i64 0, i64 2
  %arrayidx2.i562.3 = getelementptr inbounds [9 x double], [9 x double]* %temp2, i64 0, i64 3
  %arrayidx2.i562.4 = getelementptr inbounds [9 x double], [9 x double]* %temp2, i64 0, i64 4
  %arrayidx2.i562.5 = getelementptr inbounds [9 x double], [9 x double]* %temp2, i64 0, i64 5
  %arrayidx2.i562.6 = getelementptr inbounds [9 x double], [9 x double]* %temp2, i64 0, i64 6
  %arrayidx2.i562.7 = getelementptr inbounds [9 x double], [9 x double]* %temp2, i64 0, i64 7
  %arrayidx2.i562.8 = getelementptr inbounds [9 x double], [9 x double]* %temp2, i64 0, i64 8
  %arrayidx.i549.2 = getelementptr inbounds [9 x double], [9 x double]* %ej, i64 0, i64 2
  %arrayidx.i549.3 = getelementptr inbounds [9 x double], [9 x double]* %ej, i64 0, i64 3
  %arrayidx.i549.4 = getelementptr inbounds [9 x double], [9 x double]* %ej, i64 0, i64 4
  %arrayidx.i549.5 = getelementptr inbounds [9 x double], [9 x double]* %ej, i64 0, i64 5
  %arrayidx.i549.6 = getelementptr inbounds [9 x double], [9 x double]* %ej, i64 0, i64 6
  %arrayidx.i549.7 = getelementptr inbounds [9 x double], [9 x double]* %ej, i64 0, i64 7
  %arrayidx.i549.8 = getelementptr inbounds [9 x double], [9 x double]* %ej, i64 0, i64 8
  %11 = bitcast [9 x double]* %Tpaj to <2 x double>*
  %12 = bitcast [9 x double]* %ej to <2 x double>*
  %13 = bitcast [9 x double]* %ej to <2 x double>*
  %14 = bitcast [9 x double]* %cj to <2 x double>*
  %15 = bitcast [9 x double]* %aj to <2 x double>*
  br label %while.body

while.body:                                       ; preds = %if.end361.while.body_crit_edge, %while.body.lr.ph
  %16 = phi i32 [ 15, %while.body.lr.ph ], [ %.pre, %if.end361.while.body_crit_edge ]
  %m.0615 = phi i32 [ 0, %while.body.lr.ph ], [ %add362, %if.end361.while.body_crit_edge ]
  %CGFailed.0614 = phi i32 [ 0, %while.body.lr.ph ], [ %CGFailed.1, %if.end361.while.body_crit_edge ]
  %CGConverged.2613 = phi i32 [ 0, %while.body.lr.ph ], [ %CGConverged.3, %if.end361.while.body_crit_edge ]
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 72, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 72, i32 16, i1 false) #1
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 72, i32 16, i1 false) #1
  call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 %16, double 1.000000e+00, i32 14) #1
  %17 = load i32, i32* %arrayidx44.1, align 4, !tbaa !35
  %18 = load i32, i32* %arraydecay, align 16, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %17, i32 %18, double %a, double %b) #1
  %19 = load i32, i32* %arrayidx44.2, align 8, !tbaa !35
  %20 = load i32, i32* %arrayidx44.1, align 4, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %19, i32 %20, double %a, double %b) #1
  %21 = load i32, i32* %arrayidx44.3, align 4, !tbaa !35
  %22 = load i32, i32* %arrayidx44.2, align 8, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %21, i32 %22, double %a, double %b) #1
  %23 = load i32, i32* %arrayidx44.4, align 16, !tbaa !35
  %24 = load i32, i32* %arrayidx44.3, align 4, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %23, i32 %24, double %a, double %b) #1
  %25 = load i32, i32* %add.ptr3, align 4, !tbaa !35
  call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 %25, double 1.000000e+00, i32 13) #1
  %26 = load i32, i32* %arrayidx73, align 8, !tbaa !35
  %27 = load i32, i32* %add.ptr3, align 4, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %26, i32 %27, double %a, double %b) #1
  %28 = load i32, i32* %arrayidx73.1, align 4, !tbaa !35
  %29 = load i32, i32* %arrayidx73, align 8, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %28, i32 %29, double %a, double %b) #1
  %30 = load i32, i32* %arrayidx73.2, align 16, !tbaa !35
  %31 = load i32, i32* %arrayidx73.1, align 4, !tbaa !35
  call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 %30, i32 %31, double %a, double %b) #1
  %32 = load i32, i32* %CAKrylov_formations_of_G, align 4, !tbaa !146
  %inc80 = add nsw i32 %32, 1
  store i32 %inc80, i32* %CAKrylov_formations_of_G, align 4, !tbaa !146
  call void @matmul_grids(%struct.domain_type* %domain, i32 %level, double* %arraydecay81, i32* nonnull %arraydecay, i32* nonnull %arraydecay, i32 9, i32 9, i32 1) #1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep700, i8* %scevgep701702, i64 72, i32 16, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep700.1, i8* %scevgep701702.1, i64 72, i32 8, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep700.2, i8* %scevgep701702.2, i64 72, i32 16, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep700.3, i8* %scevgep701702.3, i64 72, i32 8, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep700.4, i8* %scevgep701702.4, i64 72, i32 16, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep700.5, i8* %scevgep701702.5, i64 72, i32 8, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep700.6, i8* %scevgep701702.6, i64 72, i32 16, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep700.7, i8* %scevgep701702.7, i64 72, i32 8, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep700.8, i8* %scevgep701702.8, i64 72, i32 16, i1 false)
  call void @llvm.memset.p0i8.i64(i8* %z6.i, i8 0, i64 72, i32 16, i1 false)
  store double 1.000000e+00, double* %arraydecay50, align 16, !tbaa !34
  call void @llvm.memset.p0i8.i64(i8* %z6.i586, i8 0, i64 72, i32 16, i1 false)
  store double 1.000000e+00, double* %arrayidx120, align 8, !tbaa !34
  call void @llvm.memset.p0i8.i64(i8* %z6.i585, i8 0, i64 72, i32 16, i1 false)
  br label %for.body131

for.body131:                                      ; preds = %while.body, %for.body.i.preheader
  %33 = phi double [ %173, %for.body.i.preheader ], [ 0.000000e+00, %while.body ]
  %34 = phi double [ %209, %for.body.i.preheader ], [ 0.000000e+00, %while.body ]
  %35 = phi double [ %208, %for.body.i.preheader ], [ 0.000000e+00, %while.body ]
  %36 = phi double [ %add.i552.4, %for.body.i.preheader ], [ 0.000000e+00, %while.body ]
  %37 = phi double [ %add.i541.4, %for.body.i.preheader ], [ 0.000000e+00, %while.body ]
  %38 = phi double [ %.lcssa744, %for.body.i.preheader ], [ 0.000000e+00, %while.body ]
  %39 = phi double [ %add.i.4, %for.body.i.preheader ], [ 0.000000e+00, %while.body ]
  %n.2609 = phi i32 [ %inc318, %for.body.i.preheader ], [ 0, %while.body ]
  %40 = phi <2 x double> [ %137, %for.body.i.preheader ], [ zeroinitializer, %while.body ]
  %41 = phi <2 x double> [ %204, %for.body.i.preheader ], [ zeroinitializer, %while.body ]
  %42 = phi <2 x double> [ %158, %for.body.i.preheader ], [ zeroinitializer, %while.body ]
  %43 = phi <2 x double> [ %133, %for.body.i.preheader ], [ zeroinitializer, %while.body ]
  %44 = phi <2 x double> [ %200, %for.body.i.preheader ], [ zeroinitializer, %while.body ]
  %45 = phi <2 x double> [ %152, %for.body.i.preheader ], [ <double 0.000000e+00, double 1.000000e+00>, %while.body ]
  %46 = phi <2 x double> [ %196, %for.body.i.preheader ], [ zeroinitializer, %while.body ]
  %47 = phi <2 x double> [ %145, %for.body.i.preheader ], [ zeroinitializer, %while.body ]
  %48 = phi <2 x double> [ %129, %for.body.i.preheader ], [ zeroinitializer, %while.body ]
  %49 = phi <2 x double> [ %194, %for.body.i.preheader ], [ <double 1.000000e+00, double 0.000000e+00>, %while.body ]
  %50 = phi <2 x double> [ %193, %for.body.i.preheader ], [ zeroinitializer, %while.body ]
  %51 = load i32, i32* %Krylov_iterations, align 8, !tbaa !128
  %inc132 = add nsw i32 %51, 1
  store i32 %inc132, i32* %Krylov_iterations, align 8, !tbaa !128
  %52 = extractelement <2 x double> %49, i32 0
  %53 = extractelement <2 x double> %49, i32 1
  %54 = extractelement <2 x double> %46, i32 1
  %55 = extractelement <2 x double> %46, i32 0
  %56 = extractelement <2 x double> %44, i32 1
  %57 = extractelement <2 x double> %44, i32 0
  %58 = extractelement <2 x double> %41, i32 1
  %59 = extractelement <2 x double> %41, i32 0
  br label %for.cond136.preheader

for.cond136.preheader:                            ; preds = %for.cond136.preheader.for.cond136.preheader_crit_edge, %for.body131
  %60 = phi double [ %38, %for.body131 ], [ %.pre705, %for.cond136.preheader.for.cond136.preheader_crit_edge ]
  %indvars.iv648 = phi i64 [ 0, %for.body131 ], [ %indvars.iv.next649, %for.cond136.preheader.for.cond136.preheader_crit_edge ]
  %arrayidx142 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 %indvars.iv648, i64 0
  %61 = load double, double* %arrayidx142, align 8, !tbaa !34
  %mul = fmul double %61, %52
  %add145 = fadd double %mul, 0.000000e+00
  %arrayidx142.1 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 %indvars.iv648, i64 1
  %62 = load double, double* %arrayidx142.1, align 8, !tbaa !34
  %mul.1 = fmul double %62, %53
  %add145.1 = fadd double %add145, %mul.1
  %arrayidx142.2 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 %indvars.iv648, i64 2
  %63 = load double, double* %arrayidx142.2, align 8, !tbaa !34
  %mul.2 = fmul double %63, %54
  %add145.2 = fadd double %add145.1, %mul.2
  %arrayidx142.3 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 %indvars.iv648, i64 3
  %64 = load double, double* %arrayidx142.3, align 8, !tbaa !34
  %mul.3 = fmul double %64, %55
  %add145.3 = fadd double %add145.2, %mul.3
  %arrayidx142.4 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 %indvars.iv648, i64 4
  %65 = load double, double* %arrayidx142.4, align 8, !tbaa !34
  %mul.4 = fmul double %65, %39
  %add145.4 = fadd double %add145.3, %mul.4
  %arrayidx142.5 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 %indvars.iv648, i64 5
  %66 = load double, double* %arrayidx142.5, align 8, !tbaa !34
  %mul.5 = fmul double %66, %56
  %add145.5 = fadd double %add145.4, %mul.5
  %arrayidx142.6 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 %indvars.iv648, i64 6
  %67 = load double, double* %arrayidx142.6, align 8, !tbaa !34
  %mul.6 = fmul double %67, %57
  %add145.6 = fadd double %add145.5, %mul.6
  %arrayidx142.7 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 %indvars.iv648, i64 7
  %68 = load double, double* %arrayidx142.7, align 8, !tbaa !34
  %mul.7 = fmul double %68, %58
  %add145.7 = fadd double %add145.6, %mul.7
  %arrayidx142.8 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %Tp, i64 0, i64 %indvars.iv648, i64 8
  %69 = load double, double* %arrayidx142.8, align 8, !tbaa !34
  %mul.8 = fmul double %69, %59
  %add145.8 = fadd double %add145.7, %mul.8
  %arrayidx151 = getelementptr inbounds [9 x double], [9 x double]* %Tpaj, i64 0, i64 %indvars.iv648
  %mul152 = fmul double %60, 0.000000e+00
  %add153 = fadd double %add145.8, %mul152
  store double %add153, double* %arrayidx151, align 8, !tbaa !34
  %indvars.iv.next649 = add nuw nsw i64 %indvars.iv648, 1
  %exitcond650 = icmp eq i64 %indvars.iv.next649, 9
  br i1 %exitcond650, label %for.cond165.preheader.preheader, label %for.cond136.preheader.for.cond136.preheader_crit_edge

for.cond136.preheader.for.cond136.preheader_crit_edge: ; preds = %for.cond136.preheader
  %arrayidx151.phi.trans.insert = getelementptr inbounds [9 x double], [9 x double]* %Tpaj, i64 0, i64 %indvars.iv.next649
  %.pre705 = load double, double* %arrayidx151.phi.trans.insert, align 8, !tbaa !34
  br label %for.cond136.preheader

for.cond165.preheader.preheader:                  ; preds = %for.cond136.preheader
  %.lcssa743 = phi double [ %59, %for.cond136.preheader ]
  %.lcssa742 = phi double [ %58, %for.cond136.preheader ]
  %.lcssa741 = phi double [ %57, %for.cond136.preheader ]
  %.lcssa740 = phi double [ %56, %for.cond136.preheader ]
  %.lcssa739 = phi double [ %55, %for.cond136.preheader ]
  %.lcssa738 = phi double [ %54, %for.cond136.preheader ]
  %.lcssa737 = phi double [ %53, %for.cond136.preheader ]
  %.lcssa = phi double [ %52, %for.cond136.preheader ]
  %70 = load <2 x double>, <2 x double>* %11, align 16, !tbaa !34
  %.pre708 = load double, double* %arrayidx173.2.phi.trans.insert, align 16, !tbaa !34
  %.pre709 = load double, double* %arrayidx173.3.phi.trans.insert, align 8, !tbaa !34
  %.pre710 = load double, double* %arrayidx173.4.phi.trans.insert, align 16, !tbaa !34
  %.pre711 = load double, double* %arrayidx173.5.phi.trans.insert, align 8, !tbaa !34
  %.pre712 = load double, double* %arrayidx173.6.phi.trans.insert, align 16, !tbaa !34
  %.pre713 = load double, double* %arrayidx173.7.phi.trans.insert, align 8, !tbaa !34
  %.pre714 = load double, double* %arrayidx173.8.phi.trans.insert, align 16, !tbaa !34
  %71 = extractelement <2 x double> %70, i32 0
  %72 = extractelement <2 x double> %70, i32 1
  br label %for.cond165.preheader

for.cond165.preheader:                            ; preds = %for.cond165.preheader, %for.cond165.preheader.preheader
  %indvars.iv654 = phi i64 [ 0, %for.cond165.preheader.preheader ], [ %indvars.iv.next655, %for.cond165.preheader ]
  %arrayidx171 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv654, i64 0
  %73 = load double, double* %arrayidx171, align 8, !tbaa !34
  %mul174 = fmul double %73, %71
  %add175 = fadd double %mul174, 0.000000e+00
  %arrayidx171.1 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv654, i64 1
  %74 = load double, double* %arrayidx171.1, align 8, !tbaa !34
  %mul174.1 = fmul double %74, %72
  %add175.1 = fadd double %add175, %mul174.1
  %arrayidx171.2 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv654, i64 2
  %75 = load double, double* %arrayidx171.2, align 8, !tbaa !34
  %mul174.2 = fmul double %75, %.pre708
  %add175.2 = fadd double %add175.1, %mul174.2
  %arrayidx171.3 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv654, i64 3
  %76 = load double, double* %arrayidx171.3, align 8, !tbaa !34
  %mul174.3 = fmul double %76, %.pre709
  %add175.3 = fadd double %add175.2, %mul174.3
  %arrayidx171.4 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv654, i64 4
  %77 = load double, double* %arrayidx171.4, align 8, !tbaa !34
  %mul174.4 = fmul double %77, %.pre710
  %add175.4 = fadd double %add175.3, %mul174.4
  %arrayidx171.5 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv654, i64 5
  %78 = load double, double* %arrayidx171.5, align 8, !tbaa !34
  %mul174.5 = fmul double %78, %.pre711
  %add175.5 = fadd double %add175.4, %mul174.5
  %arrayidx171.6 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv654, i64 6
  %79 = load double, double* %arrayidx171.6, align 8, !tbaa !34
  %mul174.6 = fmul double %79, %.pre712
  %add175.6 = fadd double %add175.5, %mul174.6
  %arrayidx171.7 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv654, i64 7
  %80 = load double, double* %arrayidx171.7, align 8, !tbaa !34
  %mul174.7 = fmul double %80, %.pre713
  %add175.7 = fadd double %add175.6, %mul174.7
  %arrayidx171.8 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv654, i64 8
  %81 = load double, double* %arrayidx171.8, align 8, !tbaa !34
  %mul174.8 = fmul double %81, %.pre714
  %add175.8 = fadd double %add175.7, %mul174.8
  %arrayidx181 = getelementptr inbounds [9 x double], [9 x double]* %temp1, i64 0, i64 %indvars.iv654
  %82 = load double, double* %arrayidx181, align 8, !tbaa !34
  %mul182 = fmul double %82, 0.000000e+00
  %add183 = fadd double %add175.8, %mul182
  store double %add183, double* %arrayidx181, align 8, !tbaa !34
  %indvars.iv.next655 = add nuw nsw i64 %indvars.iv654, 1
  %exitcond656 = icmp eq i64 %indvars.iv.next655, 9
  br i1 %exitcond656, label %for.cond195.preheader.preheader, label %for.cond165.preheader

for.cond195.preheader.preheader:                  ; preds = %for.cond165.preheader
  %.lcssa744 = phi double [ %71, %for.cond165.preheader ]
  %83 = extractelement <2 x double> %50, i32 0
  %84 = extractelement <2 x double> %50, i32 1
  %85 = extractelement <2 x double> %47, i32 1
  %86 = extractelement <2 x double> %47, i32 0
  %87 = extractelement <2 x double> %45, i32 1
  %88 = extractelement <2 x double> %45, i32 0
  %89 = extractelement <2 x double> %42, i32 1
  %90 = extractelement <2 x double> %42, i32 0
  br label %for.cond195.preheader

for.cond195.preheader:                            ; preds = %for.cond195.preheader.preheader, %for.cond195.preheader.for.cond195.preheader_crit_edge
  %91 = phi double [ %.pre716, %for.cond195.preheader.for.cond195.preheader_crit_edge ], [ %33, %for.cond195.preheader.preheader ]
  %indvars.iv660 = phi i64 [ %indvars.iv.next661, %for.cond195.preheader.for.cond195.preheader_crit_edge ], [ 0, %for.cond195.preheader.preheader ]
  %arrayidx201 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv660, i64 0
  %92 = load double, double* %arrayidx201, align 8, !tbaa !34
  %mul204 = fmul double %92, %83
  %add205 = fadd double %mul204, 0.000000e+00
  %arrayidx201.1 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv660, i64 1
  %93 = load double, double* %arrayidx201.1, align 8, !tbaa !34
  %mul204.1 = fmul double %93, %84
  %add205.1 = fadd double %add205, %mul204.1
  %arrayidx201.2 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv660, i64 2
  %94 = load double, double* %arrayidx201.2, align 8, !tbaa !34
  %mul204.2 = fmul double %94, %85
  %add205.2 = fadd double %add205.1, %mul204.2
  %arrayidx201.3 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv660, i64 3
  %95 = load double, double* %arrayidx201.3, align 8, !tbaa !34
  %mul204.3 = fmul double %95, %86
  %add205.3 = fadd double %add205.2, %mul204.3
  %arrayidx201.4 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv660, i64 4
  %96 = load double, double* %arrayidx201.4, align 8, !tbaa !34
  %mul204.4 = fmul double %96, %37
  %add205.4 = fadd double %add205.3, %mul204.4
  %arrayidx201.5 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv660, i64 5
  %97 = load double, double* %arrayidx201.5, align 8, !tbaa !34
  %mul204.5 = fmul double %97, %87
  %add205.5 = fadd double %add205.4, %mul204.5
  %arrayidx201.6 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv660, i64 6
  %98 = load double, double* %arrayidx201.6, align 8, !tbaa !34
  %mul204.6 = fmul double %98, %88
  %add205.6 = fadd double %add205.5, %mul204.6
  %arrayidx201.7 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv660, i64 7
  %99 = load double, double* %arrayidx201.7, align 8, !tbaa !34
  %mul204.7 = fmul double %99, %89
  %add205.7 = fadd double %add205.6, %mul204.7
  %arrayidx201.8 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv660, i64 8
  %100 = load double, double* %arrayidx201.8, align 8, !tbaa !34
  %mul204.8 = fmul double %100, %90
  %add205.8 = fadd double %add205.7, %mul204.8
  %arrayidx211 = getelementptr inbounds [9 x double], [9 x double]* %temp2, i64 0, i64 %indvars.iv660
  %mul212 = fmul double %91, 0.000000e+00
  %add213 = fadd double %add205.8, %mul212
  store double %add213, double* %arrayidx211, align 8, !tbaa !34
  %indvars.iv.next661 = add nuw nsw i64 %indvars.iv660, 1
  %exitcond662 = icmp eq i64 %indvars.iv.next661, 9
  br i1 %exitcond662, label %for.body.i579.preheader, label %for.cond195.preheader.for.cond195.preheader_crit_edge

for.cond195.preheader.for.cond195.preheader_crit_edge: ; preds = %for.cond195.preheader
  %arrayidx211.phi.trans.insert = getelementptr inbounds [9 x double], [9 x double]* %temp2, i64 0, i64 %indvars.iv.next661
  %.pre716 = load double, double* %arrayidx211.phi.trans.insert, align 8, !tbaa !34
  br label %for.cond195.preheader

for.body.i579.preheader:                          ; preds = %for.cond195.preheader
  %.lcssa752 = phi double [ %90, %for.cond195.preheader ]
  %.lcssa751 = phi double [ %89, %for.cond195.preheader ]
  %.lcssa750 = phi double [ %88, %for.cond195.preheader ]
  %.lcssa749 = phi double [ %87, %for.cond195.preheader ]
  %.lcssa748 = phi double [ %86, %for.cond195.preheader ]
  %.lcssa747 = phi double [ %85, %for.cond195.preheader ]
  %.lcssa746 = phi double [ %84, %for.cond195.preheader ]
  %.lcssa745 = phi double [ %83, %for.cond195.preheader ]
  %101 = load double, double* %arrayidx2.i573, align 16, !tbaa !34
  %mul.i574 = fmul double %.lcssa, %101
  %add.i575 = fadd double %mul.i574, 0.000000e+00
  %102 = load double, double* %arrayidx2.i573.1, align 8, !tbaa !34
  %mul.i574.1 = fmul double %.lcssa737, %102
  %add.i575.1 = fadd double %add.i575, %mul.i574.1
  %103 = load double, double* %arrayidx2.i573.2, align 16, !tbaa !34
  %mul.i574.2 = fmul double %.lcssa738, %103
  %add.i575.2 = fadd double %add.i575.1, %mul.i574.2
  %104 = load double, double* %arrayidx2.i573.3, align 8, !tbaa !34
  %mul.i574.3 = fmul double %.lcssa739, %104
  %add.i575.3 = fadd double %add.i575.2, %mul.i574.3
  %105 = load double, double* %arrayidx2.i573.4, align 16, !tbaa !34
  %mul.i574.4 = fmul double %39, %105
  %add.i575.4 = fadd double %add.i575.3, %mul.i574.4
  %106 = load double, double* %arrayidx2.i573.5, align 8, !tbaa !34
  %mul.i574.5 = fmul double %.lcssa740, %106
  %add.i575.5 = fadd double %add.i575.4, %mul.i574.5
  %107 = load double, double* %arrayidx2.i573.6, align 16, !tbaa !34
  %mul.i574.6 = fmul double %.lcssa741, %107
  %add.i575.6 = fadd double %add.i575.5, %mul.i574.6
  %108 = load double, double* %arrayidx2.i573.7, align 8, !tbaa !34
  %mul.i574.7 = fmul double %.lcssa742, %108
  %add.i575.7 = fadd double %add.i575.6, %mul.i574.7
  %109 = load double, double* %arrayidx2.i573.8, align 16, !tbaa !34
  %mul.i574.8 = fmul double %.lcssa743, %109
  %add.i575.8 = fadd double %add.i575.7, %mul.i574.8
  %110 = load double, double* %arrayidx2.i562, align 16, !tbaa !34
  %mul.i563 = fmul double %.lcssa745, %110
  %add.i564 = fadd double %mul.i563, 0.000000e+00
  %111 = load double, double* %arrayidx2.i562.1, align 8, !tbaa !34
  %mul.i563.1 = fmul double %.lcssa746, %111
  %add.i564.1 = fadd double %add.i564, %mul.i563.1
  %112 = load double, double* %arrayidx2.i562.2, align 16, !tbaa !34
  %mul.i563.2 = fmul double %.lcssa747, %112
  %add.i564.2 = fadd double %add.i564.1, %mul.i563.2
  %113 = load double, double* %arrayidx2.i562.3, align 8, !tbaa !34
  %mul.i563.3 = fmul double %.lcssa748, %113
  %add.i564.3 = fadd double %add.i564.2, %mul.i563.3
  %114 = load double, double* %arrayidx2.i562.4, align 16, !tbaa !34
  %mul.i563.4 = fmul double %37, %114
  %add.i564.4 = fadd double %add.i564.3, %mul.i563.4
  %115 = load double, double* %arrayidx2.i562.5, align 8, !tbaa !34
  %mul.i563.5 = fmul double %.lcssa749, %115
  %add.i564.5 = fadd double %add.i564.4, %mul.i563.5
  %116 = load double, double* %arrayidx2.i562.6, align 16, !tbaa !34
  %mul.i563.6 = fmul double %.lcssa750, %116
  %add.i564.6 = fadd double %add.i564.5, %mul.i563.6
  %117 = load double, double* %arrayidx2.i562.7, align 8, !tbaa !34
  %mul.i563.7 = fmul double %.lcssa751, %117
  %add.i564.7 = fadd double %add.i564.6, %mul.i563.7
  %118 = load double, double* %arrayidx2.i562.8, align 16, !tbaa !34
  %mul.i563.8 = fmul double %.lcssa752, %118
  %add.i564.8 = fadd double %add.i564.7, %mul.i563.8
  %cmp225 = fcmp oeq double %add.i575.8, 0.000000e+00
  br i1 %cmp225, label %for.end319, label %if.end227

if.end227:                                        ; preds = %for.body.i579.preheader
  %div = fdiv double %add.i564.8, %add.i575.8
  %call231 = call i32 @__isinf(double %div) #11
  %tobool232 = icmp eq i32 %call231, 0
  br i1 %tobool232, label %for.body.i557.preheader, label %for.end319

for.body.i557.preheader:                          ; preds = %if.end227
  %119 = load <2 x double>, <2 x double>* %12, align 16, !tbaa !34
  %120 = insertelement <2 x double> undef, double %div, i32 0
  %121 = insertelement <2 x double> %120, double %div, i32 1
  %122 = fmul <2 x double> %121, %49
  %123 = fadd <2 x double> %119, %122
  store <2 x double> %123, <2 x double>* %13, align 16, !tbaa !34
  %124 = load double, double* %arrayidx.i549.2, align 16, !tbaa !34
  %125 = load double, double* %arrayidx.i549.3, align 8, !tbaa !34
  %126 = fmul <2 x double> %121, %46
  %127 = insertelement <2 x double> undef, double %125, i32 0
  %128 = insertelement <2 x double> %127, double %124, i32 1
  %129 = fadd <2 x double> %128, %126
  %130 = extractelement <2 x double> %129, i32 1
  store double %130, double* %arrayidx.i549.2, align 16, !tbaa !34
  %131 = extractelement <2 x double> %129, i32 0
  store double %131, double* %arrayidx.i549.3, align 8, !tbaa !34
  %mul3.i551.4 = fmul double %div, %39
  %add.i552.4 = fadd double %36, %mul3.i551.4
  store double %add.i552.4, double* %arrayidx.i549.4, align 16, !tbaa !34
  %132 = fmul <2 x double> %121, %44
  %133 = fadd <2 x double> %43, %132
  %134 = extractelement <2 x double> %133, i32 1
  store double %134, double* %arrayidx.i549.5, align 8, !tbaa !34
  %135 = extractelement <2 x double> %133, i32 0
  store double %135, double* %arrayidx.i549.6, align 16, !tbaa !34
  %136 = fmul <2 x double> %121, %41
  %137 = fadd <2 x double> %40, %136
  %138 = extractelement <2 x double> %137, i32 1
  store double %138, double* %arrayidx.i549.7, align 8, !tbaa !34
  %139 = extractelement <2 x double> %137, i32 0
  store double %139, double* %arrayidx.i549.8, align 16, !tbaa !34
  %140 = fmul <2 x double> %121, %70
  %141 = fsub <2 x double> %50, %140
  store <2 x double> %141, <2 x double>* %14, align 16, !tbaa !34
  %142 = insertelement <2 x double> undef, double %.pre709, i32 0
  %143 = insertelement <2 x double> %142, double %.pre708, i32 1
  %144 = fmul <2 x double> %121, %143
  %145 = fsub <2 x double> %47, %144
  %146 = extractelement <2 x double> %145, i32 1
  store double %146, double* %arrayidx203.2.le, align 16, !tbaa !34
  %147 = extractelement <2 x double> %145, i32 0
  store double %147, double* %arrayidx203.3.le, align 8, !tbaa !34
  %148 = fmul double %div, %.pre710
  %add.i541.4 = fsub double %37, %148
  store double %add.i541.4, double* %arrayidx203.4.le, align 16, !tbaa !34
  %149 = insertelement <2 x double> undef, double %.pre712, i32 0
  %150 = insertelement <2 x double> %149, double %.pre711, i32 1
  %151 = fmul <2 x double> %121, %150
  %152 = fsub <2 x double> %45, %151
  %153 = extractelement <2 x double> %152, i32 1
  store double %153, double* %arrayidx120, align 8, !tbaa !34
  %154 = extractelement <2 x double> %152, i32 0
  store double %154, double* %arrayidx203.6.le, align 16, !tbaa !34
  %155 = insertelement <2 x double> undef, double %.pre714, i32 0
  %156 = insertelement <2 x double> %155, double %.pre713, i32 1
  %157 = fmul <2 x double> %121, %156
  %158 = fsub <2 x double> %42, %157
  %159 = extractelement <2 x double> %158, i32 1
  store double %159, double* %arrayidx203.7.le, align 8, !tbaa !34
  %160 = extractelement <2 x double> %158, i32 0
  store double %160, double* %arrayidx203.8.le, align 16, !tbaa !34
  %161 = extractelement <2 x double> %141, i32 0
  %162 = extractelement <2 x double> %141, i32 1
  br label %for.cond253.preheader

for.cond253.preheader:                            ; preds = %for.cond253.preheader.for.cond253.preheader_crit_edge, %for.body.i557.preheader
  %163 = phi double [ %110, %for.body.i557.preheader ], [ %.pre715, %for.cond253.preheader.for.cond253.preheader_crit_edge ]
  %indvars.iv670 = phi i64 [ 0, %for.body.i557.preheader ], [ %indvars.iv.next671, %for.cond253.preheader.for.cond253.preheader_crit_edge ]
  %arrayidx260 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv670, i64 0
  %164 = load double, double* %arrayidx260, align 8, !tbaa !34
  %mul263 = fmul double %164, %161
  %add264 = fadd double %mul263, 0.000000e+00
  %arrayidx260.1 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv670, i64 1
  %165 = load double, double* %arrayidx260.1, align 8, !tbaa !34
  %mul263.1 = fmul double %165, %162
  %add264.1 = fadd double %add264, %mul263.1
  %arrayidx260.2 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv670, i64 2
  %166 = load double, double* %arrayidx260.2, align 8, !tbaa !34
  %mul263.2 = fmul double %166, %146
  %add264.2 = fadd double %add264.1, %mul263.2
  %arrayidx260.3 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv670, i64 3
  %167 = load double, double* %arrayidx260.3, align 8, !tbaa !34
  %mul263.3 = fmul double %167, %147
  %add264.3 = fadd double %add264.2, %mul263.3
  %arrayidx260.4 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv670, i64 4
  %168 = load double, double* %arrayidx260.4, align 8, !tbaa !34
  %mul263.4 = fmul double %168, %add.i541.4
  %add264.4 = fadd double %add264.3, %mul263.4
  %arrayidx260.5 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv670, i64 5
  %169 = load double, double* %arrayidx260.5, align 8, !tbaa !34
  %mul263.5 = fmul double %169, %153
  %add264.5 = fadd double %add264.4, %mul263.5
  %arrayidx260.6 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv670, i64 6
  %170 = load double, double* %arrayidx260.6, align 8, !tbaa !34
  %mul263.6 = fmul double %170, %154
  %add264.6 = fadd double %add264.5, %mul263.6
  %arrayidx260.7 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv670, i64 7
  %171 = load double, double* %arrayidx260.7, align 8, !tbaa !34
  %mul263.7 = fmul double %171, %159
  %add264.7 = fadd double %add264.6, %mul263.7
  %arrayidx260.8 = getelementptr inbounds [9 x [9 x double]], [9 x [9 x double]]* %G, i64 0, i64 %indvars.iv670, i64 8
  %172 = load double, double* %arrayidx260.8, align 8, !tbaa !34
  %mul263.8 = fmul double %172, %160
  %add264.8 = fadd double %add264.7, %mul263.8
  %arrayidx270 = getelementptr inbounds [9 x double], [9 x double]* %temp2, i64 0, i64 %indvars.iv670
  %mul271 = fmul double %163, 0.000000e+00
  %add272 = fadd double %add264.8, %mul271
  store double %add272, double* %arrayidx270, align 8, !tbaa !34
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %exitcond672 = icmp eq i64 %indvars.iv.next671, 9
  br i1 %exitcond672, label %for.body.i536.preheader, label %for.cond253.preheader.for.cond253.preheader_crit_edge

for.cond253.preheader.for.cond253.preheader_crit_edge: ; preds = %for.cond253.preheader
  %arrayidx270.phi.trans.insert = getelementptr inbounds [9 x double], [9 x double]* %temp2, i64 0, i64 %indvars.iv.next671
  %.pre715 = load double, double* %arrayidx270.phi.trans.insert, align 8, !tbaa !34
  br label %for.cond253.preheader

for.body.i536.preheader:                          ; preds = %for.cond253.preheader
  %.lcssa754 = phi double [ %162, %for.cond253.preheader ]
  %.lcssa753 = phi double [ %161, %for.cond253.preheader ]
  %173 = load double, double* %arrayidx2.i562, align 16, !tbaa !34
  %mul.i = fmul double %.lcssa753, %173
  %add.i532 = fadd double %mul.i, 0.000000e+00
  %174 = load double, double* %arrayidx2.i562.1, align 8, !tbaa !34
  %mul.i.1 = fmul double %.lcssa754, %174
  %add.i532.1 = fadd double %add.i532, %mul.i.1
  %175 = load double, double* %arrayidx2.i562.2, align 16, !tbaa !34
  %mul.i.2 = fmul double %146, %175
  %add.i532.2 = fadd double %add.i532.1, %mul.i.2
  %176 = load double, double* %arrayidx2.i562.3, align 8, !tbaa !34
  %mul.i.3 = fmul double %147, %176
  %add.i532.3 = fadd double %add.i532.2, %mul.i.3
  %177 = load double, double* %arrayidx2.i562.4, align 16, !tbaa !34
  %mul.i.4 = fmul double %add.i541.4, %177
  %add.i532.4 = fadd double %add.i532.3, %mul.i.4
  %178 = load double, double* %arrayidx2.i562.5, align 8, !tbaa !34
  %mul.i.5 = fmul double %153, %178
  %add.i532.5 = fadd double %add.i532.4, %mul.i.5
  %179 = load double, double* %arrayidx2.i562.6, align 16, !tbaa !34
  %mul.i.6 = fmul double %154, %179
  %add.i532.6 = fadd double %add.i532.5, %mul.i.6
  %180 = load double, double* %arrayidx2.i562.7, align 8, !tbaa !34
  %mul.i.7 = fmul double %159, %180
  %add.i532.7 = fadd double %add.i532.6, %mul.i.7
  %181 = load double, double* %arrayidx2.i562.8, align 16, !tbaa !34
  %mul.i.8 = fmul double %160, %181
  %add.i532.8 = fadd double %add.i532.7, %mul.i.8
  %cmp281 = fcmp ogt double %add.i532.8, 0.000000e+00
  br i1 %cmp281, label %if.then283, label %if.end285

if.then283:                                       ; preds = %for.body.i536.preheader
  %call284 = call double @sqrt(double %add.i532.8) #1
  br label %if.end285

if.end285:                                        ; preds = %if.then283, %for.body.i536.preheader
  %L2_norm_of_residual.0 = phi double [ %call284, %if.then283 ], [ 0.000000e+00, %for.body.i536.preheader ]
  %cmp287 = fcmp olt double %L2_norm_of_residual.0, %mul286
  %182 = extractelement <2 x double> %123, i32 0
  %183 = extractelement <2 x double> %123, i32 1
  br i1 %cmp287, label %for.end319, label %if.end290

if.end290:                                        ; preds = %if.end285
  %cmp291 = fcmp oeq double %add.i532.8, 0.000000e+00
  br i1 %cmp291, label %for.end319, label %if.end294

if.end294:                                        ; preds = %if.end290
  %div295 = fdiv double %add.i532.8, %add.i564.8
  %call302 = call i32 @__isinf(double %div295) #11
  %tobool303 = icmp ne i32 %call302, 0
  %cmp310 = fcmp oeq double %div295, 0.000000e+00
  %or.cond528 = or i1 %cmp310, %tobool303
  br i1 %or.cond528, label %for.end319, label %for.body.i.preheader

for.body.i.preheader:                             ; preds = %if.end294
  %184 = load double, double* %arraydecay51, align 16, !tbaa !34
  %185 = load double, double* %arraydecay50, align 16, !tbaa !34
  %186 = insertelement <2 x double> undef, double %div295, i32 0
  %187 = insertelement <2 x double> %186, double %div295, i32 1
  %188 = insertelement <2 x double> undef, double %185, i32 0
  %189 = shufflevector <2 x double> %188, <2 x double> %49, <2 x i32> <i32 0, i32 3>
  %190 = fmul <2 x double> %187, %189
  %191 = insertelement <2 x double> undef, double %184, i32 0
  %192 = extractelement <2 x double> %141, i32 1
  %193 = shufflevector <2 x double> %191, <2 x double> %141, <2 x i32> <i32 0, i32 3>
  %194 = fadd <2 x double> %193, %190
  store <2 x double> %194, <2 x double>* %15, align 16, !tbaa !34
  %195 = fmul <2 x double> %187, %46
  %196 = fadd <2 x double> %145, %195
  %197 = extractelement <2 x double> %196, i32 1
  store double %197, double* %arrayidx144.2.le, align 16, !tbaa !34
  %198 = extractelement <2 x double> %196, i32 0
  store double %198, double* %arrayidx144.3.le, align 8, !tbaa !34
  %mul3.i.4 = fmul double %div295, %39
  %add.i.4 = fadd double %add.i541.4, %mul3.i.4
  store double %add.i.4, double* %arrayidx144.4.le, align 16, !tbaa !34
  %199 = fmul <2 x double> %187, %44
  %200 = fadd <2 x double> %152, %199
  %201 = extractelement <2 x double> %200, i32 1
  store double %201, double* %arrayidx144.5.le, align 8, !tbaa !34
  %202 = extractelement <2 x double> %200, i32 0
  store double %202, double* %arrayidx144.6.le, align 16, !tbaa !34
  %203 = fmul <2 x double> %187, %41
  %204 = fadd <2 x double> %158, %203
  %205 = extractelement <2 x double> %204, i32 1
  store double %205, double* %arrayidx144.7.le, align 8, !tbaa !34
  %206 = extractelement <2 x double> %204, i32 0
  store double %206, double* %arrayidx144.8.le, align 16, !tbaa !34
  %inc318 = add nuw nsw i32 %n.2609, 1
  %cmp130 = icmp slt i32 %inc318, 4
  %207 = extractelement <2 x double> %194, i32 1
  %208 = extractelement <2 x double> %123, i32 0
  %209 = extractelement <2 x double> %123, i32 1
  br i1 %cmp130, label %for.body131, label %for.end319

for.end319:                                       ; preds = %if.end294, %if.end290, %if.end285, %if.end227, %for.body.i579.preheader, %for.body.i.preheader
  %210 = phi double [ %160, %for.body.i.preheader ], [ %.lcssa752, %for.body.i579.preheader ], [ %.lcssa752, %if.end227 ], [ %160, %if.end285 ], [ %160, %if.end290 ], [ %160, %if.end294 ]
  %211 = phi double [ %159, %for.body.i.preheader ], [ %.lcssa751, %for.body.i579.preheader ], [ %.lcssa751, %if.end227 ], [ %159, %if.end285 ], [ %159, %if.end290 ], [ %159, %if.end294 ]
  %212 = phi double [ %154, %for.body.i.preheader ], [ %.lcssa750, %for.body.i579.preheader ], [ %.lcssa750, %if.end227 ], [ %154, %if.end285 ], [ %154, %if.end290 ], [ %154, %if.end294 ]
  %213 = phi double [ %153, %for.body.i.preheader ], [ %.lcssa749, %for.body.i579.preheader ], [ %.lcssa749, %if.end227 ], [ %153, %if.end285 ], [ %153, %if.end290 ], [ %153, %if.end294 ]
  %214 = phi double [ %add.i541.4, %for.body.i.preheader ], [ %37, %for.body.i579.preheader ], [ %37, %if.end227 ], [ %add.i541.4, %if.end285 ], [ %add.i541.4, %if.end290 ], [ %add.i541.4, %if.end294 ]
  %215 = phi double [ %147, %for.body.i.preheader ], [ %.lcssa748, %for.body.i579.preheader ], [ %.lcssa748, %if.end227 ], [ %147, %if.end285 ], [ %147, %if.end290 ], [ %147, %if.end294 ]
  %216 = phi double [ %146, %for.body.i.preheader ], [ %.lcssa747, %for.body.i579.preheader ], [ %.lcssa747, %if.end227 ], [ %146, %if.end285 ], [ %146, %if.end290 ], [ %146, %if.end294 ]
  %217 = phi double [ %192, %for.body.i.preheader ], [ %.lcssa746, %for.body.i579.preheader ], [ %.lcssa746, %if.end227 ], [ %.lcssa754, %if.end285 ], [ %.lcssa754, %if.end290 ], [ %.lcssa754, %if.end294 ]
  %218 = phi double [ %206, %for.body.i.preheader ], [ %.lcssa743, %for.body.i579.preheader ], [ %.lcssa743, %if.end227 ], [ %.lcssa743, %if.end285 ], [ %.lcssa743, %if.end290 ], [ %.lcssa743, %if.end294 ]
  %219 = phi double [ %205, %for.body.i.preheader ], [ %.lcssa742, %for.body.i579.preheader ], [ %.lcssa742, %if.end227 ], [ %.lcssa742, %if.end285 ], [ %.lcssa742, %if.end290 ], [ %.lcssa742, %if.end294 ]
  %220 = phi double [ %202, %for.body.i.preheader ], [ %.lcssa741, %for.body.i579.preheader ], [ %.lcssa741, %if.end227 ], [ %.lcssa741, %if.end285 ], [ %.lcssa741, %if.end290 ], [ %.lcssa741, %if.end294 ]
  %221 = phi double [ %201, %for.body.i.preheader ], [ %.lcssa740, %for.body.i579.preheader ], [ %.lcssa740, %if.end227 ], [ %.lcssa740, %if.end285 ], [ %.lcssa740, %if.end290 ], [ %.lcssa740, %if.end294 ]
  %222 = phi double [ %add.i.4, %for.body.i.preheader ], [ %39, %for.body.i579.preheader ], [ %39, %if.end227 ], [ %39, %if.end285 ], [ %39, %if.end290 ], [ %39, %if.end294 ]
  %223 = phi double [ %198, %for.body.i.preheader ], [ %.lcssa739, %for.body.i579.preheader ], [ %.lcssa739, %if.end227 ], [ %.lcssa739, %if.end285 ], [ %.lcssa739, %if.end290 ], [ %.lcssa739, %if.end294 ]
  %224 = phi double [ %197, %for.body.i.preheader ], [ %.lcssa738, %for.body.i579.preheader ], [ %.lcssa738, %if.end227 ], [ %.lcssa738, %if.end285 ], [ %.lcssa738, %if.end290 ], [ %.lcssa738, %if.end294 ]
  %225 = phi double [ %207, %for.body.i.preheader ], [ %.lcssa737, %for.body.i579.preheader ], [ %.lcssa737, %if.end227 ], [ %.lcssa737, %if.end285 ], [ %.lcssa737, %if.end290 ], [ %.lcssa737, %if.end294 ]
  %226 = phi double [ %add.i552.4, %for.body.i.preheader ], [ %36, %for.body.i579.preheader ], [ %36, %if.end227 ], [ %add.i552.4, %if.end285 ], [ %add.i552.4, %if.end290 ], [ %add.i552.4, %if.end294 ]
  %227 = phi double [ %209, %for.body.i.preheader ], [ %34, %for.body.i579.preheader ], [ %34, %if.end227 ], [ %183, %if.end285 ], [ %183, %if.end290 ], [ %183, %if.end294 ]
  %228 = phi double [ %208, %for.body.i.preheader ], [ %35, %for.body.i579.preheader ], [ %35, %if.end227 ], [ %182, %if.end285 ], [ %182, %if.end290 ], [ %182, %if.end294 ]
  %CGConverged.3 = phi i32 [ %CGConverged.2613, %for.body.i.preheader ], [ %CGConverged.2613, %for.body.i579.preheader ], [ %CGConverged.2613, %if.end227 ], [ 1, %if.end285 ], [ %CGConverged.2613, %if.end290 ], [ %CGConverged.2613, %if.end294 ]
  %CGFailed.1 = phi i32 [ %CGFailed.0614, %for.body.i.preheader ], [ 1, %for.body.i579.preheader ], [ 1, %if.end227 ], [ %CGFailed.0614, %if.end285 ], [ 1, %if.end290 ], [ 1, %if.end294 ]
  %229 = phi <2 x double> [ %137, %for.body.i.preheader ], [ %40, %for.body.i579.preheader ], [ %40, %if.end227 ], [ %137, %if.end285 ], [ %137, %if.end290 ], [ %137, %if.end294 ]
  %230 = phi <2 x double> [ %133, %for.body.i.preheader ], [ %43, %for.body.i579.preheader ], [ %43, %if.end227 ], [ %133, %if.end285 ], [ %133, %if.end290 ], [ %133, %if.end294 ]
  %231 = phi <2 x double> [ %129, %for.body.i.preheader ], [ %48, %for.body.i579.preheader ], [ %48, %if.end227 ], [ %129, %if.end285 ], [ %129, %if.end290 ], [ %129, %if.end294 ]
  %232 = load i32, i32* %arraydecay, align 16, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 %e_id, double 1.000000e+00, i32 %e_id, double %228, i32 %232) #1
  %233 = load i32, i32* %arrayidx44.1, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 %e_id, double 1.000000e+00, i32 %e_id, double %227, i32 %233) #1
  %234 = load i32, i32* %arrayidx44.2, align 8, !tbaa !35
  %235 = extractelement <2 x double> %231, i32 1
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 %e_id, double 1.000000e+00, i32 %e_id, double %235, i32 %234) #1
  %236 = load i32, i32* %arrayidx44.3, align 4, !tbaa !35
  %237 = extractelement <2 x double> %231, i32 0
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 %e_id, double 1.000000e+00, i32 %e_id, double %237, i32 %236) #1
  %238 = load i32, i32* %arrayidx44.4, align 16, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 %e_id, double 1.000000e+00, i32 %e_id, double %226, i32 %238) #1
  %239 = load i32, i32* %add.ptr3, align 4, !tbaa !35
  %240 = extractelement <2 x double> %230, i32 1
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 %e_id, double 1.000000e+00, i32 %e_id, double %240, i32 %239) #1
  %241 = load i32, i32* %arrayidx44.6, align 8, !tbaa !35
  %242 = extractelement <2 x double> %230, i32 0
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 %e_id, double 1.000000e+00, i32 %e_id, double %242, i32 %241) #1
  %243 = load i32, i32* %arrayidx44.7, align 4, !tbaa !35
  %244 = extractelement <2 x double> %229, i32 1
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 %e_id, double 1.000000e+00, i32 %e_id, double %244, i32 %243) #1
  %245 = load i32, i32* %arrayidx44.8, align 16, !tbaa !35
  %246 = extractelement <2 x double> %229, i32 0
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 %e_id, double 1.000000e+00, i32 %e_id, double %246, i32 %245) #1
  %247 = or i32 %CGFailed.1, %CGConverged.3
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %if.end361, label %while.end.loopexit

if.end361:                                        ; preds = %for.end319
  %249 = load double, double* %arraydecay50, align 16, !tbaa !34
  %250 = load i32, i32* %arraydecay, align 16, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 14, double 0.000000e+00, i32 14, double %249, i32 %250) #1
  %251 = load i32, i32* %arrayidx44.1, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 14, double %225, i32 %251) #1
  %252 = load i32, i32* %arrayidx44.2, align 8, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 14, double %224, i32 %252) #1
  %253 = load i32, i32* %arrayidx44.3, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 14, double %223, i32 %253) #1
  %254 = load i32, i32* %arrayidx44.4, align 16, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 14, double %222, i32 %254) #1
  %255 = load i32, i32* %add.ptr3, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 14, double %221, i32 %255) #1
  %256 = load i32, i32* %arrayidx44.6, align 8, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 14, double %220, i32 %256) #1
  %257 = load i32, i32* %arrayidx44.7, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 14, double %219, i32 %257) #1
  %258 = load i32, i32* %arrayidx44.8, align 16, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 14, double %218, i32 %258) #1
  %259 = load double, double* %arraydecay51, align 16, !tbaa !34
  %260 = load i32, i32* %arraydecay, align 16, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 13, double 0.000000e+00, i32 13, double %259, i32 %260) #1
  %261 = load i32, i32* %arrayidx44.1, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 13, double %217, i32 %261) #1
  %262 = load i32, i32* %arrayidx44.2, align 8, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 13, double %216, i32 %262) #1
  %263 = load i32, i32* %arrayidx44.3, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 13, double %215, i32 %263) #1
  %264 = load i32, i32* %arrayidx44.4, align 16, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 13, double %214, i32 %264) #1
  %265 = load i32, i32* %add.ptr3, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 13, double %213, i32 %265) #1
  %266 = load i32, i32* %arrayidx44.6, align 8, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 13, double %212, i32 %266) #1
  %267 = load i32, i32* %arrayidx44.7, align 4, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 13, double %211, i32 %267) #1
  %268 = load i32, i32* %arrayidx44.8, align 16, !tbaa !35
  call void @add_grids(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 13, double %210, i32 %268) #1
  %add362 = add nuw nsw i32 %m.0615, 4
  %notlhs = icmp slt i32 %add362, 200
  %269 = and i1 %248, %notlhs
  br i1 %269, label %if.end361.while.body_crit_edge, label %while.end.loopexit

if.end361.while.body_crit_edge:                   ; preds = %if.end361
  %.pre = load i32, i32* %arraydecay, align 16, !tbaa !35
  br label %while.body

while.end.loopexit:                               ; preds = %if.end361, %for.end319
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  call void @llvm.lifetime.end(i64 36, i8* %6) #1
  call void @llvm.lifetime.end(i64 648, i8* %5) #1
  call void @llvm.lifetime.end(i64 648, i8* %4) #1
  call void @llvm.lifetime.end(i64 648, i8* %0) #1
  call void @llvm.lifetime.end(i64 72, i8* %3) #1
  call void @llvm.lifetime.end(i64 72, i8* %z6.i585) #1
  call void @llvm.lifetime.end(i64 72, i8* %z6.i586) #1
  call void @llvm.lifetime.end(i64 72, i8* %z6.i) #1
  call void @llvm.lifetime.end(i64 72, i8* %2) #1
  call void @llvm.lifetime.end(i64 72, i8* %1) #1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define void @CG(%struct.domain_type* %domain, i32 %level, i32 %x_id, i32 %R_id, double %a, double %b, double %desired_reduction_in_norm) #3 {
entry:
  tail call void @residual(%struct.domain_type* %domain, i32 %level, i32 12, i32 %x_id, i32 %R_id, double %a, double %b) #1
  tail call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 13, double 1.000000e+00, i32 12) #1
  tail call void @scale_grid(%struct.domain_type* %domain, i32 %level, i32 14, double 1.000000e+00, i32 12) #1
  %call = tail call double @norm(%struct.domain_type* %domain, i32 %level, i32 13) #1
  %call1 = tail call double @dot(%struct.domain_type* %domain, i32 %level, i32 13, i32 13) #1
  %lnot = fcmp une double %call, 0.000000e+00
  br i1 %lnot, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %Krylov_iterations = getelementptr inbounds %struct.domain_type, %struct.domain_type* %domain, i64 0, i32 3
  %mul = fmul double %call, %desired_reduction_in_norm
  br label %while.body.us

while.body.us:                                    ; preds = %cleanup52.us, %while.body.lr.ph
  %j.0105.us = phi i32 [ 0, %while.body.lr.ph ], [ %inc.us, %cleanup52.us ]
  %r_dot_r.0104.us = phi double [ %call1, %while.body.lr.ph ], [ %call29.us, %cleanup52.us ]
  %inc.us = add nuw nsw i32 %j.0105.us, 1
  %0 = load i32, i32* %Krylov_iterations, align 8, !tbaa !128
  %inc4.us = add nsw i32 %0, 1
  store i32 %inc4.us, i32* %Krylov_iterations, align 8, !tbaa !128
  tail call void @apply_op(%struct.domain_type* %domain, i32 %level, i32 16, i32 14, double %a, double %b) #1
  %call5.us = tail call double @dot(%struct.domain_type* %domain, i32 %level, i32 16, i32 14) #1
  %cmp6.us = fcmp oeq double %call5.us, 0.000000e+00
  br i1 %cmp6.us, label %while.end.loopexit, label %if.end8.us

if.end8.us:                                       ; preds = %while.body.us
  %div.us = fdiv double %r_dot_r.0104.us, %call5.us
  %call12.us = tail call i32 @__isinf(double %div.us) #11
  %tobool13.us = icmp eq i32 %call12.us, 0
  br i1 %tobool13.us, label %if.end19.us, label %while.end.loopexit

if.end19.us:                                      ; preds = %if.end8.us
  tail call void @add_grids(%struct.domain_type* nonnull %domain, i32 %level, i32 %x_id, double 1.000000e+00, i32 %x_id, double %div.us, i32 14) #1
  %sub.us = fsub double -0.000000e+00, %div.us
  tail call void @add_grids(%struct.domain_type* nonnull %domain, i32 %level, i32 13, double 1.000000e+00, i32 13, double %sub.us, i32 16) #1
  %call20.us = tail call double @norm(%struct.domain_type* nonnull %domain, i32 %level, i32 13) #1
  %cmp21.us = fcmp oeq double %call20.us, 0.000000e+00
  %cmp25.us = fcmp olt double %call20.us, %mul
  %or.cond102.us = or i1 %cmp21.us, %cmp25.us
  br i1 %or.cond102.us, label %while.end.loopexit, label %if.end28.us

if.end28.us:                                      ; preds = %if.end19.us
  %call29.us = tail call double @dot(%struct.domain_type* nonnull %domain, i32 %level, i32 13, i32 13) #1
  %cmp30.us = fcmp oeq double %call29.us, 0.000000e+00
  br i1 %cmp30.us, label %while.end.loopexit, label %if.end33.us

if.end33.us:                                      ; preds = %if.end28.us
  %div34.us = fdiv double %call29.us, %r_dot_r.0104.us
  %call41.us = tail call i32 @__isinf(double %div34.us) #11
  %tobool42.us = icmp eq i32 %call41.us, 0
  br i1 %tobool42.us, label %cleanup52.us, label %while.end.loopexit

cleanup52.us:                                     ; preds = %if.end33.us
  tail call void @add_grids(%struct.domain_type* nonnull %domain, i32 %level, i32 14, double 1.000000e+00, i32 13, double %div34.us, i32 14) #1
  %or.cond.not.us = icmp slt i32 %inc.us, 200
  br i1 %or.cond.not.us, label %while.body.us, label %while.end.loopexit

while.end.loopexit:                               ; preds = %if.end33.us, %if.end28.us, %if.end19.us, %if.end8.us, %while.body.us, %cleanup52.us
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define void @IterativeSolver(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b, double %desired_reduction_in_norm) #3 {
entry:
  tail call void @smooth(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b) #1
  tail call void @smooth(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b) #1
  tail call void @smooth(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b) #1
  tail call void @smooth(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b) #1
  tail call void @smooth(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b) #1
  tail call void @smooth(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b) #1
  tail call void @smooth(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b) #1
  tail call void @smooth(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b) #1
  tail call void @smooth(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b) #1
  tail call void @smooth(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b) #1
  tail call void @smooth(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b) #1
  tail call void @smooth(%struct.domain_type* %domain, i32 %level, i32 %e_id, i32 %R_id, double %a, double %b) #1
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define i32 @IterativeSolver_NumGrids() #10 {
entry:
  ret i32 0
}

; Function Attrs: nounwind uwtable
define i64 @CycleTime() #3 {
entry:
  %0 = tail call { i64, i64 } asm sideeffect "rdtsc", "={ax},={dx},~{dirflag},~{fpsr},~{flags}"() #1, !srcloc !182
  %asmresult = extractvalue { i64, i64 } %0, 0
  %asmresult1 = extractvalue { i64, i64 } %0, 1
  %shl = shl i64 %asmresult1, 32
  %or = or i64 %shl, %asmresult
  ret i64 %or
}

attributes #0 = { noinline nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { norecurse nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { norecurse nounwind readonly uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { norecurse nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone }
attributes #12 = { noreturn nounwind }

!llvm.ident = !{!0, !0, !0, !0, !0, !0}

!0 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!1 = !{!2, !2, i64 0}
!2 = !{!"any pointer", !3, i64 0}
!3 = !{!"omnipotent char", !4, i64 0}
!4 = !{!"Simple C/C++ TBAA"}
!5 = !{!6, !7, i64 12}
!6 = !{!"", !7, i64 0, !7, i64 4, !7, i64 8, !8, i64 12, !9, i64 24, !9, i64 56}
!7 = !{!"int", !3, i64 0}
!8 = !{!"", !7, i64 0, !7, i64 4, !7, i64 8}
!9 = !{!"", !7, i64 0, !7, i64 4, !7, i64 8, !7, i64 12, !7, i64 16, !7, i64 20, !2, i64 24}
!10 = !{!6, !7, i64 16}
!11 = !{!6, !7, i64 20}
!12 = !{!6, !7, i64 28}
!13 = !{!6, !7, i64 32}
!14 = !{!6, !7, i64 36}
!15 = !{!6, !7, i64 40}
!16 = !{!6, !7, i64 44}
!17 = !{!6, !7, i64 60}
!18 = !{!6, !7, i64 64}
!19 = !{!6, !7, i64 68}
!20 = !{!6, !7, i64 72}
!21 = !{!6, !7, i64 76}
!22 = !{!6, !2, i64 80}
!23 = !{!6, !7, i64 24}
!24 = !{!25, !2, i64 2536}
!25 = !{!"", !26, i64 0, !7, i64 1304, !7, i64 1308, !7, i64 1312, !7, i64 1316, !3, i64 1320, !3, i64 1432, !3, i64 1648, !3, i64 1864, !3, i64 2192, !7, i64 2272, !7, i64 2276, !7, i64 2280, !7, i64 2284, !7, i64 2288, !7, i64 2292, !8, i64 2296, !8, i64 2308, !8, i64 2320, !8, i64 2332, !8, i64 2344, !7, i64 2356, !7, i64 2360, !7, i64 2364, !7, i64 2368, !7, i64 2372, !3, i64 2376, !3, i64 2456, !2, i64 2536}
!26 = !{!"", !3, i64 0, !3, i64 80, !3, i64 160, !3, i64 240, !3, i64 320, !3, i64 400, !3, i64 480, !3, i64 560, !3, i64 640, !3, i64 720, !3, i64 800, !3, i64 880, !3, i64 960, !3, i64 1040, !3, i64 1120, !3, i64 1200, !27, i64 1280, !27, i64 1288, !27, i64 1296}
!27 = !{!"long", !3, i64 0}
!28 = !{!29, !2, i64 1112}
!29 = !{!"", !8, i64 0, !8, i64 12, !7, i64 24, !7, i64 28, !3, i64 32, !2, i64 1112}
!30 = !{!31, !2, i64 176}
!31 = !{!"", !32, i64 0, !8, i64 8, !8, i64 20, !8, i64 32, !7, i64 44, !7, i64 48, !7, i64 52, !7, i64 56, !7, i64 60, !3, i64 64, !2, i64 176, !2, i64 184, !3, i64 192, !2, i64 208}
!32 = !{!"double", !3, i64 0}
!33 = !{!6, !7, i64 56}
!34 = !{!32, !32, i64 0}
!35 = !{!7, !7, i64 0}
!36 = !{!25, !7, i64 2324}
!37 = !{!31, !7, i64 24}
!38 = !{!31, !7, i64 44}
!39 = !{!25, !7, i64 2328}
!40 = !{!31, !7, i64 28}
!41 = !{!25, !7, i64 2356}
!42 = !{!27, !27, i64 0}
!43 = !{!31, !7, i64 20}
!44 = !{!25, !7, i64 2276}
!45 = !{!25, !7, i64 2272}
!46 = !{!6, !7, i64 0}
!47 = !{!6, !7, i64 4}
!48 = !{!6, !7, i64 8}
!49 = !{!25, !7, i64 2284}
!50 = !{!25, !7, i64 2280}
!51 = !{!25, !7, i64 2292}
!52 = !{!25, !7, i64 2288}
!53 = !{!25, !7, i64 2360}
!54 = !{!31, !7, i64 48}
!55 = !{!31, !7, i64 52}
!56 = !{!31, !32, i64 0}
!57 = !{!58, !2, i64 0}
!58 = !{!"kmp_task_t_with_privates", !59, i64 0, !60, i64 32}
!59 = !{!"kmp_task_t", !2, i64 0, !2, i64 8, !7, i64 16, !2, i64 24}
!60 = !{!".kmp_privates.t", !2, i64 0, !32, i64 8, !2, i64 16, !2, i64 24, !32, i64 32, !32, i64 40, !2, i64 48, !2, i64 56, !2, i64 64, !2, i64 72, !2, i64 80, !2, i64 88, !7, i64 96, !7, i64 100, !7, i64 104, !7, i64 108, !7, i64 112, !7, i64 116}
!61 = !{!58, !2, i64 32}
!62 = !{!3, !3, i64 0}
!63 = !{!58, !32, i64 40}
!64 = !{!58, !2, i64 48}
!65 = !{!58, !2, i64 56}
!66 = !{!58, !32, i64 64}
!67 = !{!58, !32, i64 72}
!68 = !{!58, !2, i64 80}
!69 = !{!58, !2, i64 88}
!70 = !{!58, !2, i64 96}
!71 = !{!58, !2, i64 104}
!72 = !{!58, !2, i64 112}
!73 = !{!58, !2, i64 120}
!74 = !{!58, !7, i64 128}
!75 = !{!58, !7, i64 132}
!76 = !{!58, !7, i64 136}
!77 = !{!58, !7, i64 140}
!78 = !{!58, !7, i64 144}
!79 = !{!58, !7, i64 148}
!80 = !{!58, !2, i64 24}
!81 = !{!82}
!82 = distinct !{!82, !83, !".omp_outlined..9: %.privates."}
!83 = distinct !{!83, !".omp_outlined..9"}
!84 = !{!25, !7, i64 2372}
!85 = !{!25, !7, i64 2304}
!86 = distinct !{!86, !87, !88}
!87 = !{!"llvm.loop.vectorize.width", i32 1}
!88 = !{!"llvm.loop.interleave.count", i32 1}
!89 = distinct !{!89, !90}
!90 = !{!"llvm.loop.unroll.disable"}
!91 = distinct !{!91, !90}
!92 = distinct !{!92, !87, !88}
!93 = !{!31, !7, i64 56}
!94 = !{!31, !7, i64 8}
!95 = !{!31, !7, i64 12}
!96 = !{!31, !7, i64 16}
!97 = !{!25, !7, i64 2296}
!98 = !{!29, !7, i64 24}
!99 = !{!29, !7, i64 28}
!100 = !{!29, !7, i64 0}
!101 = !{!29, !7, i64 4}
!102 = !{!29, !7, i64 8}
!103 = !{!29, !7, i64 12}
!104 = !{!29, !7, i64 16}
!105 = !{!29, !7, i64 20}
!106 = !{!25, !7, i64 2320}
!107 = !{!25, !7, i64 2332}
!108 = !{!25, !7, i64 2336}
!109 = !{!25, !7, i64 2352}
!110 = !{!25, !7, i64 2340}
!111 = !{!25, !7, i64 2308}
!112 = !{!25, !7, i64 2312}
!113 = !{!25, !7, i64 2316}
!114 = !{!25, !7, i64 2300}
!115 = !{!25, !7, i64 2344}
!116 = !{!25, !7, i64 2348}
!117 = !{!25, !7, i64 2364}
!118 = !{!25, !7, i64 2368}
!119 = !{!120, !7, i64 0}
!120 = !{!"", !7, i64 0, !7, i64 4, !121, i64 8, !121, i64 24}
!121 = !{!"", !7, i64 0, !8, i64 4}
!122 = !{!120, !7, i64 4}
!123 = !{!6, !2, i64 48}
!124 = !{!25, !7, i64 1308}
!125 = !{!25, !27, i64 1280}
!126 = !{!25, !27, i64 1296}
!127 = !{!25, !27, i64 1288}
!128 = !{!25, !7, i64 1312}
!129 = !{!31, !2, i64 184}
!130 = distinct !{!130, !90}
!131 = !{!25, !7, i64 1304}
!132 = !{!31, !7, i64 60}
!133 = !{!31, !7, i64 32}
!134 = !{!31, !7, i64 36}
!135 = !{!31, !7, i64 40}
!136 = distinct !{!136, !87, !88}
!137 = distinct !{!137, !87, !88}
!138 = distinct !{!138, !90}
!139 = distinct !{!139, !90}
!140 = distinct !{!140, !90}
!141 = distinct !{!141, !90}
!142 = distinct !{!142, !90}
!143 = distinct !{!143, !87, !88}
!144 = distinct !{!144, !145, !87, !88}
!145 = !{!"llvm.loop.unroll.runtime.disable"}
!146 = !{!25, !7, i64 1316}
!147 = distinct !{!147, !90}
!148 = distinct !{!148, !90}
!149 = distinct !{!149, !90}
!150 = distinct !{!150, !90}
!151 = distinct !{!151, !90}
!152 = distinct !{!152, !87, !88}
!153 = distinct !{!153, !145, !87, !88}
!154 = distinct !{!154, !90}
!155 = distinct !{!155, !87, !88}
!156 = distinct !{!156, !145, !87, !88}
!157 = distinct !{!157, !90}
!158 = distinct !{!158, !90}
!159 = distinct !{!159, !87, !88}
!160 = distinct !{!160, !145, !87, !88}
!161 = distinct !{!161, !87, !88}
!162 = distinct !{!162, !145, !87, !88}
!163 = distinct !{!163, !90}
!164 = distinct !{!164, !90}
!165 = distinct !{!165, !87, !88}
!166 = distinct !{!166, !145, !87, !88}
!167 = distinct !{!167, !87, !88}
!168 = distinct !{!168, !145, !87, !88}
!169 = distinct !{!169, !87, !88}
!170 = distinct !{!170, !145, !87, !88}
!171 = distinct !{!171, !87, !88}
!172 = distinct !{!172, !145, !87, !88}
!173 = distinct !{!173, !87, !88}
!174 = distinct !{!174, !145, !87, !88}
!175 = distinct !{!175, !90}
!176 = distinct !{!176, !90}
!177 = distinct !{!177, !90}
!178 = distinct !{!178, !87, !88}
!179 = distinct !{!179, !145, !87, !88}
!180 = distinct !{!180, !87, !88}
!181 = distinct !{!181, !145, !87, !88}
!182 = !{i32 420}
