#! /bin/bash
#
# Copyright (C) 2003-2014 Intel Corporation.  All Rights Reserved.
# 
# The source code contained or described herein and all documents
# related to the source code ("Material") are owned by Intel Corporation
# or its suppliers or licensors.  Title to the Material remains with
# Intel Corporation or its suppliers and licensors.  The Material is
# protected by worldwide copyright and trade secret laws and treaty
# provisions.  No part of the Material may be used, copied, reproduced,
# modified, published, uploaded, posted, transmitted, distributed, or
# disclosed in any way without Intel's prior express written permission.
# 
# No license under any patent, copyright, trade secret or other
# intellectual property right is granted to or conferred upon you by
# disclosure or delivery of the Materials, either expressly, by
# implication, inducement, estoppel or otherwise.  Any license under
# such intellectual property rights must be express and approved by
# Intel in writing.
# 
#   (C) 2001 by Argonne National Laboratory.
# 
# 				  MPICH2 COPYRIGHT
# 
# The following is a notice of limited availability of the code, and disclaimer
# which must be included in the prologue of the code and in all source listings
# of the code.
# 
# Copyright Notice
#  + 2002 University of Chicago
# 
# Permission is hereby granted to use, reproduce, prepare derivative works, and
# to redistribute to others.  This software was authored by:
# 
# Mathematics and Computer Science Division
# Argonne National Laboratory, Argonne IL 60439
# 
# (and)
# 
# Department of Computer Science
# University of Illinois at Urbana-Champaign
# 
# 
# 			      GOVERNMENT LICENSE
# 
# Portions of this material resulted from work developed under a U.S.
# Government Contract and are subject to the following license: the Government
# is granted for itself and others acting on its behalf a paid-up, nonexclusive,
# irrevocable worldwide license in this computer software to reproduce, prepare
# derivative works, and perform publicly and display publicly.
# 
# 				  DISCLAIMER
# 
# This computer code material was prepared, in part, as an account of work
# sponsored by an agency of the United States Government.  Neither the United
# States, nor the University of Chicago, nor any of their employees, makes any
# warranty express or implied, or assumes any legal liability or responsibility
# for the accuracy, completeness, or usefulness of any information, apparatus,
# product, or process disclosed, or represents that its use would not infringe
# privately owned rights.
# 
# Portions of this code were written by Microsoft. Those portions are
# Copyright (c) 2007 Microsoft Corporation. Microsoft grants permission to
# use, reproduce, prepare derivative works, and to redistribute to
# others. The code is licensed "as is." The User bears the risk of using
# it. Microsoft gives no express warranties, guarantees or
# conditions. To the extent permitted by law, Microsoft excludes the
# implied warranties of merchantability, fitness for a particular
# purpose and non-infringement.
# 
# 
#
#       
#
# mpicxx
# Simple script to compile and/or link MPI programs.
# This script knows the default flags and libraries, and can handle
# alternative C++ compilers and the associated flags and libraries.
# The important terms are:
#    includedir, libdir - Directories containing an *installed* mpich2
#    prefix, execprefix - Often used to define includedir and libdir
#    CXX                - C compiler
#    WRAPPER_CXXFLAGS      - Any special flags needed to compile 
#    WRAPPER_LDFLAGS       - Any special flags needed to link
#    MPILIBNAME         - Name of the MPI library
#    MPICXXLIBNAME      - Name of the C++ binding part of the MPI library
#    MPI_OTHERLIBS      - Other libraries needed in order to link 
#    
# We assume that (a) the C++ compiler can both compile and link programs
#
# Handling of command-line options:
#   This is a little tricky because some options may contain blanks.
#
# Special issues with shared libraries - todo
#
# --------------------------------------------------------------------------

# Set the default values of all variables.
#
# Directory locations: Fixed for any MPI implementation
prefix=/opt/intel//impi/5.0.2.044
# The environment variable I_MPI_ROOT may be used to override installation folder path  
if [ -n "$I_MPI_ROOT" ] ; then
    prefix=$I_MPI_ROOT;
fi
# Recognize the '-mmic' compiler switch.
for arg in "$@" ; do
{
 if [ "${arg}" = "-mmic" ] ; then
  . ${prefix}/mic/bin/mpivars.sh
  if [ -n "$VT_ROOT" ]; then
    if [ -f "$VT_ROOT/mic/bin/itacvars.sh" ]; then
      . "$VT_ROOT/mic/bin/itacvars.sh" ""
    fi
  fi
  exec mpiicpc "$@"
 fi
}
done
exec_prefix=${prefix}
sysconfdir=${prefix}/intel64/etc
# The environment variable I_MPI_COMPILER_CONFIG_DIR may be used to override 
# folder where *.conf files are placed  
if [ -n "$I_MPI_COMPILER_CONFIG_DIR" ] ; then
    sysconfdir=$I_MPI_COMPILER_CONFIG_DIR;
fi
includedir=${prefix}/intel64/include
libdir=${prefix}/intel64/lib
#
# Default settings for compiler, flags, and libraries
CXX="icpc"
CXXFLAGS=" "
LDFLAGS=" -ldl "
MPILIBNAME="mpi"
PMPILIBNAME="pmpi"
MPICXXLIBNAME="mpicxx"
MPI_OTHERLIBS="-lrt -lpthread  "

# MPIVERSION is the version of the Intel(R) MPI Library that mpiicpc is intended for
MPIVERSION="5.0 Update 2"
#
# Internal variables
# Show is set to echo to cause the compilation command to be echoed instead 
# of executed.
Show=
Docompchk=no
static_mpi=no
strip_debug_info=
handle_executable=
executable=a.out
static_log=yes
mt_mpi=no
ilp64=no
trace_opt=no
#
# End of initialization of variables
#---------------------------------------------------------------------
# Environment Variables.
# The environment variables I_MPI_CXX, MPICH_CXX may be used to override the 
# default choices. I_MPI_CXX has higher priority than MPICH_CXX.
# In addition, if there is a file $sysconfdir/mpicxx-$CXXname.conf, 
# where CXXname is the name of the compiler with all spaces replaced by hyphens
# (e.g., "CC -64" becomes "CC--64", that file is sources, allowing other
# changes to the compilation environment.  See the variables used by the 
# script (defined above)
if [ -n "$I_MPI_CXX" ] ; then
    CXX="$I_MPI_CXX"
    CXXname=`echo $CXX | sed 's/ /-/g'`
    if [ -s $sysconfdir/mpicxx-$(basename $CXXname).conf ] ; then
        . $sysconfdir/mpicxx-$(basename $CXXname).conf
    fi
else
    if [ -n "$MPICH_CXX" ] ; then
        CXX="$MPICH_CXX"
        CXXname=`echo $CXX | sed 's/ /-/g'`
        if [ -s $sysconfdir/mpicxx-$(basename $CXXname).conf ] ; then
            . $sysconfdir/mpicxx-$(basename $CXXname).conf
	fi
    fi
fi
if [ -n "$I_MPI_CHECK_COMPILER" ] ; then
    for comp_val in "1" "on" "yes" "enable"
    do
        if [ "$I_MPI_CHECK_COMPILER" = "$comp_val" ] ; then
            Docompchk=yes
            break
        fi
    done
fi
if [ -n "$I_MPI_DEBUG_INFO_STRIP" ] ; then
    for comp_val in "0" "off" "no" "disable"
    do
        if [ "$I_MPI_DEBUG_INFO_STRIP" = "$comp_val" ] ; then
            strip_debug_info=no
            break
        fi
    done
fi
# Allow a profiling option to be selected through an environment variable
if [ -n "$MPICXX_PROFILE" ] ; then
    profConf=$MPICXX_PROFILE
fi
if [ -n "$I_MPI_CXX_PROFILE" ] ; then
    profConf=$I_MPI_CXX_PROFILE
fi

# Override default mpi library
if [ -n "$I_MPI_LINK" ] ; then
    mpilib_override=$I_MPI_LINK
fi

#
# ------------------------------------------------------------------------
# Argument processing.
# This is somewhat awkward because of the handling of arguments within
# the shell.  We want to handle arguments that include spaces without 
# loosing the spacing (an alternative would be to use a more powerful
# scripting language that would allow us to retain the array of values, 
# which the basic (rather than enhanced) Bourne shell does not.  
#
# Look through the arguments for arguments that indicate compile only.
# If these are *not* found, add the library options

linking=yes
allargs=("$@")
argno=0
for arg in "$@" ; do
    # Set addarg to no if this arg should be ignored by the C compiler
    addarg=yes
    if [ "x$handle_executable" = "xyes" ] ; then
	executable=$arg
	handle_executable=
    fi
    case "$arg" in 
 	# ----------------------------------------------------------------
	# Compiler options that affect whether we are linking or no
    -c|-S|-E|-M|-MM)
    # The compiler links by default
    linking=no
    ;;
    -o )
    handle_executable=yes
    addarg=yes
    ;;
	# ----------------------------------------------------------------
	# Options that control how we use mpicxx (e.g., -show, 
	# -cxx=* -config=*
    -echo)
    addarg=no
    set -x
    ;;
    -cxx=*)
    CXX=`echo A$arg | sed -e 's/A-cxx=//g'`
    addarg=no
    ;;
    # Backwards compatibility for MPICH1 - scripts
    -CC=*)
    CXX=`echo A$arg | sed -e 's/A-CC=//g'`
    addarg=no
    ;;
    -show)
    addarg=no
    Show=echo
    ;;
    -config=*)
    addarg=no
    CXXname=`echo A$arg | sed -e 's/A-config=//g'`
    if [ -s "$sysconfdir/mpicxx-$CXXname.conf" ] ; then
        . "$sysconfdir/mpicxx-$CXXname.conf"
    else
	echo "Configuration file mpicxx-$CXXname.conf not found"
    fi
    ;;
    -compile-info|-compile_info)
    # -compile_info included for backward compatibility
    Show=echo
    addarg=no
    ;;
    -link-info|-link_info)
    # -link_info included for backward compatibility
    Show=echo
    addarg=no
    ;;
    -v)
    # Pass this argument to the compiler as well.
    echo "$(basename $0) for the Intel(R) MPI Library $MPIVERSION for Linux*"
    echo "Copyright(C) 2003-2014, Intel Corporation.  All rights reserved."
    # if there is only 1 argument, it must be -v.
    if [ "$#" -eq "1" ] ; then
        linking=no
    fi
    ;;
    -V)
    # Pass this argument to the compiler to query the compiler version.
    if [ "$#" -eq "1" ] ; then
        linking=no
    fi
    ;;
    -profile=*)
    # Pass the name of a profiling configuration.  As
    # a special case, lib<name>.so or lib<name>.la may be used
    # if the library is in $libdir
    profConf=`echo A$arg | sed -e 's/A-profile=//g'`
    addarg=no
    # Loading the profConf file is handled below
    ;;
    -help)
    # Print mini-help if started without parameters
    echo "Simple script to compile and/or link MPI programs."
    echo "Usage: `basename $0` [options] <files>"
    echo "----------------------------------------------------------------------------" 
    echo "The following options are supported:"
    echo "   -cxx=<name>     specify a C++ compiler name: i.e. -cxx=icpc"
    echo "   -echo           print the scripts during their execution"
    echo "   -show           show command lines without real calling"
    echo "   -config=<name>  specify a configuration file: i.e. -config=icpc for mpicc-icpc.conf file" 
#    echo "   -compile-info   show compiler command line"
#    echo "   -link-info      show linker command line"
    echo "   -v              print version info of $(basename $0) and its native compiler"
    echo "   -profile=<name> specify a profile configuration file (an MPI profiling"
    echo "                   library): i.e. -profile=myprofile for the myprofile.cfg file."
    echo "                   As a special case, lib<name>.so or lib<name>.a may be used"
    echo "                   if the library is found"
    echo "   -check_mpi      link against the Intel(R) Trace Collector (-profile=vtmc)."
#    echo "   -compchk        enable compiler setup checks"
    echo "   -static_mpi     link the Intel(R) MPI Library statically"
    echo "   -mt_mpi         link the thread safe version of the Intel(R) MPI Library"
    echo "   -ilp64          link the ILP64 support of the Intel(R) MPI Library"
    echo "   -fast           the same as -static_mpi + pass -fast option to a compiler"  
    echo "   -openmp | -parallel | -fopenmp"
    echo "                   the same as -mt_mpi + passing this option to the compiler"
    echo "   -t or -trace"
    echo "                   link against the Intel(R) Trace Collector"
    echo "   -static         use static linkage method"
    echo "   -nostrip        turn off the debug information stripping during static linking"
    echo "   -dynamic_log    link against the Intel(R) Trace Collector dynamically"
    echo "   -O              enable optimization"
    echo "   -link_mpi=<name>"
    echo "                   link against the specified version of the Intel(R) MPI Library"
    echo "All other options will be passed to the compiler without changing."
    echo "----------------------------------------------------------------------------" 
    echo "The following environment variables are used:"
    echo "   I_MPI_ROOT      the Intel(R) MPI Library installation directory path" 
    echo "   I_MPI_CXX or MPICH_CXX"  
    echo "                   the path/name of the underlying compiler to be used"
    echo "   I_MPI_CXX_PROFILE or MPICXX_PROFILE" 
    echo "                   the name of profile file (without extension)" 
    echo "   I_MPI_COMPILER_CONFIG_DIR" 
    echo "                   the folder which contains configuration files *.conf"
    echo "   I_MPI_TRACE_PROFILE"
    echo "                   specify a default profile for the -trace option"
    echo "   I_MPI_CHECK_PROFILE"
    echo "                   specify a default profile for the -check_mpi option"
    echo "   I_MPI_CHECK_COMPILER"
    echo "                   enable compiler setup checks"
    echo "   I_MPI_LINK      specify the version of the Intel(R) MPI Library"
    echo "   I_MPI_DEBUG_INFO_STRIP"
    echo "                   turn on/off the debug information stripping during static linking"
    echo "----------------------------------------------------------------------------" 
    exit 0
    ;;
    -nolinkage)
    # This internal option is used by wrapper driver scripts mpicc, mpicxx, mpifc when -v option is used.
    linking=no
    addarg=no
    ;;
    -g)
    MPILIBDIR="/debug"
    ;;
    -compchk)
    Docompchk=yes
    addarg=no
    ;;
    -nocompchk) # Tr#2500
    addarg=no   # Ignore this option
    ;;
    -static_mpi)
    static_mpi=yes
    CXXFLAGS="$CXXFLAGS -Xlinker --export-dynamic"
    addarg=no
    ;;
    -static_log)
    static_log=yes
    addarg=no
    ;;
    -dynamic_log)
    static_log=no
    addarg=no
    ;;
    -static)
    static_mpi=yes
    static_log=yes
    CXXFLAGS="$CXXFLAGS -Xlinker --export-dynamic"
    addarg=yes
    ;;
    -mt_mpi)
    mt_mpi=yes
    addarg=no
    ;;
    -ilp64)
    ilp64=yes
    addarg=no
    ;;
    -check_mpi)
    if [ -z "$profConf" ]; then
        if [ -z "$I_MPI_CHECK_PROFILE" ]; then  
            profConf="vtmc"  
        else  
            profConf="$I_MPI_CHECK_PROFILE"  
        fi
    else
        echo "Warning: the -check_mpi option will be ignored because the profile was set."
    fi  
    addarg=no  
    ;;  
    -t | -trace | -t=* | -trace=* )  
    if [ -z "$profConf" ]; then
        if [ -z "$I_MPI_TRACE_PROFILE" ]; then  
            profConf="vt"  
        else  
            profConf="$I_MPI_TRACE_PROFILE"  
        fi  
    else
        echo "Warning: the -trace option will be ignored because the profile was set."
    fi  
    addarg=no
    ;;
    -openmp | -parallel | -fopenmp )
    mt_mpi=yes
    ;;
    -fast)
    echo "Warning: the -fast option forces static linkage method for the Intel(R) MPI Library."  
    static_mpi=yes
    CXXFLAGS="$CXXFLAGS -Xlinker --export-dynamic"
    ;;
    -link_mpi=* )
    mpilib_override=`echo A$arg | sed -e 's/A-link_mpi=//g'`
    addarg=no
    ;;
    -nostrip )
    strip_debug_info=no
    addarg=no
    ;;
	# Other arguments.  We are careful to handle arguments with 
	# quotes (we try to quote all arguments in case they include 
	# any spaces)
    *\"*) 
    qarg="'"$arg"'"
    ;;
    *\'*) 
    qarg='\"'"$arg"'\"'
    ;;
    *)
    ;;

    esac
    if [ $addarg = no ] ; then
	unset allargs[$argno]
    fi
    # Some versions of bash do not accept ((argno++))
    argno=`expr $argno + 1`
done

if [ $# -eq 0 ] ; then
    echo "Error: Command line argument is needed!"
    "$0" -help
    exit 1
fi

MPILIBDIR_MT="mt"
if [ -n "$mpilib_override" ] ; then
    case "$mpilib_override" in
       opt )
           mt_mpi=no
           MPILIBDIR="/release"
           MPILIBDIR_MT=
           ;;
       opt_mt )
           mt_mpi=yes
           MPILIBDIR="/release"
           ;;
       dbg )
           mt_mpi=no
           MPILIBDIR="/debug"
           MPILIBDIR_MT=
           ;;
       dbg_mt )
           mt_mpi=yes
           MPILIBDIR="/debug"
           ;;
       * )
           echo "Warning: incorrect library version specified. Automatically selected library will be used."
           ;;
    esac
fi

# -----------------------------------------------------------------------
case "$MPILIBDIR" in
    release | /release | debug | /debug | log | /log )
	if [ ! -z "$MPILIBDIR_MT" ]; then
	    MPILIBDIR=${MPILIBDIR}_${MPILIBDIR_MT}
	fi
	;;
    "" )
	MPILIBDIR=/release_mt
	;;
esac
if [ "$static_mpi" = yes ] ; then
    mpilibs="${libdir}/libmpifort.a ${libdir}${MPILIBDIR}/lib${MPILIBNAME}.a"
    I_MPI_OTHERLIBS=" $libdir/libmpigi.a"
    if [ "$ilp64" = yes ]; then
	mpilibs="$libdir/libmpi_ilp64.a $mpilibs"
    fi
    CXX_BIND_LIB="$libdir/libmpicxx.a"
    if [ "x$strip_debug_info" = "x" ] ; then
	strip_debug_info=yes
    fi
else
    mpilibs="-lmpifort -l$MPILIBNAME"
    I_MPI_OTHERLIBS=" -lmpigi"
    if [ "$ilp64" = yes ]; then
	mpilibs="-lmpi_ilp64 $mpilibs"
    fi
    CXX_BIND_LIB="-lmpicxx"
fi
# Derived variables.  These are assembled from variables set from the
# default, environment, configuration file (if any) and command-line
# options (if any)

cxxlibs=
if [ "$MPICXXLIBNAME" != "$MPILIBNAME" ] ; then
    cxxlibs="$CXX_BIND_LIB"
fi
#
# Handle the case of a profile switch
if [ -n "$profConf" ] ; then
    profConffile=
    if [ -s "$libdir/lib$profConf.a" -o -s "$libdir/lib$profConf.so" ] ; then
	mpilibs="-l$profConf $mpilibs"
    elif [ -s "$sysconfdir/$profConf.conf" ] ; then
	profConffile="$sysconfdir/$profConf.conf"
    elif [ -s "$profConf.conf" ] ; then
        profConffile="$profConf.conf"
    else
        echo "Profiling configuration file $profConf.conf not found in $sysconfdir"
    fi
    if [ -n "$profConffile" -a -s "$profConffile" ] ; then
	. $profConffile
	if [ -n "$PROFILE_INCPATHS" ] ; then
	    CXXFLAGS="$PROFILE_INCPATHS $CXXFLAGS"
        fi
        if [ -n "$PROFILE_PRELIB" ] ; then
	    mpilibs="$PROFILE_PRELIB $mpilibs"
        fi
        if [ -n "$PROFILE_POSTLIB" ] ; then
	    mpilibs="$mpilibs $PROFILE_POSTLIB"
        fi
    fi
fi
# A temporary statement to invoke the compiler
# Place the -L before any args incase there are any mpi libraries in there.
# Eventually, we'll want to move this after any non-MPI implementation 
# libraries
if [ "$Docompchk" = "yes" ]; then
    $Show $prefix/intel64/bin/compchk.sh "32e" "$0"
    rc=$?
    if [ $rc -ne 0 ]; then
	exit $rc
    fi
fi
rpath_opt="-Xlinker --enable-new-dtags -Xlinker -rpath -Xlinker ${libdir}${MPILIBDIR} -Xlinker -rpath -Xlinker $libdir -Xlinker -rpath -Xlinker /opt/intel/mpi-rt/5.0/mic/lib${MPILIBDIR} -Xlinker -rpath -Xlinker /opt/intel/mpi-rt/5.0/mic/lib"
rpath_opt="-Xlinker --enable-new-dtags -Xlinker -rpath -Xlinker ${libdir}${MPILIBDIR} -Xlinker -rpath -Xlinker $libdir -Xlinker -rpath -Xlinker /opt/intel/mpi-rt/5.0/intel64/lib${MPILIBDIR} -Xlinker -rpath -Xlinker /opt/intel/mpi-rt/5.0/intel64/lib"
if [ "$linking" = yes ] ; then
    $Show $CXX $CXXFLAGS "${allargs[@]}" -I$includedir -L${libdir}${MPILIBDIR} -L$libdir $rpath_opt $cxxlibs $mpilibs $I_MPI_OTHERLIBS $LDFLAGS $MPI_OTHERLIBS
    rc=$?
    if [ $rc -eq 0 -a "x$strip_debug_info" = "xyes" ] ; then
	$Show objcopy --only-keep-debug ${executable} ${executable}.dbg
	$Show objcopy --strip-debug ${executable}
	$Show objcopy --add-gnu-debuglink=${executable}.dbg ${executable}
    fi
else
    $Show $CXX $CXXFLAGS "${allargs[@]}" -I$includedir
    rc=$?
fi

exit $rc

