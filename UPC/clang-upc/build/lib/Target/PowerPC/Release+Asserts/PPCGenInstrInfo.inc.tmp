/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Enum Values                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace PPC {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    PROLOG_LABEL	= 2,
    EH_LABEL	= 3,
    GC_LABEL	= 4,
    KILL	= 5,
    EXTRACT_SUBREG	= 6,
    INSERT_SUBREG	= 7,
    IMPLICIT_DEF	= 8,
    SUBREG_TO_REG	= 9,
    COPY_TO_REGCLASS	= 10,
    DBG_VALUE	= 11,
    REG_SEQUENCE	= 12,
    COPY	= 13,
    BUNDLE	= 14,
    LIFETIME_START	= 15,
    LIFETIME_END	= 16,
    STACKMAP	= 17,
    PATCHPOINT	= 18,
    ADD4	= 19,
    ADD4o	= 20,
    ADD8	= 21,
    ADD8TLS	= 22,
    ADD8o	= 23,
    ADDC	= 24,
    ADDC8	= 25,
    ADDC8o	= 26,
    ADDCo	= 27,
    ADDE	= 28,
    ADDE8	= 29,
    ADDE8o	= 30,
    ADDEo	= 31,
    ADDI	= 32,
    ADDI8	= 33,
    ADDIC	= 34,
    ADDIC8	= 35,
    ADDICo	= 36,
    ADDIS	= 37,
    ADDIS8	= 38,
    ADDISdtprelHA	= 39,
    ADDISgotTprelHA	= 40,
    ADDIStlsgdHA	= 41,
    ADDIStlsldHA	= 42,
    ADDIStocHA	= 43,
    ADDIdtprelL	= 44,
    ADDItlsgdL	= 45,
    ADDItlsldL	= 46,
    ADDItocL	= 47,
    ADDME	= 48,
    ADDME8	= 49,
    ADDME8o	= 50,
    ADDMEo	= 51,
    ADDZE	= 52,
    ADDZE8	= 53,
    ADDZE8o	= 54,
    ADDZEo	= 55,
    ADJCALLSTACKDOWN	= 56,
    ADJCALLSTACKUP	= 57,
    AND	= 58,
    AND8	= 59,
    AND8o	= 60,
    ANDC	= 61,
    ANDC8	= 62,
    ANDC8o	= 63,
    ANDCo	= 64,
    ANDISo	= 65,
    ANDISo8	= 66,
    ANDIo	= 67,
    ANDIo8	= 68,
    ANDo	= 69,
    ATOMIC_CMP_SWAP_I16	= 70,
    ATOMIC_CMP_SWAP_I32	= 71,
    ATOMIC_CMP_SWAP_I64	= 72,
    ATOMIC_CMP_SWAP_I8	= 73,
    ATOMIC_LOAD_ADD_I16	= 74,
    ATOMIC_LOAD_ADD_I32	= 75,
    ATOMIC_LOAD_ADD_I64	= 76,
    ATOMIC_LOAD_ADD_I8	= 77,
    ATOMIC_LOAD_AND_I16	= 78,
    ATOMIC_LOAD_AND_I32	= 79,
    ATOMIC_LOAD_AND_I64	= 80,
    ATOMIC_LOAD_AND_I8	= 81,
    ATOMIC_LOAD_NAND_I16	= 82,
    ATOMIC_LOAD_NAND_I32	= 83,
    ATOMIC_LOAD_NAND_I64	= 84,
    ATOMIC_LOAD_NAND_I8	= 85,
    ATOMIC_LOAD_OR_I16	= 86,
    ATOMIC_LOAD_OR_I32	= 87,
    ATOMIC_LOAD_OR_I64	= 88,
    ATOMIC_LOAD_OR_I8	= 89,
    ATOMIC_LOAD_SUB_I16	= 90,
    ATOMIC_LOAD_SUB_I32	= 91,
    ATOMIC_LOAD_SUB_I64	= 92,
    ATOMIC_LOAD_SUB_I8	= 93,
    ATOMIC_LOAD_XOR_I16	= 94,
    ATOMIC_LOAD_XOR_I32	= 95,
    ATOMIC_LOAD_XOR_I64	= 96,
    ATOMIC_LOAD_XOR_I8	= 97,
    ATOMIC_SWAP_I16	= 98,
    ATOMIC_SWAP_I32	= 99,
    ATOMIC_SWAP_I64	= 100,
    ATOMIC_SWAP_I8	= 101,
    B	= 102,
    BA	= 103,
    BCC	= 104,
    BCCA	= 105,
    BCCL	= 106,
    BCCLA	= 107,
    BCCTR	= 108,
    BCCTR8	= 109,
    BCCTRL	= 110,
    BCCTRL8	= 111,
    BCLR	= 112,
    BCLRL	= 113,
    BCLalways	= 114,
    BCTR	= 115,
    BCTR8	= 116,
    BCTRL	= 117,
    BCTRL8	= 118,
    BDNZ	= 119,
    BDNZ8	= 120,
    BDNZA	= 121,
    BDNZAm	= 122,
    BDNZAp	= 123,
    BDNZL	= 124,
    BDNZLA	= 125,
    BDNZLAm	= 126,
    BDNZLAp	= 127,
    BDNZLR	= 128,
    BDNZLR8	= 129,
    BDNZLRL	= 130,
    BDNZLRLm	= 131,
    BDNZLRLp	= 132,
    BDNZLRm	= 133,
    BDNZLRp	= 134,
    BDNZLm	= 135,
    BDNZLp	= 136,
    BDNZm	= 137,
    BDNZp	= 138,
    BDZ	= 139,
    BDZ8	= 140,
    BDZA	= 141,
    BDZAm	= 142,
    BDZAp	= 143,
    BDZL	= 144,
    BDZLA	= 145,
    BDZLAm	= 146,
    BDZLAp	= 147,
    BDZLR	= 148,
    BDZLR8	= 149,
    BDZLRL	= 150,
    BDZLRLm	= 151,
    BDZLRLp	= 152,
    BDZLRm	= 153,
    BDZLRp	= 154,
    BDZLm	= 155,
    BDZLp	= 156,
    BDZm	= 157,
    BDZp	= 158,
    BL	= 159,
    BL8	= 160,
    BL8_NOP	= 161,
    BL8_NOP_TLS	= 162,
    BL8_TLS	= 163,
    BLA	= 164,
    BLA8	= 165,
    BLA8_NOP	= 166,
    BLR	= 167,
    BLRL	= 168,
    CLRLSLDI	= 169,
    CLRLSLDIo	= 170,
    CLRLSLWI	= 171,
    CLRLSLWIo	= 172,
    CLRRDI	= 173,
    CLRRDIo	= 174,
    CLRRWI	= 175,
    CLRRWIo	= 176,
    CMPD	= 177,
    CMPDI	= 178,
    CMPLD	= 179,
    CMPLDI	= 180,
    CMPLW	= 181,
    CMPLWI	= 182,
    CMPW	= 183,
    CMPWI	= 184,
    CNTLZD	= 185,
    CNTLZDo	= 186,
    CNTLZW	= 187,
    CNTLZWo	= 188,
    CR6SET	= 189,
    CR6UNSET	= 190,
    CRAND	= 191,
    CRANDC	= 192,
    CREQV	= 193,
    CRNAND	= 194,
    CRNOR	= 195,
    CROR	= 196,
    CRORC	= 197,
    CRSET	= 198,
    CRUNSET	= 199,
    CRXOR	= 200,
    DCBA	= 201,
    DCBF	= 202,
    DCBI	= 203,
    DCBST	= 204,
    DCBT	= 205,
    DCBTST	= 206,
    DCBZ	= 207,
    DCBZL	= 208,
    DIVD	= 209,
    DIVDU	= 210,
    DIVDUo	= 211,
    DIVDo	= 212,
    DIVW	= 213,
    DIVWU	= 214,
    DIVWUo	= 215,
    DIVWo	= 216,
    DSS	= 217,
    DSSALL	= 218,
    DST	= 219,
    DST64	= 220,
    DSTST	= 221,
    DSTST64	= 222,
    DSTSTT	= 223,
    DSTSTT64	= 224,
    DSTT	= 225,
    DSTT64	= 226,
    DYNALLOC	= 227,
    DYNALLOC8	= 228,
    EH_SjLj_LongJmp32	= 229,
    EH_SjLj_LongJmp64	= 230,
    EH_SjLj_SetJmp32	= 231,
    EH_SjLj_SetJmp64	= 232,
    EH_SjLj_Setup	= 233,
    EIEIO	= 234,
    EQV	= 235,
    EQV8	= 236,
    EQV8o	= 237,
    EQVo	= 238,
    EXTLDI	= 239,
    EXTLDIo	= 240,
    EXTLWI	= 241,
    EXTLWIo	= 242,
    EXTRDI	= 243,
    EXTRDIo	= 244,
    EXTRWI	= 245,
    EXTRWIo	= 246,
    EXTSB	= 247,
    EXTSB8	= 248,
    EXTSB8_32_64	= 249,
    EXTSB8o	= 250,
    EXTSBo	= 251,
    EXTSH	= 252,
    EXTSH8	= 253,
    EXTSH8_32_64	= 254,
    EXTSH8o	= 255,
    EXTSHo	= 256,
    EXTSW	= 257,
    EXTSW_32_64	= 258,
    EXTSW_32_64o	= 259,
    EXTSWo	= 260,
    FABSD	= 261,
    FABSDo	= 262,
    FABSS	= 263,
    FABSSo	= 264,
    FADD	= 265,
    FADDS	= 266,
    FADDSo	= 267,
    FADDo	= 268,
    FADDrtz	= 269,
    FCFID	= 270,
    FCFIDS	= 271,
    FCFIDSo	= 272,
    FCFIDU	= 273,
    FCFIDUS	= 274,
    FCFIDUSo	= 275,
    FCFIDUo	= 276,
    FCFIDo	= 277,
    FCMPUD	= 278,
    FCMPUS	= 279,
    FCPSGND	= 280,
    FCPSGNDo	= 281,
    FCPSGNS	= 282,
    FCPSGNSo	= 283,
    FCTID	= 284,
    FCTIDUZ	= 285,
    FCTIDUZo	= 286,
    FCTIDZ	= 287,
    FCTIDZo	= 288,
    FCTIDo	= 289,
    FCTIW	= 290,
    FCTIWUZ	= 291,
    FCTIWUZo	= 292,
    FCTIWZ	= 293,
    FCTIWZo	= 294,
    FCTIWo	= 295,
    FDIV	= 296,
    FDIVS	= 297,
    FDIVSo	= 298,
    FDIVo	= 299,
    FMADD	= 300,
    FMADDS	= 301,
    FMADDSo	= 302,
    FMADDo	= 303,
    FMR	= 304,
    FMRo	= 305,
    FMSUB	= 306,
    FMSUBS	= 307,
    FMSUBSo	= 308,
    FMSUBo	= 309,
    FMUL	= 310,
    FMULS	= 311,
    FMULSo	= 312,
    FMULo	= 313,
    FNABSD	= 314,
    FNABSDo	= 315,
    FNABSS	= 316,
    FNABSSo	= 317,
    FNEGD	= 318,
    FNEGDo	= 319,
    FNEGS	= 320,
    FNEGSo	= 321,
    FNMADD	= 322,
    FNMADDS	= 323,
    FNMADDSo	= 324,
    FNMADDo	= 325,
    FNMSUB	= 326,
    FNMSUBS	= 327,
    FNMSUBSo	= 328,
    FNMSUBo	= 329,
    FRE	= 330,
    FRES	= 331,
    FRESo	= 332,
    FREo	= 333,
    FRIMD	= 334,
    FRIMDo	= 335,
    FRIMS	= 336,
    FRIMSo	= 337,
    FRIND	= 338,
    FRINDo	= 339,
    FRINS	= 340,
    FRINSo	= 341,
    FRIPD	= 342,
    FRIPDo	= 343,
    FRIPS	= 344,
    FRIPSo	= 345,
    FRIZD	= 346,
    FRIZDo	= 347,
    FRIZS	= 348,
    FRIZSo	= 349,
    FRSP	= 350,
    FRSPo	= 351,
    FRSQRTE	= 352,
    FRSQRTES	= 353,
    FRSQRTESo	= 354,
    FRSQRTEo	= 355,
    FSELD	= 356,
    FSELDo	= 357,
    FSELS	= 358,
    FSELSo	= 359,
    FSQRT	= 360,
    FSQRTS	= 361,
    FSQRTSo	= 362,
    FSQRTo	= 363,
    FSUB	= 364,
    FSUBS	= 365,
    FSUBSo	= 366,
    FSUBo	= 367,
    GETtlsADDR	= 368,
    GETtlsldADDR	= 369,
    ICBI	= 370,
    INSLWI	= 371,
    INSLWIo	= 372,
    INSRDI	= 373,
    INSRDIo	= 374,
    INSRWI	= 375,
    INSRWIo	= 376,
    ISEL	= 377,
    ISEL8	= 378,
    ISYNC	= 379,
    LA	= 380,
    LAx	= 381,
    LBZ	= 382,
    LBZ8	= 383,
    LBZU	= 384,
    LBZU8	= 385,
    LBZUX	= 386,
    LBZUX8	= 387,
    LBZX	= 388,
    LBZX8	= 389,
    LD	= 390,
    LDARX	= 391,
    LDBRX	= 392,
    LDU	= 393,
    LDUX	= 394,
    LDX	= 395,
    LDgotTprelL	= 396,
    LDinto_toc	= 397,
    LDtoc	= 398,
    LDtocCPT	= 399,
    LDtocJTI	= 400,
    LDtocL	= 401,
    LDtoc_restore	= 402,
    LFD	= 403,
    LFDU	= 404,
    LFDUX	= 405,
    LFDX	= 406,
    LFIWAX	= 407,
    LFIWZX	= 408,
    LFS	= 409,
    LFSU	= 410,
    LFSUX	= 411,
    LFSX	= 412,
    LHA	= 413,
    LHA8	= 414,
    LHAU	= 415,
    LHAU8	= 416,
    LHAUX	= 417,
    LHAUX8	= 418,
    LHAX	= 419,
    LHAX8	= 420,
    LHBRX	= 421,
    LHZ	= 422,
    LHZ8	= 423,
    LHZU	= 424,
    LHZU8	= 425,
    LHZUX	= 426,
    LHZUX8	= 427,
    LHZX	= 428,
    LHZX8	= 429,
    LI	= 430,
    LI8	= 431,
    LIS	= 432,
    LIS8	= 433,
    LMW	= 434,
    LVEBX	= 435,
    LVEHX	= 436,
    LVEWX	= 437,
    LVSL	= 438,
    LVSR	= 439,
    LVX	= 440,
    LVXL	= 441,
    LWA	= 442,
    LWARX	= 443,
    LWAUX	= 444,
    LWAX	= 445,
    LWAX_32	= 446,
    LWA_32	= 447,
    LWBRX	= 448,
    LWZ	= 449,
    LWZ8	= 450,
    LWZU	= 451,
    LWZU8	= 452,
    LWZUX	= 453,
    LWZUX8	= 454,
    LWZX	= 455,
    LWZX8	= 456,
    MCRF	= 457,
    MFCR	= 458,
    MFCR8	= 459,
    MFCTR	= 460,
    MFCTR8	= 461,
    MFFS	= 462,
    MFLR	= 463,
    MFLR8	= 464,
    MFMSR	= 465,
    MFOCRF	= 466,
    MFOCRF8	= 467,
    MFSPR	= 468,
    MFTB	= 469,
    MFTB8	= 470,
    MFVRSAVE	= 471,
    MFVRSAVEv	= 472,
    MFVSCR	= 473,
    MTCRF	= 474,
    MTCRF8	= 475,
    MTCTR	= 476,
    MTCTR8	= 477,
    MTCTR8loop	= 478,
    MTCTRloop	= 479,
    MTFSB0	= 480,
    MTFSB1	= 481,
    MTFSF	= 482,
    MTLR	= 483,
    MTLR8	= 484,
    MTMSR	= 485,
    MTMSRD	= 486,
    MTOCRF	= 487,
    MTOCRF8	= 488,
    MTSPR	= 489,
    MTVRSAVE	= 490,
    MTVRSAVEv	= 491,
    MTVSCR	= 492,
    MULHD	= 493,
    MULHDU	= 494,
    MULHDUo	= 495,
    MULHDo	= 496,
    MULHW	= 497,
    MULHWU	= 498,
    MULHWUo	= 499,
    MULHWo	= 500,
    MULLD	= 501,
    MULLDo	= 502,
    MULLI	= 503,
    MULLI8	= 504,
    MULLW	= 505,
    MULLWo	= 506,
    MovePCtoLR	= 507,
    MovePCtoLR8	= 508,
    NAND	= 509,
    NAND8	= 510,
    NAND8o	= 511,
    NANDo	= 512,
    NEG	= 513,
    NEG8	= 514,
    NEG8o	= 515,
    NEGo	= 516,
    NOP	= 517,
    NOR	= 518,
    NOR8	= 519,
    NOR8o	= 520,
    NORo	= 521,
    OR	= 522,
    OR8	= 523,
    OR8o	= 524,
    ORC	= 525,
    ORC8	= 526,
    ORC8o	= 527,
    ORCo	= 528,
    ORI	= 529,
    ORI8	= 530,
    ORIS	= 531,
    ORIS8	= 532,
    ORo	= 533,
    POPCNTD	= 534,
    POPCNTW	= 535,
    RESTORE_CR	= 536,
    RESTORE_VRSAVE	= 537,
    RLDCL	= 538,
    RLDCLo	= 539,
    RLDCR	= 540,
    RLDCRo	= 541,
    RLDIC	= 542,
    RLDICL	= 543,
    RLDICL_32_64	= 544,
    RLDICLo	= 545,
    RLDICR	= 546,
    RLDICRo	= 547,
    RLDICo	= 548,
    RLDIMI	= 549,
    RLDIMIo	= 550,
    RLWIMI	= 551,
    RLWIMIo	= 552,
    RLWINM	= 553,
    RLWINM8	= 554,
    RLWINM8o	= 555,
    RLWINMo	= 556,
    RLWNM	= 557,
    RLWNMo	= 558,
    ROTRDI	= 559,
    ROTRDIo	= 560,
    ROTRWI	= 561,
    ROTRWIo	= 562,
    SC	= 563,
    SELECT_CC_F4	= 564,
    SELECT_CC_F8	= 565,
    SELECT_CC_I4	= 566,
    SELECT_CC_I8	= 567,
    SELECT_CC_VRRC	= 568,
    SLBIA	= 569,
    SLBIE	= 570,
    SLBMFEE	= 571,
    SLBMTE	= 572,
    SLD	= 573,
    SLDI	= 574,
    SLDIo	= 575,
    SLDo	= 576,
    SLW	= 577,
    SLWI	= 578,
    SLWIo	= 579,
    SLWo	= 580,
    SPILL_CR	= 581,
    SPILL_VRSAVE	= 582,
    SRAD	= 583,
    SRADI	= 584,
    SRADIo	= 585,
    SRADo	= 586,
    SRAW	= 587,
    SRAWI	= 588,
    SRAWIo	= 589,
    SRAWo	= 590,
    SRD	= 591,
    SRDI	= 592,
    SRDIo	= 593,
    SRDo	= 594,
    SRW	= 595,
    SRWI	= 596,
    SRWIo	= 597,
    SRWo	= 598,
    STB	= 599,
    STB8	= 600,
    STBU	= 601,
    STBU8	= 602,
    STBUX	= 603,
    STBUX8	= 604,
    STBX	= 605,
    STBX8	= 606,
    STD	= 607,
    STDBRX	= 608,
    STDCX	= 609,
    STDU	= 610,
    STDUX	= 611,
    STDX	= 612,
    STFD	= 613,
    STFDU	= 614,
    STFDUX	= 615,
    STFDX	= 616,
    STFIWX	= 617,
    STFS	= 618,
    STFSU	= 619,
    STFSUX	= 620,
    STFSX	= 621,
    STH	= 622,
    STH8	= 623,
    STHBRX	= 624,
    STHU	= 625,
    STHU8	= 626,
    STHUX	= 627,
    STHUX8	= 628,
    STHX	= 629,
    STHX8	= 630,
    STMW	= 631,
    STVEBX	= 632,
    STVEHX	= 633,
    STVEWX	= 634,
    STVX	= 635,
    STVXL	= 636,
    STW	= 637,
    STW8	= 638,
    STWBRX	= 639,
    STWCX	= 640,
    STWU	= 641,
    STWU8	= 642,
    STWUX	= 643,
    STWUX8	= 644,
    STWX	= 645,
    STWX8	= 646,
    SUBF	= 647,
    SUBF8	= 648,
    SUBF8o	= 649,
    SUBFC	= 650,
    SUBFC8	= 651,
    SUBFC8o	= 652,
    SUBFCo	= 653,
    SUBFE	= 654,
    SUBFE8	= 655,
    SUBFE8o	= 656,
    SUBFEo	= 657,
    SUBFIC	= 658,
    SUBFIC8	= 659,
    SUBFME	= 660,
    SUBFME8	= 661,
    SUBFME8o	= 662,
    SUBFMEo	= 663,
    SUBFZE	= 664,
    SUBFZE8	= 665,
    SUBFZE8o	= 666,
    SUBFZEo	= 667,
    SUBFo	= 668,
    SUBI	= 669,
    SUBIC	= 670,
    SUBICo	= 671,
    SUBIS	= 672,
    SYNC	= 673,
    TAILB	= 674,
    TAILB8	= 675,
    TAILBA	= 676,
    TAILBA8	= 677,
    TAILBCTR	= 678,
    TAILBCTR8	= 679,
    TCRETURNai	= 680,
    TCRETURNai8	= 681,
    TCRETURNdi	= 682,
    TCRETURNdi8	= 683,
    TCRETURNri	= 684,
    TCRETURNri8	= 685,
    TD	= 686,
    TDI	= 687,
    TLBIE	= 688,
    TLBIEL	= 689,
    TLBSYNC	= 690,
    TRAP	= 691,
    TW	= 692,
    TWI	= 693,
    UPDATE_VRSAVE	= 694,
    VADDCUW	= 695,
    VADDFP	= 696,
    VADDSBS	= 697,
    VADDSHS	= 698,
    VADDSWS	= 699,
    VADDUBM	= 700,
    VADDUBS	= 701,
    VADDUHM	= 702,
    VADDUHS	= 703,
    VADDUWM	= 704,
    VADDUWS	= 705,
    VAND	= 706,
    VANDC	= 707,
    VAVGSB	= 708,
    VAVGSH	= 709,
    VAVGSW	= 710,
    VAVGUB	= 711,
    VAVGUH	= 712,
    VAVGUW	= 713,
    VCFSX	= 714,
    VCFSX_0	= 715,
    VCFUX	= 716,
    VCFUX_0	= 717,
    VCMPBFP	= 718,
    VCMPBFPo	= 719,
    VCMPEQFP	= 720,
    VCMPEQFPo	= 721,
    VCMPEQUB	= 722,
    VCMPEQUBo	= 723,
    VCMPEQUH	= 724,
    VCMPEQUHo	= 725,
    VCMPEQUW	= 726,
    VCMPEQUWo	= 727,
    VCMPGEFP	= 728,
    VCMPGEFPo	= 729,
    VCMPGTFP	= 730,
    VCMPGTFPo	= 731,
    VCMPGTSB	= 732,
    VCMPGTSBo	= 733,
    VCMPGTSH	= 734,
    VCMPGTSHo	= 735,
    VCMPGTSW	= 736,
    VCMPGTSWo	= 737,
    VCMPGTUB	= 738,
    VCMPGTUBo	= 739,
    VCMPGTUH	= 740,
    VCMPGTUHo	= 741,
    VCMPGTUW	= 742,
    VCMPGTUWo	= 743,
    VCTSXS	= 744,
    VCTSXS_0	= 745,
    VCTUXS	= 746,
    VCTUXS_0	= 747,
    VEXPTEFP	= 748,
    VLOGEFP	= 749,
    VMADDFP	= 750,
    VMAXFP	= 751,
    VMAXSB	= 752,
    VMAXSH	= 753,
    VMAXSW	= 754,
    VMAXUB	= 755,
    VMAXUH	= 756,
    VMAXUW	= 757,
    VMHADDSHS	= 758,
    VMHRADDSHS	= 759,
    VMINFP	= 760,
    VMINSB	= 761,
    VMINSH	= 762,
    VMINSW	= 763,
    VMINUB	= 764,
    VMINUH	= 765,
    VMINUW	= 766,
    VMLADDUHM	= 767,
    VMRGHB	= 768,
    VMRGHH	= 769,
    VMRGHW	= 770,
    VMRGLB	= 771,
    VMRGLH	= 772,
    VMRGLW	= 773,
    VMSUMMBM	= 774,
    VMSUMSHM	= 775,
    VMSUMSHS	= 776,
    VMSUMUBM	= 777,
    VMSUMUHM	= 778,
    VMSUMUHS	= 779,
    VMULESB	= 780,
    VMULESH	= 781,
    VMULEUB	= 782,
    VMULEUH	= 783,
    VMULOSB	= 784,
    VMULOSH	= 785,
    VMULOUB	= 786,
    VMULOUH	= 787,
    VNMSUBFP	= 788,
    VNOR	= 789,
    VOR	= 790,
    VPERM	= 791,
    VPKPX	= 792,
    VPKSHSS	= 793,
    VPKSHUS	= 794,
    VPKSWSS	= 795,
    VPKSWUS	= 796,
    VPKUHUM	= 797,
    VPKUHUS	= 798,
    VPKUWUM	= 799,
    VPKUWUS	= 800,
    VREFP	= 801,
    VRFIM	= 802,
    VRFIN	= 803,
    VRFIP	= 804,
    VRFIZ	= 805,
    VRLB	= 806,
    VRLH	= 807,
    VRLW	= 808,
    VRSQRTEFP	= 809,
    VSEL	= 810,
    VSL	= 811,
    VSLB	= 812,
    VSLDOI	= 813,
    VSLH	= 814,
    VSLO	= 815,
    VSLW	= 816,
    VSPLTB	= 817,
    VSPLTH	= 818,
    VSPLTISB	= 819,
    VSPLTISH	= 820,
    VSPLTISW	= 821,
    VSPLTW	= 822,
    VSR	= 823,
    VSRAB	= 824,
    VSRAH	= 825,
    VSRAW	= 826,
    VSRB	= 827,
    VSRH	= 828,
    VSRO	= 829,
    VSRW	= 830,
    VSUBCUW	= 831,
    VSUBFP	= 832,
    VSUBSBS	= 833,
    VSUBSHS	= 834,
    VSUBSWS	= 835,
    VSUBUBM	= 836,
    VSUBUBS	= 837,
    VSUBUHM	= 838,
    VSUBUHS	= 839,
    VSUBUWM	= 840,
    VSUBUWS	= 841,
    VSUM2SWS	= 842,
    VSUM4SBS	= 843,
    VSUM4SHS	= 844,
    VSUM4UBS	= 845,
    VSUMSWS	= 846,
    VUPKHPX	= 847,
    VUPKHSB	= 848,
    VUPKHSH	= 849,
    VUPKLPX	= 850,
    VUPKLSB	= 851,
    VUPKLSH	= 852,
    VXOR	= 853,
    V_SET0	= 854,
    V_SET0B	= 855,
    V_SET0H	= 856,
    V_SETALLONES	= 857,
    V_SETALLONESB	= 858,
    V_SETALLONESH	= 859,
    WAIT	= 860,
    XOR	= 861,
    XOR8	= 862,
    XOR8o	= 863,
    XORI	= 864,
    XORI8	= 865,
    XORIS	= 866,
    XORIS8	= 867,
    XORo	= 868,
    gBC	= 869,
    gBCA	= 870,
    gBCCTR	= 871,
    gBCCTRL	= 872,
    gBCL	= 873,
    gBCLA	= 874,
    gBCLR	= 875,
    gBCLRL	= 876,
    INSTRUCTION_LIST_END = 877
  };
namespace Sched {
  enum {
    NoInstrModel	= 0,
    IntSimple	= 1,
    IntGeneral	= 2,
    BrB	= 3,
    IntCompare	= 4,
    BrCR	= 5,
    LdStDCBF	= 6,
    IntDivD	= 7,
    IntDivW	= 8,
    LdStLoad	= 9,
    FPGeneral	= 10,
    FPAddSub	= 11,
    FPCompare	= 12,
    FPDivD	= 13,
    FPDivS	= 14,
    FPFused	= 15,
    FPSqrt	= 16,
    LdStICBI	= 17,
    SprISYNC	= 18,
    LdStLoadUpd	= 19,
    LdStLD	= 20,
    LdStLDARX	= 21,
    LdStLDU	= 22,
    LdStLFD	= 23,
    LdStLFDU	= 24,
    LdStLHA	= 25,
    LdStLHAU	= 26,
    LdStLMW	= 27,
    LdStLWA	= 28,
    LdStLWARX	= 29,
    BrMCR	= 30,
    SprMFCR	= 31,
    SprMFSPR	= 32,
    IntMFFS	= 33,
    SprMFMSR	= 34,
    SprMFTB	= 35,
    LdStStore	= 36,
    BrMCRX	= 37,
    SprMTSPR	= 38,
    IntMTFSB0	= 39,
    SprMTMSR	= 40,
    SprMTMSRD	= 41,
    IntMulHW	= 42,
    IntMulHWU	= 43,
    IntMulHD	= 44,
    IntMulLI	= 45,
    IntRotateD	= 46,
    IntRotateDI	= 47,
    IntRotate	= 48,
    SprSLBIA	= 49,
    SprSLBIE	= 50,
    SprSLBMFEE	= 51,
    SprSLBMTE	= 52,
    IntShift	= 53,
    LdStStoreUpd	= 54,
    LdStSTD	= 55,
    LdStSTDCX	= 56,
    LdStSTDU	= 57,
    LdStSTFD	= 58,
    LdStSTFDU	= 59,
    LdStSTWCX	= 60,
    LdStSync	= 61,
    IntTrapD	= 62,
    SprTLBIE	= 63,
    SprTLBIEL	= 64,
    SprTLBSYNC	= 65,
    IntTrapW	= 66,
    VecFP	= 67,
    VecGeneral	= 68,
    VecFPCompare	= 69,
    VecPerm	= 70,
    SCHED_LIST_END = 71
  };
}
}
} // End llvm namespace 
#endif // GET_INSTRINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Descriptors                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const uint16_t ImplicitList1[] = { PPC::CR0, 0 };
static const uint16_t ImplicitList2[] = { PPC::CARRY, 0 };
static const uint16_t ImplicitList3[] = { PPC::CARRY, PPC::CR0, 0 };
static const uint16_t ImplicitList4[] = { PPC::R1, 0 };
static const uint16_t ImplicitList5[] = { PPC::RM, 0 };
static const uint16_t ImplicitList6[] = { PPC::LR, 0 };
static const uint16_t ImplicitList7[] = { PPC::CTR, 0 };
static const uint16_t ImplicitList8[] = { PPC::CTR8, 0 };
static const uint16_t ImplicitList9[] = { PPC::CTR, PPC::RM, 0 };
static const uint16_t ImplicitList10[] = { PPC::CTR8, PPC::RM, 0 };
static const uint16_t ImplicitList11[] = { PPC::LR8, 0 };
static const uint16_t ImplicitList12[] = { PPC::LR, PPC::RM, 0 };
static const uint16_t ImplicitList13[] = { PPC::CTR, PPC::LR, PPC::RM, 0 };
static const uint16_t ImplicitList14[] = { PPC::CTR8, PPC::LR8, PPC::RM, 0 };
static const uint16_t ImplicitList15[] = { PPC::CR1EQ, 0 };
static const uint16_t ImplicitList16[] = { PPC::X1, 0 };
static const uint16_t ImplicitList17[] = { PPC::CR1, 0 };
static const uint16_t ImplicitList18[] = { PPC::CR6, 0 };
static const uint16_t ImplicitList19[] = { PPC::LR, PPC::CTR, 0 };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo10[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo31[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo32[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo33[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo34[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo35[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo36[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo37[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo38[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo39[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo40[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo41[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo42[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo43[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo44[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo45[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo46[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo47[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo48[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo49[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo50[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo51[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo52[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo53[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo54[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo55[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo56[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo57[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo58[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo59[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo60[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo61[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo62[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo63[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo64[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo65[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo66[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo67[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo68[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo69[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo70[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo71[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo72[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo73[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo74[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo75[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo76[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo77[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo78[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo79[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo80[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo81[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo82[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo83[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo84[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo85[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo86[] = { { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo87[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo88[] = { { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo89[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo90[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo91[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo92[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo93[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo94[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo95[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo96[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo97[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo98[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo99[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo100[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo101[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo102[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo103[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo104[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo105[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo106[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo107[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo108[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo109[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo110[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo111[] = { { PPC::CTRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo112[] = { { PPC::CTRRC8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo113[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo114[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo115[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo116[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo117[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo118[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo119[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo120[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo121[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo122[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo123[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo124[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };

extern const MCInstrDesc PPCInsts[] = {
  { 0,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #0 = PHI
  { 1,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #1 = INLINEASM
  { 2,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #2 = PROLOG_LABEL
  { 3,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #3 = EH_LABEL
  { 4,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #4 = GC_LABEL
  { 5,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #5 = KILL
  { 6,	3,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo3,0,0 },  // Inst #6 = EXTRACT_SUBREG
  { 7,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo4,0,0 },  // Inst #7 = INSERT_SUBREG
  { 8,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo5,0,0 },  // Inst #8 = IMPLICIT_DEF
  { 9,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo6,0,0 },  // Inst #9 = SUBREG_TO_REG
  { 10,	3,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo3,0,0 },  // Inst #10 = COPY_TO_REGCLASS
  { 11,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #11 = DBG_VALUE
  { 12,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo5,0,0 },  // Inst #12 = REG_SEQUENCE
  { 13,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, NULL, NULL, OperandInfo7,0,0 },  // Inst #13 = COPY
  { 14,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #14 = BUNDLE
  { 15,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #15 = LIFETIME_START
  { 16,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #16 = LIFETIME_END
  { 17,	2,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo8,0,0 },  // Inst #17 = STACKMAP
  { 18,	6,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo9,0,0 },  // Inst #18 = PATCHPOINT
  { 19,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #19 = ADD4
  { 20,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #20 = ADD4o
  { 21,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #21 = ADD8
  { 22,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #22 = ADD8TLS
  { 23,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #23 = ADD8o
  { 24,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList2, OperandInfo10,0,0 },  // Inst #24 = ADDC
  { 25,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList2, OperandInfo11,0,0 },  // Inst #25 = ADDC8
  { 26,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList3, OperandInfo11,0,0 },  // Inst #26 = ADDC8o
  { 27,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList3, OperandInfo10,0,0 },  // Inst #27 = ADDCo
  { 28,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo10,0,0 },  // Inst #28 = ADDE
  { 29,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo11,0,0 },  // Inst #29 = ADDE8
  { 30,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo11,0,0 },  // Inst #30 = ADDE8o
  { 31,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo10,0,0 },  // Inst #31 = ADDEo
  { 32,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo13,0,0 },  // Inst #32 = ADDI
  { 33,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo14,0,0 },  // Inst #33 = ADDI8
  { 34,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList2, OperandInfo15,0,0 },  // Inst #34 = ADDIC
  { 35,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList2, OperandInfo12,0,0 },  // Inst #35 = ADDIC8
  { 36,	3,	1,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, NULL, ImplicitList3, OperandInfo15,0,0 },  // Inst #36 = ADDICo
  { 37,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo13,0,0 },  // Inst #37 = ADDIS
  { 38,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo14,0,0 },  // Inst #38 = ADDIS8
  { 39,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo14,0,0 },  // Inst #39 = ADDISdtprelHA
  { 40,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo14,0,0 },  // Inst #40 = ADDISgotTprelHA
  { 41,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo14,0,0 },  // Inst #41 = ADDIStlsgdHA
  { 42,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo14,0,0 },  // Inst #42 = ADDIStlsldHA
  { 43,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo14,0,0 },  // Inst #43 = ADDIStocHA
  { 44,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo14,0,0 },  // Inst #44 = ADDIdtprelL
  { 45,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo14,0,0 },  // Inst #45 = ADDItlsgdL
  { 46,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo14,0,0 },  // Inst #46 = ADDItlsldL
  { 47,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo14,0,0 },  // Inst #47 = ADDItocL
  { 48,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo16,0,0 },  // Inst #48 = ADDME
  { 49,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo17,0,0 },  // Inst #49 = ADDME8
  { 50,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo17,0,0 },  // Inst #50 = ADDME8o
  { 51,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo16,0,0 },  // Inst #51 = ADDMEo
  { 52,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo16,0,0 },  // Inst #52 = ADDZE
  { 53,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo17,0,0 },  // Inst #53 = ADDZE8
  { 54,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo17,0,0 },  // Inst #54 = ADDZE8o
  { 55,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo16,0,0 },  // Inst #55 = ADDZEo
  { 56,	1,	0,	0,	0,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo5,0,0 },  // Inst #56 = ADJCALLSTACKDOWN
  { 57,	2,	0,	0,	0,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo7,0,0 },  // Inst #57 = ADJCALLSTACKUP
  { 58,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #58 = AND
  { 59,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #59 = AND8
  { 60,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #60 = AND8o
  { 61,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #61 = ANDC
  { 62,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #62 = ANDC8
  { 63,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #63 = ANDC8o
  { 64,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #64 = ANDCo
  { 65,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo15,0,0 },  // Inst #65 = ANDISo
  { 66,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo12,0,0 },  // Inst #66 = ANDISo8
  { 67,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo15,0,0 },  // Inst #67 = ANDIo
  { 68,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo12,0,0 },  // Inst #68 = ANDIo8
  { 69,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #69 = ANDo
  { 70,	5,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18,0,0 },  // Inst #70 = ATOMIC_CMP_SWAP_I16
  { 71,	5,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18,0,0 },  // Inst #71 = ATOMIC_CMP_SWAP_I32
  { 72,	5,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo19,0,0 },  // Inst #72 = ATOMIC_CMP_SWAP_I64
  { 73,	5,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo18,0,0 },  // Inst #73 = ATOMIC_CMP_SWAP_I8
  { 74,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #74 = ATOMIC_LOAD_ADD_I16
  { 75,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #75 = ATOMIC_LOAD_ADD_I32
  { 76,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo21,0,0 },  // Inst #76 = ATOMIC_LOAD_ADD_I64
  { 77,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #77 = ATOMIC_LOAD_ADD_I8
  { 78,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #78 = ATOMIC_LOAD_AND_I16
  { 79,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #79 = ATOMIC_LOAD_AND_I32
  { 80,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo21,0,0 },  // Inst #80 = ATOMIC_LOAD_AND_I64
  { 81,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #81 = ATOMIC_LOAD_AND_I8
  { 82,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #82 = ATOMIC_LOAD_NAND_I16
  { 83,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #83 = ATOMIC_LOAD_NAND_I32
  { 84,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo21,0,0 },  // Inst #84 = ATOMIC_LOAD_NAND_I64
  { 85,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #85 = ATOMIC_LOAD_NAND_I8
  { 86,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #86 = ATOMIC_LOAD_OR_I16
  { 87,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #87 = ATOMIC_LOAD_OR_I32
  { 88,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo21,0,0 },  // Inst #88 = ATOMIC_LOAD_OR_I64
  { 89,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #89 = ATOMIC_LOAD_OR_I8
  { 90,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #90 = ATOMIC_LOAD_SUB_I16
  { 91,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #91 = ATOMIC_LOAD_SUB_I32
  { 92,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo21,0,0 },  // Inst #92 = ATOMIC_LOAD_SUB_I64
  { 93,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #93 = ATOMIC_LOAD_SUB_I8
  { 94,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #94 = ATOMIC_LOAD_XOR_I16
  { 95,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #95 = ATOMIC_LOAD_XOR_I32
  { 96,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo21,0,0 },  // Inst #96 = ATOMIC_LOAD_XOR_I64
  { 97,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #97 = ATOMIC_LOAD_XOR_I8
  { 98,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #98 = ATOMIC_SWAP_I16
  { 99,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #99 = ATOMIC_SWAP_I32
  { 100,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo21,0,0 },  // Inst #100 = ATOMIC_SWAP_I64
  { 101,	4,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, NULL, ImplicitList1, OperandInfo20,0,0 },  // Inst #101 = ATOMIC_SWAP_I8
  { 102,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x38ULL, NULL, NULL, OperandInfo5,0,0 },  // Inst #102 = B
  { 103,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, NULL, NULL, OperandInfo5,0,0 },  // Inst #103 = BA
  { 104,	3,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, NULL, NULL, OperandInfo22,0,0 },  // Inst #104 = BCC
  { 105,	3,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, NULL, NULL, OperandInfo22,0,0 },  // Inst #105 = BCCA
  { 106,	3,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList6, OperandInfo22,0,0 },  // Inst #106 = BCCL
  { 107,	3,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList6, OperandInfo22,0,0 },  // Inst #107 = BCCLA
  { 108,	2,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, NULL, OperandInfo23,0,0 },  // Inst #108 = BCCTR
  { 109,	2,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList8, NULL, OperandInfo23,0,0 },  // Inst #109 = BCCTR8
  { 110,	2,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList6, OperandInfo23,0,0 },  // Inst #110 = BCCTRL
  { 111,	2,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList10, ImplicitList11, OperandInfo23,0,0 },  // Inst #111 = BCCTRL8
  { 112,	2,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, NULL, OperandInfo23,0,0 },  // Inst #112 = BCLR
  { 113,	2,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList6, OperandInfo23,0,0 },  // Inst #113 = BCLRL
  { 114,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList6, OperandInfo5,0,0 },  // Inst #114 = BCLalways
  { 115,	0,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, NULL, 0,0,0 },  // Inst #115 = BCTR
  { 116,	0,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList8, NULL, 0,0,0 },  // Inst #116 = BCTR8
  { 117,	0,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList9, ImplicitList6, 0,0,0 },  // Inst #117 = BCTRL
  { 118,	0,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList10, ImplicitList11, 0,0,0 },  // Inst #118 = BCTRL8
  { 119,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,0 },  // Inst #119 = BDNZ
  { 120,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList8, ImplicitList8, OperandInfo5,0,0 },  // Inst #120 = BDNZ8
  { 121,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,0 },  // Inst #121 = BDNZA
  { 122,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,0 },  // Inst #122 = BDNZAm
  { 123,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,0 },  // Inst #123 = BDNZAp
  { 124,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,0 },  // Inst #124 = BDNZL
  { 125,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,0 },  // Inst #125 = BDNZLA
  { 126,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,0 },  // Inst #126 = BDNZLAm
  { 127,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,0 },  // Inst #127 = BDNZLAp
  { 128,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0,0,0 },  // Inst #128 = BDNZLR
  { 129,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList8, 0,0,0 },  // Inst #129 = BDNZLR8
  { 130,	0,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0,0,0 },  // Inst #130 = BDNZLRL
  { 131,	0,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0,0,0 },  // Inst #131 = BDNZLRLm
  { 132,	0,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0,0,0 },  // Inst #132 = BDNZLRLp
  { 133,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0,0,0 },  // Inst #133 = BDNZLRm
  { 134,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0,0,0 },  // Inst #134 = BDNZLRp
  { 135,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,0 },  // Inst #135 = BDNZLm
  { 136,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,0 },  // Inst #136 = BDNZLp
  { 137,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,0 },  // Inst #137 = BDNZm
  { 138,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,0 },  // Inst #138 = BDNZp
  { 139,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,0 },  // Inst #139 = BDZ
  { 140,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList8, ImplicitList8, OperandInfo5,0,0 },  // Inst #140 = BDZ8
  { 141,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,0 },  // Inst #141 = BDZA
  { 142,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,0 },  // Inst #142 = BDZAm
  { 143,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,0 },  // Inst #143 = BDZAp
  { 144,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,0 },  // Inst #144 = BDZL
  { 145,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,0 },  // Inst #145 = BDZLA
  { 146,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,0 },  // Inst #146 = BDZLAm
  { 147,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,0 },  // Inst #147 = BDZLAp
  { 148,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0,0,0 },  // Inst #148 = BDZLR
  { 149,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList8, 0,0,0 },  // Inst #149 = BDZLR8
  { 150,	0,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0,0,0 },  // Inst #150 = BDZLRL
  { 151,	0,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0,0,0 },  // Inst #151 = BDZLRLm
  { 152,	0,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0,0,0 },  // Inst #152 = BDZLRLp
  { 153,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0,0,0 },  // Inst #153 = BDZLRm
  { 154,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, 0,0,0 },  // Inst #154 = BDZLRp
  { 155,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,0 },  // Inst #155 = BDZLm
  { 156,	1,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo5,0,0 },  // Inst #156 = BDZLp
  { 157,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,0 },  // Inst #157 = BDZm
  { 158,	1,	0,	3,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList7, OperandInfo5,0,0 },  // Inst #158 = BDZp
  { 159,	1,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList5, ImplicitList6, OperandInfo5,0,0 },  // Inst #159 = BL
  { 160,	1,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList5, ImplicitList11, OperandInfo5,0,0 },  // Inst #160 = BL8
  { 161,	1,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList5, ImplicitList11, OperandInfo5,0,0 },  // Inst #161 = BL8_NOP
  { 162,	2,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList11, OperandInfo7,0,0 },  // Inst #162 = BL8_NOP_TLS
  { 163,	2,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList11, OperandInfo7,0,0 },  // Inst #163 = BL8_TLS
  { 164,	1,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList5, ImplicitList6, OperandInfo5,0,0 },  // Inst #164 = BLA
  { 165,	1,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList5, ImplicitList11, OperandInfo5,0,0 },  // Inst #165 = BLA8
  { 166,	1,	0,	3,	0,	0|(1<<MCID::Call), 0x38ULL, ImplicitList5, ImplicitList11, OperandInfo5,0,0 },  // Inst #166 = BLA8_NOP
  { 167,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x38ULL, ImplicitList12, NULL, 0,0,0 },  // Inst #167 = BLR
  { 168,	0,	0,	3,	0,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList6, 0,0,0 },  // Inst #168 = BLRL
  { 169,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo24,0,0 },  // Inst #169 = CLRLSLDI
  { 170,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo24,0,0 },  // Inst #170 = CLRLSLDIo
  { 171,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo25,0,0 },  // Inst #171 = CLRLSLWI
  { 172,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo25,0,0 },  // Inst #172 = CLRLSLWIo
  { 173,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #173 = CLRRDI
  { 174,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #174 = CLRRDIo
  { 175,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #175 = CLRRWI
  { 176,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #176 = CLRRWIo
  { 177,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo26,0,0 },  // Inst #177 = CMPD
  { 178,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo27,0,0 },  // Inst #178 = CMPDI
  { 179,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo26,0,0 },  // Inst #179 = CMPLD
  { 180,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo27,0,0 },  // Inst #180 = CMPLDI
  { 181,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo28,0,0 },  // Inst #181 = CMPLW
  { 182,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo29,0,0 },  // Inst #182 = CMPLWI
  { 183,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo28,0,0 },  // Inst #183 = CMPW
  { 184,	3,	1,	4,	0,	0|(1<<MCID::Compare), 0x8ULL, NULL, NULL, OperandInfo29,0,0 },  // Inst #184 = CMPWI
  { 185,	2,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo17,0,0 },  // Inst #185 = CNTLZD
  { 186,	2,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo17,0,0 },  // Inst #186 = CNTLZDo
  { 187,	2,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #187 = CNTLZW
  { 188,	2,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo16,0,0 },  // Inst #188 = CNTLZWo
  { 189,	0,	0,	5,	0,	0, 0x0ULL, NULL, ImplicitList15, 0,0,0 },  // Inst #189 = CR6SET
  { 190,	0,	0,	5,	0,	0, 0x0ULL, NULL, ImplicitList15, 0,0,0 },  // Inst #190 = CR6UNSET
  { 191,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo30,0,0 },  // Inst #191 = CRAND
  { 192,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo30,0,0 },  // Inst #192 = CRANDC
  { 193,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo30,0,0 },  // Inst #193 = CREQV
  { 194,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo30,0,0 },  // Inst #194 = CRNAND
  { 195,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo30,0,0 },  // Inst #195 = CRNOR
  { 196,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo30,0,0 },  // Inst #196 = CROR
  { 197,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo30,0,0 },  // Inst #197 = CRORC
  { 198,	1,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo31,0,0 },  // Inst #198 = CRSET
  { 199,	1,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo31,0,0 },  // Inst #199 = CRUNSET
  { 200,	3,	1,	5,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo30,0,0 },  // Inst #200 = CRXOR
  { 201,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo32,0,0 },  // Inst #201 = DCBA
  { 202,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo32,0,0 },  // Inst #202 = DCBF
  { 203,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo32,0,0 },  // Inst #203 = DCBI
  { 204,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo32,0,0 },  // Inst #204 = DCBST
  { 205,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x2ULL, NULL, NULL, OperandInfo32,0,0 },  // Inst #205 = DCBT
  { 206,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo32,0,0 },  // Inst #206 = DCBTST
  { 207,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo32,0,0 },  // Inst #207 = DCBZ
  { 208,	2,	0,	6,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo32,0,0 },  // Inst #208 = DCBZL
  { 209,	3,	1,	7,	0,	0, 0xdULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #209 = DIVD
  { 210,	3,	1,	7,	0,	0, 0xdULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #210 = DIVDU
  { 211,	3,	1,	7,	0,	0, 0xdULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #211 = DIVDUo
  { 212,	3,	1,	7,	0,	0, 0xdULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #212 = DIVDo
  { 213,	3,	1,	8,	0,	0, 0xdULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #213 = DIVW
  { 214,	3,	1,	8,	0,	0, 0xdULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #214 = DIVWU
  { 215,	3,	1,	8,	0,	0, 0xdULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #215 = DIVWUo
  { 216,	3,	1,	8,	0,	0, 0xdULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #216 = DIVWo
  { 217,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo33,PPC::DeprecatedDST,0 },  // Inst #217 = DSS
  { 218,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo33,PPC::DeprecatedDST,0 },  // Inst #218 = DSSALL
  { 219,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo34,PPC::DeprecatedDST,0 },  // Inst #219 = DST
  { 220,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo35,PPC::DeprecatedDST,0 },  // Inst #220 = DST64
  { 221,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo34,PPC::DeprecatedDST,0 },  // Inst #221 = DSTST
  { 222,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo35,PPC::DeprecatedDST,0 },  // Inst #222 = DSTST64
  { 223,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo34,PPC::DeprecatedDST,0 },  // Inst #223 = DSTSTT
  { 224,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo35,PPC::DeprecatedDST,0 },  // Inst #224 = DSTSTT64
  { 225,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo34,PPC::DeprecatedDST,0 },  // Inst #225 = DSTT
  { 226,	4,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo35,PPC::DeprecatedDST,0 },  // Inst #226 = DSTT64
  { 227,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo36,0,0 },  // Inst #227 = DYNALLOC
  { 228,	4,	1,	0,	0,	0, 0x0ULL, ImplicitList16, ImplicitList16, OperandInfo37,0,0 },  // Inst #228 = DYNALLOC8
  { 229,	1,	0,	0,	0,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo38,0,0 },  // Inst #229 = EH_SjLj_LongJmp32
  { 230,	1,	0,	0,	0,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo38,0,0 },  // Inst #230 = EH_SjLj_LongJmp64
  { 231,	2,	1,	0,	0,	0|(1<<MCID::Barrier)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList7, OperandInfo39,0,0 },  // Inst #231 = EH_SjLj_SetJmp32
  { 232,	2,	1,	0,	0,	0|(1<<MCID::Barrier)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, ImplicitList8, OperandInfo39,0,0 },  // Inst #232 = EH_SjLj_SetJmp64
  { 233,	1,	0,	0,	0,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo5,0,0 },  // Inst #233 = EH_SjLj_Setup
  { 234,	0,	0,	9,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #234 = EIEIO
  { 235,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #235 = EQV
  { 236,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #236 = EQV8
  { 237,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #237 = EQV8o
  { 238,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #238 = EQVo
  { 239,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo24,0,0 },  // Inst #239 = EXTLDI
  { 240,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo24,0,0 },  // Inst #240 = EXTLDIo
  { 241,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo25,0,0 },  // Inst #241 = EXTLWI
  { 242,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo25,0,0 },  // Inst #242 = EXTLWIo
  { 243,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo24,0,0 },  // Inst #243 = EXTRDI
  { 244,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo24,0,0 },  // Inst #244 = EXTRDIo
  { 245,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo25,0,0 },  // Inst #245 = EXTRWI
  { 246,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo25,0,0 },  // Inst #246 = EXTRWIo
  { 247,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #247 = EXTSB
  { 248,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo17,0,0 },  // Inst #248 = EXTSB8
  { 249,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo40,0,0 },  // Inst #249 = EXTSB8_32_64
  { 250,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo17,0,0 },  // Inst #250 = EXTSB8o
  { 251,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo16,0,0 },  // Inst #251 = EXTSBo
  { 252,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #252 = EXTSH
  { 253,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo17,0,0 },  // Inst #253 = EXTSH8
  { 254,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo40,0,0 },  // Inst #254 = EXTSH8_32_64
  { 255,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo17,0,0 },  // Inst #255 = EXTSH8o
  { 256,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo16,0,0 },  // Inst #256 = EXTSHo
  { 257,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo17,0,0 },  // Inst #257 = EXTSW
  { 258,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo40,0,0 },  // Inst #258 = EXTSW_32_64
  { 259,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo40,0,0 },  // Inst #259 = EXTSW_32_64o
  { 260,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo17,0,0 },  // Inst #260 = EXTSWo
  { 261,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo41,0,0 },  // Inst #261 = FABSD
  { 262,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo41,0,0 },  // Inst #262 = FABSDo
  { 263,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo42,0,0 },  // Inst #263 = FABSS
  { 264,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo42,0,0 },  // Inst #264 = FABSSo
  { 265,	3,	1,	11,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo43,0,0 },  // Inst #265 = FADD
  { 266,	3,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo44,0,0 },  // Inst #266 = FADDS
  { 267,	3,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo44,0,0 },  // Inst #267 = FADDSo
  { 268,	3,	1,	11,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo43,0,0 },  // Inst #268 = FADDo
  { 269,	3,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList5, NULL, OperandInfo43,0,0 },  // Inst #269 = FADDrtz
  { 270,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41,0,0 },  // Inst #270 = FCFID
  { 271,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo45,0,0 },  // Inst #271 = FCFIDS
  { 272,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo45,0,0 },  // Inst #272 = FCFIDSo
  { 273,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41,0,0 },  // Inst #273 = FCFIDU
  { 274,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo45,0,0 },  // Inst #274 = FCFIDUS
  { 275,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo45,0,0 },  // Inst #275 = FCFIDUSo
  { 276,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41,0,0 },  // Inst #276 = FCFIDUo
  { 277,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41,0,0 },  // Inst #277 = FCFIDo
  { 278,	3,	1,	12,	0,	0|(1<<MCID::Compare), 0x18ULL, NULL, NULL, OperandInfo46,0,0 },  // Inst #278 = FCMPUD
  { 279,	3,	1,	12,	0,	0|(1<<MCID::Compare), 0x18ULL, NULL, NULL, OperandInfo47,0,0 },  // Inst #279 = FCMPUS
  { 280,	3,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo43,0,0 },  // Inst #280 = FCPSGND
  { 281,	3,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo43,0,0 },  // Inst #281 = FCPSGNDo
  { 282,	3,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo44,0,0 },  // Inst #282 = FCPSGNS
  { 283,	3,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo44,0,0 },  // Inst #283 = FCPSGNSo
  { 284,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41,0,0 },  // Inst #284 = FCTID
  { 285,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41,0,0 },  // Inst #285 = FCTIDUZ
  { 286,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41,0,0 },  // Inst #286 = FCTIDUZo
  { 287,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41,0,0 },  // Inst #287 = FCTIDZ
  { 288,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41,0,0 },  // Inst #288 = FCTIDZo
  { 289,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41,0,0 },  // Inst #289 = FCTIDo
  { 290,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41,0,0 },  // Inst #290 = FCTIW
  { 291,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41,0,0 },  // Inst #291 = FCTIWUZ
  { 292,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41,0,0 },  // Inst #292 = FCTIWUZo
  { 293,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41,0,0 },  // Inst #293 = FCTIWZ
  { 294,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41,0,0 },  // Inst #294 = FCTIWZo
  { 295,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41,0,0 },  // Inst #295 = FCTIWo
  { 296,	3,	1,	13,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo43,0,0 },  // Inst #296 = FDIV
  { 297,	3,	1,	14,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo44,0,0 },  // Inst #297 = FDIVS
  { 298,	3,	1,	14,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo44,0,0 },  // Inst #298 = FDIVSo
  { 299,	3,	1,	13,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo43,0,0 },  // Inst #299 = FDIVo
  { 300,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo48,0,0 },  // Inst #300 = FMADD
  { 301,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo49,0,0 },  // Inst #301 = FMADDS
  { 302,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo49,0,0 },  // Inst #302 = FMADDSo
  { 303,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo48,0,0 },  // Inst #303 = FMADDo
  { 304,	2,	1,	10,	0,	0, 0x0ULL, NULL, NULL, OperandInfo42,0,0 },  // Inst #304 = FMR
  { 305,	2,	1,	10,	0,	0, 0x0ULL, NULL, ImplicitList17, OperandInfo42,0,0 },  // Inst #305 = FMRo
  { 306,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo48,0,0 },  // Inst #306 = FMSUB
  { 307,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo49,0,0 },  // Inst #307 = FMSUBS
  { 308,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo49,0,0 },  // Inst #308 = FMSUBSo
  { 309,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo48,0,0 },  // Inst #309 = FMSUBo
  { 310,	3,	1,	15,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo43,0,0 },  // Inst #310 = FMUL
  { 311,	3,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo44,0,0 },  // Inst #311 = FMULS
  { 312,	3,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo44,0,0 },  // Inst #312 = FMULSo
  { 313,	3,	1,	15,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo43,0,0 },  // Inst #313 = FMULo
  { 314,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo41,0,0 },  // Inst #314 = FNABSD
  { 315,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo41,0,0 },  // Inst #315 = FNABSDo
  { 316,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo42,0,0 },  // Inst #316 = FNABSS
  { 317,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo42,0,0 },  // Inst #317 = FNABSSo
  { 318,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo41,0,0 },  // Inst #318 = FNEGD
  { 319,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo41,0,0 },  // Inst #319 = FNEGDo
  { 320,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo42,0,0 },  // Inst #320 = FNEGS
  { 321,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo42,0,0 },  // Inst #321 = FNEGSo
  { 322,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo48,0,0 },  // Inst #322 = FNMADD
  { 323,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo49,0,0 },  // Inst #323 = FNMADDS
  { 324,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo49,0,0 },  // Inst #324 = FNMADDSo
  { 325,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo48,0,0 },  // Inst #325 = FNMADDo
  { 326,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo48,0,0 },  // Inst #326 = FNMSUB
  { 327,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo49,0,0 },  // Inst #327 = FNMSUBS
  { 328,	4,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo49,0,0 },  // Inst #328 = FNMSUBSo
  { 329,	4,	1,	15,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo48,0,0 },  // Inst #329 = FNMSUBo
  { 330,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo41,0,0 },  // Inst #330 = FRE
  { 331,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo42,0,0 },  // Inst #331 = FRES
  { 332,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo42,0,0 },  // Inst #332 = FRESo
  { 333,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo41,0,0 },  // Inst #333 = FREo
  { 334,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41,0,0 },  // Inst #334 = FRIMD
  { 335,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41,0,0 },  // Inst #335 = FRIMDo
  { 336,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo42,0,0 },  // Inst #336 = FRIMS
  { 337,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo42,0,0 },  // Inst #337 = FRIMSo
  { 338,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41,0,0 },  // Inst #338 = FRIND
  { 339,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41,0,0 },  // Inst #339 = FRINDo
  { 340,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo42,0,0 },  // Inst #340 = FRINS
  { 341,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo42,0,0 },  // Inst #341 = FRINSo
  { 342,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41,0,0 },  // Inst #342 = FRIPD
  { 343,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41,0,0 },  // Inst #343 = FRIPDo
  { 344,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo42,0,0 },  // Inst #344 = FRIPS
  { 345,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo42,0,0 },  // Inst #345 = FRIPSo
  { 346,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41,0,0 },  // Inst #346 = FRIZD
  { 347,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41,0,0 },  // Inst #347 = FRIZDo
  { 348,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo42,0,0 },  // Inst #348 = FRIZS
  { 349,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo42,0,0 },  // Inst #349 = FRIZSo
  { 350,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo45,0,0 },  // Inst #350 = FRSP
  { 351,	2,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo45,0,0 },  // Inst #351 = FRSPo
  { 352,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo41,0,0 },  // Inst #352 = FRSQRTE
  { 353,	2,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo42,0,0 },  // Inst #353 = FRSQRTES
  { 354,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo42,0,0 },  // Inst #354 = FRSQRTESo
  { 355,	2,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo41,0,0 },  // Inst #355 = FRSQRTEo
  { 356,	4,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo48,0,0 },  // Inst #356 = FSELD
  { 357,	4,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo48,0,0 },  // Inst #357 = FSELDo
  { 358,	4,	1,	10,	0,	0, 0x18ULL, NULL, NULL, OperandInfo50,0,0 },  // Inst #358 = FSELS
  { 359,	4,	1,	10,	0,	0, 0x18ULL, NULL, ImplicitList17, OperandInfo50,0,0 },  // Inst #359 = FSELSo
  { 360,	2,	1,	16,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo41,0,0 },  // Inst #360 = FSQRT
  { 361,	2,	1,	16,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo42,0,0 },  // Inst #361 = FSQRTS
  { 362,	2,	1,	16,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo42,0,0 },  // Inst #362 = FSQRTSo
  { 363,	2,	1,	16,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo41,0,0 },  // Inst #363 = FSQRTo
  { 364,	3,	1,	11,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo43,0,0 },  // Inst #364 = FSUB
  { 365,	3,	1,	10,	0,	0, 0x18ULL, ImplicitList5, NULL, OperandInfo44,0,0 },  // Inst #365 = FSUBS
  { 366,	3,	1,	10,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo44,0,0 },  // Inst #366 = FSUBSo
  { 367,	3,	1,	11,	0,	0, 0x18ULL, ImplicitList5, ImplicitList17, OperandInfo43,0,0 },  // Inst #367 = FSUBo
  { 368,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #368 = GETtlsADDR
  { 369,	3,	1,	0,	0,	0, 0x0ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #369 = GETtlsldADDR
  { 370,	2,	0,	17,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo32,0,0 },  // Inst #370 = ICBI
  { 371,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo25,0,0 },  // Inst #371 = INSLWI
  { 372,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo25,0,0 },  // Inst #372 = INSLWIo
  { 373,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo24,0,0 },  // Inst #373 = INSRDI
  { 374,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo24,0,0 },  // Inst #374 = INSRDIo
  { 375,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo25,0,0 },  // Inst #375 = INSRWI
  { 376,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo25,0,0 },  // Inst #376 = INSRWIo
  { 377,	4,	1,	2,	0,	0|(1<<MCID::Select), 0x8ULL, NULL, NULL, OperandInfo51,0,0 },  // Inst #377 = ISEL
  { 378,	4,	1,	2,	0,	0|(1<<MCID::Select), 0x8ULL, NULL, NULL, OperandInfo52,0,0 },  // Inst #378 = ISEL8
  { 379,	0,	0,	18,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #379 = ISYNC
  { 380,	3,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo13,0,0 },  // Inst #380 = LA
  { 381,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo53,0,0 },  // Inst #381 = LAx
  { 382,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo53,0,0 },  // Inst #382 = LBZ
  { 383,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo54,0,0 },  // Inst #383 = LBZ8
  { 384,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo55,0,0 },  // Inst #384 = LBZU
  { 385,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo56,0,0 },  // Inst #385 = LBZU8
  { 386,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo57,0,0 },  // Inst #386 = LBZUX
  { 387,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo58,0,0 },  // Inst #387 = LBZUX8
  { 388,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo59,0,0 },  // Inst #388 = LBZX
  { 389,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo60,0,0 },  // Inst #389 = LBZX8
  { 390,	3,	1,	20,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo54,0,0 },  // Inst #390 = LD
  { 391,	3,	1,	21,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo60,0,0 },  // Inst #391 = LDARX
  { 392,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo60,0,0 },  // Inst #392 = LDBRX
  { 393,	4,	2,	22,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo56,0,0 },  // Inst #393 = LDU
  { 394,	4,	2,	22,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo58,0,0 },  // Inst #394 = LDUX
  { 395,	3,	1,	20,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo60,0,0 },  // Inst #395 = LDX
  { 396,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo61,0,0 },  // Inst #396 = LDgotTprelL
  { 397,	1,	0,	20,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::UnmodeledSideEffects), 0x10ULL, NULL, NULL, OperandInfo62,0,0 },  // Inst #397 = LDinto_toc
  { 398,	3,	1,	0,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo63,0,0 },  // Inst #398 = LDtoc
  { 399,	3,	1,	0,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo63,0,0 },  // Inst #399 = LDtocCPT
  { 400,	3,	1,	0,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo63,0,0 },  // Inst #400 = LDtocJTI
  { 401,	3,	1,	0,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo61,0,0 },  // Inst #401 = LDtocL
  { 402,	0,	0,	20,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::UnmodeledSideEffects), 0x10ULL, NULL, NULL, 0,0,0 },  // Inst #402 = LDtoc_restore
  { 403,	3,	1,	23,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo64,0,0 },  // Inst #403 = LFD
  { 404,	4,	2,	24,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo65,0,0 },  // Inst #404 = LFDU
  { 405,	4,	2,	24,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo66,0,0 },  // Inst #405 = LFDUX
  { 406,	3,	1,	23,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo67,0,0 },  // Inst #406 = LFDX
  { 407,	3,	1,	23,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo67,0,0 },  // Inst #407 = LFIWAX
  { 408,	3,	1,	23,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo67,0,0 },  // Inst #408 = LFIWZX
  { 409,	3,	1,	23,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo68,0,0 },  // Inst #409 = LFS
  { 410,	4,	2,	24,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo69,0,0 },  // Inst #410 = LFSU
  { 411,	4,	2,	24,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo70,0,0 },  // Inst #411 = LFSUX
  { 412,	3,	1,	23,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo71,0,0 },  // Inst #412 = LFSX
  { 413,	3,	1,	25,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, NULL, NULL, OperandInfo53,0,0 },  // Inst #413 = LHA
  { 414,	3,	1,	25,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, NULL, NULL, OperandInfo54,0,0 },  // Inst #414 = LHA8
  { 415,	4,	2,	26,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo55,0,0 },  // Inst #415 = LHAU
  { 416,	4,	2,	26,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo56,0,0 },  // Inst #416 = LHAU8
  { 417,	4,	2,	26,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo57,0,0 },  // Inst #417 = LHAUX
  { 418,	4,	2,	26,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo58,0,0 },  // Inst #418 = LHAUX8
  { 419,	3,	1,	25,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, NULL, NULL, OperandInfo59,0,0 },  // Inst #419 = LHAX
  { 420,	3,	1,	25,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, NULL, NULL, OperandInfo60,0,0 },  // Inst #420 = LHAX8
  { 421,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo59,0,0 },  // Inst #421 = LHBRX
  { 422,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo53,0,0 },  // Inst #422 = LHZ
  { 423,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo54,0,0 },  // Inst #423 = LHZ8
  { 424,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo55,0,0 },  // Inst #424 = LHZU
  { 425,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo56,0,0 },  // Inst #425 = LHZU8
  { 426,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo57,0,0 },  // Inst #426 = LHZUX
  { 427,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo58,0,0 },  // Inst #427 = LHZUX8
  { 428,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo59,0,0 },  // Inst #428 = LHZX
  { 429,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo60,0,0 },  // Inst #429 = LHZX8
  { 430,	2,	1,	1,	0,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, NULL, NULL, OperandInfo72,0,0 },  // Inst #430 = LI
  { 431,	2,	1,	1,	0,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, NULL, NULL, OperandInfo73,0,0 },  // Inst #431 = LI8
  { 432,	2,	1,	1,	0,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, NULL, NULL, OperandInfo72,0,0 },  // Inst #432 = LIS
  { 433,	2,	1,	1,	0,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, NULL, NULL, OperandInfo73,0,0 },  // Inst #433 = LIS8
  { 434,	3,	1,	27,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo53,0,0 },  // Inst #434 = LMW
  { 435,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo74,0,0 },  // Inst #435 = LVEBX
  { 436,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo74,0,0 },  // Inst #436 = LVEHX
  { 437,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo74,0,0 },  // Inst #437 = LVEWX
  { 438,	3,	1,	9,	0,	0, 0x10ULL, NULL, NULL, OperandInfo74,0,0 },  // Inst #438 = LVSL
  { 439,	3,	1,	9,	0,	0, 0x10ULL, NULL, NULL, OperandInfo74,0,0 },  // Inst #439 = LVSR
  { 440,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo74,0,0 },  // Inst #440 = LVX
  { 441,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo74,0,0 },  // Inst #441 = LVXL
  { 442,	3,	1,	28,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, NULL, NULL, OperandInfo54,0,0 },  // Inst #442 = LWA
  { 443,	3,	1,	29,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo59,0,0 },  // Inst #443 = LWARX
  { 444,	4,	2,	26,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo58,0,0 },  // Inst #444 = LWAUX
  { 445,	3,	1,	25,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, NULL, NULL, OperandInfo60,0,0 },  // Inst #445 = LWAX
  { 446,	3,	1,	25,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x14ULL, NULL, NULL, OperandInfo59,0,0 },  // Inst #446 = LWAX_32
  { 447,	3,	1,	28,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x14ULL, NULL, NULL, OperandInfo53,0,0 },  // Inst #447 = LWA_32
  { 448,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo59,0,0 },  // Inst #448 = LWBRX
  { 449,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo53,0,0 },  // Inst #449 = LWZ
  { 450,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo54,0,0 },  // Inst #450 = LWZ8
  { 451,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo55,0,0 },  // Inst #451 = LWZU
  { 452,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo56,0,0 },  // Inst #452 = LWZU8
  { 453,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo57,0,0 },  // Inst #453 = LWZUX
  { 454,	4,	2,	19,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo58,0,0 },  // Inst #454 = LWZUX8
  { 455,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo59,0,0 },  // Inst #455 = LWZX
  { 456,	3,	1,	9,	0,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, NULL, NULL, OperandInfo60,0,0 },  // Inst #456 = LWZX8
  { 457,	2,	1,	30,	0,	0, 0x21ULL, NULL, NULL, OperandInfo75,0,0 },  // Inst #457 = MCRF
  { 458,	1,	1,	31,	0,	0, 0x20ULL, NULL, NULL, OperandInfo76,0,0 },  // Inst #458 = MFCR
  { 459,	1,	1,	31,	0,	0, 0x20ULL, NULL, NULL, OperandInfo62,0,0 },  // Inst #459 = MFCR8
  { 460,	1,	1,	32,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList7, NULL, OperandInfo76,0,0 },  // Inst #460 = MFCTR
  { 461,	1,	1,	32,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList8, NULL, OperandInfo62,0,0 },  // Inst #461 = MFCTR8
  { 462,	1,	1,	33,	0,	0, 0x1aULL, ImplicitList5, NULL, OperandInfo77,0,0 },  // Inst #462 = MFFS
  { 463,	1,	1,	32,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList6, NULL, OperandInfo76,0,0 },  // Inst #463 = MFLR
  { 464,	1,	1,	32,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList11, NULL, OperandInfo62,0,0 },  // Inst #464 = MFLR8
  { 465,	1,	1,	34,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo76,0,0 },  // Inst #465 = MFMSR
  { 466,	2,	1,	31,	0,	0|(1<<MCID::ExtraSrcRegAllocReq), 0x21ULL, NULL, NULL, OperandInfo72,0,0 },  // Inst #466 = MFOCRF
  { 467,	2,	1,	31,	0,	0|(1<<MCID::ExtraSrcRegAllocReq), 0x21ULL, NULL, NULL, OperandInfo73,0,0 },  // Inst #467 = MFOCRF8
  { 468,	2,	1,	32,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo78,0,0 },  // Inst #468 = MFSPR
  { 469,	2,	1,	35,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo78,PPC::DeprecatedMFTB,0 },  // Inst #469 = MFTB
  { 470,	1,	1,	35,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, NULL, NULL, OperandInfo62,0,0 },  // Inst #470 = MFTB8
  { 471,	1,	1,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, NULL, NULL, OperandInfo76,0,0 },  // Inst #471 = MFVRSAVE
  { 472,	2,	1,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, NULL, NULL, OperandInfo79,0,0 },  // Inst #472 = MFVRSAVEv
  { 473,	1,	1,	36,	0,	0|(1<<MCID::MayLoad), 0x0ULL, NULL, NULL, OperandInfo80,0,0 },  // Inst #473 = MFVSCR
  { 474,	2,	0,	37,	0,	0, 0x20ULL, NULL, NULL, OperandInfo81,0,0 },  // Inst #474 = MTCRF
  { 475,	2,	0,	37,	0,	0, 0x20ULL, NULL, NULL, OperandInfo82,0,0 },  // Inst #475 = MTCRF8
  { 476,	1,	0,	38,	0,	0, 0x9ULL, NULL, ImplicitList7, OperandInfo76,0,0 },  // Inst #476 = MTCTR
  { 477,	1,	0,	38,	0,	0, 0x9ULL, NULL, ImplicitList8, OperandInfo62,0,0 },  // Inst #477 = MTCTR8
  { 478,	1,	0,	38,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x9ULL, NULL, ImplicitList8, OperandInfo62,0,0 },  // Inst #478 = MTCTR8loop
  { 479,	1,	0,	38,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x9ULL, NULL, ImplicitList7, OperandInfo76,0,0 },  // Inst #479 = MTCTRloop
  { 480,	1,	0,	39,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList5, ImplicitList5, OperandInfo5,0,0 },  // Inst #480 = MTFSB0
  { 481,	1,	0,	39,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList5, ImplicitList5, OperandInfo5,0,0 },  // Inst #481 = MTFSB1
  { 482,	2,	0,	39,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList5, ImplicitList5, OperandInfo83,0,0 },  // Inst #482 = MTFSF
  { 483,	1,	0,	38,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, NULL, ImplicitList6, OperandInfo76,0,0 },  // Inst #483 = MTLR
  { 484,	1,	0,	38,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, NULL, ImplicitList11, OperandInfo62,0,0 },  // Inst #484 = MTLR8
  { 485,	2,	0,	40,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo78,0,0 },  // Inst #485 = MTMSR
  { 486,	2,	0,	41,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo78,0,0 },  // Inst #486 = MTMSRD
  { 487,	2,	1,	37,	0,	0, 0x21ULL, NULL, NULL, OperandInfo84,0,0 },  // Inst #487 = MTOCRF
  { 488,	2,	1,	37,	0,	0, 0x21ULL, NULL, NULL, OperandInfo85,0,0 },  // Inst #488 = MTOCRF8
  { 489,	2,	0,	38,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo81,0,0 },  // Inst #489 = MTSPR
  { 490,	1,	0,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0xaULL, NULL, NULL, OperandInfo76,0,0 },  // Inst #490 = MTVRSAVE
  { 491,	2,	1,	2,	0,	0|(1<<MCID::UnmodeledSideEffects), 0xaULL, NULL, NULL, OperandInfo86,0,0 },  // Inst #491 = MTVRSAVEv
  { 492,	1,	0,	9,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo80,0,0 },  // Inst #492 = MTVSCR
  { 493,	3,	1,	42,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #493 = MULHD
  { 494,	3,	1,	43,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #494 = MULHDU
  { 495,	3,	1,	43,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #495 = MULHDUo
  { 496,	3,	1,	42,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #496 = MULHDo
  { 497,	3,	1,	42,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #497 = MULHW
  { 498,	3,	1,	43,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #498 = MULHWU
  { 499,	3,	1,	43,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #499 = MULHWUo
  { 500,	3,	1,	42,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #500 = MULHWo
  { 501,	3,	1,	44,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #501 = MULLD
  { 502,	3,	1,	44,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #502 = MULLDo
  { 503,	3,	1,	45,	0,	0, 0x8ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #503 = MULLI
  { 504,	3,	1,	45,	0,	0, 0x8ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #504 = MULLI8
  { 505,	3,	1,	42,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #505 = MULLW
  { 506,	3,	1,	42,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #506 = MULLWo
  { 507,	0,	0,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, NULL, ImplicitList6, 0,0,0 },  // Inst #507 = MovePCtoLR
  { 508,	0,	0,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, NULL, ImplicitList11, 0,0,0 },  // Inst #508 = MovePCtoLR8
  { 509,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #509 = NAND
  { 510,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #510 = NAND8
  { 511,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #511 = NAND8o
  { 512,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #512 = NANDo
  { 513,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #513 = NEG
  { 514,	2,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo17,0,0 },  // Inst #514 = NEG8
  { 515,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo17,0,0 },  // Inst #515 = NEG8o
  { 516,	2,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo16,0,0 },  // Inst #516 = NEGo
  { 517,	0,	0,	1,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, NULL, NULL, 0,0,0 },  // Inst #517 = NOP
  { 518,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #518 = NOR
  { 519,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #519 = NOR8
  { 520,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #520 = NOR8o
  { 521,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #521 = NORo
  { 522,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #522 = OR
  { 523,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #523 = OR8
  { 524,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #524 = OR8o
  { 525,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #525 = ORC
  { 526,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #526 = ORC8
  { 527,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #527 = ORC8o
  { 528,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #528 = ORCo
  { 529,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #529 = ORI
  { 530,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #530 = ORI8
  { 531,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #531 = ORIS
  { 532,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #532 = ORIS8
  { 533,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #533 = ORo
  { 534,	2,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo17,0,0 },  // Inst #534 = POPCNTD
  { 535,	2,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #535 = POPCNTW
  { 536,	3,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo87,0,0 },  // Inst #536 = RESTORE_CR
  { 537,	3,	1,	0,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo88,0,0 },  // Inst #537 = RESTORE_VRSAVE
  { 538,	4,	1,	46,	0,	0, 0x8ULL, NULL, NULL, OperandInfo89,0,0 },  // Inst #538 = RLDCL
  { 539,	4,	1,	46,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo89,0,0 },  // Inst #539 = RLDCLo
  { 540,	4,	1,	46,	0,	0, 0x8ULL, NULL, NULL, OperandInfo89,0,0 },  // Inst #540 = RLDCR
  { 541,	4,	1,	46,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo89,0,0 },  // Inst #541 = RLDCRo
  { 542,	4,	1,	47,	0,	0, 0x8ULL, NULL, NULL, OperandInfo24,0,0 },  // Inst #542 = RLDIC
  { 543,	4,	1,	47,	0,	0, 0x8ULL, NULL, NULL, OperandInfo24,0,0 },  // Inst #543 = RLDICL
  { 544,	4,	1,	47,	0,	0, 0x8ULL, NULL, NULL, OperandInfo90,0,0 },  // Inst #544 = RLDICL_32_64
  { 545,	4,	1,	47,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo24,0,0 },  // Inst #545 = RLDICLo
  { 546,	4,	1,	47,	0,	0, 0x8ULL, NULL, NULL, OperandInfo24,0,0 },  // Inst #546 = RLDICR
  { 547,	4,	1,	47,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo24,0,0 },  // Inst #547 = RLDICRo
  { 548,	4,	1,	47,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo24,0,0 },  // Inst #548 = RLDICo
  { 549,	5,	1,	47,	0,	0|(1<<MCID::Commutable), 0x8ULL, NULL, NULL, OperandInfo91,0,0 },  // Inst #549 = RLDIMI
  { 550,	5,	1,	47,	0,	0|(1<<MCID::Commutable), 0x8ULL, NULL, ImplicitList1, OperandInfo91,0,0 },  // Inst #550 = RLDIMIo
  { 551,	6,	1,	48,	0,	0|(1<<MCID::Commutable), 0xcULL, NULL, NULL, OperandInfo92,0,0 },  // Inst #551 = RLWIMI
  { 552,	6,	1,	48,	0,	0|(1<<MCID::Commutable), 0xcULL, NULL, ImplicitList1, OperandInfo92,0,0 },  // Inst #552 = RLWIMIo
  { 553,	5,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo93,0,0 },  // Inst #553 = RLWINM
  { 554,	5,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo94,0,0 },  // Inst #554 = RLWINM8
  { 555,	5,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo94,0,0 },  // Inst #555 = RLWINM8o
  { 556,	5,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList1, OperandInfo93,0,0 },  // Inst #556 = RLWINMo
  { 557,	5,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo95,0,0 },  // Inst #557 = RLWNM
  { 558,	5,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo95,0,0 },  // Inst #558 = RLWNMo
  { 559,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #559 = ROTRDI
  { 560,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #560 = ROTRDIo
  { 561,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #561 = ROTRWI
  { 562,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #562 = ROTRWIo
  { 563,	1,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #563 = SC
  { 564,	5,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo96,0,0 },  // Inst #564 = SELECT_CC_F4
  { 565,	5,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo97,0,0 },  // Inst #565 = SELECT_CC_F8
  { 566,	5,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo98,0,0 },  // Inst #566 = SELECT_CC_I4
  { 567,	5,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo99,0,0 },  // Inst #567 = SELECT_CC_I8
  { 568,	5,	1,	0,	0,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, NULL, NULL, OperandInfo100,0,0 },  // Inst #568 = SELECT_CC_VRRC
  { 569,	0,	0,	49,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #569 = SLBIA
  { 570,	1,	0,	50,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo76,0,0 },  // Inst #570 = SLBIE
  { 571,	2,	1,	51,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #571 = SLBMFEE
  { 572,	2,	0,	52,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #572 = SLBMTE
  { 573,	3,	1,	46,	0,	0, 0x8ULL, NULL, NULL, OperandInfo101,0,0 },  // Inst #573 = SLD
  { 574,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #574 = SLDI
  { 575,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #575 = SLDIo
  { 576,	3,	1,	46,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo101,0,0 },  // Inst #576 = SLDo
  { 577,	3,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #577 = SLW
  { 578,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #578 = SLWI
  { 579,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #579 = SLWIo
  { 580,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #580 = SLWo
  { 581,	3,	0,	0,	0,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo87,0,0 },  // Inst #581 = SPILL_CR
  { 582,	3,	0,	0,	0,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo88,0,0 },  // Inst #582 = SPILL_VRSAVE
  { 583,	3,	1,	46,	0,	0, 0x8ULL, NULL, ImplicitList2, OperandInfo101,0,0 },  // Inst #583 = SRAD
  { 584,	3,	1,	47,	0,	0, 0x8ULL, NULL, ImplicitList2, OperandInfo12,0,0 },  // Inst #584 = SRADI
  { 585,	3,	1,	47,	0,	0, 0x8ULL, NULL, ImplicitList3, OperandInfo12,0,0 },  // Inst #585 = SRADIo
  { 586,	3,	1,	46,	0,	0, 0x8ULL, NULL, ImplicitList3, OperandInfo101,0,0 },  // Inst #586 = SRADo
  { 587,	3,	1,	53,	0,	0, 0x8ULL, NULL, ImplicitList2, OperandInfo10,0,0 },  // Inst #587 = SRAW
  { 588,	3,	1,	53,	0,	0, 0x8ULL, NULL, ImplicitList2, OperandInfo15,0,0 },  // Inst #588 = SRAWI
  { 589,	3,	1,	53,	0,	0, 0x8ULL, NULL, ImplicitList3, OperandInfo15,0,0 },  // Inst #589 = SRAWIo
  { 590,	3,	1,	53,	0,	0, 0x8ULL, NULL, ImplicitList3, OperandInfo10,0,0 },  // Inst #590 = SRAWo
  { 591,	3,	1,	46,	0,	0, 0x8ULL, NULL, NULL, OperandInfo101,0,0 },  // Inst #591 = SRD
  { 592,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #592 = SRDI
  { 593,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #593 = SRDIo
  { 594,	3,	1,	46,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo101,0,0 },  // Inst #594 = SRDo
  { 595,	3,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #595 = SRW
  { 596,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #596 = SRWI
  { 597,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #597 = SRWIo
  { 598,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #598 = SRWo
  { 599,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo53,0,0 },  // Inst #599 = STB
  { 600,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo54,0,0 },  // Inst #600 = STB8
  { 601,	4,	1,	54,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo102,0,0 },  // Inst #601 = STBU
  { 602,	4,	1,	54,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo103,0,0 },  // Inst #602 = STBU8
  { 603,	4,	1,	54,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo104,0,0 },  // Inst #603 = STBUX
  { 604,	4,	1,	54,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo105,0,0 },  // Inst #604 = STBUX8
  { 605,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo59,0,0 },  // Inst #605 = STBX
  { 606,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo60,0,0 },  // Inst #606 = STBX8
  { 607,	3,	0,	55,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo54,0,0 },  // Inst #607 = STD
  { 608,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo60,0,0 },  // Inst #608 = STDBRX
  { 609,	3,	0,	56,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, ImplicitList1, OperandInfo60,0,0 },  // Inst #609 = STDCX
  { 610,	4,	1,	57,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo103,0,0 },  // Inst #610 = STDU
  { 611,	4,	1,	57,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo105,0,0 },  // Inst #611 = STDUX
  { 612,	3,	0,	55,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo60,0,0 },  // Inst #612 = STDX
  { 613,	3,	0,	58,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo64,0,0 },  // Inst #613 = STFD
  { 614,	4,	1,	59,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo106,0,0 },  // Inst #614 = STFDU
  { 615,	4,	1,	59,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo107,0,0 },  // Inst #615 = STFDUX
  { 616,	3,	0,	58,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo67,0,0 },  // Inst #616 = STFDX
  { 617,	3,	0,	58,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo67,0,0 },  // Inst #617 = STFIWX
  { 618,	3,	0,	58,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo68,0,0 },  // Inst #618 = STFS
  { 619,	4,	1,	59,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo108,0,0 },  // Inst #619 = STFSU
  { 620,	4,	1,	59,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo109,0,0 },  // Inst #620 = STFSUX
  { 621,	3,	0,	58,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo71,0,0 },  // Inst #621 = STFSX
  { 622,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo53,0,0 },  // Inst #622 = STH
  { 623,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo54,0,0 },  // Inst #623 = STH8
  { 624,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo59,0,0 },  // Inst #624 = STHBRX
  { 625,	4,	1,	54,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo102,0,0 },  // Inst #625 = STHU
  { 626,	4,	1,	54,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo103,0,0 },  // Inst #626 = STHU8
  { 627,	4,	1,	54,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo104,0,0 },  // Inst #627 = STHUX
  { 628,	4,	1,	54,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo105,0,0 },  // Inst #628 = STHUX8
  { 629,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo59,0,0 },  // Inst #629 = STHX
  { 630,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo60,0,0 },  // Inst #630 = STHX8
  { 631,	3,	0,	27,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo53,0,0 },  // Inst #631 = STMW
  { 632,	3,	0,	36,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo74,0,0 },  // Inst #632 = STVEBX
  { 633,	3,	0,	36,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo74,0,0 },  // Inst #633 = STVEHX
  { 634,	3,	0,	36,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo74,0,0 },  // Inst #634 = STVEWX
  { 635,	3,	0,	36,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo74,0,0 },  // Inst #635 = STVX
  { 636,	3,	0,	36,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo74,0,0 },  // Inst #636 = STVXL
  { 637,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo53,0,0 },  // Inst #637 = STW
  { 638,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo54,0,0 },  // Inst #638 = STW8
  { 639,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo59,0,0 },  // Inst #639 = STWBRX
  { 640,	3,	0,	60,	0,	0|(1<<MCID::MayStore), 0x0ULL, NULL, ImplicitList1, OperandInfo59,0,0 },  // Inst #640 = STWCX
  { 641,	4,	1,	54,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo102,0,0 },  // Inst #641 = STWU
  { 642,	4,	1,	54,	0,	0|(1<<MCID::MayStore), 0x10ULL, NULL, NULL, OperandInfo103,0,0 },  // Inst #642 = STWU8
  { 643,	4,	1,	54,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo104,0,0 },  // Inst #643 = STWUX
  { 644,	4,	1,	54,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo105,0,0 },  // Inst #644 = STWUX8
  { 645,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo59,0,0 },  // Inst #645 = STWX
  { 646,	3,	0,	36,	0,	0|(1<<MCID::MayStore), 0x14ULL, NULL, NULL, OperandInfo60,0,0 },  // Inst #646 = STWX8
  { 647,	3,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #647 = SUBF
  { 648,	3,	1,	2,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #648 = SUBF8
  { 649,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #649 = SUBF8o
  { 650,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList2, OperandInfo10,0,0 },  // Inst #650 = SUBFC
  { 651,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList2, OperandInfo11,0,0 },  // Inst #651 = SUBFC8
  { 652,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList2, OperandInfo11,0,0 },  // Inst #652 = SUBFC8o
  { 653,	3,	1,	2,	0,	0, 0xcULL, NULL, ImplicitList3, OperandInfo10,0,0 },  // Inst #653 = SUBFCo
  { 654,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo10,0,0 },  // Inst #654 = SUBFE
  { 655,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo11,0,0 },  // Inst #655 = SUBFE8
  { 656,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo11,0,0 },  // Inst #656 = SUBFE8o
  { 657,	3,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo10,0,0 },  // Inst #657 = SUBFEo
  { 658,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList2, OperandInfo15,0,0 },  // Inst #658 = SUBFIC
  { 659,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList2, OperandInfo12,0,0 },  // Inst #659 = SUBFIC8
  { 660,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo16,0,0 },  // Inst #660 = SUBFME
  { 661,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo17,0,0 },  // Inst #661 = SUBFME8
  { 662,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo17,0,0 },  // Inst #662 = SUBFME8o
  { 663,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo16,0,0 },  // Inst #663 = SUBFMEo
  { 664,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo16,0,0 },  // Inst #664 = SUBFZE
  { 665,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo17,0,0 },  // Inst #665 = SUBFZE8
  { 666,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo17,0,0 },  // Inst #666 = SUBFZE8o
  { 667,	2,	1,	2,	0,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo16,0,0 },  // Inst #667 = SUBFZEo
  { 668,	3,	1,	2,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #668 = SUBFo
  { 669,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #669 = SUBI
  { 670,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #670 = SUBIC
  { 671,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #671 = SUBICo
  { 672,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #672 = SUBIS
  { 673,	1,	0,	61,	0,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #673 = SYNC
  { 674,	1,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, NULL, OperandInfo5,0,0 },  // Inst #674 = TAILB
  { 675,	1,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, NULL, OperandInfo5,0,0 },  // Inst #675 = TAILB8
  { 676,	1,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, NULL, OperandInfo5,0,0 },  // Inst #676 = TAILBA
  { 677,	1,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, NULL, OperandInfo5,0,0 },  // Inst #677 = TAILBA8
  { 678,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, NULL, 0,0,0 },  // Inst #678 = TAILBCTR
  { 679,	0,	0,	3,	0,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList10, NULL, 0,0,0 },  // Inst #679 = TAILBCTR8
  { 680,	2,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList5, NULL, OperandInfo110,0,0 },  // Inst #680 = TCRETURNai
  { 681,	2,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList5, NULL, OperandInfo110,0,0 },  // Inst #681 = TCRETURNai8
  { 682,	2,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList5, NULL, OperandInfo110,0,0 },  // Inst #682 = TCRETURNdi
  { 683,	2,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList5, NULL, OperandInfo110,0,0 },  // Inst #683 = TCRETURNdi8
  { 684,	2,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList5, NULL, OperandInfo111,0,0 },  // Inst #684 = TCRETURNri
  { 685,	2,	0,	0,	0,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList5, NULL, OperandInfo112,0,0 },  // Inst #685 = TCRETURNri8
  { 686,	3,	0,	62,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo113,0,0 },  // Inst #686 = TD
  { 687,	3,	0,	62,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo114,0,0 },  // Inst #687 = TDI
  { 688,	2,	0,	63,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #688 = TLBIE
  { 689,	1,	0,	64,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo76,0,0 },  // Inst #689 = TLBIEL
  { 690,	0,	0,	65,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #690 = TLBSYNC
  { 691,	0,	0,	9,	0,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, 0,0,0 },  // Inst #691 = TRAP
  { 692,	3,	0,	66,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo115,0,0 },  // Inst #692 = TW
  { 693,	3,	0,	66,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo116,0,0 },  // Inst #693 = TWI
  { 694,	2,	1,	0,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo16,0,0 },  // Inst #694 = UPDATE_VRSAVE
  { 695,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #695 = VADDCUW
  { 696,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #696 = VADDFP
  { 697,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #697 = VADDSBS
  { 698,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #698 = VADDSHS
  { 699,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #699 = VADDSWS
  { 700,	3,	1,	68,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #700 = VADDUBM
  { 701,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #701 = VADDUBS
  { 702,	3,	1,	68,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #702 = VADDUHM
  { 703,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #703 = VADDUHS
  { 704,	3,	1,	68,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #704 = VADDUWM
  { 705,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #705 = VADDUWS
  { 706,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #706 = VAND
  { 707,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #707 = VANDC
  { 708,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #708 = VAVGSB
  { 709,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #709 = VAVGSH
  { 710,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #710 = VAVGSW
  { 711,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #711 = VAVGUB
  { 712,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #712 = VAVGUH
  { 713,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #713 = VAVGUW
  { 714,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118,0,0 },  // Inst #714 = VCFSX
  { 715,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #715 = VCFSX_0
  { 716,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118,0,0 },  // Inst #716 = VCFUX
  { 717,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #717 = VCFUX_0
  { 718,	3,	1,	69,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #718 = VCMPBFP
  { 719,	3,	1,	69,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo117,0,0 },  // Inst #719 = VCMPBFPo
  { 720,	3,	1,	69,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #720 = VCMPEQFP
  { 721,	3,	1,	69,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo117,0,0 },  // Inst #721 = VCMPEQFPo
  { 722,	3,	1,	69,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #722 = VCMPEQUB
  { 723,	3,	1,	69,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo117,0,0 },  // Inst #723 = VCMPEQUBo
  { 724,	3,	1,	69,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #724 = VCMPEQUH
  { 725,	3,	1,	69,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo117,0,0 },  // Inst #725 = VCMPEQUHo
  { 726,	3,	1,	69,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #726 = VCMPEQUW
  { 727,	3,	1,	69,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo117,0,0 },  // Inst #727 = VCMPEQUWo
  { 728,	3,	1,	69,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #728 = VCMPGEFP
  { 729,	3,	1,	69,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo117,0,0 },  // Inst #729 = VCMPGEFPo
  { 730,	3,	1,	69,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #730 = VCMPGTFP
  { 731,	3,	1,	69,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo117,0,0 },  // Inst #731 = VCMPGTFPo
  { 732,	3,	1,	69,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #732 = VCMPGTSB
  { 733,	3,	1,	69,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo117,0,0 },  // Inst #733 = VCMPGTSBo
  { 734,	3,	1,	69,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #734 = VCMPGTSH
  { 735,	3,	1,	69,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo117,0,0 },  // Inst #735 = VCMPGTSHo
  { 736,	3,	1,	69,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #736 = VCMPGTSW
  { 737,	3,	1,	69,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo117,0,0 },  // Inst #737 = VCMPGTSWo
  { 738,	3,	1,	69,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #738 = VCMPGTUB
  { 739,	3,	1,	69,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo117,0,0 },  // Inst #739 = VCMPGTUBo
  { 740,	3,	1,	69,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #740 = VCMPGTUH
  { 741,	3,	1,	69,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo117,0,0 },  // Inst #741 = VCMPGTUHo
  { 742,	3,	1,	69,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #742 = VCMPGTUW
  { 743,	3,	1,	69,	0,	0, 0x28ULL, NULL, ImplicitList18, OperandInfo117,0,0 },  // Inst #743 = VCMPGTUWo
  { 744,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118,0,0 },  // Inst #744 = VCTSXS
  { 745,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #745 = VCTSXS_0
  { 746,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118,0,0 },  // Inst #746 = VCTUXS
  { 747,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #747 = VCTUXS_0
  { 748,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #748 = VEXPTEFP
  { 749,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #749 = VLOGEFP
  { 750,	4,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120,0,0 },  // Inst #750 = VMADDFP
  { 751,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #751 = VMAXFP
  { 752,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #752 = VMAXSB
  { 753,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #753 = VMAXSH
  { 754,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #754 = VMAXSW
  { 755,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #755 = VMAXUB
  { 756,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #756 = VMAXUH
  { 757,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #757 = VMAXUW
  { 758,	4,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120,0,0 },  // Inst #758 = VMHADDSHS
  { 759,	4,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120,0,0 },  // Inst #759 = VMHRADDSHS
  { 760,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #760 = VMINFP
  { 761,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #761 = VMINSB
  { 762,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #762 = VMINSH
  { 763,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #763 = VMINSW
  { 764,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #764 = VMINUB
  { 765,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #765 = VMINUH
  { 766,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #766 = VMINUW
  { 767,	4,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120,0,0 },  // Inst #767 = VMLADDUHM
  { 768,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #768 = VMRGHB
  { 769,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #769 = VMRGHH
  { 770,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #770 = VMRGHW
  { 771,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #771 = VMRGLB
  { 772,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #772 = VMRGLH
  { 773,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #773 = VMRGLW
  { 774,	4,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120,0,0 },  // Inst #774 = VMSUMMBM
  { 775,	4,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120,0,0 },  // Inst #775 = VMSUMSHM
  { 776,	4,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120,0,0 },  // Inst #776 = VMSUMSHS
  { 777,	4,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120,0,0 },  // Inst #777 = VMSUMUBM
  { 778,	4,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120,0,0 },  // Inst #778 = VMSUMUHM
  { 779,	4,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120,0,0 },  // Inst #779 = VMSUMUHS
  { 780,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #780 = VMULESB
  { 781,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #781 = VMULESH
  { 782,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #782 = VMULEUB
  { 783,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #783 = VMULEUH
  { 784,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #784 = VMULOSB
  { 785,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #785 = VMULOSH
  { 786,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #786 = VMULOUB
  { 787,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #787 = VMULOUH
  { 788,	4,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120,0,0 },  // Inst #788 = VNMSUBFP
  { 789,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #789 = VNOR
  { 790,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #790 = VOR
  { 791,	4,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120,0,0 },  // Inst #791 = VPERM
  { 792,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #792 = VPKPX
  { 793,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #793 = VPKSHSS
  { 794,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #794 = VPKSHUS
  { 795,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #795 = VPKSWSS
  { 796,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #796 = VPKSWUS
  { 797,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #797 = VPKUHUM
  { 798,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #798 = VPKUHUS
  { 799,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #799 = VPKUWUM
  { 800,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #800 = VPKUWUS
  { 801,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #801 = VREFP
  { 802,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #802 = VRFIM
  { 803,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #803 = VRFIN
  { 804,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #804 = VRFIP
  { 805,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #805 = VRFIZ
  { 806,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #806 = VRLB
  { 807,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #807 = VRLH
  { 808,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #808 = VRLW
  { 809,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #809 = VRSQRTEFP
  { 810,	4,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo120,0,0 },  // Inst #810 = VSEL
  { 811,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #811 = VSL
  { 812,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #812 = VSLB
  { 813,	4,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo121,0,0 },  // Inst #813 = VSLDOI
  { 814,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #814 = VSLH
  { 815,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #815 = VSLO
  { 816,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #816 = VSLW
  { 817,	3,	1,	70,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118,0,0 },  // Inst #817 = VSPLTB
  { 818,	3,	1,	70,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118,0,0 },  // Inst #818 = VSPLTH
  { 819,	2,	1,	70,	0,	0, 0x28ULL, NULL, NULL, OperandInfo122,0,0 },  // Inst #819 = VSPLTISB
  { 820,	2,	1,	70,	0,	0, 0x28ULL, NULL, NULL, OperandInfo122,0,0 },  // Inst #820 = VSPLTISH
  { 821,	2,	1,	70,	0,	0, 0x28ULL, NULL, NULL, OperandInfo122,0,0 },  // Inst #821 = VSPLTISW
  { 822,	3,	1,	70,	0,	0, 0x28ULL, NULL, NULL, OperandInfo118,0,0 },  // Inst #822 = VSPLTW
  { 823,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #823 = VSR
  { 824,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #824 = VSRAB
  { 825,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #825 = VSRAH
  { 826,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #826 = VSRAW
  { 827,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #827 = VSRB
  { 828,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #828 = VSRH
  { 829,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #829 = VSRO
  { 830,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #830 = VSRW
  { 831,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #831 = VSUBCUW
  { 832,	3,	1,	68,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #832 = VSUBFP
  { 833,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #833 = VSUBSBS
  { 834,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #834 = VSUBSHS
  { 835,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #835 = VSUBSWS
  { 836,	3,	1,	68,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #836 = VSUBUBM
  { 837,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #837 = VSUBUBS
  { 838,	3,	1,	68,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #838 = VSUBUHM
  { 839,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #839 = VSUBUHS
  { 840,	3,	1,	68,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #840 = VSUBUWM
  { 841,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #841 = VSUBUWS
  { 842,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #842 = VSUM2SWS
  { 843,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #843 = VSUM4SBS
  { 844,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #844 = VSUM4SHS
  { 845,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #845 = VSUM4UBS
  { 846,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #846 = VSUMSWS
  { 847,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #847 = VUPKHPX
  { 848,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #848 = VUPKHSB
  { 849,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #849 = VUPKHSH
  { 850,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #850 = VUPKLPX
  { 851,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #851 = VUPKLSB
  { 852,	2,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo119,0,0 },  // Inst #852 = VUPKLSH
  { 853,	3,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo117,0,0 },  // Inst #853 = VXOR
  { 854,	1,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo80,0,0 },  // Inst #854 = V_SET0
  { 855,	1,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo80,0,0 },  // Inst #855 = V_SET0B
  { 856,	1,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo80,0,0 },  // Inst #856 = V_SET0H
  { 857,	1,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo80,0,0 },  // Inst #857 = V_SETALLONES
  { 858,	1,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo80,0,0 },  // Inst #858 = V_SETALLONESB
  { 859,	1,	1,	67,	0,	0, 0x28ULL, NULL, NULL, OperandInfo80,0,0 },  // Inst #859 = V_SETALLONESH
  { 860,	1,	0,	9,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, NULL, NULL, OperandInfo2,0,0 },  // Inst #860 = WAIT
  { 861,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo10,0,0 },  // Inst #861 = XOR
  { 862,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo11,0,0 },  // Inst #862 = XOR8
  { 863,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo11,0,0 },  // Inst #863 = XOR8o
  { 864,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #864 = XORI
  { 865,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #865 = XORI8
  { 866,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo15,0,0 },  // Inst #866 = XORIS
  { 867,	3,	1,	1,	0,	0, 0x8ULL, NULL, NULL, OperandInfo12,0,0 },  // Inst #867 = XORIS8
  { 868,	3,	1,	1,	0,	0, 0x8ULL, NULL, ImplicitList1, OperandInfo10,0,0 },  // Inst #868 = XORo
  { 869,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo123,0,0 },  // Inst #869 = gBC
  { 870,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList7, OperandInfo123,0,0 },  // Inst #870 = gBCA
  { 871,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, OperandInfo124,0,0 },  // Inst #871 = gBCCTR
  { 872,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList19, OperandInfo124,0,0 },  // Inst #872 = gBCCTRL
  { 873,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList19, OperandInfo123,0,0 },  // Inst #873 = gBCL
  { 874,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList19, OperandInfo123,0,0 },  // Inst #874 = gBCLA
  { 875,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList7, OperandInfo124,0,0 },  // Inst #875 = gBCLR
  { 876,	3,	0,	3,	0,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList19, OperandInfo124,0,0 },  // Inst #876 = gBCLRL
};

extern const char PPCInstrNameData[] = {
  /* 0 */ 'M', 'T', 'F', 'S', 'B', '0', 0,
  /* 7 */ 'V', '_', 'S', 'E', 'T', '0', 0,
  /* 14 */ 'V', 'C', 'T', 'S', 'X', 'S', '_', '0', 0,
  /* 23 */ 'V', 'C', 'T', 'U', 'X', 'S', '_', '0', 0,
  /* 32 */ 'V', 'C', 'F', 'S', 'X', '_', '0', 0,
  /* 40 */ 'V', 'C', 'F', 'U', 'X', '_', '0', 0,
  /* 48 */ 'M', 'T', 'F', 'S', 'B', '1', 0,
  /* 55 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 75 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 95 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 116 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 136 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 152 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 172 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 192 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 211 */ 'L', 'W', 'A', '_', '3', '2', 0,
  /* 218 */ 'L', 'W', 'A', 'X', '_', '3', '2', 0,
  /* 226 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'L', 'o', 'n', 'g', 'J', 'm', 'p', '3', '2', 0,
  /* 244 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'J', 'm', 'p', '3', '2', 0,
  /* 261 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 281 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 301 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 322 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 342 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 358 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 378 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 398 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 417 */ 'D', 'S', 'T', '6', '4', 0,
  /* 423 */ 'D', 'S', 'T', 'S', 'T', '6', '4', 0,
  /* 431 */ 'D', 'S', 'T', 'T', '6', '4', 0,
  /* 438 */ 'D', 'S', 'T', 'S', 'T', 'T', '6', '4', 0,
  /* 447 */ 'E', 'X', 'T', 'S', 'B', '8', '_', '3', '2', '_', '6', '4', 0,
  /* 460 */ 'E', 'X', 'T', 'S', 'H', '8', '_', '3', '2', '_', '6', '4', 0,
  /* 473 */ 'R', 'L', 'D', 'I', 'C', 'L', '_', '3', '2', '_', '6', '4', 0,
  /* 486 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', '_', '6', '4', 0,
  /* 498 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'L', 'o', 'n', 'g', 'J', 'm', 'p', '6', '4', 0,
  /* 516 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'J', 'm', 'p', '6', '4', 0,
  /* 533 */ 'A', 'D', 'D', '4', 0,
  /* 538 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 551 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 564 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 584 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 604 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 625 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 645 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 661 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 681 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 701 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 720 */ 'T', 'A', 'I', 'L', 'B', 'A', '8', 0,
  /* 728 */ 'L', 'H', 'A', '8', 0,
  /* 733 */ 'B', 'L', 'A', '8', 0,
  /* 738 */ 'T', 'A', 'I', 'L', 'B', '8', 0,
  /* 745 */ 'E', 'X', 'T', 'S', 'B', '8', 0,
  /* 752 */ 'M', 'F', 'T', 'B', '8', 0,
  /* 758 */ 'S', 'T', 'B', '8', 0,
  /* 763 */ 'A', 'D', 'D', 'C', '8', 0,
  /* 769 */ 'A', 'N', 'D', 'C', '8', 0,
  /* 775 */ 'S', 'U', 'B', 'F', 'C', '8', 0,
  /* 782 */ 'A', 'D', 'D', 'I', 'C', '8', 0,
  /* 789 */ 'S', 'U', 'B', 'F', 'I', 'C', '8', 0,
  /* 797 */ 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 807 */ 'O', 'R', 'C', '8', 0,
  /* 812 */ 'A', 'D', 'D', '8', 0,
  /* 817 */ 'N', 'A', 'N', 'D', '8', 0,
  /* 823 */ 'A', 'D', 'D', 'E', '8', 0,
  /* 829 */ 'S', 'U', 'B', 'F', 'E', '8', 0,
  /* 836 */ 'A', 'D', 'D', 'M', 'E', '8', 0,
  /* 843 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 0,
  /* 851 */ 'A', 'D', 'D', 'Z', 'E', '8', 0,
  /* 858 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 0,
  /* 866 */ 'S', 'U', 'B', 'F', '8', 0,
  /* 872 */ 'M', 'F', 'O', 'C', 'R', 'F', '8', 0,
  /* 880 */ 'M', 'T', 'O', 'C', 'R', 'F', '8', 0,
  /* 888 */ 'M', 'T', 'C', 'R', 'F', '8', 0,
  /* 895 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 908 */ 'N', 'E', 'G', '8', 0,
  /* 913 */ 'E', 'X', 'T', 'S', 'H', '8', 0,
  /* 920 */ 'S', 'T', 'H', '8', 0,
  /* 925 */ 'A', 'D', 'D', 'I', '8', 0,
  /* 931 */ 'M', 'U', 'L', 'L', 'I', '8', 0,
  /* 938 */ 'X', 'O', 'R', 'I', '8', 0,
  /* 944 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 963 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 976 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 995 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 1015 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 1034 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 1049 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 1068 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 1087 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 1105 */ 'B', 'L', '8', 0,
  /* 1109 */ 'I', 'S', 'E', 'L', '8', 0,
  /* 1115 */ 'B', 'C', 'T', 'R', 'L', '8', 0,
  /* 1122 */ 'B', 'C', 'C', 'T', 'R', 'L', '8', 0,
  /* 1130 */ 'R', 'L', 'W', 'I', 'N', 'M', '8', 0,
  /* 1138 */ 'M', 'F', 'C', 'R', '8', 0,
  /* 1144 */ 'M', 'F', 'L', 'R', '8', 0,
  /* 1150 */ 'M', 'T', 'L', 'R', '8', 0,
  /* 1156 */ 'B', 'D', 'Z', 'L', 'R', '8', 0,
  /* 1163 */ 'B', 'D', 'N', 'Z', 'L', 'R', '8', 0,
  /* 1171 */ 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 1183 */ 'N', 'O', 'R', '8', 0,
  /* 1188 */ 'X', 'O', 'R', '8', 0,
  /* 1193 */ 'T', 'A', 'I', 'L', 'B', 'C', 'T', 'R', '8', 0,
  /* 1203 */ 'B', 'C', 'C', 'T', 'R', '8', 0,
  /* 1210 */ 'M', 'F', 'C', 'T', 'R', '8', 0,
  /* 1217 */ 'M', 'T', 'C', 'T', 'R', '8', 0,
  /* 1224 */ 'A', 'D', 'D', 'I', 'S', '8', 0,
  /* 1231 */ 'L', 'I', 'S', '8', 0,
  /* 1236 */ 'X', 'O', 'R', 'I', 'S', '8', 0,
  /* 1243 */ 'L', 'H', 'A', 'U', '8', 0,
  /* 1249 */ 'S', 'T', 'B', 'U', '8', 0,
  /* 1255 */ 'S', 'T', 'H', 'U', '8', 0,
  /* 1261 */ 'S', 'T', 'W', 'U', '8', 0,
  /* 1267 */ 'L', 'B', 'Z', 'U', '8', 0,
  /* 1273 */ 'L', 'H', 'Z', 'U', '8', 0,
  /* 1279 */ 'L', 'W', 'Z', 'U', '8', 0,
  /* 1285 */ 'E', 'Q', 'V', '8', 0,
  /* 1290 */ 'S', 'T', 'W', '8', 0,
  /* 1295 */ 'L', 'H', 'A', 'X', '8', 0,
  /* 1301 */ 'S', 'T', 'B', 'X', '8', 0,
  /* 1307 */ 'S', 'T', 'H', 'X', '8', 0,
  /* 1313 */ 'L', 'H', 'A', 'U', 'X', '8', 0,
  /* 1320 */ 'S', 'T', 'B', 'U', 'X', '8', 0,
  /* 1327 */ 'S', 'T', 'H', 'U', 'X', '8', 0,
  /* 1334 */ 'S', 'T', 'W', 'U', 'X', '8', 0,
  /* 1341 */ 'L', 'B', 'Z', 'U', 'X', '8', 0,
  /* 1348 */ 'L', 'H', 'Z', 'U', 'X', '8', 0,
  /* 1355 */ 'L', 'W', 'Z', 'U', 'X', '8', 0,
  /* 1362 */ 'S', 'T', 'W', 'X', '8', 0,
  /* 1368 */ 'L', 'B', 'Z', 'X', '8', 0,
  /* 1374 */ 'L', 'H', 'Z', 'X', '8', 0,
  /* 1380 */ 'L', 'W', 'Z', 'X', '8', 0,
  /* 1386 */ 'L', 'B', 'Z', '8', 0,
  /* 1391 */ 'B', 'D', 'Z', '8', 0,
  /* 1396 */ 'L', 'H', 'Z', '8', 0,
  /* 1401 */ 'B', 'D', 'N', 'Z', '8', 0,
  /* 1407 */ 'L', 'W', 'Z', '8', 0,
  /* 1412 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 'i', '8', 0,
  /* 1424 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 'i', '8', 0,
  /* 1436 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 'i', '8', 0,
  /* 1448 */ 'A', 'N', 'D', 'I', 'o', '8', 0,
  /* 1455 */ 'A', 'N', 'D', 'I', 'S', 'o', '8', 0,
  /* 1463 */ 'D', 'C', 'B', 'A', 0,
  /* 1468 */ 'T', 'A', 'I', 'L', 'B', 'A', 0,
  /* 1475 */ 'g', 'B', 'C', 'A', 0,
  /* 1480 */ 'B', 'C', 'C', 'A', 0,
  /* 1485 */ 'L', 'H', 'A', 0,
  /* 1489 */ 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 1500 */ 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 1513 */ 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 1526 */ 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 1542 */ 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 1556 */ 'S', 'L', 'B', 'I', 'A', 0,
  /* 1562 */ 'B', 'L', 'A', 0,
  /* 1566 */ 'g', 'B', 'C', 'L', 'A', 0,
  /* 1572 */ 'B', 'C', 'C', 'L', 'A', 0,
  /* 1578 */ 'B', 'D', 'Z', 'L', 'A', 0,
  /* 1584 */ 'B', 'D', 'N', 'Z', 'L', 'A', 0,
  /* 1591 */ 'L', 'W', 'A', 0,
  /* 1595 */ 'B', 'D', 'Z', 'A', 0,
  /* 1600 */ 'B', 'D', 'N', 'Z', 'A', 0,
  /* 1606 */ 'V', '_', 'S', 'E', 'T', '0', 'B', 0,
  /* 1614 */ 'V', 'S', 'R', 'A', 'B', 0,
  /* 1620 */ 'V', 'M', 'R', 'G', 'H', 'B', 0,
  /* 1627 */ 'V', 'M', 'R', 'G', 'L', 'B', 0,
  /* 1634 */ 'T', 'A', 'I', 'L', 'B', 0,
  /* 1640 */ 'V', 'R', 'L', 'B', 0,
  /* 1645 */ 'V', 'S', 'L', 'B', 0,
  /* 1650 */ 'V', 'S', 'R', 'B', 0,
  /* 1655 */ 'V', 'M', 'U', 'L', 'E', 'S', 'B', 0,
  /* 1663 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 'B', 0,
  /* 1677 */ 'V', 'A', 'V', 'G', 'S', 'B', 0,
  /* 1684 */ 'V', 'U', 'P', 'K', 'H', 'S', 'B', 0,
  /* 1692 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'B', 0,
  /* 1701 */ 'V', 'U', 'P', 'K', 'L', 'S', 'B', 0,
  /* 1709 */ 'V', 'M', 'I', 'N', 'S', 'B', 0,
  /* 1716 */ 'V', 'M', 'U', 'L', 'O', 'S', 'B', 0,
  /* 1724 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'B', 0,
  /* 1733 */ 'E', 'X', 'T', 'S', 'B', 0,
  /* 1739 */ 'V', 'M', 'A', 'X', 'S', 'B', 0,
  /* 1746 */ 'M', 'F', 'T', 'B', 0,
  /* 1751 */ 'V', 'S', 'P', 'L', 'T', 'B', 0,
  /* 1758 */ 'S', 'T', 'B', 0,
  /* 1762 */ 'V', 'M', 'U', 'L', 'E', 'U', 'B', 0,
  /* 1770 */ 'V', 'A', 'V', 'G', 'U', 'B', 0,
  /* 1777 */ 'V', 'M', 'I', 'N', 'U', 'B', 0,
  /* 1784 */ 'V', 'M', 'U', 'L', 'O', 'U', 'B', 0,
  /* 1792 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'B', 0,
  /* 1801 */ 'F', 'S', 'U', 'B', 0,
  /* 1806 */ 'F', 'M', 'S', 'U', 'B', 0,
  /* 1812 */ 'F', 'N', 'M', 'S', 'U', 'B', 0,
  /* 1819 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'B', 0,
  /* 1828 */ 'V', 'M', 'A', 'X', 'U', 'B', 0,
  /* 1835 */ 'g', 'B', 'C', 0,
  /* 1839 */ 'B', 'C', 'C', 0,
  /* 1843 */ 'A', 'D', 'D', 'C', 0,
  /* 1848 */ 'C', 'R', 'A', 'N', 'D', 'C', 0,
  /* 1855 */ 'V', 'A', 'N', 'D', 'C', 0,
  /* 1861 */ 'S', 'U', 'B', 'F', 'C', 0,
  /* 1867 */ 'S', 'U', 'B', 'I', 'C', 0,
  /* 1873 */ 'A', 'D', 'D', 'I', 'C', 0,
  /* 1879 */ 'R', 'L', 'D', 'I', 'C', 0,
  /* 1885 */ 'S', 'U', 'B', 'F', 'I', 'C', 0,
  /* 1892 */ 'T', 'L', 'B', 'S', 'Y', 'N', 'C', 0,
  /* 1900 */ 'I', 'S', 'Y', 'N', 'C', 0,
  /* 1906 */ 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 1915 */ 'C', 'R', 'O', 'R', 'C', 0,
  /* 1921 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 1936 */ 'S', 'C', 0,
  /* 1939 */ 'S', 'R', 'A', 'D', 0,
  /* 1944 */ 'F', 'A', 'D', 'D', 0,
  /* 1949 */ 'F', 'M', 'A', 'D', 'D', 0,
  /* 1955 */ 'F', 'N', 'M', 'A', 'D', 'D', 0,
  /* 1962 */ 'L', 'F', 'D', 0,
  /* 1966 */ 'S', 'T', 'F', 'D', 0,
  /* 1971 */ 'F', 'N', 'E', 'G', 'D', 0,
  /* 1977 */ 'M', 'U', 'L', 'H', 'D', 0,
  /* 1983 */ 'F', 'C', 'F', 'I', 'D', 0,
  /* 1989 */ 'F', 'C', 'T', 'I', 'D', 0,
  /* 1995 */ 'F', 'S', 'E', 'L', 'D', 0,
  /* 2001 */ 'M', 'U', 'L', 'L', 'D', 0,
  /* 2007 */ 'C', 'M', 'P', 'L', 'D', 0,
  /* 2013 */ 'S', 'L', 'D', 0,
  /* 2017 */ 'F', 'R', 'I', 'M', 'D', 0,
  /* 2023 */ 'C', 'R', 'N', 'A', 'N', 'D', 0,
  /* 2030 */ 'C', 'R', 'A', 'N', 'D', 0,
  /* 2036 */ 'V', 'A', 'N', 'D', 0,
  /* 2041 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 2054 */ 'F', 'C', 'P', 'S', 'G', 'N', 'D', 0,
  /* 2062 */ 'F', 'R', 'I', 'N', 'D', 0,
  /* 2068 */ 'F', 'R', 'I', 'P', 'D', 0,
  /* 2074 */ 'C', 'M', 'P', 'D', 0,
  /* 2079 */ 'M', 'T', 'M', 'S', 'R', 'D', 0,
  /* 2086 */ 'F', 'A', 'B', 'S', 'D', 0,
  /* 2092 */ 'F', 'N', 'A', 'B', 'S', 'D', 0,
  /* 2099 */ 'P', 'O', 'P', 'C', 'N', 'T', 'D', 0,
  /* 2107 */ 'S', 'T', 'D', 0,
  /* 2111 */ 'F', 'C', 'M', 'P', 'U', 'D', 0,
  /* 2118 */ 'D', 'I', 'V', 'D', 0,
  /* 2123 */ 'F', 'R', 'I', 'Z', 'D', 0,
  /* 2129 */ 'C', 'N', 'T', 'L', 'Z', 'D', 0,
  /* 2136 */ 'R', 'E', 'G', '_', 'S', 'E', 'Q', 'U', 'E', 'N', 'C', 'E', 0,
  /* 2149 */ 'A', 'D', 'D', 'E', 0,
  /* 2154 */ 'S', 'L', 'B', 'M', 'F', 'E', 'E', 0,
  /* 2162 */ 'S', 'U', 'B', 'F', 'E', 0,
  /* 2168 */ 'S', 'L', 'B', 'I', 'E', 0,
  /* 2174 */ 'T', 'L', 'B', 'I', 'E', 0,
  /* 2180 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 2187 */ 'A', 'D', 'D', 'M', 'E', 0,
  /* 2193 */ 'S', 'U', 'B', 'F', 'M', 'E', 0,
  /* 2200 */ 'F', 'R', 'E', 0,
  /* 2204 */ 'S', 'L', 'B', 'M', 'T', 'E', 0,
  /* 2211 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 0,
  /* 2219 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 2229 */ 'M', 'F', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2238 */ 'M', 'T', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2247 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2262 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2276 */ 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2289 */ 'A', 'D', 'D', 'Z', 'E', 0,
  /* 2295 */ 'S', 'U', 'B', 'F', 'Z', 'E', 0,
  /* 2302 */ 'D', 'C', 'B', 'F', 0,
  /* 2307 */ 'S', 'U', 'B', 'F', 0,
  /* 2312 */ 'I', 'M', 'P', 'L', 'I', 'C', 'I', 'T', '_', 'D', 'E', 'F', 0,
  /* 2325 */ 'M', 'C', 'R', 'F', 0,
  /* 2330 */ 'M', 'F', 'O', 'C', 'R', 'F', 0,
  /* 2337 */ 'M', 'T', 'O', 'C', 'R', 'F', 0,
  /* 2344 */ 'M', 'T', 'C', 'R', 'F', 0,
  /* 2350 */ 'M', 'T', 'F', 'S', 'F', 0,
  /* 2356 */ 'N', 'E', 'G', 0,
  /* 2360 */ 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 2375 */ 'I', 'N', 'S', 'E', 'R', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 2389 */ 'S', 'U', 'B', 'R', 'E', 'G', '_', 'T', 'O', '_', 'R', 'E', 'G', 0,
  /* 2403 */ 'V', '_', 'S', 'E', 'T', '0', 'H', 0,
  /* 2411 */ 'V', 'S', 'R', 'A', 'H', 0,
  /* 2417 */ 'V', 'M', 'R', 'G', 'H', 'H', 0,
  /* 2424 */ 'V', 'M', 'R', 'G', 'L', 'H', 0,
  /* 2431 */ 'V', 'R', 'L', 'H', 0,
  /* 2436 */ 'V', 'S', 'L', 'H', 0,
  /* 2441 */ 'V', 'S', 'R', 'H', 0,
  /* 2446 */ 'V', 'M', 'U', 'L', 'E', 'S', 'H', 0,
  /* 2454 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 'H', 0,
  /* 2468 */ 'V', 'A', 'V', 'G', 'S', 'H', 0,
  /* 2475 */ 'V', 'U', 'P', 'K', 'H', 'S', 'H', 0,
  /* 2483 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'H', 0,
  /* 2492 */ 'V', 'U', 'P', 'K', 'L', 'S', 'H', 0,
  /* 2500 */ 'V', 'M', 'I', 'N', 'S', 'H', 0,
  /* 2507 */ 'V', 'M', 'U', 'L', 'O', 'S', 'H', 0,
  /* 2515 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'H', 0,
  /* 2524 */ 'E', 'X', 'T', 'S', 'H', 0,
  /* 2530 */ 'V', 'M', 'A', 'X', 'S', 'H', 0,
  /* 2537 */ 'V', 'S', 'P', 'L', 'T', 'H', 0,
  /* 2544 */ 'S', 'T', 'H', 0,
  /* 2548 */ 'V', 'M', 'U', 'L', 'E', 'U', 'H', 0,
  /* 2556 */ 'V', 'A', 'V', 'G', 'U', 'H', 0,
  /* 2563 */ 'V', 'M', 'I', 'N', 'U', 'H', 0,
  /* 2570 */ 'V', 'M', 'U', 'L', 'O', 'U', 'H', 0,
  /* 2578 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'H', 0,
  /* 2587 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'H', 0,
  /* 2596 */ 'V', 'M', 'A', 'X', 'U', 'H', 0,
  /* 2603 */ 'D', 'C', 'B', 'I', 0,
  /* 2608 */ 'I', 'C', 'B', 'I', 0,
  /* 2613 */ 'S', 'U', 'B', 'I', 0,
  /* 2618 */ 'S', 'R', 'A', 'D', 'I', 0,
  /* 2624 */ 'A', 'D', 'D', 'I', 0,
  /* 2629 */ 'C', 'M', 'P', 'L', 'D', 'I', 0,
  /* 2636 */ 'C', 'L', 'R', 'L', 'S', 'L', 'D', 'I', 0,
  /* 2645 */ 'E', 'X', 'T', 'L', 'D', 'I', 0,
  /* 2652 */ 'C', 'M', 'P', 'D', 'I', 0,
  /* 2658 */ 'C', 'L', 'R', 'R', 'D', 'I', 0,
  /* 2665 */ 'I', 'N', 'S', 'R', 'D', 'I', 0,
  /* 2672 */ 'R', 'O', 'T', 'R', 'D', 'I', 0,
  /* 2679 */ 'E', 'X', 'T', 'R', 'D', 'I', 0,
  /* 2686 */ 'T', 'D', 'I', 0,
  /* 2690 */ 'P', 'H', 'I', 0,
  /* 2694 */ 'M', 'U', 'L', 'L', 'I', 0,
  /* 2700 */ 'R', 'L', 'D', 'I', 'M', 'I', 0,
  /* 2707 */ 'R', 'L', 'W', 'I', 'M', 'I', 0,
  /* 2714 */ 'V', 'S', 'L', 'D', 'O', 'I', 0,
  /* 2721 */ 'X', 'O', 'R', 'I', 0,
  /* 2726 */ 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 2735 */ 'S', 'R', 'A', 'W', 'I', 0,
  /* 2741 */ 'C', 'M', 'P', 'L', 'W', 'I', 0,
  /* 2748 */ 'C', 'L', 'R', 'L', 'S', 'L', 'W', 'I', 0,
  /* 2757 */ 'I', 'N', 'S', 'L', 'W', 'I', 0,
  /* 2764 */ 'E', 'X', 'T', 'L', 'W', 'I', 0,
  /* 2771 */ 'C', 'M', 'P', 'W', 'I', 0,
  /* 2777 */ 'C', 'L', 'R', 'R', 'W', 'I', 0,
  /* 2784 */ 'I', 'N', 'S', 'R', 'W', 'I', 0,
  /* 2791 */ 'R', 'O', 'T', 'R', 'W', 'I', 0,
  /* 2798 */ 'E', 'X', 'T', 'R', 'W', 'I', 0,
  /* 2805 */ 'T', 'W', 'I', 0,
  /* 2809 */ 'B', 'L', 0,
  /* 2812 */ 'g', 'B', 'C', 'L', 0,
  /* 2817 */ 'B', 'C', 'C', 'L', 0,
  /* 2822 */ 'R', 'L', 'D', 'C', 'L', 0,
  /* 2828 */ 'R', 'L', 'D', 'I', 'C', 'L', 0,
  /* 2835 */ 'G', 'C', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 2844 */ 'P', 'R', 'O', 'L', 'O', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 2857 */ 'E', 'H', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 2866 */ 'T', 'L', 'B', 'I', 'E', 'L', 0,
  /* 2873 */ 'I', 'S', 'E', 'L', 0,
  /* 2878 */ 'V', 'S', 'E', 'L', 0,
  /* 2883 */ 'D', 'S', 'S', 'A', 'L', 'L', 0,
  /* 2890 */ 'K', 'I', 'L', 'L', 0,
  /* 2895 */ 'B', 'L', 'R', 'L', 0,
  /* 2900 */ 'g', 'B', 'C', 'L', 'R', 'L', 0,
  /* 2907 */ 'B', 'D', 'Z', 'L', 'R', 'L', 0,
  /* 2914 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 0,
  /* 2922 */ 'B', 'C', 'T', 'R', 'L', 0,
  /* 2928 */ 'g', 'B', 'C', 'C', 'T', 'R', 'L', 0,
  /* 2936 */ 'L', 'V', 'S', 'L', 0,
  /* 2941 */ 'F', 'M', 'U', 'L', 0,
  /* 2946 */ 'L', 'V', 'X', 'L', 0,
  /* 2951 */ 'S', 'T', 'V', 'X', 'L', 0,
  /* 2957 */ 'D', 'C', 'B', 'Z', 'L', 0,
  /* 2963 */ 'B', 'D', 'Z', 'L', 0,
  /* 2968 */ 'B', 'D', 'N', 'Z', 'L', 0,
  /* 2974 */ 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 2981 */ 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 2990 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 3001 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 3012 */ 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 3024 */ 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 3036 */ 'V', 'M', 'S', 'U', 'M', 'M', 'B', 'M', 0,
  /* 3045 */ 'V', 'S', 'U', 'B', 'U', 'B', 'M', 0,
  /* 3053 */ 'V', 'A', 'D', 'D', 'U', 'B', 'M', 0,
  /* 3061 */ 'V', 'M', 'S', 'U', 'M', 'U', 'B', 'M', 0,
  /* 3070 */ 'V', 'M', 'S', 'U', 'M', 'S', 'H', 'M', 0,
  /* 3079 */ 'V', 'S', 'U', 'B', 'U', 'H', 'M', 0,
  /* 3087 */ 'V', 'M', 'L', 'A', 'D', 'D', 'U', 'H', 'M', 0,
  /* 3097 */ 'V', 'A', 'D', 'D', 'U', 'H', 'M', 0,
  /* 3105 */ 'V', 'M', 'S', 'U', 'M', 'U', 'H', 'M', 0,
  /* 3114 */ 'V', 'R', 'F', 'I', 'M', 0,
  /* 3120 */ 'R', 'L', 'W', 'I', 'N', 'M', 0,
  /* 3127 */ 'R', 'L', 'W', 'N', 'M', 0,
  /* 3133 */ 'V', 'P', 'E', 'R', 'M', 0,
  /* 3139 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', 0,
  /* 3149 */ 'V', 'P', 'K', 'U', 'H', 'U', 'M', 0,
  /* 3157 */ 'V', 'P', 'K', 'U', 'W', 'U', 'M', 0,
  /* 3165 */ 'V', 'S', 'U', 'B', 'U', 'W', 'M', 0,
  /* 3173 */ 'V', 'A', 'D', 'D', 'U', 'W', 'M', 0,
  /* 3181 */ 'V', 'R', 'F', 'I', 'N', 0,
  /* 3187 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 0,
  /* 3204 */ 'E', 'I', 'E', 'I', 'O', 0,
  /* 3210 */ 'V', 'S', 'L', 'O', 0,
  /* 3215 */ 'V', 'S', 'R', 'O', 0,
  /* 3220 */ 'S', 'T', 'A', 'C', 'K', 'M', 'A', 'P', 0,
  /* 3229 */ 'T', 'R', 'A', 'P', 0,
  /* 3234 */ 'V', 'C', 'M', 'P', 'B', 'F', 'P', 0,
  /* 3242 */ 'V', 'N', 'M', 'S', 'U', 'B', 'F', 'P', 0,
  /* 3251 */ 'V', 'S', 'U', 'B', 'F', 'P', 0,
  /* 3258 */ 'V', 'M', 'A', 'D', 'D', 'F', 'P', 0,
  /* 3266 */ 'V', 'A', 'D', 'D', 'F', 'P', 0,
  /* 3273 */ 'V', 'L', 'O', 'G', 'E', 'F', 'P', 0,
  /* 3281 */ 'V', 'C', 'M', 'P', 'G', 'E', 'F', 'P', 0,
  /* 3290 */ 'V', 'R', 'E', 'F', 'P', 0,
  /* 3296 */ 'V', 'E', 'X', 'P', 'T', 'E', 'F', 'P', 0,
  /* 3305 */ 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'F', 'P', 0,
  /* 3315 */ 'V', 'M', 'I', 'N', 'F', 'P', 0,
  /* 3322 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'F', 'P', 0,
  /* 3331 */ 'V', 'C', 'M', 'P', 'G', 'T', 'F', 'P', 0,
  /* 3340 */ 'V', 'M', 'A', 'X', 'F', 'P', 0,
  /* 3347 */ 'V', 'R', 'F', 'I', 'P', 0,
  /* 3353 */ 'B', 'L', 'A', '8', '_', 'N', 'O', 'P', 0,
  /* 3362 */ 'B', 'L', '8', '_', 'N', 'O', 'P', 0,
  /* 3370 */ 'F', 'R', 'S', 'P', 0,
  /* 3375 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 0,
  /* 3390 */ 'R', 'L', 'D', 'C', 'R', 0,
  /* 3396 */ 'M', 'F', 'C', 'R', 0,
  /* 3401 */ 'R', 'L', 'D', 'I', 'C', 'R', 0,
  /* 3408 */ 'M', 'F', 'V', 'S', 'C', 'R', 0,
  /* 3415 */ 'M', 'T', 'V', 'S', 'C', 'R', 0,
  /* 3422 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 3433 */ 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 3442 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 3455 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 3466 */ 'B', 'L', 'R', 0,
  /* 3470 */ 'g', 'B', 'C', 'L', 'R', 0,
  /* 3476 */ 'M', 'F', 'L', 'R', 0,
  /* 3481 */ 'M', 'T', 'L', 'R', 0,
  /* 3486 */ 'B', 'D', 'Z', 'L', 'R', 0,
  /* 3492 */ 'B', 'D', 'N', 'Z', 'L', 'R', 0,
  /* 3499 */ 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 3510 */ 'F', 'M', 'R', 0,
  /* 3514 */ 'C', 'R', 'N', 'O', 'R', 0,
  /* 3520 */ 'V', 'N', 'O', 'R', 0,
  /* 3525 */ 'C', 'R', 'O', 'R', 0,
  /* 3530 */ 'V', 'O', 'R', 0,
  /* 3534 */ 'C', 'R', 'X', 'O', 'R', 0,
  /* 3540 */ 'V', 'X', 'O', 'R', 0,
  /* 3545 */ 'M', 'F', 'S', 'P', 'R', 0,
  /* 3551 */ 'M', 'T', 'S', 'P', 'R', 0,
  /* 3557 */ 'M', 'F', 'M', 'S', 'R', 0,
  /* 3563 */ 'M', 'T', 'M', 'S', 'R', 0,
  /* 3569 */ 'L', 'V', 'S', 'R', 0,
  /* 3574 */ 'T', 'A', 'I', 'L', 'B', 'C', 'T', 'R', 0,
  /* 3583 */ 'g', 'B', 'C', 'C', 'T', 'R', 0,
  /* 3590 */ 'M', 'F', 'C', 'T', 'R', 0,
  /* 3596 */ 'M', 'T', 'C', 'T', 'R', 0,
  /* 3602 */ 'V', 'S', 'U', 'M', '4', 'S', 'B', 'S', 0,
  /* 3611 */ 'V', 'S', 'U', 'B', 'S', 'B', 'S', 0,
  /* 3619 */ 'V', 'A', 'D', 'D', 'S', 'B', 'S', 0,
  /* 3627 */ 'V', 'S', 'U', 'M', '4', 'U', 'B', 'S', 0,
  /* 3636 */ 'V', 'S', 'U', 'B', 'U', 'B', 'S', 0,
  /* 3644 */ 'V', 'A', 'D', 'D', 'U', 'B', 'S', 0,
  /* 3652 */ 'F', 'S', 'U', 'B', 'S', 0,
  /* 3658 */ 'F', 'M', 'S', 'U', 'B', 'S', 0,
  /* 3665 */ 'F', 'N', 'M', 'S', 'U', 'B', 'S', 0,
  /* 3673 */ 'F', 'A', 'D', 'D', 'S', 0,
  /* 3679 */ 'F', 'M', 'A', 'D', 'D', 'S', 0,
  /* 3686 */ 'F', 'N', 'M', 'A', 'D', 'D', 'S', 0,
  /* 3694 */ 'F', 'C', 'F', 'I', 'D', 'S', 0,
  /* 3701 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 0,
  /* 3714 */ 'F', 'R', 'E', 'S', 0,
  /* 3719 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 0,
  /* 3728 */ 'M', 'F', 'F', 'S', 0,
  /* 3733 */ 'L', 'F', 'S', 0,
  /* 3737 */ 'S', 'T', 'F', 'S', 0,
  /* 3742 */ 'F', 'N', 'E', 'G', 'S', 0,
  /* 3748 */ 'V', 'S', 'U', 'M', '4', 'S', 'H', 'S', 0,
  /* 3757 */ 'V', 'S', 'U', 'B', 'S', 'H', 'S', 0,
  /* 3765 */ 'V', 'M', 'H', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 3775 */ 'V', 'M', 'H', 'R', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 3786 */ 'V', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 3794 */ 'V', 'M', 'S', 'U', 'M', 'S', 'H', 'S', 0,
  /* 3803 */ 'V', 'S', 'U', 'B', 'U', 'H', 'S', 0,
  /* 3811 */ 'V', 'A', 'D', 'D', 'U', 'H', 'S', 0,
  /* 3819 */ 'V', 'M', 'S', 'U', 'M', 'U', 'H', 'S', 0,
  /* 3828 */ 'S', 'U', 'B', 'I', 'S', 0,
  /* 3834 */ 'A', 'D', 'D', 'I', 'S', 0,
  /* 3840 */ 'L', 'I', 'S', 0,
  /* 3844 */ 'X', 'O', 'R', 'I', 'S', 0,
  /* 3850 */ 'F', 'S', 'E', 'L', 'S', 0,
  /* 3856 */ 'A', 'D', 'D', '8', 'T', 'L', 'S', 0,
  /* 3864 */ 'B', 'L', '8', '_', 'T', 'L', 'S', 0,
  /* 3872 */ 'B', 'L', '8', '_', 'N', 'O', 'P', '_', 'T', 'L', 'S', 0,
  /* 3884 */ 'F', 'M', 'U', 'L', 'S', 0,
  /* 3890 */ 'F', 'R', 'I', 'M', 'S', 0,
  /* 3896 */ 'F', 'C', 'P', 'S', 'G', 'N', 'S', 0,
  /* 3904 */ 'F', 'R', 'I', 'N', 'S', 0,
  /* 3910 */ 'F', 'R', 'I', 'P', 'S', 0,
  /* 3916 */ 'C', 'O', 'P', 'Y', '_', 'T', 'O', '_', 'R', 'E', 'G', 'C', 'L', 'A', 'S', 'S', 0,
  /* 3933 */ 'F', 'A', 'B', 'S', 'S', 0,
  /* 3939 */ 'F', 'N', 'A', 'B', 'S', 'S', 0,
  /* 3946 */ 'D', 'S', 'S', 0,
  /* 3950 */ 'V', 'P', 'K', 'S', 'H', 'S', 'S', 0,
  /* 3958 */ 'V', 'P', 'K', 'S', 'W', 'S', 'S', 0,
  /* 3966 */ 'F', 'S', 'Q', 'R', 'T', 'S', 0,
  /* 3973 */ 'F', 'C', 'F', 'I', 'D', 'U', 'S', 0,
  /* 3981 */ 'V', 'P', 'K', 'S', 'H', 'U', 'S', 0,
  /* 3989 */ 'V', 'P', 'K', 'U', 'H', 'U', 'S', 0,
  /* 3997 */ 'F', 'C', 'M', 'P', 'U', 'S', 0,
  /* 4004 */ 'V', 'P', 'K', 'S', 'W', 'U', 'S', 0,
  /* 4012 */ 'V', 'P', 'K', 'U', 'W', 'U', 'S', 0,
  /* 4020 */ 'F', 'D', 'I', 'V', 'S', 0,
  /* 4026 */ 'V', 'S', 'U', 'M', '2', 'S', 'W', 'S', 0,
  /* 4035 */ 'V', 'S', 'U', 'B', 'S', 'W', 'S', 0,
  /* 4043 */ 'V', 'A', 'D', 'D', 'S', 'W', 'S', 0,
  /* 4051 */ 'V', 'S', 'U', 'M', 'S', 'W', 'S', 0,
  /* 4059 */ 'V', 'S', 'U', 'B', 'U', 'W', 'S', 0,
  /* 4067 */ 'V', 'A', 'D', 'D', 'U', 'W', 'S', 0,
  /* 4075 */ 'V', 'C', 'T', 'S', 'X', 'S', 0,
  /* 4082 */ 'V', 'C', 'T', 'U', 'X', 'S', 0,
  /* 4089 */ 'F', 'R', 'I', 'Z', 'S', 0,
  /* 4095 */ 'D', 'C', 'B', 'T', 0,
  /* 4100 */ 'C', 'R', '6', 'S', 'E', 'T', 0,
  /* 4107 */ 'C', 'R', '6', 'U', 'N', 'S', 'E', 'T', 0,
  /* 4116 */ 'C', 'R', 'U', 'N', 'S', 'E', 'T', 0,
  /* 4124 */ 'C', 'R', 'S', 'E', 'T', 0,
  /* 4130 */ 'W', 'A', 'I', 'T', 0,
  /* 4135 */ 'P', 'A', 'T', 'C', 'H', 'P', 'O', 'I', 'N', 'T', 0,
  /* 4146 */ 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 4155 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 4170 */ 'F', 'S', 'Q', 'R', 'T', 0,
  /* 4176 */ 'D', 'C', 'B', 'S', 'T', 0,
  /* 4182 */ 'D', 'S', 'T', 0,
  /* 4186 */ 'D', 'C', 'B', 'T', 'S', 'T', 0,
  /* 4193 */ 'D', 'S', 'T', 'S', 'T', 0,
  /* 4199 */ 'D', 'S', 'T', 'T', 0,
  /* 4204 */ 'D', 'S', 'T', 'S', 'T', 'T', 0,
  /* 4211 */ 'L', 'H', 'A', 'U', 0,
  /* 4216 */ 'S', 'T', 'B', 'U', 0,
  /* 4221 */ 'L', 'F', 'D', 'U', 0,
  /* 4226 */ 'S', 'T', 'F', 'D', 'U', 0,
  /* 4232 */ 'M', 'U', 'L', 'H', 'D', 'U', 0,
  /* 4239 */ 'F', 'C', 'F', 'I', 'D', 'U', 0,
  /* 4246 */ 'L', 'D', 'U', 0,
  /* 4250 */ 'S', 'T', 'D', 'U', 0,
  /* 4255 */ 'D', 'I', 'V', 'D', 'U', 0,
  /* 4261 */ 'S', 'T', 'H', 'U', 0,
  /* 4266 */ 'L', 'F', 'S', 'U', 0,
  /* 4271 */ 'S', 'T', 'F', 'S', 'U', 0,
  /* 4277 */ 'M', 'U', 'L', 'H', 'W', 'U', 0,
  /* 4284 */ 'S', 'T', 'W', 'U', 0,
  /* 4289 */ 'D', 'I', 'V', 'W', 'U', 0,
  /* 4295 */ 'L', 'B', 'Z', 'U', 0,
  /* 4300 */ 'L', 'H', 'Z', 'U', 0,
  /* 4305 */ 'L', 'W', 'Z', 'U', 0,
  /* 4310 */ 'F', 'D', 'I', 'V', 0,
  /* 4315 */ 'C', 'R', 'E', 'Q', 'V', 0,
  /* 4321 */ 'V', 'S', 'R', 'A', 'W', 0,
  /* 4327 */ 'V', 'M', 'R', 'G', 'H', 'W', 0,
  /* 4334 */ 'M', 'U', 'L', 'H', 'W', 0,
  /* 4340 */ 'F', 'C', 'T', 'I', 'W', 0,
  /* 4346 */ 'V', 'M', 'R', 'G', 'L', 'W', 0,
  /* 4353 */ 'M', 'U', 'L', 'L', 'W', 0,
  /* 4359 */ 'C', 'M', 'P', 'L', 'W', 0,
  /* 4365 */ 'V', 'R', 'L', 'W', 0,
  /* 4370 */ 'V', 'S', 'L', 'W', 0,
  /* 4375 */ 'L', 'M', 'W', 0,
  /* 4379 */ 'S', 'T', 'M', 'W', 0,
  /* 4384 */ 'C', 'M', 'P', 'W', 0,
  /* 4389 */ 'V', 'S', 'R', 'W', 0,
  /* 4394 */ 'V', 'A', 'V', 'G', 'S', 'W', 0,
  /* 4401 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'W', 0,
  /* 4410 */ 'V', 'M', 'I', 'N', 'S', 'W', 0,
  /* 4417 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'W', 0,
  /* 4426 */ 'E', 'X', 'T', 'S', 'W', 0,
  /* 4432 */ 'V', 'M', 'A', 'X', 'S', 'W', 0,
  /* 4439 */ 'V', 'S', 'P', 'L', 'T', 'W', 0,
  /* 4446 */ 'P', 'O', 'P', 'C', 'N', 'T', 'W', 0,
  /* 4454 */ 'S', 'T', 'W', 0,
  /* 4458 */ 'V', 'S', 'U', 'B', 'C', 'U', 'W', 0,
  /* 4466 */ 'V', 'A', 'D', 'D', 'C', 'U', 'W', 0,
  /* 4474 */ 'V', 'A', 'V', 'G', 'U', 'W', 0,
  /* 4481 */ 'V', 'M', 'I', 'N', 'U', 'W', 0,
  /* 4488 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'W', 0,
  /* 4497 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'W', 0,
  /* 4506 */ 'V', 'M', 'A', 'X', 'U', 'W', 0,
  /* 4513 */ 'D', 'I', 'V', 'W', 0,
  /* 4518 */ 'C', 'N', 'T', 'L', 'Z', 'W', 0,
  /* 4525 */ 'L', 'H', 'A', 'X', 0,
  /* 4530 */ 'L', 'F', 'I', 'W', 'A', 'X', 0,
  /* 4537 */ 'L', 'W', 'A', 'X', 0,
  /* 4542 */ 'L', 'V', 'E', 'B', 'X', 0,
  /* 4548 */ 'S', 'T', 'V', 'E', 'B', 'X', 0,
  /* 4555 */ 'S', 'T', 'B', 'X', 0,
  /* 4560 */ 'S', 'T', 'D', 'C', 'X', 0,
  /* 4566 */ 'S', 'T', 'W', 'C', 'X', 0,
  /* 4572 */ 'L', 'F', 'D', 'X', 0,
  /* 4577 */ 'S', 'T', 'F', 'D', 'X', 0,
  /* 4583 */ 'L', 'D', 'X', 0,
  /* 4587 */ 'S', 'T', 'D', 'X', 0,
  /* 4592 */ 'L', 'V', 'E', 'H', 'X', 0,
  /* 4598 */ 'S', 'T', 'V', 'E', 'H', 'X', 0,
  /* 4605 */ 'S', 'T', 'H', 'X', 0,
  /* 4610 */ 'V', 'U', 'P', 'K', 'H', 'P', 'X', 0,
  /* 4618 */ 'V', 'P', 'K', 'P', 'X', 0,
  /* 4624 */ 'V', 'U', 'P', 'K', 'L', 'P', 'X', 0,
  /* 4632 */ 'L', 'D', 'A', 'R', 'X', 0,
  /* 4638 */ 'L', 'W', 'A', 'R', 'X', 0,
  /* 4644 */ 'L', 'D', 'B', 'R', 'X', 0,
  /* 4650 */ 'S', 'T', 'D', 'B', 'R', 'X', 0,
  /* 4657 */ 'L', 'H', 'B', 'R', 'X', 0,
  /* 4663 */ 'S', 'T', 'H', 'B', 'R', 'X', 0,
  /* 4670 */ 'L', 'W', 'B', 'R', 'X', 0,
  /* 4676 */ 'S', 'T', 'W', 'B', 'R', 'X', 0,
  /* 4683 */ 'V', 'C', 'F', 'S', 'X', 0,
  /* 4689 */ 'L', 'F', 'S', 'X', 0,
  /* 4694 */ 'S', 'T', 'F', 'S', 'X', 0,
  /* 4700 */ 'L', 'H', 'A', 'U', 'X', 0,
  /* 4706 */ 'L', 'W', 'A', 'U', 'X', 0,
  /* 4712 */ 'S', 'T', 'B', 'U', 'X', 0,
  /* 4718 */ 'L', 'F', 'D', 'U', 'X', 0,
  /* 4724 */ 'S', 'T', 'F', 'D', 'U', 'X', 0,
  /* 4731 */ 'L', 'D', 'U', 'X', 0,
  /* 4736 */ 'S', 'T', 'D', 'U', 'X', 0,
  /* 4742 */ 'V', 'C', 'F', 'U', 'X', 0,
  /* 4748 */ 'S', 'T', 'H', 'U', 'X', 0,
  /* 4754 */ 'L', 'F', 'S', 'U', 'X', 0,
  /* 4760 */ 'S', 'T', 'F', 'S', 'U', 'X', 0,
  /* 4767 */ 'S', 'T', 'W', 'U', 'X', 0,
  /* 4773 */ 'L', 'B', 'Z', 'U', 'X', 0,
  /* 4779 */ 'L', 'H', 'Z', 'U', 'X', 0,
  /* 4785 */ 'L', 'W', 'Z', 'U', 'X', 0,
  /* 4791 */ 'L', 'V', 'X', 0,
  /* 4795 */ 'S', 'T', 'V', 'X', 0,
  /* 4800 */ 'L', 'V', 'E', 'W', 'X', 0,
  /* 4806 */ 'S', 'T', 'V', 'E', 'W', 'X', 0,
  /* 4813 */ 'S', 'T', 'F', 'I', 'W', 'X', 0,
  /* 4820 */ 'S', 'T', 'W', 'X', 0,
  /* 4825 */ 'L', 'B', 'Z', 'X', 0,
  /* 4830 */ 'L', 'H', 'Z', 'X', 0,
  /* 4835 */ 'L', 'F', 'I', 'W', 'Z', 'X', 0,
  /* 4842 */ 'L', 'W', 'Z', 'X', 0,
  /* 4847 */ 'C', 'O', 'P', 'Y', 0,
  /* 4852 */ 'D', 'C', 'B', 'Z', 0,
  /* 4857 */ 'L', 'B', 'Z', 0,
  /* 4861 */ 'B', 'D', 'Z', 0,
  /* 4865 */ 'F', 'C', 'T', 'I', 'D', 'Z', 0,
  /* 4872 */ 'L', 'H', 'Z', 0,
  /* 4876 */ 'V', 'R', 'F', 'I', 'Z', 0,
  /* 4882 */ 'B', 'D', 'N', 'Z', 0,
  /* 4887 */ 'F', 'C', 'T', 'I', 'D', 'U', 'Z', 0,
  /* 4895 */ 'F', 'C', 'T', 'I', 'W', 'U', 'Z', 0,
  /* 4903 */ 'F', 'C', 'T', 'I', 'W', 'Z', 0,
  /* 4910 */ 'L', 'W', 'Z', 0,
  /* 4914 */ 'L', 'D', 't', 'o', 'c', 0,
  /* 4920 */ 'L', 'D', 'i', 'n', 't', 'o', '_', 't', 'o', 'c', 0,
  /* 4931 */ 'L', 'D', 't', 'o', 'c', '_', 'r', 'e', 's', 't', 'o', 'r', 'e', 0,
  /* 4945 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 'i', 0,
  /* 4956 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 'i', 0,
  /* 4967 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 'i', 0,
  /* 4978 */ 'B', 'D', 'Z', 'L', 'A', 'm', 0,
  /* 4985 */ 'B', 'D', 'N', 'Z', 'L', 'A', 'm', 0,
  /* 4993 */ 'B', 'D', 'Z', 'A', 'm', 0,
  /* 4999 */ 'B', 'D', 'N', 'Z', 'A', 'm', 0,
  /* 5006 */ 'B', 'D', 'Z', 'L', 'R', 'L', 'm', 0,
  /* 5014 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 'm', 0,
  /* 5023 */ 'B', 'D', 'Z', 'L', 'm', 0,
  /* 5029 */ 'B', 'D', 'N', 'Z', 'L', 'm', 0,
  /* 5036 */ 'B', 'D', 'Z', 'L', 'R', 'm', 0,
  /* 5043 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'm', 0,
  /* 5051 */ 'B', 'D', 'Z', 'm', 0,
  /* 5056 */ 'B', 'D', 'N', 'Z', 'm', 0,
  /* 5062 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', '_', '6', '4', 'o', 0,
  /* 5075 */ 'A', 'D', 'D', '4', 'o', 0,
  /* 5081 */ 'E', 'X', 'T', 'S', 'B', '8', 'o', 0,
  /* 5089 */ 'A', 'D', 'D', 'C', '8', 'o', 0,
  /* 5096 */ 'A', 'N', 'D', 'C', '8', 'o', 0,
  /* 5103 */ 'S', 'U', 'B', 'F', 'C', '8', 'o', 0,
  /* 5111 */ 'O', 'R', 'C', '8', 'o', 0,
  /* 5117 */ 'A', 'D', 'D', '8', 'o', 0,
  /* 5123 */ 'N', 'A', 'N', 'D', '8', 'o', 0,
  /* 5130 */ 'A', 'D', 'D', 'E', '8', 'o', 0,
  /* 5137 */ 'S', 'U', 'B', 'F', 'E', '8', 'o', 0,
  /* 5145 */ 'A', 'D', 'D', 'M', 'E', '8', 'o', 0,
  /* 5153 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 'o', 0,
  /* 5162 */ 'A', 'D', 'D', 'Z', 'E', '8', 'o', 0,
  /* 5170 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 'o', 0,
  /* 5179 */ 'S', 'U', 'B', 'F', '8', 'o', 0,
  /* 5186 */ 'N', 'E', 'G', '8', 'o', 0,
  /* 5192 */ 'E', 'X', 'T', 'S', 'H', '8', 'o', 0,
  /* 5200 */ 'R', 'L', 'W', 'I', 'N', 'M', '8', 'o', 0,
  /* 5209 */ 'N', 'O', 'R', '8', 'o', 0,
  /* 5215 */ 'X', 'O', 'R', '8', 'o', 0,
  /* 5221 */ 'E', 'Q', 'V', '8', 'o', 0,
  /* 5227 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'B', 'o', 0,
  /* 5237 */ 'E', 'X', 'T', 'S', 'B', 'o', 0,
  /* 5244 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'B', 'o', 0,
  /* 5254 */ 'F', 'S', 'U', 'B', 'o', 0,
  /* 5260 */ 'F', 'M', 'S', 'U', 'B', 'o', 0,
  /* 5267 */ 'F', 'N', 'M', 'S', 'U', 'B', 'o', 0,
  /* 5275 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'B', 'o', 0,
  /* 5285 */ 'A', 'D', 'D', 'C', 'o', 0,
  /* 5291 */ 'A', 'N', 'D', 'C', 'o', 0,
  /* 5297 */ 'S', 'U', 'B', 'F', 'C', 'o', 0,
  /* 5304 */ 'S', 'U', 'B', 'I', 'C', 'o', 0,
  /* 5311 */ 'A', 'D', 'D', 'I', 'C', 'o', 0,
  /* 5318 */ 'R', 'L', 'D', 'I', 'C', 'o', 0,
  /* 5325 */ 'O', 'R', 'C', 'o', 0,
  /* 5330 */ 'S', 'R', 'A', 'D', 'o', 0,
  /* 5336 */ 'F', 'A', 'D', 'D', 'o', 0,
  /* 5342 */ 'F', 'M', 'A', 'D', 'D', 'o', 0,
  /* 5349 */ 'F', 'N', 'M', 'A', 'D', 'D', 'o', 0,
  /* 5357 */ 'F', 'N', 'E', 'G', 'D', 'o', 0,
  /* 5364 */ 'M', 'U', 'L', 'H', 'D', 'o', 0,
  /* 5371 */ 'F', 'C', 'F', 'I', 'D', 'o', 0,
  /* 5378 */ 'F', 'C', 'T', 'I', 'D', 'o', 0,
  /* 5385 */ 'F', 'S', 'E', 'L', 'D', 'o', 0,
  /* 5392 */ 'M', 'U', 'L', 'L', 'D', 'o', 0,
  /* 5399 */ 'S', 'L', 'D', 'o', 0,
  /* 5404 */ 'F', 'R', 'I', 'M', 'D', 'o', 0,
  /* 5411 */ 'N', 'A', 'N', 'D', 'o', 0,
  /* 5417 */ 'F', 'C', 'P', 'S', 'G', 'N', 'D', 'o', 0,
  /* 5426 */ 'F', 'R', 'I', 'N', 'D', 'o', 0,
  /* 5433 */ 'F', 'R', 'I', 'P', 'D', 'o', 0,
  /* 5440 */ 'S', 'R', 'D', 'o', 0,
  /* 5445 */ 'F', 'A', 'B', 'S', 'D', 'o', 0,
  /* 5452 */ 'F', 'N', 'A', 'B', 'S', 'D', 'o', 0,
  /* 5460 */ 'D', 'I', 'V', 'D', 'o', 0,
  /* 5466 */ 'F', 'R', 'I', 'Z', 'D', 'o', 0,
  /* 5473 */ 'C', 'N', 'T', 'L', 'Z', 'D', 'o', 0,
  /* 5481 */ 'A', 'D', 'D', 'E', 'o', 0,
  /* 5487 */ 'S', 'U', 'B', 'F', 'E', 'o', 0,
  /* 5494 */ 'A', 'D', 'D', 'M', 'E', 'o', 0,
  /* 5501 */ 'S', 'U', 'B', 'F', 'M', 'E', 'o', 0,
  /* 5509 */ 'F', 'R', 'E', 'o', 0,
  /* 5514 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'o', 0,
  /* 5523 */ 'A', 'D', 'D', 'Z', 'E', 'o', 0,
  /* 5530 */ 'S', 'U', 'B', 'F', 'Z', 'E', 'o', 0,
  /* 5538 */ 'S', 'U', 'B', 'F', 'o', 0,
  /* 5544 */ 'N', 'E', 'G', 'o', 0,
  /* 5549 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'H', 'o', 0,
  /* 5559 */ 'E', 'X', 'T', 'S', 'H', 'o', 0,
  /* 5566 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'H', 'o', 0,
  /* 5576 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'H', 'o', 0,
  /* 5586 */ 'S', 'R', 'A', 'D', 'I', 'o', 0,
  /* 5593 */ 'C', 'L', 'R', 'L', 'S', 'L', 'D', 'I', 'o', 0,
  /* 5603 */ 'E', 'X', 'T', 'L', 'D', 'I', 'o', 0,
  /* 5611 */ 'A', 'N', 'D', 'I', 'o', 0,
  /* 5617 */ 'C', 'L', 'R', 'R', 'D', 'I', 'o', 0,
  /* 5625 */ 'I', 'N', 'S', 'R', 'D', 'I', 'o', 0,
  /* 5633 */ 'R', 'O', 'T', 'R', 'D', 'I', 'o', 0,
  /* 5641 */ 'E', 'X', 'T', 'R', 'D', 'I', 'o', 0,
  /* 5649 */ 'R', 'L', 'D', 'I', 'M', 'I', 'o', 0,
  /* 5657 */ 'R', 'L', 'W', 'I', 'M', 'I', 'o', 0,
  /* 5665 */ 'S', 'R', 'A', 'W', 'I', 'o', 0,
  /* 5672 */ 'C', 'L', 'R', 'L', 'S', 'L', 'W', 'I', 'o', 0,
  /* 5682 */ 'I', 'N', 'S', 'L', 'W', 'I', 'o', 0,
  /* 5690 */ 'E', 'X', 'T', 'L', 'W', 'I', 'o', 0,
  /* 5698 */ 'C', 'L', 'R', 'R', 'W', 'I', 'o', 0,
  /* 5706 */ 'I', 'N', 'S', 'R', 'W', 'I', 'o', 0,
  /* 5714 */ 'R', 'O', 'T', 'R', 'W', 'I', 'o', 0,
  /* 5722 */ 'E', 'X', 'T', 'R', 'W', 'I', 'o', 0,
  /* 5730 */ 'R', 'L', 'D', 'C', 'L', 'o', 0,
  /* 5737 */ 'R', 'L', 'D', 'I', 'C', 'L', 'o', 0,
  /* 5745 */ 'F', 'M', 'U', 'L', 'o', 0,
  /* 5751 */ 'R', 'L', 'W', 'I', 'N', 'M', 'o', 0,
  /* 5759 */ 'R', 'L', 'W', 'N', 'M', 'o', 0,
  /* 5766 */ 'V', 'C', 'M', 'P', 'B', 'F', 'P', 'o', 0,
  /* 5775 */ 'V', 'C', 'M', 'P', 'G', 'E', 'F', 'P', 'o', 0,
  /* 5785 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'F', 'P', 'o', 0,
  /* 5795 */ 'V', 'C', 'M', 'P', 'G', 'T', 'F', 'P', 'o', 0,
  /* 5805 */ 'F', 'R', 'S', 'P', 'o', 0,
  /* 5811 */ 'R', 'L', 'D', 'C', 'R', 'o', 0,
  /* 5818 */ 'R', 'L', 'D', 'I', 'C', 'R', 'o', 0,
  /* 5826 */ 'F', 'M', 'R', 'o', 0,
  /* 5831 */ 'N', 'O', 'R', 'o', 0,
  /* 5836 */ 'X', 'O', 'R', 'o', 0,
  /* 5841 */ 'F', 'S', 'U', 'B', 'S', 'o', 0,
  /* 5848 */ 'F', 'M', 'S', 'U', 'B', 'S', 'o', 0,
  /* 5856 */ 'F', 'N', 'M', 'S', 'U', 'B', 'S', 'o', 0,
  /* 5865 */ 'F', 'A', 'D', 'D', 'S', 'o', 0,
  /* 5872 */ 'F', 'M', 'A', 'D', 'D', 'S', 'o', 0,
  /* 5880 */ 'F', 'N', 'M', 'A', 'D', 'D', 'S', 'o', 0,
  /* 5889 */ 'F', 'C', 'F', 'I', 'D', 'S', 'o', 0,
  /* 5897 */ 'F', 'R', 'E', 'S', 'o', 0,
  /* 5903 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 'o', 0,
  /* 5913 */ 'F', 'N', 'E', 'G', 'S', 'o', 0,
  /* 5920 */ 'A', 'N', 'D', 'I', 'S', 'o', 0,
  /* 5927 */ 'F', 'S', 'E', 'L', 'S', 'o', 0,
  /* 5934 */ 'F', 'M', 'U', 'L', 'S', 'o', 0,
  /* 5941 */ 'F', 'R', 'I', 'M', 'S', 'o', 0,
  /* 5948 */ 'F', 'C', 'P', 'S', 'G', 'N', 'S', 'o', 0,
  /* 5957 */ 'F', 'R', 'I', 'N', 'S', 'o', 0,
  /* 5964 */ 'F', 'R', 'I', 'P', 'S', 'o', 0,
  /* 5971 */ 'F', 'A', 'B', 'S', 'S', 'o', 0,
  /* 5978 */ 'F', 'N', 'A', 'B', 'S', 'S', 'o', 0,
  /* 5986 */ 'F', 'S', 'Q', 'R', 'T', 'S', 'o', 0,
  /* 5994 */ 'F', 'C', 'F', 'I', 'D', 'U', 'S', 'o', 0,
  /* 6003 */ 'F', 'D', 'I', 'V', 'S', 'o', 0,
  /* 6010 */ 'F', 'R', 'I', 'Z', 'S', 'o', 0,
  /* 6017 */ 'F', 'S', 'Q', 'R', 'T', 'o', 0,
  /* 6024 */ 'M', 'U', 'L', 'H', 'D', 'U', 'o', 0,
  /* 6032 */ 'F', 'C', 'F', 'I', 'D', 'U', 'o', 0,
  /* 6040 */ 'D', 'I', 'V', 'D', 'U', 'o', 0,
  /* 6047 */ 'M', 'U', 'L', 'H', 'W', 'U', 'o', 0,
  /* 6055 */ 'D', 'I', 'V', 'W', 'U', 'o', 0,
  /* 6062 */ 'F', 'D', 'I', 'V', 'o', 0,
  /* 6068 */ 'E', 'Q', 'V', 'o', 0,
  /* 6073 */ 'S', 'R', 'A', 'W', 'o', 0,
  /* 6079 */ 'M', 'U', 'L', 'H', 'W', 'o', 0,
  /* 6086 */ 'F', 'C', 'T', 'I', 'W', 'o', 0,
  /* 6093 */ 'M', 'U', 'L', 'L', 'W', 'o', 0,
  /* 6100 */ 'S', 'L', 'W', 'o', 0,
  /* 6105 */ 'S', 'R', 'W', 'o', 0,
  /* 6110 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'W', 'o', 0,
  /* 6120 */ 'E', 'X', 'T', 'S', 'W', 'o', 0,
  /* 6127 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'W', 'o', 0,
  /* 6137 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'W', 'o', 0,
  /* 6147 */ 'D', 'I', 'V', 'W', 'o', 0,
  /* 6153 */ 'C', 'N', 'T', 'L', 'Z', 'W', 'o', 0,
  /* 6161 */ 'F', 'C', 'T', 'I', 'D', 'Z', 'o', 0,
  /* 6169 */ 'F', 'C', 'T', 'I', 'D', 'U', 'Z', 'o', 0,
  /* 6178 */ 'F', 'C', 'T', 'I', 'W', 'U', 'Z', 'o', 0,
  /* 6187 */ 'F', 'C', 'T', 'I', 'W', 'Z', 'o', 0,
  /* 6195 */ 'B', 'D', 'Z', 'L', 'A', 'p', 0,
  /* 6202 */ 'B', 'D', 'N', 'Z', 'L', 'A', 'p', 0,
  /* 6210 */ 'B', 'D', 'Z', 'A', 'p', 0,
  /* 6216 */ 'B', 'D', 'N', 'Z', 'A', 'p', 0,
  /* 6223 */ 'B', 'D', 'Z', 'L', 'R', 'L', 'p', 0,
  /* 6231 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 'p', 0,
  /* 6240 */ 'B', 'D', 'Z', 'L', 'p', 0,
  /* 6246 */ 'B', 'D', 'N', 'Z', 'L', 'p', 0,
  /* 6253 */ 'B', 'D', 'Z', 'L', 'R', 'p', 0,
  /* 6260 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'p', 0,
  /* 6268 */ 'B', 'D', 'Z', 'p', 0,
  /* 6273 */ 'B', 'D', 'N', 'Z', 'p', 0,
  /* 6279 */ 'M', 'T', 'C', 'T', 'R', '8', 'l', 'o', 'o', 'p', 0,
  /* 6290 */ 'M', 'T', 'C', 'T', 'R', 'l', 'o', 'o', 'p', 0,
  /* 6300 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 0,
  /* 6314 */ 'B', 'C', 'L', 'a', 'l', 'w', 'a', 'y', 's', 0,
  /* 6324 */ 'M', 'F', 'V', 'R', 'S', 'A', 'V', 'E', 'v', 0,
  /* 6334 */ 'M', 'T', 'V', 'R', 'S', 'A', 'V', 'E', 'v', 0,
  /* 6344 */ 'L', 'A', 'x', 0,
  /* 6348 */ 'F', 'A', 'D', 'D', 'r', 't', 'z', 0,
};

extern const unsigned PPCInstrNameIndices[] = {
    2690U, 3139U, 2844U, 2857U, 2835U, 2890U, 2360U, 2375U, 
    2312U, 2389U, 3916U, 2219U, 2136U, 4847U, 2180U, 4155U, 
    2041U, 3220U, 4135U, 533U, 5075U, 812U, 3856U, 5117U, 
    1843U, 763U, 5089U, 5285U, 2149U, 823U, 5130U, 5481U, 
    2624U, 925U, 1873U, 782U, 5311U, 3834U, 1224U, 1542U, 
    1526U, 1500U, 1513U, 1489U, 3024U, 2990U, 3001U, 2981U, 
    2187U, 836U, 5145U, 5494U, 2289U, 851U, 5162U, 5523U, 
    3187U, 3375U, 2026U, 818U, 5124U, 1850U, 769U, 5096U, 
    5291U, 5920U, 1455U, 5611U, 1448U, 5412U, 661U, 152U, 
    358U, 1049U, 584U, 75U, 281U, 976U, 625U, 116U, 
    322U, 1015U, 604U, 95U, 301U, 995U, 701U, 192U, 
    398U, 1087U, 564U, 55U, 261U, 944U, 681U, 172U, 
    378U, 1068U, 645U, 136U, 342U, 1034U, 1612U, 1465U, 
    1839U, 1480U, 2817U, 1572U, 3584U, 1203U, 2929U, 1122U, 
    3471U, 2901U, 6314U, 3578U, 1197U, 2922U, 1115U, 4882U, 
    1401U, 1600U, 4999U, 6216U, 2968U, 1584U, 4985U, 6202U, 
    3492U, 1163U, 2914U, 5014U, 6231U, 5043U, 6260U, 5029U, 
    6246U, 5056U, 6273U, 4861U, 1391U, 1595U, 4993U, 6210U, 
    2963U, 1578U, 4978U, 6195U, 3486U, 1156U, 2907U, 5006U, 
    6223U, 5036U, 6253U, 5023U, 6240U, 5051U, 6268U, 2809U, 
    1105U, 3362U, 3872U, 3864U, 1562U, 733U, 3353U, 3466U, 
    2895U, 2636U, 5593U, 2748U, 5672U, 2658U, 5617U, 2777U, 
    5698U, 2074U, 2652U, 2007U, 2629U, 4359U, 2741U, 4384U, 
    2771U, 2129U, 5473U, 4518U, 6153U, 4100U, 4107U, 2030U, 
    1848U, 4315U, 2023U, 3514U, 3525U, 1915U, 4124U, 4116U, 
    3534U, 1463U, 2302U, 2603U, 4176U, 4095U, 4186U, 4852U, 
    2957U, 2118U, 4255U, 6040U, 5460U, 4513U, 4289U, 6055U, 
    6147U, 3946U, 2883U, 4182U, 417U, 4193U, 423U, 4204U, 
    438U, 4199U, 431U, 1906U, 797U, 226U, 498U, 244U, 
    516U, 6300U, 3204U, 4317U, 1285U, 5221U, 6068U, 2645U, 
    5603U, 2764U, 5690U, 2679U, 5641U, 2798U, 5722U, 1733U, 
    745U, 447U, 5081U, 5237U, 2524U, 913U, 460U, 5192U, 
    5559U, 4426U, 486U, 5062U, 6120U, 2086U, 5445U, 3933U, 
    5971U, 1944U, 3673U, 5865U, 5336U, 6348U, 1983U, 3694U, 
    5889U, 4239U, 3973U, 5994U, 6032U, 5371U, 2111U, 3997U, 
    2054U, 5417U, 3896U, 5948U, 1989U, 4887U, 6169U, 4865U, 
    6161U, 5378U, 4340U, 4895U, 6178U, 4903U, 6187U, 6086U, 
    4310U, 4020U, 6003U, 6062U, 1949U, 3679U, 5872U, 5342U, 
    3510U, 5826U, 1806U, 3658U, 5848U, 5260U, 2941U, 3884U, 
    5934U, 5745U, 2092U, 5452U, 3939U, 5978U, 1971U, 5357U, 
    3742U, 5913U, 1955U, 3686U, 5880U, 5349U, 1812U, 3665U, 
    5856U, 5267U, 2200U, 3714U, 5897U, 5509U, 2017U, 5404U, 
    3890U, 5941U, 2062U, 5426U, 3904U, 5957U, 2068U, 5433U, 
    3910U, 5964U, 2123U, 5466U, 4089U, 6010U, 3370U, 5805U, 
    2211U, 3719U, 5903U, 5514U, 1995U, 5385U, 3850U, 5927U, 
    4170U, 3966U, 5986U, 6017U, 1801U, 3652U, 5841U, 5254U, 
    3455U, 3442U, 2608U, 2757U, 5682U, 2665U, 5625U, 2784U, 
    5706U, 2873U, 1109U, 1900U, 1563U, 6344U, 4857U, 1386U, 
    4295U, 1267U, 4773U, 1341U, 4825U, 1368U, 1998U, 4632U, 
    4644U, 4246U, 4731U, 4583U, 3012U, 4920U, 4914U, 4146U, 
    2726U, 2974U, 4931U, 1962U, 4221U, 4718U, 4572U, 4530U, 
    4835U, 3733U, 4266U, 4754U, 4689U, 1485U, 728U, 4211U, 
    1243U, 4700U, 1313U, 4525U, 1295U, 4657U, 4872U, 1396U, 
    4300U, 1273U, 4779U, 1348U, 4830U, 1374U, 2697U, 934U, 
    3840U, 1231U, 4375U, 4542U, 4592U, 4800U, 2936U, 3569U, 
    4791U, 2946U, 1591U, 4638U, 4706U, 4537U, 218U, 211U, 
    4670U, 4910U, 1407U, 4305U, 1279U, 4785U, 1355U, 4842U, 
    1380U, 2325U, 3396U, 1138U, 3590U, 1210U, 3728U, 3476U, 
    1144U, 3557U, 2330U, 872U, 3545U, 1746U, 752U, 2229U, 
    6324U, 3408U, 2344U, 888U, 3596U, 1217U, 6279U, 6290U, 
    0U, 48U, 2350U, 3481U, 1150U, 3563U, 2079U, 2337U, 
    880U, 3551U, 2238U, 6334U, 3415U, 1977U, 4232U, 6024U, 
    5364U, 4334U, 4277U, 6047U, 6079U, 2001U, 5392U, 2694U, 
    931U, 4353U, 6093U, 3499U, 1171U, 2025U, 817U, 5123U, 
    5411U, 2356U, 908U, 5186U, 5544U, 3358U, 3516U, 1183U, 
    5209U, 5831U, 3517U, 1184U, 5210U, 1917U, 807U, 5111U, 
    5325U, 2722U, 939U, 3845U, 1237U, 5832U, 2099U, 4446U, 
    3422U, 2247U, 2822U, 5730U, 3390U, 5811U, 1879U, 2828U, 
    473U, 5737U, 3401U, 5818U, 5318U, 2700U, 5649U, 2707U, 
    5657U, 3120U, 1130U, 5200U, 5751U, 3127U, 5759U, 2672U, 
    5633U, 2791U, 5714U, 1936U, 538U, 895U, 551U, 963U, 
    1921U, 1556U, 2168U, 2154U, 2204U, 2013U, 2640U, 5597U, 
    5399U, 4371U, 2752U, 5676U, 6100U, 3433U, 2276U, 1939U, 
    2618U, 5586U, 5330U, 4322U, 2735U, 5665U, 6073U, 2082U, 
    2667U, 5627U, 5440U, 4390U, 2786U, 5708U, 6105U, 1758U, 
    758U, 4216U, 1249U, 4712U, 1320U, 4555U, 1301U, 2107U, 
    4650U, 4560U, 4250U, 4736U, 4587U, 1966U, 4226U, 4724U, 
    4577U, 4813U, 3737U, 4271U, 4760U, 4694U, 2544U, 920U, 
    4663U, 4261U, 1255U, 4748U, 1327U, 4605U, 1307U, 4379U, 
    4548U, 4598U, 4806U, 4795U, 2951U, 4454U, 1290U, 4676U, 
    4566U, 4284U, 1261U, 4767U, 1334U, 4820U, 1362U, 2307U, 
    866U, 5179U, 1861U, 775U, 5103U, 5297U, 2162U, 829U, 
    5137U, 5487U, 1885U, 789U, 2193U, 843U, 5153U, 5501U, 
    2295U, 858U, 5170U, 5530U, 5538U, 2613U, 1867U, 5304U, 
    3828U, 1895U, 1634U, 738U, 1468U, 720U, 3574U, 1193U, 
    4945U, 1412U, 4956U, 1424U, 4967U, 1436U, 2104U, 2686U, 
    2174U, 2866U, 1892U, 3229U, 4443U, 2805U, 2262U, 4466U, 
    3266U, 3619U, 3786U, 4043U, 3053U, 3644U, 3097U, 3811U, 
    3173U, 4067U, 2036U, 1855U, 1677U, 2468U, 4394U, 1770U, 
    2556U, 4474U, 4683U, 32U, 4742U, 40U, 3234U, 5766U, 
    3322U, 5785U, 1792U, 5244U, 2578U, 5566U, 4488U, 6127U, 
    3281U, 5775U, 3331U, 5795U, 1724U, 5227U, 2515U, 5549U, 
    4417U, 6110U, 1819U, 5275U, 2587U, 5576U, 4497U, 6137U, 
    4075U, 14U, 4082U, 23U, 3296U, 3273U, 3258U, 3340U, 
    1739U, 2530U, 4432U, 1828U, 2596U, 4506U, 3765U, 3775U, 
    3315U, 1709U, 2500U, 4410U, 1777U, 2563U, 4481U, 3087U, 
    1620U, 2417U, 4327U, 1627U, 2424U, 4346U, 3036U, 3070U, 
    3794U, 3061U, 3105U, 3819U, 1655U, 2446U, 1762U, 2548U, 
    1716U, 2507U, 1784U, 2570U, 3242U, 3520U, 3530U, 3133U, 
    4618U, 3950U, 3981U, 3958U, 4004U, 3149U, 3989U, 3157U, 
    4012U, 3290U, 3114U, 3181U, 3347U, 4876U, 1640U, 2431U, 
    4365U, 3305U, 2878U, 2937U, 1645U, 2714U, 2436U, 3210U, 
    4370U, 1751U, 2537U, 1692U, 2483U, 4401U, 4439U, 3570U, 
    1614U, 2411U, 4321U, 1650U, 2441U, 3215U, 4389U, 4458U, 
    3251U, 3611U, 3757U, 4035U, 3045U, 3636U, 3079U, 3803U, 
    3165U, 4059U, 4026U, 3602U, 3748U, 3627U, 4051U, 4610U, 
    1684U, 2475U, 4624U, 1701U, 2492U, 3540U, 7U, 1606U, 
    2403U, 3701U, 1663U, 2454U, 4130U, 3536U, 1188U, 5215U, 
    2721U, 938U, 3844U, 1236U, 5836U, 1835U, 1475U, 3583U, 
    2928U, 2812U, 1566U, 3470U, 2900U, 
};

static inline void InitPPCMCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(PPCInsts, PPCInstrNameIndices, PPCInstrNameData, 877);
}

} // End llvm namespace 
#endif // GET_INSTRINFO_MC_DESC


#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct PPCGenInstrInfo : public TargetInstrInfo {
  explicit PPCGenInstrInfo(int SO = -1, int DO = -1);
  virtual ~PPCGenInstrInfo();
};
} // End llvm namespace 
#endif // GET_INSTRINFO_HEADER


#ifdef GET_INSTRINFO_CTOR_DTOR
#undef GET_INSTRINFO_CTOR_DTOR
namespace llvm {
extern const MCInstrDesc PPCInsts[];
extern const unsigned PPCInstrNameIndices[];
extern const char PPCInstrNameData[];
PPCGenInstrInfo::PPCGenInstrInfo(int SO, int DO)
  : TargetInstrInfo(SO, DO) {
  InitMCInstrInfo(PPCInsts, PPCInstrNameIndices, PPCInstrNameData, 877);
}
PPCGenInstrInfo::~PPCGenInstrInfo() {}
} // End llvm namespace 
#endif // GET_INSTRINFO_CTOR_DTOR

#ifdef GET_INSTRINFO_OPERAND_ENUM
#undef GET_INSTRINFO_OPERAND_ENUM
namespace llvm {namespace PPC {
namespace OpName { 
enum {
OPERAND_LAST
};
} // End namespace OpName
} // End namespace PPC
} // End namespace llvm
#endif //GET_INSTRINFO_OPERAND_ENUM
#ifdef GET_INSTRINFO_NAMED_OPS
#undef GET_INSTRINFO_NAMED_OPS
namespace llvm {namespace PPC {
int16_t getNamedOperandIdx(uint16_t Opcode, uint16_t NamedIdx) {
  return -1;
}
} // End namespace PPC
} // End namespace llvm
#endif //GET_INSTRINFO_NAMED_OPS

#ifdef GET_INSTRINFO_OPERAND_TYPES_ENUM
#undef GET_INSTRINFO_OPERAND_TYPES_ENUM
namespace llvm {namespace PPC {
namespace OpTypes { 
enum OperandType {
  abscalltarget = 0,
  abscondbrtarget = 1,
  absdirectbrtarget = 2,
  calltarget = 3,
  condbrtarget = 4,
  crbitm = 5,
  directbrtarget = 6,
  dispRI = 7,
  dispRIX = 8,
  f32imm = 9,
  f64imm = 10,
  i16imm = 11,
  i1imm = 12,
  i32imm = 13,
  i64imm = 14,
  i8imm = 15,
  imm32SExt16 = 16,
  imm64SExt16 = 17,
  memr = 18,
  memri = 19,
  memrix = 20,
  memrr = 21,
  pred = 22,
  ptr_rc_idx = 23,
  ptr_rc_nor0 = 24,
  s16imm = 25,
  s16imm64 = 26,
  s17imm = 27,
  s17imm64 = 28,
  s5imm = 29,
  tlscall = 30,
  tlsgd = 31,
  tlsreg = 32,
  tocentry = 33,
  u16imm = 34,
  u16imm64 = 35,
  u5imm = 36,
  u6imm = 37,
  OPERAND_TYPE_LIST_END
};
} // End namespace OpTypes
} // End namespace PPC
} // End namespace llvm
#endif // GET_INSTRINFO_OPERAND_TYPES_ENUM
#ifdef GET_INSTRMAP_INFO
#undef GET_INSTRMAP_INFO
namespace llvm {

namespace PPC {

enum RC {
	RC_0,
	RC_1
};

// getNonRecordFormOpcode
int getNonRecordFormOpcode(uint16_t Opcode) {
static const uint16_t getNonRecordFormOpcodeTable[][2] = {
  { PPC::ADD4o, PPC::ADD4 },
  { PPC::ADD8o, PPC::ADD8 },
  { PPC::ADDC8o, PPC::ADDC8 },
  { PPC::ADDCo, PPC::ADDC },
  { PPC::ADDE8o, PPC::ADDE8 },
  { PPC::ADDEo, PPC::ADDE },
  { PPC::ADDICo, PPC::ADDIC },
  { PPC::ADDME8o, PPC::ADDME8 },
  { PPC::ADDMEo, PPC::ADDME },
  { PPC::ADDZE8o, PPC::ADDZE8 },
  { PPC::ADDZEo, PPC::ADDZE },
  { PPC::AND8o, PPC::AND8 },
  { PPC::ANDC8o, PPC::ANDC8 },
  { PPC::ANDCo, PPC::ANDC },
  { PPC::ANDo, PPC::AND },
  { PPC::CNTLZDo, PPC::CNTLZD },
  { PPC::CNTLZWo, PPC::CNTLZW },
  { PPC::DIVDUo, PPC::DIVDU },
  { PPC::DIVDo, PPC::DIVD },
  { PPC::DIVWUo, PPC::DIVWU },
  { PPC::DIVWo, PPC::DIVW },
  { PPC::EQV8o, PPC::EQV8 },
  { PPC::EQVo, PPC::EQV },
  { PPC::EXTSB8o, PPC::EXTSB8 },
  { PPC::EXTSBo, PPC::EXTSB },
  { PPC::EXTSH8o, PPC::EXTSH8 },
  { PPC::EXTSHo, PPC::EXTSH },
  { PPC::EXTSW_32_64o, PPC::EXTSW_32_64 },
  { PPC::EXTSWo, PPC::EXTSW },
  { PPC::FABSDo, PPC::FABSD },
  { PPC::FABSSo, PPC::FABSS },
  { PPC::FADDSo, PPC::FADDS },
  { PPC::FADDo, PPC::FADD },
  { PPC::FCFIDSo, PPC::FCFIDS },
  { PPC::FCFIDUSo, PPC::FCFIDUS },
  { PPC::FCFIDUo, PPC::FCFIDU },
  { PPC::FCFIDo, PPC::FCFID },
  { PPC::FCPSGNDo, PPC::FCPSGND },
  { PPC::FCPSGNSo, PPC::FCPSGNS },
  { PPC::FCTIDUZo, PPC::FCTIDUZ },
  { PPC::FCTIDZo, PPC::FCTIDZ },
  { PPC::FCTIDo, PPC::FCTID },
  { PPC::FCTIWUZo, PPC::FCTIWUZ },
  { PPC::FCTIWZo, PPC::FCTIWZ },
  { PPC::FCTIWo, PPC::FCTIW },
  { PPC::FDIVSo, PPC::FDIVS },
  { PPC::FDIVo, PPC::FDIV },
  { PPC::FMADDSo, PPC::FMADDS },
  { PPC::FMADDo, PPC::FMADD },
  { PPC::FMRo, PPC::FMR },
  { PPC::FMSUBSo, PPC::FMSUBS },
  { PPC::FMSUBo, PPC::FMSUB },
  { PPC::FMULSo, PPC::FMULS },
  { PPC::FMULo, PPC::FMUL },
  { PPC::FNABSDo, PPC::FNABSD },
  { PPC::FNABSSo, PPC::FNABSS },
  { PPC::FNEGDo, PPC::FNEGD },
  { PPC::FNEGSo, PPC::FNEGS },
  { PPC::FNMADDSo, PPC::FNMADDS },
  { PPC::FNMADDo, PPC::FNMADD },
  { PPC::FNMSUBSo, PPC::FNMSUBS },
  { PPC::FNMSUBo, PPC::FNMSUB },
  { PPC::FRESo, PPC::FRES },
  { PPC::FREo, PPC::FRE },
  { PPC::FRIMDo, PPC::FRIMD },
  { PPC::FRIMSo, PPC::FRIMS },
  { PPC::FRINDo, PPC::FRIND },
  { PPC::FRINSo, PPC::FRINS },
  { PPC::FRIPDo, PPC::FRIPD },
  { PPC::FRIPSo, PPC::FRIPS },
  { PPC::FRIZDo, PPC::FRIZD },
  { PPC::FRIZSo, PPC::FRIZS },
  { PPC::FRSPo, PPC::FRSP },
  { PPC::FRSQRTESo, PPC::FRSQRTES },
  { PPC::FRSQRTEo, PPC::FRSQRTE },
  { PPC::FSELDo, PPC::FSELD },
  { PPC::FSELSo, PPC::FSELS },
  { PPC::FSQRTSo, PPC::FSQRTS },
  { PPC::FSQRTo, PPC::FSQRT },
  { PPC::FSUBSo, PPC::FSUBS },
  { PPC::FSUBo, PPC::FSUB },
  { PPC::MULHDUo, PPC::MULHDU },
  { PPC::MULHDo, PPC::MULHD },
  { PPC::MULHWUo, PPC::MULHWU },
  { PPC::MULHWo, PPC::MULHW },
  { PPC::MULLDo, PPC::MULLD },
  { PPC::MULLWo, PPC::MULLW },
  { PPC::NAND8o, PPC::NAND8 },
  { PPC::NANDo, PPC::NAND },
  { PPC::NEG8o, PPC::NEG8 },
  { PPC::NEGo, PPC::NEG },
  { PPC::NOR8o, PPC::NOR8 },
  { PPC::NORo, PPC::NOR },
  { PPC::OR8o, PPC::OR8 },
  { PPC::ORC8o, PPC::ORC8 },
  { PPC::ORCo, PPC::ORC },
  { PPC::ORo, PPC::OR },
  { PPC::RLDCLo, PPC::RLDCL },
  { PPC::RLDCRo, PPC::RLDCR },
  { PPC::RLDICLo, PPC::RLDICL },
  { PPC::RLDICRo, PPC::RLDICR },
  { PPC::RLDICo, PPC::RLDIC },
  { PPC::RLDIMIo, PPC::RLDIMI },
  { PPC::RLWIMIo, PPC::RLWIMI },
  { PPC::RLWINM8o, PPC::RLWINM8 },
  { PPC::RLWINMo, PPC::RLWINM },
  { PPC::RLWNMo, PPC::RLWNM },
  { PPC::SLDo, PPC::SLD },
  { PPC::SLWo, PPC::SLW },
  { PPC::SRADIo, PPC::SRADI },
  { PPC::SRADo, PPC::SRAD },
  { PPC::SRAWIo, PPC::SRAWI },
  { PPC::SRAWo, PPC::SRAW },
  { PPC::SRDo, PPC::SRD },
  { PPC::SRWo, PPC::SRW },
  { PPC::SUBF8o, PPC::SUBF8 },
  { PPC::SUBFC8o, PPC::SUBFC8 },
  { PPC::SUBFCo, PPC::SUBFC },
  { PPC::SUBFE8o, PPC::SUBFE8 },
  { PPC::SUBFEo, PPC::SUBFE },
  { PPC::SUBFME8o, PPC::SUBFME8 },
  { PPC::SUBFMEo, PPC::SUBFME },
  { PPC::SUBFZE8o, PPC::SUBFZE8 },
  { PPC::SUBFZEo, PPC::SUBFZE },
  { PPC::SUBFo, PPC::SUBF },
  { PPC::XOR8o, PPC::XOR8 },
  { PPC::XORo, PPC::XOR },
}; // End of getNonRecordFormOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 127;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getNonRecordFormOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getNonRecordFormOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getNonRecordFormOpcodeTable[mid][1];
}

// getRecordFormOpcode
int getRecordFormOpcode(uint16_t Opcode) {
static const uint16_t getRecordFormOpcodeTable[][2] = {
  { PPC::ADD4, PPC::ADD4o },
  { PPC::ADD8, PPC::ADD8o },
  { PPC::ADDC, PPC::ADDCo },
  { PPC::ADDC8, PPC::ADDC8o },
  { PPC::ADDE, PPC::ADDEo },
  { PPC::ADDE8, PPC::ADDE8o },
  { PPC::ADDIC, PPC::ADDICo },
  { PPC::ADDME, PPC::ADDMEo },
  { PPC::ADDME8, PPC::ADDME8o },
  { PPC::ADDZE, PPC::ADDZEo },
  { PPC::ADDZE8, PPC::ADDZE8o },
  { PPC::AND, PPC::ANDo },
  { PPC::AND8, PPC::AND8o },
  { PPC::ANDC, PPC::ANDCo },
  { PPC::ANDC8, PPC::ANDC8o },
  { PPC::CNTLZD, PPC::CNTLZDo },
  { PPC::CNTLZW, PPC::CNTLZWo },
  { PPC::DIVD, PPC::DIVDo },
  { PPC::DIVDU, PPC::DIVDUo },
  { PPC::DIVW, PPC::DIVWo },
  { PPC::DIVWU, PPC::DIVWUo },
  { PPC::EQV, PPC::EQVo },
  { PPC::EQV8, PPC::EQV8o },
  { PPC::EXTSB, PPC::EXTSBo },
  { PPC::EXTSB8, PPC::EXTSB8o },
  { PPC::EXTSH, PPC::EXTSHo },
  { PPC::EXTSH8, PPC::EXTSH8o },
  { PPC::EXTSW, PPC::EXTSWo },
  { PPC::EXTSW_32_64, PPC::EXTSW_32_64o },
  { PPC::FABSD, PPC::FABSDo },
  { PPC::FABSS, PPC::FABSSo },
  { PPC::FADD, PPC::FADDo },
  { PPC::FADDS, PPC::FADDSo },
  { PPC::FCFID, PPC::FCFIDo },
  { PPC::FCFIDS, PPC::FCFIDSo },
  { PPC::FCFIDU, PPC::FCFIDUo },
  { PPC::FCFIDUS, PPC::FCFIDUSo },
  { PPC::FCPSGND, PPC::FCPSGNDo },
  { PPC::FCPSGNS, PPC::FCPSGNSo },
  { PPC::FCTID, PPC::FCTIDo },
  { PPC::FCTIDUZ, PPC::FCTIDUZo },
  { PPC::FCTIDZ, PPC::FCTIDZo },
  { PPC::FCTIW, PPC::FCTIWo },
  { PPC::FCTIWUZ, PPC::FCTIWUZo },
  { PPC::FCTIWZ, PPC::FCTIWZo },
  { PPC::FDIV, PPC::FDIVo },
  { PPC::FDIVS, PPC::FDIVSo },
  { PPC::FMADD, PPC::FMADDo },
  { PPC::FMADDS, PPC::FMADDSo },
  { PPC::FMR, PPC::FMRo },
  { PPC::FMSUB, PPC::FMSUBo },
  { PPC::FMSUBS, PPC::FMSUBSo },
  { PPC::FMUL, PPC::FMULo },
  { PPC::FMULS, PPC::FMULSo },
  { PPC::FNABSD, PPC::FNABSDo },
  { PPC::FNABSS, PPC::FNABSSo },
  { PPC::FNEGD, PPC::FNEGDo },
  { PPC::FNEGS, PPC::FNEGSo },
  { PPC::FNMADD, PPC::FNMADDo },
  { PPC::FNMADDS, PPC::FNMADDSo },
  { PPC::FNMSUB, PPC::FNMSUBo },
  { PPC::FNMSUBS, PPC::FNMSUBSo },
  { PPC::FRE, PPC::FREo },
  { PPC::FRES, PPC::FRESo },
  { PPC::FRIMD, PPC::FRIMDo },
  { PPC::FRIMS, PPC::FRIMSo },
  { PPC::FRIND, PPC::FRINDo },
  { PPC::FRINS, PPC::FRINSo },
  { PPC::FRIPD, PPC::FRIPDo },
  { PPC::FRIPS, PPC::FRIPSo },
  { PPC::FRIZD, PPC::FRIZDo },
  { PPC::FRIZS, PPC::FRIZSo },
  { PPC::FRSP, PPC::FRSPo },
  { PPC::FRSQRTE, PPC::FRSQRTEo },
  { PPC::FRSQRTES, PPC::FRSQRTESo },
  { PPC::FSELD, PPC::FSELDo },
  { PPC::FSELS, PPC::FSELSo },
  { PPC::FSQRT, PPC::FSQRTo },
  { PPC::FSQRTS, PPC::FSQRTSo },
  { PPC::FSUB, PPC::FSUBo },
  { PPC::FSUBS, PPC::FSUBSo },
  { PPC::MULHD, PPC::MULHDo },
  { PPC::MULHDU, PPC::MULHDUo },
  { PPC::MULHW, PPC::MULHWo },
  { PPC::MULHWU, PPC::MULHWUo },
  { PPC::MULLD, PPC::MULLDo },
  { PPC::MULLW, PPC::MULLWo },
  { PPC::NAND, PPC::NANDo },
  { PPC::NAND8, PPC::NAND8o },
  { PPC::NEG, PPC::NEGo },
  { PPC::NEG8, PPC::NEG8o },
  { PPC::NOR, PPC::NORo },
  { PPC::NOR8, PPC::NOR8o },
  { PPC::OR, PPC::ORo },
  { PPC::OR8, PPC::OR8o },
  { PPC::ORC, PPC::ORCo },
  { PPC::ORC8, PPC::ORC8o },
  { PPC::RLDCL, PPC::RLDCLo },
  { PPC::RLDCR, PPC::RLDCRo },
  { PPC::RLDIC, PPC::RLDICo },
  { PPC::RLDICL, PPC::RLDICLo },
  { PPC::RLDICR, PPC::RLDICRo },
  { PPC::RLDIMI, PPC::RLDIMIo },
  { PPC::RLWIMI, PPC::RLWIMIo },
  { PPC::RLWINM, PPC::RLWINMo },
  { PPC::RLWINM8, PPC::RLWINM8o },
  { PPC::RLWNM, PPC::RLWNMo },
  { PPC::SLD, PPC::SLDo },
  { PPC::SLW, PPC::SLWo },
  { PPC::SRAD, PPC::SRADo },
  { PPC::SRADI, PPC::SRADIo },
  { PPC::SRAW, PPC::SRAWo },
  { PPC::SRAWI, PPC::SRAWIo },
  { PPC::SRD, PPC::SRDo },
  { PPC::SRW, PPC::SRWo },
  { PPC::SUBF, PPC::SUBFo },
  { PPC::SUBF8, PPC::SUBF8o },
  { PPC::SUBFC, PPC::SUBFCo },
  { PPC::SUBFC8, PPC::SUBFC8o },
  { PPC::SUBFE, PPC::SUBFEo },
  { PPC::SUBFE8, PPC::SUBFE8o },
  { PPC::SUBFME, PPC::SUBFMEo },
  { PPC::SUBFME8, PPC::SUBFME8o },
  { PPC::SUBFZE, PPC::SUBFZEo },
  { PPC::SUBFZE8, PPC::SUBFZE8o },
  { PPC::XOR, PPC::XORo },
  { PPC::XOR8, PPC::XOR8o },
}; // End of getRecordFormOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 127;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getRecordFormOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getRecordFormOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getRecordFormOpcodeTable[mid][1];
}

} // End PPC namespace
} // End llvm namespace
#endif // GET_INSTRMAP_INFO

