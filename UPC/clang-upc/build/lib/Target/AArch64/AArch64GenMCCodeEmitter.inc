/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Machine Code Emitter                                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

uint64_t AArch64MCCodeEmitter::getBinaryCodeForInstr(const MCInst &MI,
    SmallVectorImpl<MCFixup> &Fixups) const {
  static const uint64_t InstBits[] = {
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(1310767104),	// ABS16b
    UINT64_C(1323350016),	// ABS2d
    UINT64_C(245413888),	// ABS2s
    UINT64_C(241219584),	// ABS4h
    UINT64_C(1319155712),	// ABS4s
    UINT64_C(237025280),	// ABS8b
    UINT64_C(1314961408),	// ABS8h
    UINT64_C(1591785472),	// ABSdd
    UINT64_C(973078528),	// ADCSwww
    UINT64_C(3120562176),	// ADCSxxx
    UINT64_C(436207616),	// ADCwww
    UINT64_C(2583691264),	// ADCxxx
    UINT64_C(1310736384),	// ADDHN2vvv_16b8h
    UINT64_C(1319124992),	// ADDHN2vvv_4s2d
    UINT64_C(1314930688),	// ADDHN2vvv_8h4s
    UINT64_C(245383168),	// ADDHNvvv_2s2d
    UINT64_C(241188864),	// ADDHNvvv_4h4s
    UINT64_C(236994560),	// ADDHNvvv_8b8h
    UINT64_C(1310768128),	// ADDP_16B
    UINT64_C(1323351040),	// ADDP_2D
    UINT64_C(245414912),	// ADDP_2S
    UINT64_C(241220608),	// ADDP_4H
    UINT64_C(1319156736),	// ADDP_4S
    UINT64_C(237026304),	// ADDP_8B
    UINT64_C(1314962432),	// ADDP_8H
    UINT64_C(1592899584),	// ADDPvv_D_2D
    UINT64_C(729808896),	// ADDSwww_asr
    UINT64_C(721420288),	// ADDSwww_lsl
    UINT64_C(725614592),	// ADDSwww_lsr
    UINT64_C(723550208),	// ADDSwww_sxtb
    UINT64_C(723558400),	// ADDSwww_sxth
    UINT64_C(723566592),	// ADDSwww_sxtw
    UINT64_C(723574784),	// ADDSwww_sxtx
    UINT64_C(723517440),	// ADDSwww_uxtb
    UINT64_C(723525632),	// ADDSwww_uxth
    UINT64_C(723533824),	// ADDSwww_uxtw
    UINT64_C(723542016),	// ADDSwww_uxtx
    UINT64_C(2871033856),	// ADDSxxw_sxtb
    UINT64_C(2871042048),	// ADDSxxw_sxth
    UINT64_C(2871050240),	// ADDSxxw_sxtw
    UINT64_C(2871001088),	// ADDSxxw_uxtb
    UINT64_C(2871009280),	// ADDSxxw_uxth
    UINT64_C(2871017472),	// ADDSxxw_uxtw
    UINT64_C(2877292544),	// ADDSxxx_asr
    UINT64_C(2868903936),	// ADDSxxx_lsl
    UINT64_C(2873098240),	// ADDSxxx_lsr
    UINT64_C(2871058432),	// ADDSxxx_sxtx
    UINT64_C(2871025664),	// ADDSxxx_uxtx
    UINT64_C(1311881216),	// ADDV_1b16b
    UINT64_C(238139392),	// ADDV_1b8b
    UINT64_C(242333696),	// ADDV_1h4h
    UINT64_C(1316075520),	// ADDV_1h8h
    UINT64_C(1320269824),	// ADDV_1s4s
    UINT64_C(1591772160),	// ADDddd
    UINT64_C(1310753792),	// ADDvvv_16B
    UINT64_C(1323336704),	// ADDvvv_2D
    UINT64_C(245400576),	// ADDvvv_2S
    UINT64_C(241206272),	// ADDvvv_4H
    UINT64_C(1319142400),	// ADDvvv_4S
    UINT64_C(237011968),	// ADDvvv_8B
    UINT64_C(1314948096),	// ADDvvv_8H
    UINT64_C(822083584),	// ADDwwi_lsl0_S
    UINT64_C(822083615),	// ADDwwi_lsl0_cmp
    UINT64_C(285212672),	// ADDwwi_lsl0_s
    UINT64_C(826277888),	// ADDwwi_lsl12_S
    UINT64_C(826277919),	// ADDwwi_lsl12_cmp
    UINT64_C(289406976),	// ADDwwi_lsl12_s
    UINT64_C(192937984),	// ADDwww_asr
    UINT64_C(184549376),	// ADDwww_lsl
    UINT64_C(188743680),	// ADDwww_lsr
    UINT64_C(186679296),	// ADDwww_sxtb
    UINT64_C(186687488),	// ADDwww_sxth
    UINT64_C(186695680),	// ADDwww_sxtw
    UINT64_C(186703872),	// ADDwww_sxtx
    UINT64_C(186646528),	// ADDwww_uxtb
    UINT64_C(186654720),	// ADDwww_uxth
    UINT64_C(186662912),	// ADDwww_uxtw
    UINT64_C(186671104),	// ADDwww_uxtx
    UINT64_C(2969567232),	// ADDxxi_lsl0_S
    UINT64_C(2969567263),	// ADDxxi_lsl0_cmp
    UINT64_C(2432696320),	// ADDxxi_lsl0_s
    UINT64_C(2973761536),	// ADDxxi_lsl12_S
    UINT64_C(2973761567),	// ADDxxi_lsl12_cmp
    UINT64_C(2436890624),	// ADDxxi_lsl12_s
    UINT64_C(2334162944),	// ADDxxw_sxtb
    UINT64_C(2334171136),	// ADDxxw_sxth
    UINT64_C(2334179328),	// ADDxxw_sxtw
    UINT64_C(2334130176),	// ADDxxw_uxtb
    UINT64_C(2334138368),	// ADDxxw_uxth
    UINT64_C(2334146560),	// ADDxxw_uxtw
    UINT64_C(2340421632),	// ADDxxx_asr
    UINT64_C(2332033024),	// ADDxxx_lsl
    UINT64_C(2336227328),	// ADDxxx_lsr
    UINT64_C(2334187520),	// ADDxxx_sxtx
    UINT64_C(2334154752),	// ADDxxx_uxtx
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(2415919104),	// ADRPxi
    UINT64_C(268435456),	// ADRxi
    UINT64_C(1311266816),	// AESD
    UINT64_C(1311262720),	// AESE
    UINT64_C(1311275008),	// AESIMC
    UINT64_C(1311270912),	// AESMC
    UINT64_C(1912602624),	// ANDSwwi
    UINT64_C(1786773504),	// ANDSwww_asr
    UINT64_C(1778384896),	// ANDSwww_lsl
    UINT64_C(1782579200),	// ANDSwww_lsr
    UINT64_C(1790967808),	// ANDSwww_ror
    UINT64_C(4060086272),	// ANDSxxi
    UINT64_C(3934257152),	// ANDSxxx_asr
    UINT64_C(3925868544),	// ANDSxxx_lsl
    UINT64_C(3930062848),	// ANDSxxx_lsr
    UINT64_C(3938451456),	// ANDSxxx_ror
    UINT64_C(1310727168),	// ANDvvv_16B
    UINT64_C(236985344),	// ANDvvv_8B
    UINT64_C(301989888),	// ANDwwi
    UINT64_C(176160768),	// ANDwww_asr
    UINT64_C(167772160),	// ANDwww_lsl
    UINT64_C(171966464),	// ANDwww_lsr
    UINT64_C(180355072),	// ANDwww_ror
    UINT64_C(2449473536),	// ANDxxi
    UINT64_C(2323644416),	// ANDxxx_asr
    UINT64_C(2315255808),	// ANDxxx_lsl
    UINT64_C(2319450112),	// ANDxxx_lsr
    UINT64_C(2327838720),	// ANDxxx_ror
    UINT64_C(448800768),	// ASRVwww
    UINT64_C(2596284416),	// ASRVxxx
    UINT64_C(318798848),	// ASRwwi
    UINT64_C(2470509568),	// ASRxxi
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(3574071296),	// ATix
    UINT64_C(855638016),	// BFIwwii
    UINT64_C(3007315968),	// BFIxxii
    UINT64_C(855638016),	// BFMwwii
    UINT64_C(3007315968),	// BFMxxii
    UINT64_C(855638016),	// BFXILwwii
    UINT64_C(3007315968),	// BFXILxxii
    UINT64_C(1788870656),	// BICSwww_asr
    UINT64_C(1780482048),	// BICSwww_lsl
    UINT64_C(1784676352),	// BICSwww_lsr
    UINT64_C(1793064960),	// BICSwww_ror
    UINT64_C(3936354304),	// BICSxxx_asr
    UINT64_C(3927965696),	// BICSxxx_lsl
    UINT64_C(3932160000),	// BICSxxx_lsr
    UINT64_C(3940548608),	// BICSxxx_ror
    UINT64_C(788534272),	// BICvi_lsl_2S
    UINT64_C(788567040),	// BICvi_lsl_4H
    UINT64_C(1862276096),	// BICvi_lsl_4S
    UINT64_C(1862308864),	// BICvi_lsl_8H
    UINT64_C(1314921472),	// BICvvv_16B
    UINT64_C(241179648),	// BICvvv_8B
    UINT64_C(178257920),	// BICwww_asr
    UINT64_C(169869312),	// BICwww_lsl
    UINT64_C(174063616),	// BICwww_lsr
    UINT64_C(182452224),	// BICwww_ror
    UINT64_C(2325741568),	// BICxxx_asr
    UINT64_C(2317352960),	// BICxxx_lsl
    UINT64_C(2321547264),	// BICxxx_lsr
    UINT64_C(2329935872),	// BICxxx_ror
    UINT64_C(1860180992),	// BIFvvv_16B
    UINT64_C(786439168),	// BIFvvv_8B
    UINT64_C(1855986688),	// BITvvv_16B
    UINT64_C(782244864),	// BITvvv_8B
    UINT64_C(3594452992),	// BLRx
    UINT64_C(2483027968),	// BLimm
    UINT64_C(3558866944),	// BRKi
    UINT64_C(3592355840),	// BRx
    UINT64_C(1851792384),	// BSLvvv_16B
    UINT64_C(778050560),	// BSLvvv_8B
    UINT64_C(1409286144),	// Bcc
    UINT64_C(335544320),	// Bimm
    UINT64_C(889192448),	// CBNZw
    UINT64_C(3036676096),	// CBNZx
    UINT64_C(872415232),	// CBZw
    UINT64_C(3019898880),	// CBZx
    UINT64_C(977274880),	// CCMNwi
    UINT64_C(977272832),	// CCMNww
    UINT64_C(3124758528),	// CCMNxi
    UINT64_C(3124756480),	// CCMNxx
    UINT64_C(2051016704),	// CCMPwi
    UINT64_C(2051014656),	// CCMPww
    UINT64_C(4198500352),	// CCMPxi
    UINT64_C(4198498304),	// CCMPxx
    UINT64_C(3573755999),	// CLREXi
    UINT64_C(1310738432),	// CLS16b
    UINT64_C(245385216),	// CLS2s
    UINT64_C(241190912),	// CLS4h
    UINT64_C(1319127040),	// CLS4s
    UINT64_C(236996608),	// CLS8b
    UINT64_C(1314932736),	// CLS8h
    UINT64_C(1522537472),	// CLSww
    UINT64_C(3670021120),	// CLSxx
    UINT64_C(1847609344),	// CLZ16b
    UINT64_C(782256128),	// CLZ2s
    UINT64_C(778061824),	// CLZ4h
    UINT64_C(1855997952),	// CLZ4s
    UINT64_C(773867520),	// CLZ8b
    UINT64_C(1851803648),	// CLZ8h
    UINT64_C(1522536448),	// CLZww
    UINT64_C(3670020096),	// CLZxx
    UINT64_C(2128645120),	// CMEQddd
    UINT64_C(1591777280),	// CMEQddi
    UINT64_C(1310758912),	// CMEQvvi_16B
    UINT64_C(1323341824),	// CMEQvvi_2D
    UINT64_C(245405696),	// CMEQvvi_2S
    UINT64_C(241211392),	// CMEQvvi_4H
    UINT64_C(1319147520),	// CMEQvvi_4S
    UINT64_C(237017088),	// CMEQvvi_8B
    UINT64_C(1314953216),	// CMEQvvi_8H
    UINT64_C(1847626752),	// CMEQvvv_16B
    UINT64_C(1860209664),	// CMEQvvv_2D
    UINT64_C(782273536),	// CMEQvvv_2S
    UINT64_C(778079232),	// CMEQvvv_4H
    UINT64_C(1856015360),	// CMEQvvv_4S
    UINT64_C(773884928),	// CMEQvvv_8B
    UINT64_C(1851821056),	// CMEQvvv_8H
    UINT64_C(1591753728),	// CMGEddd
    UINT64_C(2128644096),	// CMGEddi
    UINT64_C(1847625728),	// CMGEvvi_16B
    UINT64_C(1860208640),	// CMGEvvi_2D
    UINT64_C(782272512),	// CMGEvvi_2S
    UINT64_C(778078208),	// CMGEvvi_4H
    UINT64_C(1856014336),	// CMGEvvi_4S
    UINT64_C(773883904),	// CMGEvvi_8B
    UINT64_C(1851820032),	// CMGEvvi_8H
    UINT64_C(1310735360),	// CMGEvvv_16B
    UINT64_C(1323318272),	// CMGEvvv_2D
    UINT64_C(245382144),	// CMGEvvv_2S
    UINT64_C(241187840),	// CMGEvvv_4H
    UINT64_C(1319123968),	// CMGEvvv_4S
    UINT64_C(236993536),	// CMGEvvv_8B
    UINT64_C(1314929664),	// CMGEvvv_8H
    UINT64_C(1591751680),	// CMGTddd
    UINT64_C(1591773184),	// CMGTddi
    UINT64_C(1310754816),	// CMGTvvi_16B
    UINT64_C(1323337728),	// CMGTvvi_2D
    UINT64_C(245401600),	// CMGTvvi_2S
    UINT64_C(241207296),	// CMGTvvi_4H
    UINT64_C(1319143424),	// CMGTvvi_4S
    UINT64_C(237012992),	// CMGTvvi_8B
    UINT64_C(1314949120),	// CMGTvvi_8H
    UINT64_C(1310733312),	// CMGTvvv_16B
    UINT64_C(1323316224),	// CMGTvvv_2D
    UINT64_C(245380096),	// CMGTvvv_2S
    UINT64_C(241185792),	// CMGTvvv_4H
    UINT64_C(1319121920),	// CMGTvvv_4S
    UINT64_C(236991488),	// CMGTvvv_8B
    UINT64_C(1314927616),	// CMGTvvv_8H
    UINT64_C(2128622592),	// CMHIddd
    UINT64_C(1847604224),	// CMHIvvv_16B
    UINT64_C(1860187136),	// CMHIvvv_2D
    UINT64_C(782251008),	// CMHIvvv_2S
    UINT64_C(778056704),	// CMHIvvv_4H
    UINT64_C(1855992832),	// CMHIvvv_4S
    UINT64_C(773862400),	// CMHIvvv_8B
    UINT64_C(1851798528),	// CMHIvvv_8H
    UINT64_C(2128624640),	// CMHSddd
    UINT64_C(1847606272),	// CMHSvvv_16B
    UINT64_C(1860189184),	// CMHSvvv_2D
    UINT64_C(782253056),	// CMHSvvv_2S
    UINT64_C(778058752),	// CMHSvvv_4H
    UINT64_C(1855994880),	// CMHSvvv_4S
    UINT64_C(773864448),	// CMHSvvv_8B
    UINT64_C(1851800576),	// CMHSvvv_8H
    UINT64_C(2128648192),	// CMLEddi
    UINT64_C(1847629824),	// CMLEvvi_16B
    UINT64_C(1860212736),	// CMLEvvi_2D
    UINT64_C(782276608),	// CMLEvvi_2S
    UINT64_C(778082304),	// CMLEvvi_4H
    UINT64_C(1856018432),	// CMLEvvi_4S
    UINT64_C(773888000),	// CMLEvvi_8B
    UINT64_C(1851824128),	// CMLEvvi_8H
    UINT64_C(1591781376),	// CMLTddi
    UINT64_C(1310763008),	// CMLTvvi_16B
    UINT64_C(1323345920),	// CMLTvvi_2D
    UINT64_C(245409792),	// CMLTvvi_2S
    UINT64_C(241215488),	// CMLTvvi_4H
    UINT64_C(1319151616),	// CMLTvvi_4S
    UINT64_C(237021184),	// CMLTvvi_8B
    UINT64_C(1314957312),	// CMLTvvi_8H
    UINT64_C(729808927),	// CMNww_asr
    UINT64_C(721420319),	// CMNww_lsl
    UINT64_C(725614623),	// CMNww_lsr
    UINT64_C(723550239),	// CMNww_sxtb
    UINT64_C(723558431),	// CMNww_sxth
    UINT64_C(723566623),	// CMNww_sxtw
    UINT64_C(723574815),	// CMNww_sxtx
    UINT64_C(723517471),	// CMNww_uxtb
    UINT64_C(723525663),	// CMNww_uxth
    UINT64_C(723533855),	// CMNww_uxtw
    UINT64_C(723542047),	// CMNww_uxtx
    UINT64_C(2871033887),	// CMNxw_sxtb
    UINT64_C(2871042079),	// CMNxw_sxth
    UINT64_C(2871050271),	// CMNxw_sxtw
    UINT64_C(2871001119),	// CMNxw_uxtb
    UINT64_C(2871009311),	// CMNxw_uxth
    UINT64_C(2871017503),	// CMNxw_uxtw
    UINT64_C(2877292575),	// CMNxx_asr
    UINT64_C(2868903967),	// CMNxx_lsl
    UINT64_C(2873098271),	// CMNxx_lsr
    UINT64_C(2871058463),	// CMNxx_sxtx
    UINT64_C(2871025695),	// CMNxx_uxtx
    UINT64_C(1803550751),	// CMPww_asr
    UINT64_C(1795162143),	// CMPww_lsl
    UINT64_C(1799356447),	// CMPww_lsr
    UINT64_C(1797292063),	// CMPww_sxtb
    UINT64_C(1797300255),	// CMPww_sxth
    UINT64_C(1797308447),	// CMPww_sxtw
    UINT64_C(1797316639),	// CMPww_sxtx
    UINT64_C(1797259295),	// CMPww_uxtb
    UINT64_C(1797267487),	// CMPww_uxth
    UINT64_C(1797275679),	// CMPww_uxtw
    UINT64_C(1797283871),	// CMPww_uxtx
    UINT64_C(3944775711),	// CMPxw_sxtb
    UINT64_C(3944783903),	// CMPxw_sxth
    UINT64_C(3944792095),	// CMPxw_sxtw
    UINT64_C(3944742943),	// CMPxw_uxtb
    UINT64_C(3944751135),	// CMPxw_uxth
    UINT64_C(3944759327),	// CMPxw_uxtw
    UINT64_C(3951034399),	// CMPxx_asr
    UINT64_C(3942645791),	// CMPxx_lsl
    UINT64_C(3946840095),	// CMPxx_lsr
    UINT64_C(3944800287),	// CMPxx_sxtx
    UINT64_C(3944767519),	// CMPxx_uxtx
    UINT64_C(1591774208),	// CMTSTddd
    UINT64_C(1310755840),	// CMTSTvvv_16B
    UINT64_C(1323338752),	// CMTSTvvv_2D
    UINT64_C(245402624),	// CMTSTvvv_2S
    UINT64_C(241208320),	// CMTSTvvv_4H
    UINT64_C(1319144448),	// CMTSTvvv_4S
    UINT64_C(237014016),	// CMTSTvvv_8B
    UINT64_C(1314950144),	// CMTSTvvv_8H
    UINT64_C(1310742528),	// CNT16b
    UINT64_C(237000704),	// CNT8b
    UINT64_C(448806912),	// CRC32B_www
    UINT64_C(448811008),	// CRC32CB_www
    UINT64_C(448812032),	// CRC32CH_www
    UINT64_C(448813056),	// CRC32CW_www
    UINT64_C(2596297728),	// CRC32CX_wwx
    UINT64_C(448807936),	// CRC32H_www
    UINT64_C(448808960),	// CRC32W_www
    UINT64_C(2596293632),	// CRC32X_wwx
    UINT64_C(444596224),	// CSELwwwc
    UINT64_C(2592079872),	// CSELxxxc
    UINT64_C(444597248),	// CSINCwwwc
    UINT64_C(2592080896),	// CSINCxxxc
    UINT64_C(1518338048),	// CSINVwwwc
    UINT64_C(3665821696),	// CSINVxxxc
    UINT64_C(1518339072),	// CSNEGwwwc
    UINT64_C(3665822720),	// CSNEGxxxc
    UINT64_C(3567255553),	// DCPS1i
    UINT64_C(3567255554),	// DCPS2i
    UINT64_C(3567255555),	// DCPS3i
    UINT64_C(3574071296),	// DCix
    UINT64_C(3573756095),	// DMBi
    UINT64_C(3602842592),	// DRPS
    UINT64_C(3573756063),	// DSBi
    UINT64_C(1308691456),	// DUP16b
    UINT64_C(1309150208),	// DUP2d
    UINT64_C(235146240),	// DUP2s
    UINT64_C(235015168),	// DUP4h
    UINT64_C(1308888064),	// DUP4s
    UINT64_C(234949632),	// DUP8b
    UINT64_C(1308756992),	// DUP8h
    UINT64_C(1308689408),	// DUPELT16b
    UINT64_C(1309148160),	// DUPELT2d
    UINT64_C(235144192),	// DUPELT2s
    UINT64_C(235013120),	// DUPELT4h
    UINT64_C(1308886016),	// DUPELT4s
    UINT64_C(234947584),	// DUPELT8b
    UINT64_C(1308754944),	// DUPELT8h
    UINT64_C(1577124864),	// DUPbv_B
    UINT64_C(1577583616),	// DUPdv_D
    UINT64_C(1577190400),	// DUPhv_H
    UINT64_C(1577321472),	// DUPsv_S
    UINT64_C(1251999744),	// EONwww_asr
    UINT64_C(1243611136),	// EONwww_lsl
    UINT64_C(1247805440),	// EONwww_lsr
    UINT64_C(1256194048),	// EONwww_ror
    UINT64_C(3399483392),	// EONxxx_asr
    UINT64_C(3391094784),	// EONxxx_lsl
    UINT64_C(3395289088),	// EONxxx_lsr
    UINT64_C(3403677696),	// EONxxx_ror
    UINT64_C(1847598080),	// EORvvv_16B
    UINT64_C(773856256),	// EORvvv_8B
    UINT64_C(1375731712),	// EORwwi
    UINT64_C(1249902592),	// EORwww_asr
    UINT64_C(1241513984),	// EORwww_lsl
    UINT64_C(1245708288),	// EORwww_lsr
    UINT64_C(1254096896),	// EORwww_ror
    UINT64_C(3523215360),	// EORxxi
    UINT64_C(3397386240),	// EORxxx_asr
    UINT64_C(3388997632),	// EORxxx_lsl
    UINT64_C(3393191936),	// EORxxx_lsr
    UINT64_C(3401580544),	// EORxxx_ror
    UINT64_C(3600745440),	// ERET
    UINT64_C(327155712),	// EXTRwwwi
    UINT64_C(2478833664),	// EXTRxxxi
    UINT64_C(1845493760),	// EXTvvvi_16b
    UINT64_C(771751936),	// EXTvvvi_8b
    UINT64_C(0),
    UINT64_C(2128663552),	// FABDddd
    UINT64_C(2124469248),	// FABDsss
    UINT64_C(1860228096),	// FABDvvv_2D
    UINT64_C(782291968),	// FABDvvv_2S
    UINT64_C(1856033792),	// FABDvvv_4S
    UINT64_C(1323366400),	// FABS2d
    UINT64_C(245430272),	// FABS2s
    UINT64_C(1319172096),	// FABS4s
    UINT64_C(509657088),	// FABSdd
    UINT64_C(505462784),	// FABSss
    UINT64_C(2120281088),	// FACGEddd
    UINT64_C(2116086784),	// FACGEsss
    UINT64_C(1851845632),	// FACGEvvv_2D
    UINT64_C(773909504),	// FACGEvvv_2S
    UINT64_C(1847651328),	// FACGEvvv_4S
    UINT64_C(2128669696),	// FACGTddd
    UINT64_C(2124475392),	// FACGTsss
    UINT64_C(1860234240),	// FACGTvvv_2D
    UINT64_C(782298112),	// FACGTvvv_2S
    UINT64_C(1856039936),	// FACGTvvv_4S
    UINT64_C(1851839488),	// FADDP_2D
    UINT64_C(773903360),	// FADDP_2S
    UINT64_C(1847645184),	// FADDP_4S
    UINT64_C(2121324544),	// FADDPvv_D_2D
    UINT64_C(2117130240),	// FADDPvv_S_2S
    UINT64_C(509618176),	// FADDddd
    UINT64_C(505423872),	// FADDsss
    UINT64_C(1314968576),	// FADDvvv_2D
    UINT64_C(237032448),	// FADDvvv_2S
    UINT64_C(1310774272),	// FADDvvv_4S
    UINT64_C(509608976),	// FCCMPEdd
    UINT64_C(505414672),	// FCCMPEss
    UINT64_C(509608960),	// FCCMPdd
    UINT64_C(505414656),	// FCCMPss
    UINT64_C(1591793664),	// FCMEQZddi
    UINT64_C(1587599360),	// FCMEQZssi
    UINT64_C(1583408128),	// FCMEQddd
    UINT64_C(1579213824),	// FCMEQsss
    UINT64_C(1323358208),	// FCMEQvvi_2D
    UINT64_C(245422080),	// FCMEQvvi_2S
    UINT64_C(1319163904),	// FCMEQvvi_4S
    UINT64_C(1314972672),	// FCMEQvvv_2D
    UINT64_C(237036544),	// FCMEQvvv_2S
    UINT64_C(1310778368),	// FCMEQvvv_4S
    UINT64_C(2128660480),	// FCMGEZddi
    UINT64_C(2124466176),	// FCMGEZssi
    UINT64_C(2120279040),	// FCMGEddd
    UINT64_C(2116084736),	// FCMGEsss
    UINT64_C(1860225024),	// FCMGEvvi_2D
    UINT64_C(782288896),	// FCMGEvvi_2S
    UINT64_C(1856030720),	// FCMGEvvi_4S
    UINT64_C(1851843584),	// FCMGEvvv_2D
    UINT64_C(773907456),	// FCMGEvvv_2S
    UINT64_C(1847649280),	// FCMGEvvv_4S
    UINT64_C(1591789568),	// FCMGTZddi
    UINT64_C(1587595264),	// FCMGTZssi
    UINT64_C(2128667648),	// FCMGTddd
    UINT64_C(2124473344),	// FCMGTsss
    UINT64_C(1323354112),	// FCMGTvvi_2D
    UINT64_C(245417984),	// FCMGTvvi_2S
    UINT64_C(1319159808),	// FCMGTvvi_4S
    UINT64_C(1860232192),	// FCMGTvvv_2D
    UINT64_C(782296064),	// FCMGTvvv_2S
    UINT64_C(1856037888),	// FCMGTvvv_4S
    UINT64_C(2128664576),	// FCMLEZddi
    UINT64_C(2124470272),	// FCMLEZssi
    UINT64_C(1860229120),	// FCMLEvvi_2D
    UINT64_C(782292992),	// FCMLEvvi_2S
    UINT64_C(1856034816),	// FCMLEvvi_4S
    UINT64_C(1591797760),	// FCMLTZddi
    UINT64_C(1587603456),	// FCMLTZssi
    UINT64_C(1323362304),	// FCMLTvvi_2D
    UINT64_C(245426176),	// FCMLTvvi_2S
    UINT64_C(1319168000),	// FCMLTvvi_4S
    UINT64_C(509616128),	// FCMPdd_quiet
    UINT64_C(509616144),	// FCMPdd_sig
    UINT64_C(509616136),	// FCMPdi_quiet
    UINT64_C(509616152),	// FCMPdi_sig
    UINT64_C(505421832),	// FCMPsi_quiet
    UINT64_C(505421848),	// FCMPsi_sig
    UINT64_C(505421824),	// FCMPss_quiet
    UINT64_C(505421840),	// FCMPss_sig
    UINT64_C(509611008),	// FCSELdddc
    UINT64_C(505416704),	// FCSELsssc
    UINT64_C(1315031040),	// FCVTAS_2d
    UINT64_C(237094912),	// FCVTAS_2s
    UINT64_C(1310836736),	// FCVTAS_4s
    UINT64_C(1583466496),	// FCVTASdd
    UINT64_C(1579272192),	// FCVTASss
    UINT64_C(509870080),	// FCVTASwd
    UINT64_C(505675776),	// FCVTASws
    UINT64_C(2657353728),	// FCVTASxd
    UINT64_C(2653159424),	// FCVTASxs
    UINT64_C(1851901952),	// FCVTAU_2d
    UINT64_C(773965824),	// FCVTAU_2s
    UINT64_C(1847707648),	// FCVTAU_4s
    UINT64_C(2120337408),	// FCVTAUdd
    UINT64_C(2116143104),	// FCVTAUss
    UINT64_C(509935616),	// FCVTAUwd
    UINT64_C(505741312),	// FCVTAUws
    UINT64_C(2657419264),	// FCVTAUxd
    UINT64_C(2653224960),	// FCVTAUxs
    UINT64_C(241268736),	// FCVTL2s2d
    UINT64_C(237074432),	// FCVTL4h4s
    UINT64_C(1315010560),	// FCVTL4s2d
    UINT64_C(1310816256),	// FCVTL8h4s
    UINT64_C(1315026944),	// FCVTMS_2d
    UINT64_C(237090816),	// FCVTMS_2s
    UINT64_C(1310832640),	// FCVTMS_4s
    UINT64_C(1583462400),	// FCVTMSdd
    UINT64_C(1579268096),	// FCVTMSss
    UINT64_C(510656512),	// FCVTMSwd
    UINT64_C(506462208),	// FCVTMSws
    UINT64_C(2658140160),	// FCVTMSxd
    UINT64_C(2653945856),	// FCVTMSxs
    UINT64_C(1851897856),	// FCVTMU_2d
    UINT64_C(773961728),	// FCVTMU_2s
    UINT64_C(1847703552),	// FCVTMU_4s
    UINT64_C(2120333312),	// FCVTMUdd
    UINT64_C(2116139008),	// FCVTMUss
    UINT64_C(510722048),	// FCVTMUwd
    UINT64_C(506527744),	// FCVTMUws
    UINT64_C(2658205696),	// FCVTMUxd
    UINT64_C(2654011392),	// FCVTMUxs
    UINT64_C(241264640),	// FCVTN2d2s
    UINT64_C(1315006464),	// FCVTN2d4s
    UINT64_C(237070336),	// FCVTN4s4h
    UINT64_C(1310812160),	// FCVTN4s8h
    UINT64_C(1315022848),	// FCVTNS_2d
    UINT64_C(237086720),	// FCVTNS_2s
    UINT64_C(1310828544),	// FCVTNS_4s
    UINT64_C(1583458304),	// FCVTNSdd
    UINT64_C(1579264000),	// FCVTNSss
    UINT64_C(509607936),	// FCVTNSwd
    UINT64_C(505413632),	// FCVTNSws
    UINT64_C(2657091584),	// FCVTNSxd
    UINT64_C(2652897280),	// FCVTNSxs
    UINT64_C(1851893760),	// FCVTNU_2d
    UINT64_C(773957632),	// FCVTNU_2s
    UINT64_C(1847699456),	// FCVTNU_4s
    UINT64_C(2120329216),	// FCVTNUdd
    UINT64_C(2116134912),	// FCVTNUss
    UINT64_C(509673472),	// FCVTNUwd
    UINT64_C(505479168),	// FCVTNUws
    UINT64_C(2657157120),	// FCVTNUxd
    UINT64_C(2652962816),	// FCVTNUxs
    UINT64_C(1323411456),	// FCVTPS_2d
    UINT64_C(245475328),	// FCVTPS_2s
    UINT64_C(1319217152),	// FCVTPS_4s
    UINT64_C(1591846912),	// FCVTPSdd
    UINT64_C(1587652608),	// FCVTPSss
    UINT64_C(510132224),	// FCVTPSwd
    UINT64_C(505937920),	// FCVTPSws
    UINT64_C(2657615872),	// FCVTPSxd
    UINT64_C(2653421568),	// FCVTPSxs
    UINT64_C(1860282368),	// FCVTPU_2d
    UINT64_C(782346240),	// FCVTPU_2s
    UINT64_C(1856088064),	// FCVTPU_4s
    UINT64_C(2128717824),	// FCVTPUdd
    UINT64_C(2124523520),	// FCVTPUss
    UINT64_C(510197760),	// FCVTPUwd
    UINT64_C(506003456),	// FCVTPUws
    UINT64_C(2657681408),	// FCVTPUxd
    UINT64_C(2653487104),	// FCVTPUxs
    UINT64_C(2120312832),	// FCVTXN
    UINT64_C(778135552),	// FCVTXN2d2s
    UINT64_C(1851877376),	// FCVTXN2d4s
    UINT64_C(1323415552),	// FCVTZS_2d
    UINT64_C(245479424),	// FCVTZS_2s
    UINT64_C(1319221248),	// FCVTZS_4s
    UINT64_C(1598094336),	// FCVTZS_Nddi
    UINT64_C(1595997184),	// FCVTZS_Nssi
    UINT64_C(1591851008),	// FCVTZSdd
    UINT64_C(1587656704),	// FCVTZSss
    UINT64_C(511180800),	// FCVTZSwd
    UINT64_C(509083648),	// FCVTZSwdi
    UINT64_C(506986496),	// FCVTZSws
    UINT64_C(504889344),	// FCVTZSwsi
    UINT64_C(2658664448),	// FCVTZSxd
    UINT64_C(2656567296),	// FCVTZSxdi
    UINT64_C(2654470144),	// FCVTZSxs
    UINT64_C(2652372992),	// FCVTZSxsi
    UINT64_C(1860286464),	// FCVTZU_2d
    UINT64_C(782350336),	// FCVTZU_2s
    UINT64_C(1856092160),	// FCVTZU_4s
    UINT64_C(2134965248),	// FCVTZU_Nddi
    UINT64_C(2132868096),	// FCVTZU_Nssi
    UINT64_C(2128721920),	// FCVTZUdd
    UINT64_C(2124527616),	// FCVTZUss
    UINT64_C(511246336),	// FCVTZUwd
    UINT64_C(509149184),	// FCVTZUwdi
    UINT64_C(507052032),	// FCVTZUws
    UINT64_C(504954880),	// FCVTZUwsi
    UINT64_C(2658729984),	// FCVTZUxd
    UINT64_C(2656632832),	// FCVTZUxdi
    UINT64_C(2654535680),	// FCVTZUxs
    UINT64_C(2652438528),	// FCVTZUxsi
    UINT64_C(518176768),	// FCVTdh
    UINT64_C(505593856),	// FCVTds
    UINT64_C(509853696),	// FCVThd
    UINT64_C(505659392),	// FCVThs
    UINT64_C(509755392),	// FCVTsd
    UINT64_C(518144000),	// FCVTsh
    UINT64_C(509614080),	// FDIVddd
    UINT64_C(505419776),	// FDIVsss
    UINT64_C(1851849728),	// FDIVvvv_2D
    UINT64_C(773913600),	// FDIVvvv_2S
    UINT64_C(1847655424),	// FDIVvvv_4S
    UINT64_C(524288000),	// FMADDdddd
    UINT64_C(520093696),	// FMADDssss
    UINT64_C(2121320448),	// FMAXNMPvv_D_2D
    UINT64_C(2117126144),	// FMAXNMPvv_S_2S
    UINT64_C(1851835392),	// FMAXNMPvvv_2D
    UINT64_C(773899264),	// FMAXNMPvvv_2S
    UINT64_C(1847641088),	// FMAXNMPvvv_4S
    UINT64_C(1848690688),	// FMAXNMV_1s4s
    UINT64_C(509634560),	// FMAXNMddd
    UINT64_C(505440256),	// FMAXNMsss
    UINT64_C(1314964480),	// FMAXNMvvv_2D
    UINT64_C(237028352),	// FMAXNMvvv_2S
    UINT64_C(1310770176),	// FMAXNMvvv_4S
    UINT64_C(2121332736),	// FMAXPvv_D_2D
    UINT64_C(2117138432),	// FMAXPvv_S_2S
    UINT64_C(1851847680),	// FMAXPvvv_2D
    UINT64_C(773911552),	// FMAXPvvv_2S
    UINT64_C(1847653376),	// FMAXPvvv_4S
    UINT64_C(1848702976),	// FMAXV_1s4s
    UINT64_C(509626368),	// FMAXddd
    UINT64_C(505432064),	// FMAXsss
    UINT64_C(1314976768),	// FMAXvvv_2D
    UINT64_C(237040640),	// FMAXvvv_2S
    UINT64_C(1310782464),	// FMAXvvv_4S
    UINT64_C(2129709056),	// FMINNMPvv_D_2D
    UINT64_C(2125514752),	// FMINNMPvv_S_2S
    UINT64_C(1860224000),	// FMINNMPvvv_2D
    UINT64_C(782287872),	// FMINNMPvvv_2S
    UINT64_C(1856029696),	// FMINNMPvvv_4S
    UINT64_C(1857079296),	// FMINNMV_1s4s
    UINT64_C(509638656),	// FMINNMddd
    UINT64_C(505444352),	// FMINNMsss
    UINT64_C(1323353088),	// FMINNMvvv_2D
    UINT64_C(245416960),	// FMINNMvvv_2S
    UINT64_C(1319158784),	// FMINNMvvv_4S
    UINT64_C(2129721344),	// FMINPvv_D_2D
    UINT64_C(2125527040),	// FMINPvv_S_2S
    UINT64_C(1860236288),	// FMINPvvv_2D
    UINT64_C(782300160),	// FMINPvvv_2S
    UINT64_C(1856041984),	// FMINPvvv_4S
    UINT64_C(1857091584),	// FMINV_1s4s
    UINT64_C(509630464),	// FMINddd
    UINT64_C(505436160),	// FMINsss
    UINT64_C(1323365376),	// FMINvvv_2D
    UINT64_C(245429248),	// FMINvvv_2S
    UINT64_C(1319171072),	// FMINvvv_4S
    UINT64_C(1606422528),	// FMLAddv_2D
    UINT64_C(1602228224),	// FMLAssv_4S
    UINT64_C(1337987072),	// FMLAvve_2d2d
    UINT64_C(260050944),	// FMLAvve_2s4s
    UINT64_C(1333792768),	// FMLAvve_4s4s
    UINT64_C(1314966528),	// FMLAvvv_2D
    UINT64_C(237030400),	// FMLAvvv_2S
    UINT64_C(1310772224),	// FMLAvvv_4S
    UINT64_C(1606438912),	// FMLSddv_2D
    UINT64_C(1602244608),	// FMLSssv_4S
    UINT64_C(1338003456),	// FMLSvve_2d2d
    UINT64_C(260067328),	// FMLSvve_2s4s
    UINT64_C(1333809152),	// FMLSvve_4s4s
    UINT64_C(1323355136),	// FMLSvvv_2D
    UINT64_C(245419008),	// FMLSvvv_2S
    UINT64_C(1319160832),	// FMLSvvv_4S
    UINT64_C(509624320),	// FMOVdd
    UINT64_C(509612032),	// FMOVdi
    UINT64_C(2657550336),	// FMOVdx
    UINT64_C(505417728),	// FMOVsi
    UINT64_C(505430016),	// FMOVss
    UINT64_C(505872384),	// FMOVsw
    UINT64_C(1862333440),	// FMOVvi_2D
    UINT64_C(251720704),	// FMOVvi_2S
    UINT64_C(1325462528),	// FMOVvi_4S
    UINT64_C(2662268928),	// FMOVvx
    UINT64_C(505806848),	// FMOVws
    UINT64_C(2657484800),	// FMOVxd
    UINT64_C(2662203392),	// FMOVxv
    UINT64_C(524320768),	// FMSUBdddd
    UINT64_C(520126464),	// FMSUBssss
    UINT64_C(1583406080),	// FMULXddd
    UINT64_C(2143326208),	// FMULXddv_2D
    UINT64_C(1579211776),	// FMULXsss
    UINT64_C(2139131904),	// FMULXssv_4S
    UINT64_C(1874890752),	// FMULXve_2d2d
    UINT64_C(796954624),	// FMULXve_2s4s
    UINT64_C(1870696448),	// FMULXve_4s4s
    UINT64_C(1314970624),	// FMULXvvv_2D
    UINT64_C(237034496),	// FMULXvvv_2S
    UINT64_C(1310776320),	// FMULXvvv_4S
    UINT64_C(509609984),	// FMULddd
    UINT64_C(1606455296),	// FMULddv_2D
    UINT64_C(505415680),	// FMULsss
    UINT64_C(1602260992),	// FMULssv_4S
    UINT64_C(1338019840),	// FMULve_2d2d
    UINT64_C(260083712),	// FMULve_2s4s
    UINT64_C(1333825536),	// FMULve_4s4s
    UINT64_C(1851841536),	// FMULvvv_2D
    UINT64_C(773905408),	// FMULvvv_2S
    UINT64_C(1847647232),	// FMULvvv_4S
    UINT64_C(1860237312),	// FNEG2d
    UINT64_C(782301184),	// FNEG2s
    UINT64_C(1856043008),	// FNEG4s
    UINT64_C(509689856),	// FNEGdd
    UINT64_C(505495552),	// FNEGss
    UINT64_C(526385152),	// FNMADDdddd
    UINT64_C(522190848),	// FNMADDssss
    UINT64_C(526417920),	// FNMSUBdddd
    UINT64_C(522223616),	// FNMSUBssss
    UINT64_C(509642752),	// FNMULddd
    UINT64_C(505448448),	// FNMULsss
    UINT64_C(1323423744),	// FRECPE_2d
    UINT64_C(245487616),	// FRECPE_2s
    UINT64_C(1319229440),	// FRECPE_4s
    UINT64_C(1591859200),	// FRECPEdd
    UINT64_C(1587664896),	// FRECPEss
    UINT64_C(1583414272),	// FRECPSddd
    UINT64_C(1579219968),	// FRECPSsss
    UINT64_C(1314978816),	// FRECPSvvv_2D
    UINT64_C(237042688),	// FRECPSvvv_2S
    UINT64_C(1310784512),	// FRECPSvvv_4S
    UINT64_C(1591867392),	// FRECPXdd
    UINT64_C(1587673088),	// FRECPXss
    UINT64_C(1851885568),	// FRINTA_2d
    UINT64_C(773949440),	// FRINTA_2s
    UINT64_C(1847691264),	// FRINTA_4s
    UINT64_C(510017536),	// FRINTAdd
    UINT64_C(505823232),	// FRINTAss
    UINT64_C(1860278272),	// FRINTI_2d
    UINT64_C(782342144),	// FRINTI_2s
    UINT64_C(1856083968),	// FRINTI_4s
    UINT64_C(510115840),	// FRINTIdd
    UINT64_C(505921536),	// FRINTIss
    UINT64_C(1315018752),	// FRINTM_2d
    UINT64_C(237082624),	// FRINTM_2s
    UINT64_C(1310824448),	// FRINTM_4s
    UINT64_C(509952000),	// FRINTMdd
    UINT64_C(505757696),	// FRINTMss
    UINT64_C(1315014656),	// FRINTN_2d
    UINT64_C(237078528),	// FRINTN_2s
    UINT64_C(1310820352),	// FRINTN_4s
    UINT64_C(509886464),	// FRINTNdd
    UINT64_C(505692160),	// FRINTNss
    UINT64_C(1323403264),	// FRINTP_2d
    UINT64_C(245467136),	// FRINTP_2s
    UINT64_C(1319208960),	// FRINTP_4s
    UINT64_C(509919232),	// FRINTPdd
    UINT64_C(505724928),	// FRINTPss
    UINT64_C(1851889664),	// FRINTX_2d
    UINT64_C(773953536),	// FRINTX_2s
    UINT64_C(1847695360),	// FRINTX_4s
    UINT64_C(510083072),	// FRINTXdd
    UINT64_C(505888768),	// FRINTXss
    UINT64_C(1323407360),	// FRINTZ_2d
    UINT64_C(245471232),	// FRINTZ_2s
    UINT64_C(1319213056),	// FRINTZ_4s
    UINT64_C(509984768),	// FRINTZdd
    UINT64_C(505790464),	// FRINTZss
    UINT64_C(1860294656),	// FRSQRTE_2d
    UINT64_C(782358528),	// FRSQRTE_2s
    UINT64_C(1856100352),	// FRSQRTE_4s
    UINT64_C(2128730112),	// FRSQRTEdd
    UINT64_C(2124535808),	// FRSQRTEss
    UINT64_C(1591802880),	// FRSQRTSddd
    UINT64_C(1587608576),	// FRSQRTSsss
    UINT64_C(1323367424),	// FRSQRTSvvv_2D
    UINT64_C(245431296),	// FRSQRTSvvv_2S
    UINT64_C(1319173120),	// FRSQRTSvvv_4S
    UINT64_C(1860302848),	// FSQRT_2d
    UINT64_C(782366720),	// FSQRT_2s
    UINT64_C(1856108544),	// FSQRT_4s
    UINT64_C(509722624),	// FSQRTdd
    UINT64_C(505528320),	// FSQRTss
    UINT64_C(509622272),	// FSUBddd
    UINT64_C(505427968),	// FSUBsss
    UINT64_C(1323357184),	// FSUBvvv_2D
    UINT64_C(245421056),	// FSUBvvv_2S
    UINT64_C(1319162880),	// FSUBvvv_4S
    UINT64_C(3573751839),	// HINTi
    UINT64_C(3560964096),	// HLTi
    UINT64_C(3556769794),	// HVCi
    UINT64_C(3574071327),	// ICi
    UINT64_C(3574071296),	// ICix
    UINT64_C(1845560320),	// INSELb
    UINT64_C(1846019072),	// INSELd
    UINT64_C(1845625856),	// INSELh
    UINT64_C(1845756928),	// INSELs
    UINT64_C(1308695552),	// INSbw
    UINT64_C(1309154304),	// INSdx
    UINT64_C(1308761088),	// INShw
    UINT64_C(1308892160),	// INSsw
    UINT64_C(3573756127),	// ISBi
    UINT64_C(222298112),	// LD1LN_B
    UINT64_C(222331904),	// LD1LN_D
    UINT64_C(222314496),	// LD1LN_H
    UINT64_C(222330880),	// LD1LN_S
    UINT64_C(232718336),	// LD1LN_WB_B_fixed
    UINT64_C(230686720),	// LD1LN_WB_B_register
    UINT64_C(232752128),	// LD1LN_WB_D_fixed
    UINT64_C(230720512),	// LD1LN_WB_D_register
    UINT64_C(232734720),	// LD1LN_WB_H_fixed
    UINT64_C(230703104),	// LD1LN_WB_H_register
    UINT64_C(232751104),	// LD1LN_WB_S_fixed
    UINT64_C(230719488),	// LD1LN_WB_S_register
    UINT64_C(1296089088),	// LD1R_16B
    UINT64_C(222350336),	// LD1R_1D
    UINT64_C(1296092160),	// LD1R_2D
    UINT64_C(222349312),	// LD1R_2S
    UINT64_C(222348288),	// LD1R_4H
    UINT64_C(1296091136),	// LD1R_4S
    UINT64_C(222347264),	// LD1R_8B
    UINT64_C(1296090112),	// LD1R_8H
    UINT64_C(1306509312),	// LD1R_WB_16B_fixed
    UINT64_C(1304477696),	// LD1R_WB_16B_register
    UINT64_C(232770560),	// LD1R_WB_1D_fixed
    UINT64_C(230738944),	// LD1R_WB_1D_register
    UINT64_C(1306512384),	// LD1R_WB_2D_fixed
    UINT64_C(1304480768),	// LD1R_WB_2D_register
    UINT64_C(232769536),	// LD1R_WB_2S_fixed
    UINT64_C(230737920),	// LD1R_WB_2S_register
    UINT64_C(232768512),	// LD1R_WB_4H_fixed
    UINT64_C(230736896),	// LD1R_WB_4H_register
    UINT64_C(1306511360),	// LD1R_WB_4S_fixed
    UINT64_C(1304479744),	// LD1R_WB_4S_register
    UINT64_C(232767488),	// LD1R_WB_8B_fixed
    UINT64_C(230735872),	// LD1R_WB_8B_register
    UINT64_C(1306510336),	// LD1R_WB_8H_fixed
    UINT64_C(1304478720),	// LD1R_WB_8H_register
    UINT64_C(1289711616),	// LD1WB_16B_fixed
    UINT64_C(1287680000),	// LD1WB_16B_register
    UINT64_C(215972864),	// LD1WB_1D_fixed
    UINT64_C(213941248),	// LD1WB_1D_register
    UINT64_C(1289714688),	// LD1WB_2D_fixed
    UINT64_C(1287683072),	// LD1WB_2D_register
    UINT64_C(215971840),	// LD1WB_2S_fixed
    UINT64_C(213940224),	// LD1WB_2S_register
    UINT64_C(215970816),	// LD1WB_4H_fixed
    UINT64_C(213939200),	// LD1WB_4H_register
    UINT64_C(1289713664),	// LD1WB_4S_fixed
    UINT64_C(1287682048),	// LD1WB_4S_register
    UINT64_C(215969792),	// LD1WB_8B_fixed
    UINT64_C(213938176),	// LD1WB_8B_register
    UINT64_C(1289712640),	// LD1WB_8H_fixed
    UINT64_C(1287681024),	// LD1WB_8H_register
    UINT64_C(1279291392),	// LD1_16B
    UINT64_C(205552640),	// LD1_1D
    UINT64_C(1279294464),	// LD1_2D
    UINT64_C(205551616),	// LD1_2S
    UINT64_C(205550592),	// LD1_4H
    UINT64_C(1279293440),	// LD1_4S
    UINT64_C(205549568),	// LD1_8B
    UINT64_C(1279292416),	// LD1_8H
    UINT64_C(1289723904),	// LD1x2WB_16B_fixed
    UINT64_C(1287692288),	// LD1x2WB_16B_register
    UINT64_C(215985152),	// LD1x2WB_1D_fixed
    UINT64_C(213953536),	// LD1x2WB_1D_register
    UINT64_C(1289726976),	// LD1x2WB_2D_fixed
    UINT64_C(1287695360),	// LD1x2WB_2D_register
    UINT64_C(215984128),	// LD1x2WB_2S_fixed
    UINT64_C(213952512),	// LD1x2WB_2S_register
    UINT64_C(215983104),	// LD1x2WB_4H_fixed
    UINT64_C(213951488),	// LD1x2WB_4H_register
    UINT64_C(1289725952),	// LD1x2WB_4S_fixed
    UINT64_C(1287694336),	// LD1x2WB_4S_register
    UINT64_C(215982080),	// LD1x2WB_8B_fixed
    UINT64_C(213950464),	// LD1x2WB_8B_register
    UINT64_C(1289724928),	// LD1x2WB_8H_fixed
    UINT64_C(1287693312),	// LD1x2WB_8H_register
    UINT64_C(1279303680),	// LD1x2_16B
    UINT64_C(205564928),	// LD1x2_1D
    UINT64_C(1279306752),	// LD1x2_2D
    UINT64_C(205563904),	// LD1x2_2S
    UINT64_C(205562880),	// LD1x2_4H
    UINT64_C(1279305728),	// LD1x2_4S
    UINT64_C(205561856),	// LD1x2_8B
    UINT64_C(1279304704),	// LD1x2_8H
    UINT64_C(1289707520),	// LD1x3WB_16B_fixed
    UINT64_C(1287675904),	// LD1x3WB_16B_register
    UINT64_C(215968768),	// LD1x3WB_1D_fixed
    UINT64_C(213937152),	// LD1x3WB_1D_register
    UINT64_C(1289710592),	// LD1x3WB_2D_fixed
    UINT64_C(1287678976),	// LD1x3WB_2D_register
    UINT64_C(215967744),	// LD1x3WB_2S_fixed
    UINT64_C(213936128),	// LD1x3WB_2S_register
    UINT64_C(215966720),	// LD1x3WB_4H_fixed
    UINT64_C(213935104),	// LD1x3WB_4H_register
    UINT64_C(1289709568),	// LD1x3WB_4S_fixed
    UINT64_C(1287677952),	// LD1x3WB_4S_register
    UINT64_C(215965696),	// LD1x3WB_8B_fixed
    UINT64_C(213934080),	// LD1x3WB_8B_register
    UINT64_C(1289708544),	// LD1x3WB_8H_fixed
    UINT64_C(1287676928),	// LD1x3WB_8H_register
    UINT64_C(1279287296),	// LD1x3_16B
    UINT64_C(205548544),	// LD1x3_1D
    UINT64_C(1279290368),	// LD1x3_2D
    UINT64_C(205547520),	// LD1x3_2S
    UINT64_C(205546496),	// LD1x3_4H
    UINT64_C(1279289344),	// LD1x3_4S
    UINT64_C(205545472),	// LD1x3_8B
    UINT64_C(1279288320),	// LD1x3_8H
    UINT64_C(1289691136),	// LD1x4WB_16B_fixed
    UINT64_C(1287659520),	// LD1x4WB_16B_register
    UINT64_C(215952384),	// LD1x4WB_1D_fixed
    UINT64_C(213920768),	// LD1x4WB_1D_register
    UINT64_C(1289694208),	// LD1x4WB_2D_fixed
    UINT64_C(1287662592),	// LD1x4WB_2D_register
    UINT64_C(215951360),	// LD1x4WB_2S_fixed
    UINT64_C(213919744),	// LD1x4WB_2S_register
    UINT64_C(215950336),	// LD1x4WB_4H_fixed
    UINT64_C(213918720),	// LD1x4WB_4H_register
    UINT64_C(1289693184),	// LD1x4WB_4S_fixed
    UINT64_C(1287661568),	// LD1x4WB_4S_register
    UINT64_C(215949312),	// LD1x4WB_8B_fixed
    UINT64_C(213917696),	// LD1x4WB_8B_register
    UINT64_C(1289692160),	// LD1x4WB_8H_fixed
    UINT64_C(1287660544),	// LD1x4WB_8H_register
    UINT64_C(1279270912),	// LD1x4_16B
    UINT64_C(205532160),	// LD1x4_1D
    UINT64_C(1279273984),	// LD1x4_2D
    UINT64_C(205531136),	// LD1x4_2S
    UINT64_C(205530112),	// LD1x4_4H
    UINT64_C(1279272960),	// LD1x4_4S
    UINT64_C(205529088),	// LD1x4_8B
    UINT64_C(1279271936),	// LD1x4_8H
    UINT64_C(224395264),	// LD2LN_B
    UINT64_C(224429056),	// LD2LN_D
    UINT64_C(224411648),	// LD2LN_H
    UINT64_C(224428032),	// LD2LN_S
    UINT64_C(234815488),	// LD2LN_WB_B_fixed
    UINT64_C(232783872),	// LD2LN_WB_B_register
    UINT64_C(234849280),	// LD2LN_WB_D_fixed
    UINT64_C(232817664),	// LD2LN_WB_D_register
    UINT64_C(234831872),	// LD2LN_WB_H_fixed
    UINT64_C(232800256),	// LD2LN_WB_H_register
    UINT64_C(234848256),	// LD2LN_WB_S_fixed
    UINT64_C(232816640),	// LD2LN_WB_S_register
    UINT64_C(1298186240),	// LD2R_16B
    UINT64_C(224447488),	// LD2R_1D
    UINT64_C(1298189312),	// LD2R_2D
    UINT64_C(224446464),	// LD2R_2S
    UINT64_C(224445440),	// LD2R_4H
    UINT64_C(1298188288),	// LD2R_4S
    UINT64_C(224444416),	// LD2R_8B
    UINT64_C(1298187264),	// LD2R_8H
    UINT64_C(1308606464),	// LD2R_WB_16B_fixed
    UINT64_C(1306574848),	// LD2R_WB_16B_register
    UINT64_C(234867712),	// LD2R_WB_1D_fixed
    UINT64_C(232836096),	// LD2R_WB_1D_register
    UINT64_C(1308609536),	// LD2R_WB_2D_fixed
    UINT64_C(1306577920),	// LD2R_WB_2D_register
    UINT64_C(234866688),	// LD2R_WB_2S_fixed
    UINT64_C(232835072),	// LD2R_WB_2S_register
    UINT64_C(234865664),	// LD2R_WB_4H_fixed
    UINT64_C(232834048),	// LD2R_WB_4H_register
    UINT64_C(1308608512),	// LD2R_WB_4S_fixed
    UINT64_C(1306576896),	// LD2R_WB_4S_register
    UINT64_C(234864640),	// LD2R_WB_8B_fixed
    UINT64_C(232833024),	// LD2R_WB_8B_register
    UINT64_C(1308607488),	// LD2R_WB_8H_fixed
    UINT64_C(1306575872),	// LD2R_WB_8H_register
    UINT64_C(1289715712),	// LD2WB_16B_fixed
    UINT64_C(1287684096),	// LD2WB_16B_register
    UINT64_C(1289718784),	// LD2WB_2D_fixed
    UINT64_C(1287687168),	// LD2WB_2D_register
    UINT64_C(215975936),	// LD2WB_2S_fixed
    UINT64_C(213944320),	// LD2WB_2S_register
    UINT64_C(215974912),	// LD2WB_4H_fixed
    UINT64_C(213943296),	// LD2WB_4H_register
    UINT64_C(1289717760),	// LD2WB_4S_fixed
    UINT64_C(1287686144),	// LD2WB_4S_register
    UINT64_C(215973888),	// LD2WB_8B_fixed
    UINT64_C(213942272),	// LD2WB_8B_register
    UINT64_C(1289716736),	// LD2WB_8H_fixed
    UINT64_C(1287685120),	// LD2WB_8H_register
    UINT64_C(1279295488),	// LD2_16B
    UINT64_C(1279298560),	// LD2_2D
    UINT64_C(205555712),	// LD2_2S
    UINT64_C(205554688),	// LD2_4H
    UINT64_C(1279297536),	// LD2_4S
    UINT64_C(205553664),	// LD2_8B
    UINT64_C(1279296512),	// LD2_8H
    UINT64_C(222306304),	// LD3LN_B
    UINT64_C(222340096),	// LD3LN_D
    UINT64_C(222322688),	// LD3LN_H
    UINT64_C(222339072),	// LD3LN_S
    UINT64_C(232726528),	// LD3LN_WB_B_fixed
    UINT64_C(230694912),	// LD3LN_WB_B_register
    UINT64_C(232760320),	// LD3LN_WB_D_fixed
    UINT64_C(230728704),	// LD3LN_WB_D_register
    UINT64_C(232742912),	// LD3LN_WB_H_fixed
    UINT64_C(230711296),	// LD3LN_WB_H_register
    UINT64_C(232759296),	// LD3LN_WB_S_fixed
    UINT64_C(230727680),	// LD3LN_WB_S_register
    UINT64_C(1296097280),	// LD3R_16B
    UINT64_C(222358528),	// LD3R_1D
    UINT64_C(1296100352),	// LD3R_2D
    UINT64_C(222357504),	// LD3R_2S
    UINT64_C(222356480),	// LD3R_4H
    UINT64_C(1296099328),	// LD3R_4S
    UINT64_C(222355456),	// LD3R_8B
    UINT64_C(1296098304),	// LD3R_8H
    UINT64_C(1306517504),	// LD3R_WB_16B_fixed
    UINT64_C(1304485888),	// LD3R_WB_16B_register
    UINT64_C(232778752),	// LD3R_WB_1D_fixed
    UINT64_C(230747136),	// LD3R_WB_1D_register
    UINT64_C(1306520576),	// LD3R_WB_2D_fixed
    UINT64_C(1304488960),	// LD3R_WB_2D_register
    UINT64_C(232777728),	// LD3R_WB_2S_fixed
    UINT64_C(230746112),	// LD3R_WB_2S_register
    UINT64_C(232776704),	// LD3R_WB_4H_fixed
    UINT64_C(230745088),	// LD3R_WB_4H_register
    UINT64_C(1306519552),	// LD3R_WB_4S_fixed
    UINT64_C(1304487936),	// LD3R_WB_4S_register
    UINT64_C(232775680),	// LD3R_WB_8B_fixed
    UINT64_C(230744064),	// LD3R_WB_8B_register
    UINT64_C(1306518528),	// LD3R_WB_8H_fixed
    UINT64_C(1304486912),	// LD3R_WB_8H_register
    UINT64_C(1289699328),	// LD3WB_16B_fixed
    UINT64_C(1287667712),	// LD3WB_16B_register
    UINT64_C(1289702400),	// LD3WB_2D_fixed
    UINT64_C(1287670784),	// LD3WB_2D_register
    UINT64_C(215959552),	// LD3WB_2S_fixed
    UINT64_C(213927936),	// LD3WB_2S_register
    UINT64_C(215958528),	// LD3WB_4H_fixed
    UINT64_C(213926912),	// LD3WB_4H_register
    UINT64_C(1289701376),	// LD3WB_4S_fixed
    UINT64_C(1287669760),	// LD3WB_4S_register
    UINT64_C(215957504),	// LD3WB_8B_fixed
    UINT64_C(213925888),	// LD3WB_8B_register
    UINT64_C(1289700352),	// LD3WB_8H_fixed
    UINT64_C(1287668736),	// LD3WB_8H_register
    UINT64_C(1279279104),	// LD3_16B
    UINT64_C(1279282176),	// LD3_2D
    UINT64_C(205539328),	// LD3_2S
    UINT64_C(205538304),	// LD3_4H
    UINT64_C(1279281152),	// LD3_4S
    UINT64_C(205537280),	// LD3_8B
    UINT64_C(1279280128),	// LD3_8H
    UINT64_C(224403456),	// LD4LN_B
    UINT64_C(224437248),	// LD4LN_D
    UINT64_C(224419840),	// LD4LN_H
    UINT64_C(224436224),	// LD4LN_S
    UINT64_C(234823680),	// LD4LN_WB_B_fixed
    UINT64_C(232792064),	// LD4LN_WB_B_register
    UINT64_C(234857472),	// LD4LN_WB_D_fixed
    UINT64_C(232825856),	// LD4LN_WB_D_register
    UINT64_C(234840064),	// LD4LN_WB_H_fixed
    UINT64_C(232808448),	// LD4LN_WB_H_register
    UINT64_C(234856448),	// LD4LN_WB_S_fixed
    UINT64_C(232824832),	// LD4LN_WB_S_register
    UINT64_C(1298194432),	// LD4R_16B
    UINT64_C(224455680),	// LD4R_1D
    UINT64_C(1298197504),	// LD4R_2D
    UINT64_C(224454656),	// LD4R_2S
    UINT64_C(224453632),	// LD4R_4H
    UINT64_C(1298196480),	// LD4R_4S
    UINT64_C(224452608),	// LD4R_8B
    UINT64_C(1298195456),	// LD4R_8H
    UINT64_C(1308614656),	// LD4R_WB_16B_fixed
    UINT64_C(1306583040),	// LD4R_WB_16B_register
    UINT64_C(234875904),	// LD4R_WB_1D_fixed
    UINT64_C(232844288),	// LD4R_WB_1D_register
    UINT64_C(1308617728),	// LD4R_WB_2D_fixed
    UINT64_C(1306586112),	// LD4R_WB_2D_register
    UINT64_C(234874880),	// LD4R_WB_2S_fixed
    UINT64_C(232843264),	// LD4R_WB_2S_register
    UINT64_C(234873856),	// LD4R_WB_4H_fixed
    UINT64_C(232842240),	// LD4R_WB_4H_register
    UINT64_C(1308616704),	// LD4R_WB_4S_fixed
    UINT64_C(1306585088),	// LD4R_WB_4S_register
    UINT64_C(234872832),	// LD4R_WB_8B_fixed
    UINT64_C(232841216),	// LD4R_WB_8B_register
    UINT64_C(1308615680),	// LD4R_WB_8H_fixed
    UINT64_C(1306584064),	// LD4R_WB_8H_register
    UINT64_C(1289682944),	// LD4WB_16B_fixed
    UINT64_C(1287651328),	// LD4WB_16B_register
    UINT64_C(1289686016),	// LD4WB_2D_fixed
    UINT64_C(1287654400),	// LD4WB_2D_register
    UINT64_C(215943168),	// LD4WB_2S_fixed
    UINT64_C(213911552),	// LD4WB_2S_register
    UINT64_C(215942144),	// LD4WB_4H_fixed
    UINT64_C(213910528),	// LD4WB_4H_register
    UINT64_C(1289684992),	// LD4WB_4S_fixed
    UINT64_C(1287653376),	// LD4WB_4S_register
    UINT64_C(215941120),	// LD4WB_8B_fixed
    UINT64_C(213909504),	// LD4WB_8B_register
    UINT64_C(1289683968),	// LD4WB_8H_fixed
    UINT64_C(1287652352),	// LD4WB_8H_register
    UINT64_C(1279262720),	// LD4_16B
    UINT64_C(1279265792),	// LD4_2D
    UINT64_C(205522944),	// LD4_2S
    UINT64_C(205521920),	// LD4_4H
    UINT64_C(1279264768),	// LD4_4S
    UINT64_C(205520896),	// LD4_8B
    UINT64_C(1279263744),	// LD4_8H
    UINT64_C(146833408),	// LDAR_byte
    UINT64_C(3368058880),	// LDAR_dword
    UINT64_C(1220575232),	// LDAR_hword
    UINT64_C(2294317056),	// LDAR_word
    UINT64_C(3361767424),	// LDAXP_dword
    UINT64_C(2288025600),	// LDAXP_word
    UINT64_C(138444800),	// LDAXR_byte
    UINT64_C(3359670272),	// LDAXR_dword
    UINT64_C(1212186624),	// LDAXR_hword
    UINT64_C(2285928448),	// LDAXR_word
    UINT64_C(1765801984),	// LDPSWx
    UINT64_C(1757413376),	// LDPSWx_PostInd
    UINT64_C(1774190592),	// LDPSWx_PreInd
    UINT64_C(968884224),	// LDRSBw
    UINT64_C(952108032),	// LDRSBw_PostInd
    UINT64_C(952110080),	// LDRSBw_PreInd
    UINT64_C(952107008),	// LDRSBw_U
    UINT64_C(954206208),	// LDRSBw_Wm_RegOffset
    UINT64_C(954214400),	// LDRSBw_Xm_RegOffset
    UINT64_C(964689920),	// LDRSBx
    UINT64_C(947913728),	// LDRSBx_PostInd
    UINT64_C(947915776),	// LDRSBx_PreInd
    UINT64_C(947912704),	// LDRSBx_U
    UINT64_C(950011904),	// LDRSBx_Wm_RegOffset
    UINT64_C(950020096),	// LDRSBx_Xm_RegOffset
    UINT64_C(2042626048),	// LDRSHw
    UINT64_C(2025849856),	// LDRSHw_PostInd
    UINT64_C(2025851904),	// LDRSHw_PreInd
    UINT64_C(2025848832),	// LDRSHw_U
    UINT64_C(2027948032),	// LDRSHw_Wm_RegOffset
    UINT64_C(2027956224),	// LDRSHw_Xm_RegOffset
    UINT64_C(2038431744),	// LDRSHx
    UINT64_C(2021655552),	// LDRSHx_PostInd
    UINT64_C(2021657600),	// LDRSHx_PreInd
    UINT64_C(2021654528),	// LDRSHx_U
    UINT64_C(2023753728),	// LDRSHx_Wm_RegOffset
    UINT64_C(2023761920),	// LDRSHx_Xm_RegOffset
    UINT64_C(3112173568),	// LDRSWx
    UINT64_C(3095397376),	// LDRSWx_PostInd
    UINT64_C(3095399424),	// LDRSWx_PreInd
    UINT64_C(3097495552),	// LDRSWx_Wm_RegOffset
    UINT64_C(3097503744),	// LDRSWx_Xm_RegOffset
    UINT64_C(2550136832),	// LDRSWx_lit
    UINT64_C(1543503872),	// LDRd_lit
    UINT64_C(2617245696),	// LDRq_lit
    UINT64_C(469762048),	// LDRs_lit
    UINT64_C(402653184),	// LDRw_lit
    UINT64_C(1476395008),	// LDRx_lit
    UINT64_C(952109056),	// LDTRSBw
    UINT64_C(947914752),	// LDTRSBx
    UINT64_C(2025850880),	// LDTRSHw
    UINT64_C(2021656576),	// LDTRSHx
    UINT64_C(3095398400),	// LDTRSWx
    UINT64_C(3095396352),	// LDURSWx
    UINT64_C(3361734656),	// LDXP_dword
    UINT64_C(2287992832),	// LDXP_word
    UINT64_C(138412032),	// LDXR_byte
    UINT64_C(3359637504),	// LDXR_dword
    UINT64_C(1212153856),	// LDXR_hword
    UINT64_C(2285895680),	// LDXR_word
    UINT64_C(2034237440),	// LS16_LDR
    UINT64_C(2017460224),	// LS16_LDUR
    UINT64_C(2017461248),	// LS16_PostInd_LDR
    UINT64_C(2013266944),	// LS16_PostInd_STR
    UINT64_C(2017463296),	// LS16_PreInd_LDR
    UINT64_C(2013268992),	// LS16_PreInd_STR
    UINT64_C(2030043136),	// LS16_STR
    UINT64_C(2013265920),	// LS16_STUR
    UINT64_C(2017462272),	// LS16_UnPriv_LDR
    UINT64_C(2013267968),	// LS16_UnPriv_STR
    UINT64_C(2019559424),	// LS16_Wm_RegOffset_LDR
    UINT64_C(2015365120),	// LS16_Wm_RegOffset_STR
    UINT64_C(2019567616),	// LS16_Xm_RegOffset_LDR
    UINT64_C(2015373312),	// LS16_Xm_RegOffset_STR
    UINT64_C(3107979264),	// LS32_LDR
    UINT64_C(3091202048),	// LS32_LDUR
    UINT64_C(3091203072),	// LS32_PostInd_LDR
    UINT64_C(3087008768),	// LS32_PostInd_STR
    UINT64_C(3091205120),	// LS32_PreInd_LDR
    UINT64_C(3087010816),	// LS32_PreInd_STR
    UINT64_C(3103784960),	// LS32_STR
    UINT64_C(3087007744),	// LS32_STUR
    UINT64_C(3091204096),	// LS32_UnPriv_LDR
    UINT64_C(3087009792),	// LS32_UnPriv_STR
    UINT64_C(3093301248),	// LS32_Wm_RegOffset_LDR
    UINT64_C(3089106944),	// LS32_Wm_RegOffset_STR
    UINT64_C(3093309440),	// LS32_Xm_RegOffset_LDR
    UINT64_C(3089115136),	// LS32_Xm_RegOffset_STR
    UINT64_C(4181721088),	// LS64_LDR
    UINT64_C(4164943872),	// LS64_LDUR
    UINT64_C(4164944896),	// LS64_PostInd_LDR
    UINT64_C(4160750592),	// LS64_PostInd_STR
    UINT64_C(4164946944),	// LS64_PreInd_LDR
    UINT64_C(4160752640),	// LS64_PreInd_STR
    UINT64_C(4177526784),	// LS64_STR
    UINT64_C(4160749568),	// LS64_STUR
    UINT64_C(4164945920),	// LS64_UnPriv_LDR
    UINT64_C(4160751616),	// LS64_UnPriv_STR
    UINT64_C(4167043072),	// LS64_Wm_RegOffset_LDR
    UINT64_C(4162848768),	// LS64_Wm_RegOffset_STR
    UINT64_C(4167051264),	// LS64_Xm_RegOffset_LDR
    UINT64_C(4162856960),	// LS64_Xm_RegOffset_STR
    UINT64_C(960495616),	// LS8_LDR
    UINT64_C(943718400),	// LS8_LDUR
    UINT64_C(943719424),	// LS8_PostInd_LDR
    UINT64_C(939525120),	// LS8_PostInd_STR
    UINT64_C(943721472),	// LS8_PreInd_LDR
    UINT64_C(939527168),	// LS8_PreInd_STR
    UINT64_C(956301312),	// LS8_STR
    UINT64_C(939524096),	// LS8_STUR
    UINT64_C(943720448),	// LS8_UnPriv_LDR
    UINT64_C(939526144),	// LS8_UnPriv_STR
    UINT64_C(945817600),	// LS8_Wm_RegOffset_LDR
    UINT64_C(941623296),	// LS8_Wm_RegOffset_STR
    UINT64_C(945825792),	// LS8_Xm_RegOffset_LDR
    UINT64_C(941631488),	// LS8_Xm_RegOffset_STR
    UINT64_C(1035993088),	// LSFP128_LDR
    UINT64_C(1019215872),	// LSFP128_LDUR
    UINT64_C(1019216896),	// LSFP128_PostInd_LDR
    UINT64_C(1015022592),	// LSFP128_PostInd_STR
    UINT64_C(1019218944),	// LSFP128_PreInd_LDR
    UINT64_C(1015024640),	// LSFP128_PreInd_STR
    UINT64_C(1031798784),	// LSFP128_STR
    UINT64_C(1015021568),	// LSFP128_STUR
    UINT64_C(1021315072),	// LSFP128_Wm_RegOffset_LDR
    UINT64_C(1017120768),	// LSFP128_Wm_RegOffset_STR
    UINT64_C(1021323264),	// LSFP128_Xm_RegOffset_LDR
    UINT64_C(1017128960),	// LSFP128_Xm_RegOffset_STR
    UINT64_C(2101346304),	// LSFP16_LDR
    UINT64_C(2084569088),	// LSFP16_LDUR
    UINT64_C(2084570112),	// LSFP16_PostInd_LDR
    UINT64_C(2080375808),	// LSFP16_PostInd_STR
    UINT64_C(2084572160),	// LSFP16_PreInd_LDR
    UINT64_C(2080377856),	// LSFP16_PreInd_STR
    UINT64_C(2097152000),	// LSFP16_STR
    UINT64_C(2080374784),	// LSFP16_STUR
    UINT64_C(2086668288),	// LSFP16_Wm_RegOffset_LDR
    UINT64_C(2082473984),	// LSFP16_Wm_RegOffset_STR
    UINT64_C(2086676480),	// LSFP16_Xm_RegOffset_LDR
    UINT64_C(2082482176),	// LSFP16_Xm_RegOffset_STR
    UINT64_C(3175088128),	// LSFP32_LDR
    UINT64_C(3158310912),	// LSFP32_LDUR
    UINT64_C(3158311936),	// LSFP32_PostInd_LDR
    UINT64_C(3154117632),	// LSFP32_PostInd_STR
    UINT64_C(3158313984),	// LSFP32_PreInd_LDR
    UINT64_C(3154119680),	// LSFP32_PreInd_STR
    UINT64_C(3170893824),	// LSFP32_STR
    UINT64_C(3154116608),	// LSFP32_STUR
    UINT64_C(3160410112),	// LSFP32_Wm_RegOffset_LDR
    UINT64_C(3156215808),	// LSFP32_Wm_RegOffset_STR
    UINT64_C(3160418304),	// LSFP32_Xm_RegOffset_LDR
    UINT64_C(3156224000),	// LSFP32_Xm_RegOffset_STR
    UINT64_C(4248829952),	// LSFP64_LDR
    UINT64_C(4232052736),	// LSFP64_LDUR
    UINT64_C(4232053760),	// LSFP64_PostInd_LDR
    UINT64_C(4227859456),	// LSFP64_PostInd_STR
    UINT64_C(4232055808),	// LSFP64_PreInd_LDR
    UINT64_C(4227861504),	// LSFP64_PreInd_STR
    UINT64_C(4244635648),	// LSFP64_STR
    UINT64_C(4227858432),	// LSFP64_STUR
    UINT64_C(4234151936),	// LSFP64_Wm_RegOffset_LDR
    UINT64_C(4229957632),	// LSFP64_Wm_RegOffset_STR
    UINT64_C(4234160128),	// LSFP64_Xm_RegOffset_LDR
    UINT64_C(4229965824),	// LSFP64_Xm_RegOffset_STR
    UINT64_C(1027604480),	// LSFP8_LDR
    UINT64_C(1010827264),	// LSFP8_LDUR
    UINT64_C(1010828288),	// LSFP8_PostInd_LDR
    UINT64_C(1006633984),	// LSFP8_PostInd_STR
    UINT64_C(1010830336),	// LSFP8_PreInd_LDR
    UINT64_C(1006636032),	// LSFP8_PreInd_STR
    UINT64_C(1023410176),	// LSFP8_STR
    UINT64_C(1006632960),	// LSFP8_STUR
    UINT64_C(1012926464),	// LSFP8_Wm_RegOffset_LDR
    UINT64_C(1008732160),	// LSFP8_Wm_RegOffset_STR
    UINT64_C(1012934656),	// LSFP8_Xm_RegOffset_LDR
    UINT64_C(1008740352),	// LSFP8_Xm_RegOffset_STR
    UINT64_C(2906652672),	// LSFPPair128_LDR
    UINT64_C(2889875456),	// LSFPPair128_NonTemp_LDR
    UINT64_C(2885681152),	// LSFPPair128_NonTemp_STR
    UINT64_C(2898264064),	// LSFPPair128_PostInd_LDR
    UINT64_C(2894069760),	// LSFPPair128_PostInd_STR
    UINT64_C(2915041280),	// LSFPPair128_PreInd_LDR
    UINT64_C(2910846976),	// LSFPPair128_PreInd_STR
    UINT64_C(2902458368),	// LSFPPair128_STR
    UINT64_C(759169024),	// LSFPPair32_LDR
    UINT64_C(742391808),	// LSFPPair32_NonTemp_LDR
    UINT64_C(738197504),	// LSFPPair32_NonTemp_STR
    UINT64_C(750780416),	// LSFPPair32_PostInd_LDR
    UINT64_C(746586112),	// LSFPPair32_PostInd_STR
    UINT64_C(767557632),	// LSFPPair32_PreInd_LDR
    UINT64_C(763363328),	// LSFPPair32_PreInd_STR
    UINT64_C(754974720),	// LSFPPair32_STR
    UINT64_C(1832910848),	// LSFPPair64_LDR
    UINT64_C(1816133632),	// LSFPPair64_NonTemp_LDR
    UINT64_C(1811939328),	// LSFPPair64_NonTemp_STR
    UINT64_C(1824522240),	// LSFPPair64_PostInd_LDR
    UINT64_C(1820327936),	// LSFPPair64_PostInd_STR
    UINT64_C(1841299456),	// LSFPPair64_PreInd_LDR
    UINT64_C(1837105152),	// LSFPPair64_PreInd_STR
    UINT64_C(1828716544),	// LSFPPair64_STR
    UINT64_C(448798720),	// LSLVwww
    UINT64_C(2596282368),	// LSLVxxx
    UINT64_C(1392508928),	// LSLwwi
    UINT64_C(3544186880),	// LSLxxi
    UINT64_C(692060160),	// LSPair32_LDR
    UINT64_C(675282944),	// LSPair32_NonTemp_LDR
    UINT64_C(671088640),	// LSPair32_NonTemp_STR
    UINT64_C(683671552),	// LSPair32_PostInd_LDR
    UINT64_C(679477248),	// LSPair32_PostInd_STR
    UINT64_C(700448768),	// LSPair32_PreInd_LDR
    UINT64_C(696254464),	// LSPair32_PreInd_STR
    UINT64_C(687865856),	// LSPair32_STR
    UINT64_C(2839543808),	// LSPair64_LDR
    UINT64_C(2822766592),	// LSPair64_NonTemp_LDR
    UINT64_C(2818572288),	// LSPair64_NonTemp_STR
    UINT64_C(2831155200),	// LSPair64_PostInd_LDR
    UINT64_C(2826960896),	// LSPair64_PostInd_STR
    UINT64_C(2847932416),	// LSPair64_PreInd_LDR
    UINT64_C(2843738112),	// LSPair64_PreInd_STR
    UINT64_C(2835349504),	// LSPair64_STR
    UINT64_C(448799744),	// LSRVwww
    UINT64_C(2596283392),	// LSRVxxx
    UINT64_C(1392540672),	// LSRwwi
    UINT64_C(3544251392),	// LSRxxi
    UINT64_C(452984832),	// MADDwwww
    UINT64_C(2600468480),	// MADDxxxx
    UINT64_C(796917760),	// MLAvve_2s4s
    UINT64_C(792723456),	// MLAvve_4h8h
    UINT64_C(1870659584),	// MLAvve_4s4s
    UINT64_C(1866465280),	// MLAvve_8h8h
    UINT64_C(1310757888),	// MLAvvv_16B
    UINT64_C(245404672),	// MLAvvv_2S
    UINT64_C(241210368),	// MLAvvv_4H
    UINT64_C(1319146496),	// MLAvvv_4S
    UINT64_C(237016064),	// MLAvvv_8B
    UINT64_C(1314952192),	// MLAvvv_8H
    UINT64_C(796934144),	// MLSvve_2s4s
    UINT64_C(792739840),	// MLSvve_4h8h
    UINT64_C(1870675968),	// MLSvve_4s4s
    UINT64_C(1866481664),	// MLSvve_8h8h
    UINT64_C(1847628800),	// MLSvvv_16B
    UINT64_C(782275584),	// MLSvvv_2S
    UINT64_C(778081280),	// MLSvvv_4H
    UINT64_C(1856017408),	// MLSvvv_4S
    UINT64_C(773886976),	// MLSvvv_8B
    UINT64_C(1851823104),	// MLSvvv_8H
    UINT64_C(788587520),	// MOVIdi
    UINT64_C(1325458432),	// MOVIvi_16B
    UINT64_C(1862329344),	// MOVIvi_2D
    UINT64_C(251716608),	// MOVIvi_8B
    UINT64_C(251659264),	// MOVIvi_lsl_2S
    UINT64_C(251692032),	// MOVIvi_lsl_4H
    UINT64_C(1325401088),	// MOVIvi_lsl_4S
    UINT64_C(1325433856),	// MOVIvi_lsl_8H
    UINT64_C(251708416),	// MOVIvi_msl_2S
    UINT64_C(1325450240),	// MOVIvi_msl_4S
    UINT64_C(1920991232),	// MOVKwii
    UINT64_C(4068474880),	// MOVKxii
    UINT64_C(310378496),	// MOVNwii
    UINT64_C(2457862144),	// MOVNxii
    UINT64_C(1384120320),	// MOVZwii
    UINT64_C(3531603968),	// MOVZxii
    UINT64_C(3575644160),	// MRSxi
    UINT64_C(3573563423),	// MSRii
    UINT64_C(3573547008),	// MSRix
    UINT64_C(453017600),	// MSUBwwww
    UINT64_C(2600501248),	// MSUBxxxx
    UINT64_C(260079616),	// MULve_2s4s
    UINT64_C(255885312),	// MULve_4h8h
    UINT64_C(1333821440),	// MULve_4s4s
    UINT64_C(1329627136),	// MULve_8h8h
    UINT64_C(1310759936),	// MULvvv_16B
    UINT64_C(245406720),	// MULvvv_2S
    UINT64_C(241212416),	// MULvvv_4H
    UINT64_C(1319148544),	// MULvvv_4S
    UINT64_C(237018112),	// MULvvv_8B
    UINT64_C(1314954240),	// MULvvv_8H
    UINT64_C(788530176),	// MVNIvi_lsl_2S
    UINT64_C(788562944),	// MVNIvi_lsl_4H
    UINT64_C(1862272000),	// MVNIvi_lsl_4S
    UINT64_C(1862304768),	// MVNIvi_lsl_8H
    UINT64_C(788579328),	// MVNIvi_msl_2S
    UINT64_C(1862321152),	// MVNIvi_msl_4S
    UINT64_C(715129824),	// MVNww_asr
    UINT64_C(706741216),	// MVNww_lsl
    UINT64_C(710935520),	// MVNww_lsr
    UINT64_C(719324128),	// MVNww_ror
    UINT64_C(2862613472),	// MVNxx_asr
    UINT64_C(2854224864),	// MVNxx_lsl
    UINT64_C(2858419168),	// MVNxx_lsr
    UINT64_C(2866807776),	// MVNxx_ror
    UINT64_C(1847638016),	// NEG16b
    UINT64_C(1860220928),	// NEG2d
    UINT64_C(782284800),	// NEG2s
    UINT64_C(778090496),	// NEG4h
    UINT64_C(1856026624),	// NEG4s
    UINT64_C(773896192),	// NEG8b
    UINT64_C(1851832320),	// NEG8h
    UINT64_C(2128656384),	// NEGdd
    UINT64_C(1847613440),	// NOT16b
    UINT64_C(773871616),	// NOT8b
    UINT64_C(1323310080),	// ORNvvv_16B
    UINT64_C(249568256),	// ORNvvv_8B
    UINT64_C(715128832),	// ORNwww_asr
    UINT64_C(706740224),	// ORNwww_lsl
    UINT64_C(710934528),	// ORNwww_lsr
    UINT64_C(719323136),	// ORNwww_ror
    UINT64_C(2862612480),	// ORNxxx_asr
    UINT64_C(2854223872),	// ORNxxx_lsl
    UINT64_C(2858418176),	// ORNxxx_lsr
    UINT64_C(2866806784),	// ORNxxx_ror
    UINT64_C(251663360),	// ORRvi_lsl_2S
    UINT64_C(251696128),	// ORRvi_lsl_4H
    UINT64_C(1325405184),	// ORRvi_lsl_4S
    UINT64_C(1325437952),	// ORRvi_lsl_8H
    UINT64_C(1319115776),	// ORRvvv_16B
    UINT64_C(245373952),	// ORRvvv_8B
    UINT64_C(838860800),	// ORRwwi
    UINT64_C(713031680),	// ORRwww_asr
    UINT64_C(704643072),	// ORRwww_lsl
    UINT64_C(708837376),	// ORRwww_lsr
    UINT64_C(717225984),	// ORRwww_ror
    UINT64_C(2986344448),	// ORRxxi
    UINT64_C(2860515328),	// ORRxxx_asr
    UINT64_C(2852126720),	// ORRxxx_lsl
    UINT64_C(2856321024),	// ORRxxx_lsr
    UINT64_C(2864709632),	// ORRxxx_ror
    UINT64_C(1323360256),	// PMULL2vvv_1q2d
    UINT64_C(1310777344),	// PMULL2vvv_8h16b
    UINT64_C(249618432),	// PMULLvvv_1q1d
    UINT64_C(237035520),	// PMULLvvv_8h8b
    UINT64_C(1847630848),	// PMULvvv_16B
    UINT64_C(773889024),	// PMULvvv_8B
    UINT64_C(4185915392),	// PRFM
    UINT64_C(4171237376),	// PRFM_Wm_RegOffset
    UINT64_C(4171245568),	// PRFM_Xm_RegOffset
    UINT64_C(3623878656),	// PRFM_lit
    UINT64_C(4169138176),	// PRFUM
    UINT64_C(1862831104),	// QRSHRUNvvi_16B
    UINT64_C(790662144),	// QRSHRUNvvi_2S
    UINT64_C(789613568),	// QRSHRUNvvi_4H
    UINT64_C(1864403968),	// QRSHRUNvvi_4S
    UINT64_C(789089280),	// QRSHRUNvvi_8B
    UINT64_C(1863355392),	// QRSHRUNvvi_8H
    UINT64_C(1862829056),	// QSHRUNvvi_16B
    UINT64_C(790660096),	// QSHRUNvvi_2S
    UINT64_C(789611520),	// QSHRUNvvi_4H
    UINT64_C(1864401920),	// QSHRUNvvi_4S
    UINT64_C(789087232),	// QSHRUNvvi_8B
    UINT64_C(1863353344),	// QSHRUNvvi_8H
    UINT64_C(1847607296),	// RADDHN2vvv_16b8h
    UINT64_C(1855995904),	// RADDHN2vvv_4s2d
    UINT64_C(1851801600),	// RADDHN2vvv_8h4s
    UINT64_C(782254080),	// RADDHNvvv_2s2d
    UINT64_C(778059776),	// RADDHNvvv_4h4s
    UINT64_C(773865472),	// RADDHNvvv_8b8h
    UINT64_C(1851807744),	// RBIT16b
    UINT64_C(778065920),	// RBIT8b
    UINT64_C(1522532352),	// RBITww
    UINT64_C(3670016000),	// RBITxx
    UINT64_C(0),
    UINT64_C(3596550144),	// RETx
    UINT64_C(1310726144),	// REV16_16b
    UINT64_C(236984320),	// REV16_8b
    UINT64_C(1522533376),	// REV16ww
    UINT64_C(3670017024),	// REV16xx
    UINT64_C(1847592960),	// REV32_16b
    UINT64_C(778045440),	// REV32_4h
    UINT64_C(773851136),	// REV32_8b
    UINT64_C(1851787264),	// REV32_8h
    UINT64_C(3670018048),	// REV32xx
    UINT64_C(1310722048),	// REV64_16b
    UINT64_C(245368832),	// REV64_2s
    UINT64_C(241174528),	// REV64_4h
    UINT64_C(1319110656),	// REV64_4s
    UINT64_C(236980224),	// REV64_8b
    UINT64_C(1314916352),	// REV64_8h
    UINT64_C(1522534400),	// REVww
    UINT64_C(3670019072),	// REVxx
    UINT64_C(448801792),	// RORVwww
    UINT64_C(2596285440),	// RORVxxx
    UINT64_C(1325960192),	// RSHRNvvi_16B
    UINT64_C(253791232),	// RSHRNvvi_2S
    UINT64_C(252742656),	// RSHRNvvi_4H
    UINT64_C(1327533056),	// RSHRNvvi_4S
    UINT64_C(252218368),	// RSHRNvvi_8B
    UINT64_C(1326484480),	// RSHRNvvi_8H
    UINT64_C(1847615488),	// RSUBHN2vvv_16b8h
    UINT64_C(1856004096),	// RSUBHN2vvv_4s2d
    UINT64_C(1851809792),	// RSUBHN2vvv_8h4s
    UINT64_C(782262272),	// RSUBHNvvv_2s2d
    UINT64_C(778067968),	// RSUBHNvvv_4h4s
    UINT64_C(773873664),	// RSUBHNvvv_8b8h
    UINT64_C(1319129088),	// SABAL2vvv_2d2s
    UINT64_C(1314934784),	// SABAL2vvv_4s4h
    UINT64_C(1310740480),	// SABAL2vvv_8h8b
    UINT64_C(245387264),	// SABALvvv_2d2s
    UINT64_C(241192960),	// SABALvvv_4s4h
    UINT64_C(236998656),	// SABALvvv_8h8b
    UINT64_C(1310751744),	// SABAvvv_16B
    UINT64_C(245398528),	// SABAvvv_2S
    UINT64_C(241204224),	// SABAvvv_4H
    UINT64_C(1319140352),	// SABAvvv_4S
    UINT64_C(237009920),	// SABAvvv_8B
    UINT64_C(1314946048),	// SABAvvv_8H
    UINT64_C(1319137280),	// SABDL2vvv_2d2s
    UINT64_C(1314942976),	// SABDL2vvv_4s4h
    UINT64_C(1310748672),	// SABDL2vvv_8h8b
    UINT64_C(245395456),	// SABDLvvv_2d2s
    UINT64_C(241201152),	// SABDLvvv_4s4h
    UINT64_C(237006848),	// SABDLvvv_8h8b
    UINT64_C(1310749696),	// SABDvvv_16B
    UINT64_C(245396480),	// SABDvvv_2S
    UINT64_C(241202176),	// SABDvvv_4H
    UINT64_C(1319138304),	// SABDvvv_4S
    UINT64_C(237007872),	// SABDvvv_8B
    UINT64_C(1314944000),	// SABDvvv_8H
    UINT64_C(1310746624),	// SADALP16b8h
    UINT64_C(245393408),	// SADALP2s1d
    UINT64_C(241199104),	// SADALP4h2s
    UINT64_C(1319135232),	// SADALP4s2d
    UINT64_C(237004800),	// SADALP8b4h
    UINT64_C(1314940928),	// SADALP8h4s
    UINT64_C(1319108608),	// SADDL2vvv_2d4s
    UINT64_C(1314914304),	// SADDL2vvv_4s8h
    UINT64_C(1310720000),	// SADDL2vvv_8h16b
    UINT64_C(1310730240),	// SADDLP16b8h
    UINT64_C(245377024),	// SADDLP2s1d
    UINT64_C(241182720),	// SADDLP4h2s
    UINT64_C(1319118848),	// SADDLP4s2d
    UINT64_C(236988416),	// SADDLP8b4h
    UINT64_C(1314924544),	// SADDLP8h4s
    UINT64_C(1320171520),	// SADDLV_1d4s
    UINT64_C(1311782912),	// SADDLV_1h16b
    UINT64_C(238041088),	// SADDLV_1h8b
    UINT64_C(242235392),	// SADDLV_1s4h
    UINT64_C(1315977216),	// SADDLV_1s8h
    UINT64_C(245366784),	// SADDLvvv_2d2s
    UINT64_C(241172480),	// SADDLvvv_4s4h
    UINT64_C(236978176),	// SADDLvvv_8h8b
    UINT64_C(1319112704),	// SADDW2vvv_2d4s
    UINT64_C(1314918400),	// SADDW2vvv_4s8h
    UINT64_C(1310724096),	// SADDW2vvv_8h16b
    UINT64_C(245370880),	// SADDWvvv_2d2s
    UINT64_C(241176576),	// SADDWvvv_4s4h
    UINT64_C(236982272),	// SADDWvvv_8h8b
    UINT64_C(2046820352),	// SBCSwww
    UINT64_C(4194304000),	// SBCSxxx
    UINT64_C(1509949440),	// SBCwww
    UINT64_C(3657433088),	// SBCxxx
    UINT64_C(318767104),	// SBFIZwwii
    UINT64_C(2470445056),	// SBFIZxxii
    UINT64_C(318767104),	// SBFMwwii
    UINT64_C(2470445056),	// SBFMxxii
    UINT64_C(318767104),	// SBFXwwii
    UINT64_C(2470445056),	// SBFXxxii
    UINT64_C(1315035136),	// SCVTF_2d
    UINT64_C(237099008),	// SCVTF_2s
    UINT64_C(1310840832),	// SCVTF_4s
    UINT64_C(1598088192),	// SCVTF_Nddi
    UINT64_C(1595991040),	// SCVTF_Nssi
    UINT64_C(1583470592),	// SCVTFdd
    UINT64_C(509739008),	// SCVTFdw
    UINT64_C(507641856),	// SCVTFdwi
    UINT64_C(2657222656),	// SCVTFdx
    UINT64_C(2655125504),	// SCVTFdxi
    UINT64_C(1579276288),	// SCVTFss
    UINT64_C(505544704),	// SCVTFsw
    UINT64_C(503447552),	// SCVTFswi
    UINT64_C(2653028352),	// SCVTFsx
    UINT64_C(2650931200),	// SCVTFsxi
    UINT64_C(448793600),	// SDIVwww
    UINT64_C(2596277248),	// SDIVxxx
    UINT64_C(1577058304),	// SHA1C
    UINT64_C(1579681792),	// SHA1H
    UINT64_C(1577066496),	// SHA1M
    UINT64_C(1577062400),	// SHA1P
    UINT64_C(1577070592),	// SHA1SU0
    UINT64_C(1579685888),	// SHA1SU1
    UINT64_C(1577074688),	// SHA256H
    UINT64_C(1577078784),	// SHA256H2
    UINT64_C(1579689984),	// SHA256SU0
    UINT64_C(1577082880),	// SHA256SU1
    UINT64_C(1310721024),	// SHADDvvv_16B
    UINT64_C(245367808),	// SHADDvvv_2S
    UINT64_C(241173504),	// SHADDvvv_4H
    UINT64_C(1319109632),	// SHADDvvv_4S
    UINT64_C(236979200),	// SHADDvvv_8B
    UINT64_C(1314915328),	// SHADDvvv_8H
    UINT64_C(1847670784),	// SHLL16b8h
    UINT64_C(782317568),	// SHLL2s2d
    UINT64_C(778123264),	// SHLL4h4s
    UINT64_C(1856059392),	// SHLL4s2d
    UINT64_C(773928960),	// SHLL8b8h
    UINT64_C(1851865088),	// SHLL8h4s
    UINT64_C(1598051328),	// SHLddi
    UINT64_C(1325945856),	// SHLvvi_16B
    UINT64_C(1329615872),	// SHLvvi_2D
    UINT64_C(253776896),	// SHLvvi_2S
    UINT64_C(252728320),	// SHLvvi_4H
    UINT64_C(1327518720),	// SHLvvi_4S
    UINT64_C(252204032),	// SHLvvi_8B
    UINT64_C(1326470144),	// SHLvvi_8H
    UINT64_C(1325958144),	// SHRNvvi_16B
    UINT64_C(253789184),	// SHRNvvi_2S
    UINT64_C(252740608),	// SHRNvvi_4H
    UINT64_C(1327531008),	// SHRNvvi_4S
    UINT64_C(252216320),	// SHRNvvi_8B
    UINT64_C(1326482432),	// SHRNvvi_8H
    UINT64_C(1310729216),	// SHSUBvvv_16B
    UINT64_C(245376000),	// SHSUBvvv_2S
    UINT64_C(241181696),	// SHSUBvvv_4H
    UINT64_C(1319117824),	// SHSUBvvv_4S
    UINT64_C(236987392),	// SHSUBvvv_8B
    UINT64_C(1314923520),	// SHSUBvvv_8H
    UINT64_C(2134922240),	// SLI
    UINT64_C(1862816768),	// SLIvvi_16B
    UINT64_C(1866486784),	// SLIvvi_2D
    UINT64_C(790647808),	// SLIvvi_2S
    UINT64_C(789599232),	// SLIvvi_4H
    UINT64_C(1864389632),	// SLIvvi_4S
    UINT64_C(789074944),	// SLIvvi_8B
    UINT64_C(1863341056),	// SLIvvi_8H
    UINT64_C(2602565632),	// SMADDLxwwx
    UINT64_C(1310761984),	// SMAXPvvv_16B
    UINT64_C(245408768),	// SMAXPvvv_2S
    UINT64_C(241214464),	// SMAXPvvv_4H
    UINT64_C(1319150592),	// SMAXPvvv_4S
    UINT64_C(237020160),	// SMAXPvvv_8B
    UINT64_C(1314956288),	// SMAXPvvv_8H
    UINT64_C(1311811584),	// SMAXV_1b16b
    UINT64_C(238069760),	// SMAXV_1b8b
    UINT64_C(242264064),	// SMAXV_1h4h
    UINT64_C(1316005888),	// SMAXV_1h8h
    UINT64_C(1320200192),	// SMAXV_1s4s
    UINT64_C(1310745600),	// SMAXvvv_16B
    UINT64_C(245392384),	// SMAXvvv_2S
    UINT64_C(241198080),	// SMAXvvv_4H
    UINT64_C(1319134208),	// SMAXvvv_4S
    UINT64_C(237003776),	// SMAXvvv_8B
    UINT64_C(1314939904),	// SMAXvvv_8H
    UINT64_C(3556769795),	// SMCi
    UINT64_C(1310764032),	// SMINPvvv_16B
    UINT64_C(245410816),	// SMINPvvv_2S
    UINT64_C(241216512),	// SMINPvvv_4H
    UINT64_C(1319152640),	// SMINPvvv_4S
    UINT64_C(237022208),	// SMINPvvv_8B
    UINT64_C(1314958336),	// SMINPvvv_8H
    UINT64_C(1311877120),	// SMINV_1b16b
    UINT64_C(238135296),	// SMINV_1b8b
    UINT64_C(242329600),	// SMINV_1h4h
    UINT64_C(1316071424),	// SMINV_1h8h
    UINT64_C(1320265728),	// SMINV_1s4s
    UINT64_C(1310747648),	// SMINvvv_16B
    UINT64_C(245394432),	// SMINvvv_2S
    UINT64_C(241200128),	// SMINvvv_4H
    UINT64_C(1319136256),	// SMINvvv_4S
    UINT64_C(237005824),	// SMINvvv_8B
    UINT64_C(1314941952),	// SMINvvv_8H
    UINT64_C(1319141376),	// SMLAL2vvv_2d4s
    UINT64_C(1314947072),	// SMLAL2vvv_4s8h
    UINT64_C(1310752768),	// SMLAL2vvv_8h16b
    UINT64_C(260055040),	// SMLALvve_2d2s
    UINT64_C(1333796864),	// SMLALvve_2d4s
    UINT64_C(255860736),	// SMLALvve_4s4h
    UINT64_C(1329602560),	// SMLALvve_4s8h
    UINT64_C(245399552),	// SMLALvvv_2d2s
    UINT64_C(241205248),	// SMLALvvv_4s4h
    UINT64_C(237010944),	// SMLALvvv_8h8b
    UINT64_C(1319149568),	// SMLSL2vvv_2d4s
    UINT64_C(1314955264),	// SMLSL2vvv_4s8h
    UINT64_C(1310760960),	// SMLSL2vvv_8h16b
    UINT64_C(260071424),	// SMLSLvve_2d2s
    UINT64_C(1333813248),	// SMLSLvve_2d4s
    UINT64_C(255877120),	// SMLSLvve_4s4h
    UINT64_C(1329618944),	// SMLSLvve_4s8h
    UINT64_C(245407744),	// SMLSLvvv_2d2s
    UINT64_C(241213440),	// SMLSLvvv_4s4h
    UINT64_C(237019136),	// SMLSLvvv_8h8b
    UINT64_C(234957824),	// SMOVwb
    UINT64_C(235023360),	// SMOVwh
    UINT64_C(1308699648),	// SMOVxb
    UINT64_C(1308765184),	// SMOVxh
    UINT64_C(1308896256),	// SMOVxs
    UINT64_C(2602598400),	// SMSUBLxwwx
    UINT64_C(2604662784),	// SMULHxxx
    UINT64_C(1319157760),	// SMULL2vvv_2d4s
    UINT64_C(1314963456),	// SMULL2vvv_4s8h
    UINT64_C(1310769152),	// SMULL2vvv_8h16b
    UINT64_C(260087808),	// SMULLve_2d2s
    UINT64_C(1333829632),	// SMULLve_2d4s
    UINT64_C(255893504),	// SMULLve_4s4h
    UINT64_C(1329635328),	// SMULLve_4s8h
    UINT64_C(245415936),	// SMULLvvv_2d2s
    UINT64_C(241221632),	// SMULLvvv_4s4h
    UINT64_C(237027328),	// SMULLvvv_8h8b
    UINT64_C(1310750720),	// SQABS16b
    UINT64_C(1323333632),	// SQABS2d
    UINT64_C(245397504),	// SQABS2s
    UINT64_C(241203200),	// SQABS4h
    UINT64_C(1319139328),	// SQABS4s
    UINT64_C(237008896),	// SQABS8b
    UINT64_C(1314945024),	// SQABS8h
    UINT64_C(1579186176),	// SQABSbb
    UINT64_C(1591769088),	// SQABSdd
    UINT64_C(1583380480),	// SQABShh
    UINT64_C(1587574784),	// SQABSss
    UINT64_C(1579158528),	// SQADDbbb
    UINT64_C(1591741440),	// SQADDddd
    UINT64_C(1583352832),	// SQADDhhh
    UINT64_C(1587547136),	// SQADDsss
    UINT64_C(1310723072),	// SQADDvvv_16B
    UINT64_C(1323305984),	// SQADDvvv_2D
    UINT64_C(245369856),	// SQADDvvv_2S
    UINT64_C(241175552),	// SQADDvvv_4H
    UINT64_C(1319111680),	// SQADDvvv_4S
    UINT64_C(236981248),	// SQADDvvv_8B
    UINT64_C(1314917376),	// SQADDvvv_8H
    UINT64_C(1319145472),	// SQDMLAL2vvv_2d4s
    UINT64_C(1314951168),	// SQDMLAL2vvv_4s8h
    UINT64_C(1587580928),	// SQDMLALdss
    UINT64_C(1602236416),	// SQDMLALdsv_2S
    UINT64_C(1602236416),	// SQDMLALdsv_4S
    UINT64_C(1583386624),	// SQDMLALshh
    UINT64_C(1598042112),	// SQDMLALshv_4H
    UINT64_C(1598042112),	// SQDMLALshv_8H
    UINT64_C(260059136),	// SQDMLALvve_2d2s
    UINT64_C(1333800960),	// SQDMLALvve_2d4s
    UINT64_C(255864832),	// SQDMLALvve_4s4h
    UINT64_C(1329606656),	// SQDMLALvve_4s8h
    UINT64_C(245403648),	// SQDMLALvvv_2d2s
    UINT64_C(241209344),	// SQDMLALvvv_4s4h
    UINT64_C(1319153664),	// SQDMLSL2vvv_2d4s
    UINT64_C(1314959360),	// SQDMLSL2vvv_4s8h
    UINT64_C(1587589120),	// SQDMLSLdss
    UINT64_C(1602252800),	// SQDMLSLdsv_2S
    UINT64_C(1602252800),	// SQDMLSLdsv_4S
    UINT64_C(1583394816),	// SQDMLSLshh
    UINT64_C(1598058496),	// SQDMLSLshv_4H
    UINT64_C(1598058496),	// SQDMLSLshv_8H
    UINT64_C(260075520),	// SQDMLSLvve_2d2s
    UINT64_C(1333817344),	// SQDMLSLvve_2d4s
    UINT64_C(255881216),	// SQDMLSLvve_4s4h
    UINT64_C(1329623040),	// SQDMLSLvve_4s8h
    UINT64_C(245411840),	// SQDMLSLvvv_2d2s
    UINT64_C(241217536),	// SQDMLSLvvv_4s4h
    UINT64_C(1583395840),	// SQDMULHhhh
    UINT64_C(1598078976),	// SQDMULHhhv_4H
    UINT64_C(1598078976),	// SQDMULHhhv_8H
    UINT64_C(1587590144),	// SQDMULHsss
    UINT64_C(1602273280),	// SQDMULHssv_2S
    UINT64_C(1602273280),	// SQDMULHssv_4S
    UINT64_C(260096000),	// SQDMULHve_2s4s
    UINT64_C(255901696),	// SQDMULHve_4h8h
    UINT64_C(1333837824),	// SQDMULHve_4s4s
    UINT64_C(1329643520),	// SQDMULHve_8h8h
    UINT64_C(245412864),	// SQDMULHvvv_2S
    UINT64_C(241218560),	// SQDMULHvvv_4H
    UINT64_C(1319154688),	// SQDMULHvvv_4S
    UINT64_C(1314960384),	// SQDMULHvvv_8H
    UINT64_C(1319161856),	// SQDMULL2vvv_2d4s
    UINT64_C(1314967552),	// SQDMULL2vvv_4s8h
    UINT64_C(1587597312),	// SQDMULLdss
    UINT64_C(1602269184),	// SQDMULLdsv_2S
    UINT64_C(1602269184),	// SQDMULLdsv_4S
    UINT64_C(1583403008),	// SQDMULLshh
    UINT64_C(1598074880),	// SQDMULLshv_4H
    UINT64_C(1598074880),	// SQDMULLshv_8H
    UINT64_C(260091904),	// SQDMULLve_2d2s
    UINT64_C(1333833728),	// SQDMULLve_2d4s
    UINT64_C(255897600),	// SQDMULLve_4s4h
    UINT64_C(1329639424),	// SQDMULLve_4s8h
    UINT64_C(245420032),	// SQDMULLvvv_2d2s
    UINT64_C(241225728),	// SQDMULLvvv_4s4h
    UINT64_C(1847621632),	// SQNEG16b
    UINT64_C(1860204544),	// SQNEG2d
    UINT64_C(782268416),	// SQNEG2s
    UINT64_C(778074112),	// SQNEG4h
    UINT64_C(1856010240),	// SQNEG4s
    UINT64_C(773879808),	// SQNEG8b
    UINT64_C(1851815936),	// SQNEG8h
    UINT64_C(2116057088),	// SQNEGbb
    UINT64_C(2128640000),	// SQNEGdd
    UINT64_C(2120251392),	// SQNEGhh
    UINT64_C(2124445696),	// SQNEGss
    UINT64_C(2120266752),	// SQRDMULHhhh
    UINT64_C(1598083072),	// SQRDMULHhhv_4H
    UINT64_C(1598083072),	// SQRDMULHhhv_8H
    UINT64_C(2124461056),	// SQRDMULHsss
    UINT64_C(1602277376),	// SQRDMULHssv_2S
    UINT64_C(1602277376),	// SQRDMULHssv_4S
    UINT64_C(260100096),	// SQRDMULHve_2s4s
    UINT64_C(255905792),	// SQRDMULHve_4h8h
    UINT64_C(1333841920),	// SQRDMULHve_4s4s
    UINT64_C(1329647616),	// SQRDMULHve_8h8h
    UINT64_C(782283776),	// SQRDMULHvvv_2S
    UINT64_C(778089472),	// SQRDMULHvvv_4H
    UINT64_C(1856025600),	// SQRDMULHvvv_4S
    UINT64_C(1851831296),	// SQRDMULHvvv_8H
    UINT64_C(1579179008),	// SQRSHLbbb
    UINT64_C(1591761920),	// SQRSHLddd
    UINT64_C(1583373312),	// SQRSHLhhh
    UINT64_C(1587567616),	// SQRSHLsss
    UINT64_C(1310743552),	// SQRSHLvvv_16B
    UINT64_C(1323326464),	// SQRSHLvvv_2D
    UINT64_C(245390336),	// SQRSHLvvv_2S
    UINT64_C(241196032),	// SQRSHLvvv_4H
    UINT64_C(1319132160),	// SQRSHLvvv_4S
    UINT64_C(237001728),	// SQRSHLvvv_8B
    UINT64_C(1314937856),	// SQRSHLvvv_8H
    UINT64_C(1594399744),	// SQRSHRNbhi
    UINT64_C(1594924032),	// SQRSHRNhsi
    UINT64_C(1595972608),	// SQRSHRNsdi
    UINT64_C(1325964288),	// SQRSHRNvvi_16B
    UINT64_C(253795328),	// SQRSHRNvvi_2S
    UINT64_C(252746752),	// SQRSHRNvvi_4H
    UINT64_C(1327537152),	// SQRSHRNvvi_4S
    UINT64_C(252222464),	// SQRSHRNvvi_8B
    UINT64_C(1326488576),	// SQRSHRNvvi_8H
    UINT64_C(2131266560),	// SQRSHRUNbhi
    UINT64_C(2131790848),	// SQRSHRUNhsi
    UINT64_C(2132839424),	// SQRSHRUNsdi
    UINT64_C(2131256320),	// SQSHLUbbi
    UINT64_C(2134926336),	// SQSHLUddi
    UINT64_C(2131780608),	// SQSHLUhhi
    UINT64_C(2132829184),	// SQSHLUssi
    UINT64_C(1862820864),	// SQSHLUvvi_16B
    UINT64_C(1866490880),	// SQSHLUvvi_2D
    UINT64_C(790651904),	// SQSHLUvvi_2S
    UINT64_C(789603328),	// SQSHLUvvi_4H
    UINT64_C(1864393728),	// SQSHLUvvi_4S
    UINT64_C(789079040),	// SQSHLUvvi_8B
    UINT64_C(1863345152),	// SQSHLUvvi_8H
    UINT64_C(1579174912),	// SQSHLbbb
    UINT64_C(1594389504),	// SQSHLbbi
    UINT64_C(1591757824),	// SQSHLddd
    UINT64_C(1598059520),	// SQSHLddi
    UINT64_C(1583369216),	// SQSHLhhh
    UINT64_C(1594913792),	// SQSHLhhi
    UINT64_C(1595962368),	// SQSHLssi
    UINT64_C(1587563520),	// SQSHLsss
    UINT64_C(1325954048),	// SQSHLvvi_16B
    UINT64_C(1329624064),	// SQSHLvvi_2D
    UINT64_C(253785088),	// SQSHLvvi_2S
    UINT64_C(252736512),	// SQSHLvvi_4H
    UINT64_C(1327526912),	// SQSHLvvi_4S
    UINT64_C(252212224),	// SQSHLvvi_8B
    UINT64_C(1326478336),	// SQSHLvvi_8H
    UINT64_C(1310739456),	// SQSHLvvv_16B
    UINT64_C(1323322368),	// SQSHLvvv_2D
    UINT64_C(245386240),	// SQSHLvvv_2S
    UINT64_C(241191936),	// SQSHLvvv_4H
    UINT64_C(1319128064),	// SQSHLvvv_4S
    UINT64_C(236997632),	// SQSHLvvv_8B
    UINT64_C(1314933760),	// SQSHLvvv_8H
    UINT64_C(1594397696),	// SQSHRNbhi
    UINT64_C(1594921984),	// SQSHRNhsi
    UINT64_C(1595970560),	// SQSHRNsdi
    UINT64_C(1325962240),	// SQSHRNvvi_16B
    UINT64_C(253793280),	// SQSHRNvvi_2S
    UINT64_C(252744704),	// SQSHRNvvi_4H
    UINT64_C(1327535104),	// SQSHRNvvi_4S
    UINT64_C(252220416),	// SQSHRNvvi_8B
    UINT64_C(1326486528),	// SQSHRNvvi_8H
    UINT64_C(2131264512),	// SQSHRUNbhi
    UINT64_C(2131788800),	// SQSHRUNhsi
    UINT64_C(2132837376),	// SQSHRUNsdi
    UINT64_C(1579166720),	// SQSUBbbb
    UINT64_C(1591749632),	// SQSUBddd
    UINT64_C(1583361024),	// SQSUBhhh
    UINT64_C(1587555328),	// SQSUBsss
    UINT64_C(1310731264),	// SQSUBvvv_16B
    UINT64_C(1323314176),	// SQSUBvvv_2D
    UINT64_C(245378048),	// SQSUBvvv_2S
    UINT64_C(241183744),	// SQSUBvvv_4H
    UINT64_C(1319119872),	// SQSUBvvv_4S
    UINT64_C(236989440),	// SQSUBvvv_8B
    UINT64_C(1314925568),	// SQSUBvvv_8H
    UINT64_C(245450752),	// SQXTN2d2s
    UINT64_C(1319192576),	// SQXTN2d4s
    UINT64_C(241256448),	// SQXTN4s4h
    UINT64_C(1314998272),	// SQXTN4s8h
    UINT64_C(1310803968),	// SQXTN8h16b
    UINT64_C(237062144),	// SQXTN8h8b
    UINT64_C(1579239424),	// SQXTNbh
    UINT64_C(1583433728),	// SQXTNhs
    UINT64_C(1587628032),	// SQXTNsd
    UINT64_C(782313472),	// SQXTUN2d2s
    UINT64_C(1856055296),	// SQXTUN2d4s
    UINT64_C(778119168),	// SQXTUN4s4h
    UINT64_C(1851860992),	// SQXTUN4s8h
    UINT64_C(1847666688),	// SQXTUN8h16b
    UINT64_C(773924864),	// SQXTUN8h8b
    UINT64_C(2116102144),	// SQXTUNbh
    UINT64_C(2120296448),	// SQXTUNhs
    UINT64_C(2124490752),	// SQXTUNsd
    UINT64_C(1310725120),	// SRHADDvvv_16B
    UINT64_C(245371904),	// SRHADDvvv_2S
    UINT64_C(241177600),	// SRHADDvvv_4H
    UINT64_C(1319113728),	// SRHADDvvv_4S
    UINT64_C(236983296),	// SRHADDvvv_8B
    UINT64_C(1314919424),	// SRHADDvvv_8H
    UINT64_C(2134918144),	// SRI
    UINT64_C(1862812672),	// SRIvvi_16B
    UINT64_C(1866482688),	// SRIvvi_2D
    UINT64_C(790643712),	// SRIvvi_2S
    UINT64_C(789595136),	// SRIvvi_4H
    UINT64_C(1864385536),	// SRIvvi_4S
    UINT64_C(789070848),	// SRIvvi_8B
    UINT64_C(1863336960),	// SRIvvi_8H
    UINT64_C(1591759872),	// SRSHLddd
    UINT64_C(1310741504),	// SRSHLvvv_16B
    UINT64_C(1323324416),	// SRSHLvvv_2D
    UINT64_C(245388288),	// SRSHLvvv_2S
    UINT64_C(241193984),	// SRSHLvvv_4H
    UINT64_C(1319130112),	// SRSHLvvv_4S
    UINT64_C(236999680),	// SRSHLvvv_8B
    UINT64_C(1314935808),	// SRSHLvvv_8H
    UINT64_C(1598039040),	// SRSHRddi
    UINT64_C(1325933568),	// SRSHRvvi_16B
    UINT64_C(1329603584),	// SRSHRvvi_2D
    UINT64_C(253764608),	// SRSHRvvi_2S
    UINT64_C(252716032),	// SRSHRvvi_4H
    UINT64_C(1327506432),	// SRSHRvvi_4S
    UINT64_C(252191744),	// SRSHRvvi_8B
    UINT64_C(1326457856),	// SRSHRvvi_8H
    UINT64_C(1598043136),	// SRSRA
    UINT64_C(1325937664),	// SRSRAvvi_16B
    UINT64_C(1329607680),	// SRSRAvvi_2D
    UINT64_C(253768704),	// SRSRAvvi_2S
    UINT64_C(252720128),	// SRSRAvvi_4H
    UINT64_C(1327510528),	// SRSRAvvi_4S
    UINT64_C(252195840),	// SRSRAvvi_8B
    UINT64_C(1326461952),	// SRSRAvvi_8H
    UINT64_C(1325966336),	// SSHLLvvi_16B
    UINT64_C(253797376),	// SSHLLvvi_2S
    UINT64_C(252748800),	// SSHLLvvi_4H
    UINT64_C(1327539200),	// SSHLLvvi_4S
    UINT64_C(252224512),	// SSHLLvvi_8B
    UINT64_C(1326490624),	// SSHLLvvi_8H
    UINT64_C(1591755776),	// SSHLddd
    UINT64_C(1310737408),	// SSHLvvv_16B
    UINT64_C(1323320320),	// SSHLvvv_2D
    UINT64_C(245384192),	// SSHLvvv_2S
    UINT64_C(241189888),	// SSHLvvv_4H
    UINT64_C(1319126016),	// SSHLvvv_4S
    UINT64_C(236995584),	// SSHLvvv_8B
    UINT64_C(1314931712),	// SSHLvvv_8H
    UINT64_C(1598030848),	// SSHRddi
    UINT64_C(1325925376),	// SSHRvvi_16B
    UINT64_C(1329595392),	// SSHRvvi_2D
    UINT64_C(253756416),	// SSHRvvi_2S
    UINT64_C(252707840),	// SSHRvvi_4H
    UINT64_C(1327498240),	// SSHRvvi_4S
    UINT64_C(252183552),	// SSHRvvi_8B
    UINT64_C(1326449664),	// SSHRvvi_8H
    UINT64_C(1598034944),	// SSRA
    UINT64_C(1325929472),	// SSRAvvi_16B
    UINT64_C(1329599488),	// SSRAvvi_2D
    UINT64_C(253760512),	// SSRAvvi_2S
    UINT64_C(252711936),	// SSRAvvi_4H
    UINT64_C(1327502336),	// SSRAvvi_4S
    UINT64_C(252187648),	// SSRAvvi_8B
    UINT64_C(1326453760),	// SSRAvvi_8H
    UINT64_C(1319116800),	// SSUBL2vvv_2d4s
    UINT64_C(1314922496),	// SSUBL2vvv_4s8h
    UINT64_C(1310728192),	// SSUBL2vvv_8h16b
    UINT64_C(245374976),	// SSUBLvvv_2d2s
    UINT64_C(241180672),	// SSUBLvvv_4s4h
    UINT64_C(236986368),	// SSUBLvvv_8h8b
    UINT64_C(1319120896),	// SSUBW2vvv_2d4s
    UINT64_C(1314926592),	// SSUBW2vvv_4s8h
    UINT64_C(1310732288),	// SSUBW2vvv_8h16b
    UINT64_C(245379072),	// SSUBWvvv_2d2s
    UINT64_C(241184768),	// SSUBWvvv_4s4h
    UINT64_C(236990464),	// SSUBWvvv_8h8b
    UINT64_C(218103808),	// ST1LN_B
    UINT64_C(218137600),	// ST1LN_D
    UINT64_C(218120192),	// ST1LN_H
    UINT64_C(218136576),	// ST1LN_S
    UINT64_C(228524032),	// ST1LN_WB_B_fixed
    UINT64_C(226492416),	// ST1LN_WB_B_register
    UINT64_C(228557824),	// ST1LN_WB_D_fixed
    UINT64_C(226526208),	// ST1LN_WB_D_register
    UINT64_C(228540416),	// ST1LN_WB_H_fixed
    UINT64_C(226508800),	// ST1LN_WB_H_register
    UINT64_C(228556800),	// ST1LN_WB_S_fixed
    UINT64_C(226525184),	// ST1LN_WB_S_register
    UINT64_C(1285517312),	// ST1WB_16B_fixed
    UINT64_C(1283485696),	// ST1WB_16B_register
    UINT64_C(211778560),	// ST1WB_1D_fixed
    UINT64_C(209746944),	// ST1WB_1D_register
    UINT64_C(1285520384),	// ST1WB_2D_fixed
    UINT64_C(1283488768),	// ST1WB_2D_register
    UINT64_C(211777536),	// ST1WB_2S_fixed
    UINT64_C(209745920),	// ST1WB_2S_register
    UINT64_C(211776512),	// ST1WB_4H_fixed
    UINT64_C(209744896),	// ST1WB_4H_register
    UINT64_C(1285519360),	// ST1WB_4S_fixed
    UINT64_C(1283487744),	// ST1WB_4S_register
    UINT64_C(211775488),	// ST1WB_8B_fixed
    UINT64_C(209743872),	// ST1WB_8B_register
    UINT64_C(1285518336),	// ST1WB_8H_fixed
    UINT64_C(1283486720),	// ST1WB_8H_register
    UINT64_C(1275097088),	// ST1_16B
    UINT64_C(201358336),	// ST1_1D
    UINT64_C(1275100160),	// ST1_2D
    UINT64_C(201357312),	// ST1_2S
    UINT64_C(201356288),	// ST1_4H
    UINT64_C(1275099136),	// ST1_4S
    UINT64_C(201355264),	// ST1_8B
    UINT64_C(1275098112),	// ST1_8H
    UINT64_C(1285529600),	// ST1x2WB_16B_fixed
    UINT64_C(1283497984),	// ST1x2WB_16B_register
    UINT64_C(211790848),	// ST1x2WB_1D_fixed
    UINT64_C(209759232),	// ST1x2WB_1D_register
    UINT64_C(1285532672),	// ST1x2WB_2D_fixed
    UINT64_C(1283501056),	// ST1x2WB_2D_register
    UINT64_C(211789824),	// ST1x2WB_2S_fixed
    UINT64_C(209758208),	// ST1x2WB_2S_register
    UINT64_C(211788800),	// ST1x2WB_4H_fixed
    UINT64_C(209757184),	// ST1x2WB_4H_register
    UINT64_C(1285531648),	// ST1x2WB_4S_fixed
    UINT64_C(1283500032),	// ST1x2WB_4S_register
    UINT64_C(211787776),	// ST1x2WB_8B_fixed
    UINT64_C(209756160),	// ST1x2WB_8B_register
    UINT64_C(1285530624),	// ST1x2WB_8H_fixed
    UINT64_C(1283499008),	// ST1x2WB_8H_register
    UINT64_C(1275109376),	// ST1x2_16B
    UINT64_C(201370624),	// ST1x2_1D
    UINT64_C(1275112448),	// ST1x2_2D
    UINT64_C(201369600),	// ST1x2_2S
    UINT64_C(201368576),	// ST1x2_4H
    UINT64_C(1275111424),	// ST1x2_4S
    UINT64_C(201367552),	// ST1x2_8B
    UINT64_C(1275110400),	// ST1x2_8H
    UINT64_C(1285513216),	// ST1x3WB_16B_fixed
    UINT64_C(1283481600),	// ST1x3WB_16B_register
    UINT64_C(211774464),	// ST1x3WB_1D_fixed
    UINT64_C(209742848),	// ST1x3WB_1D_register
    UINT64_C(1285516288),	// ST1x3WB_2D_fixed
    UINT64_C(1283484672),	// ST1x3WB_2D_register
    UINT64_C(211773440),	// ST1x3WB_2S_fixed
    UINT64_C(209741824),	// ST1x3WB_2S_register
    UINT64_C(211772416),	// ST1x3WB_4H_fixed
    UINT64_C(209740800),	// ST1x3WB_4H_register
    UINT64_C(1285515264),	// ST1x3WB_4S_fixed
    UINT64_C(1283483648),	// ST1x3WB_4S_register
    UINT64_C(211771392),	// ST1x3WB_8B_fixed
    UINT64_C(209739776),	// ST1x3WB_8B_register
    UINT64_C(1285514240),	// ST1x3WB_8H_fixed
    UINT64_C(1283482624),	// ST1x3WB_8H_register
    UINT64_C(1275092992),	// ST1x3_16B
    UINT64_C(201354240),	// ST1x3_1D
    UINT64_C(1275096064),	// ST1x3_2D
    UINT64_C(201353216),	// ST1x3_2S
    UINT64_C(201352192),	// ST1x3_4H
    UINT64_C(1275095040),	// ST1x3_4S
    UINT64_C(201351168),	// ST1x3_8B
    UINT64_C(1275094016),	// ST1x3_8H
    UINT64_C(1285496832),	// ST1x4WB_16B_fixed
    UINT64_C(1283465216),	// ST1x4WB_16B_register
    UINT64_C(211758080),	// ST1x4WB_1D_fixed
    UINT64_C(209726464),	// ST1x4WB_1D_register
    UINT64_C(1285499904),	// ST1x4WB_2D_fixed
    UINT64_C(1283468288),	// ST1x4WB_2D_register
    UINT64_C(211757056),	// ST1x4WB_2S_fixed
    UINT64_C(209725440),	// ST1x4WB_2S_register
    UINT64_C(211756032),	// ST1x4WB_4H_fixed
    UINT64_C(209724416),	// ST1x4WB_4H_register
    UINT64_C(1285498880),	// ST1x4WB_4S_fixed
    UINT64_C(1283467264),	// ST1x4WB_4S_register
    UINT64_C(211755008),	// ST1x4WB_8B_fixed
    UINT64_C(209723392),	// ST1x4WB_8B_register
    UINT64_C(1285497856),	// ST1x4WB_8H_fixed
    UINT64_C(1283466240),	// ST1x4WB_8H_register
    UINT64_C(1275076608),	// ST1x4_16B
    UINT64_C(201337856),	// ST1x4_1D
    UINT64_C(1275079680),	// ST1x4_2D
    UINT64_C(201336832),	// ST1x4_2S
    UINT64_C(201335808),	// ST1x4_4H
    UINT64_C(1275078656),	// ST1x4_4S
    UINT64_C(201334784),	// ST1x4_8B
    UINT64_C(1275077632),	// ST1x4_8H
    UINT64_C(220200960),	// ST2LN_B
    UINT64_C(220234752),	// ST2LN_D
    UINT64_C(220217344),	// ST2LN_H
    UINT64_C(220233728),	// ST2LN_S
    UINT64_C(230621184),	// ST2LN_WB_B_fixed
    UINT64_C(228589568),	// ST2LN_WB_B_register
    UINT64_C(230654976),	// ST2LN_WB_D_fixed
    UINT64_C(228623360),	// ST2LN_WB_D_register
    UINT64_C(230637568),	// ST2LN_WB_H_fixed
    UINT64_C(228605952),	// ST2LN_WB_H_register
    UINT64_C(230653952),	// ST2LN_WB_S_fixed
    UINT64_C(228622336),	// ST2LN_WB_S_register
    UINT64_C(1285521408),	// ST2WB_16B_fixed
    UINT64_C(1283489792),	// ST2WB_16B_register
    UINT64_C(1285524480),	// ST2WB_2D_fixed
    UINT64_C(1283492864),	// ST2WB_2D_register
    UINT64_C(211781632),	// ST2WB_2S_fixed
    UINT64_C(209750016),	// ST2WB_2S_register
    UINT64_C(211780608),	// ST2WB_4H_fixed
    UINT64_C(209748992),	// ST2WB_4H_register
    UINT64_C(1285523456),	// ST2WB_4S_fixed
    UINT64_C(1283491840),	// ST2WB_4S_register
    UINT64_C(211779584),	// ST2WB_8B_fixed
    UINT64_C(209747968),	// ST2WB_8B_register
    UINT64_C(1285522432),	// ST2WB_8H_fixed
    UINT64_C(1283490816),	// ST2WB_8H_register
    UINT64_C(1275101184),	// ST2_16B
    UINT64_C(1275104256),	// ST2_2D
    UINT64_C(201361408),	// ST2_2S
    UINT64_C(201360384),	// ST2_4H
    UINT64_C(1275103232),	// ST2_4S
    UINT64_C(201359360),	// ST2_8B
    UINT64_C(1275102208),	// ST2_8H
    UINT64_C(218112000),	// ST3LN_B
    UINT64_C(218145792),	// ST3LN_D
    UINT64_C(218128384),	// ST3LN_H
    UINT64_C(218144768),	// ST3LN_S
    UINT64_C(228532224),	// ST3LN_WB_B_fixed
    UINT64_C(226500608),	// ST3LN_WB_B_register
    UINT64_C(228566016),	// ST3LN_WB_D_fixed
    UINT64_C(226534400),	// ST3LN_WB_D_register
    UINT64_C(228548608),	// ST3LN_WB_H_fixed
    UINT64_C(226516992),	// ST3LN_WB_H_register
    UINT64_C(228564992),	// ST3LN_WB_S_fixed
    UINT64_C(226533376),	// ST3LN_WB_S_register
    UINT64_C(1285505024),	// ST3WB_16B_fixed
    UINT64_C(1283473408),	// ST3WB_16B_register
    UINT64_C(1285508096),	// ST3WB_2D_fixed
    UINT64_C(1283476480),	// ST3WB_2D_register
    UINT64_C(211765248),	// ST3WB_2S_fixed
    UINT64_C(209733632),	// ST3WB_2S_register
    UINT64_C(211764224),	// ST3WB_4H_fixed
    UINT64_C(209732608),	// ST3WB_4H_register
    UINT64_C(1285507072),	// ST3WB_4S_fixed
    UINT64_C(1283475456),	// ST3WB_4S_register
    UINT64_C(211763200),	// ST3WB_8B_fixed
    UINT64_C(209731584),	// ST3WB_8B_register
    UINT64_C(1285506048),	// ST3WB_8H_fixed
    UINT64_C(1283474432),	// ST3WB_8H_register
    UINT64_C(1275084800),	// ST3_16B
    UINT64_C(1275087872),	// ST3_2D
    UINT64_C(201345024),	// ST3_2S
    UINT64_C(201344000),	// ST3_4H
    UINT64_C(1275086848),	// ST3_4S
    UINT64_C(201342976),	// ST3_8B
    UINT64_C(1275085824),	// ST3_8H
    UINT64_C(220209152),	// ST4LN_B
    UINT64_C(220242944),	// ST4LN_D
    UINT64_C(220225536),	// ST4LN_H
    UINT64_C(220241920),	// ST4LN_S
    UINT64_C(230629376),	// ST4LN_WB_B_fixed
    UINT64_C(228597760),	// ST4LN_WB_B_register
    UINT64_C(230663168),	// ST4LN_WB_D_fixed
    UINT64_C(228631552),	// ST4LN_WB_D_register
    UINT64_C(230645760),	// ST4LN_WB_H_fixed
    UINT64_C(228614144),	// ST4LN_WB_H_register
    UINT64_C(230662144),	// ST4LN_WB_S_fixed
    UINT64_C(228630528),	// ST4LN_WB_S_register
    UINT64_C(1285488640),	// ST4WB_16B_fixed
    UINT64_C(1283457024),	// ST4WB_16B_register
    UINT64_C(1285491712),	// ST4WB_2D_fixed
    UINT64_C(1283460096),	// ST4WB_2D_register
    UINT64_C(211748864),	// ST4WB_2S_fixed
    UINT64_C(209717248),	// ST4WB_2S_register
    UINT64_C(211747840),	// ST4WB_4H_fixed
    UINT64_C(209716224),	// ST4WB_4H_register
    UINT64_C(1285490688),	// ST4WB_4S_fixed
    UINT64_C(1283459072),	// ST4WB_4S_register
    UINT64_C(211746816),	// ST4WB_8B_fixed
    UINT64_C(209715200),	// ST4WB_8B_register
    UINT64_C(1285489664),	// ST4WB_8H_fixed
    UINT64_C(1283458048),	// ST4WB_8H_register
    UINT64_C(1275068416),	// ST4_16B
    UINT64_C(1275071488),	// ST4_2D
    UINT64_C(201328640),	// ST4_2S
    UINT64_C(201327616),	// ST4_4H
    UINT64_C(1275070464),	// ST4_4S
    UINT64_C(201326592),	// ST4_8B
    UINT64_C(1275069440),	// ST4_8H
    UINT64_C(142639104),	// STLR_byte
    UINT64_C(3363864576),	// STLR_dword
    UINT64_C(1216380928),	// STLR_hword
    UINT64_C(2290122752),	// STLR_word
    UINT64_C(3357573120),	// STLXP_dword
    UINT64_C(2283831296),	// STLXP_word
    UINT64_C(134250496),	// STLXR_byte
    UINT64_C(3355475968),	// STLXR_dword
    UINT64_C(1207992320),	// STLXR_hword
    UINT64_C(2281734144),	// STLXR_word
    UINT64_C(3357540352),	// STXP_dword
    UINT64_C(2283798528),	// STXP_word
    UINT64_C(134217728),	// STXR_byte
    UINT64_C(3355443200),	// STXR_dword
    UINT64_C(1207959552),	// STXR_hword
    UINT64_C(2281701376),	// STXR_word
    UINT64_C(1310744576),	// SUBHN2vvv_16b8h
    UINT64_C(1319133184),	// SUBHN2vvv_4s2d
    UINT64_C(1314938880),	// SUBHN2vvv_8h4s
    UINT64_C(245391360),	// SUBHNvvv_2s2d
    UINT64_C(241197056),	// SUBHNvvv_4h4s
    UINT64_C(237002752),	// SUBHNvvv_8b8h
    UINT64_C(1803550720),	// SUBSwww_asr
    UINT64_C(1795162112),	// SUBSwww_lsl
    UINT64_C(1799356416),	// SUBSwww_lsr
    UINT64_C(1797292032),	// SUBSwww_sxtb
    UINT64_C(1797300224),	// SUBSwww_sxth
    UINT64_C(1797308416),	// SUBSwww_sxtw
    UINT64_C(1797316608),	// SUBSwww_sxtx
    UINT64_C(1797259264),	// SUBSwww_uxtb
    UINT64_C(1797267456),	// SUBSwww_uxth
    UINT64_C(1797275648),	// SUBSwww_uxtw
    UINT64_C(1797283840),	// SUBSwww_uxtx
    UINT64_C(3944775680),	// SUBSxxw_sxtb
    UINT64_C(3944783872),	// SUBSxxw_sxth
    UINT64_C(3944792064),	// SUBSxxw_sxtw
    UINT64_C(3944742912),	// SUBSxxw_uxtb
    UINT64_C(3944751104),	// SUBSxxw_uxth
    UINT64_C(3944759296),	// SUBSxxw_uxtw
    UINT64_C(3951034368),	// SUBSxxx_asr
    UINT64_C(3942645760),	// SUBSxxx_lsl
    UINT64_C(3946840064),	// SUBSxxx_lsr
    UINT64_C(3944800256),	// SUBSxxx_sxtx
    UINT64_C(3944767488),	// SUBSxxx_uxtx
    UINT64_C(2128643072),	// SUBddd
    UINT64_C(1847624704),	// SUBvvv_16B
    UINT64_C(1860207616),	// SUBvvv_2D
    UINT64_C(782271488),	// SUBvvv_2S
    UINT64_C(778077184),	// SUBvvv_4H
    UINT64_C(1856013312),	// SUBvvv_4S
    UINT64_C(773882880),	// SUBvvv_8B
    UINT64_C(1851819008),	// SUBvvv_8H
    UINT64_C(1895825408),	// SUBwwi_lsl0_S
    UINT64_C(1895825439),	// SUBwwi_lsl0_cmp
    UINT64_C(1358954496),	// SUBwwi_lsl0_s
    UINT64_C(1900019712),	// SUBwwi_lsl12_S
    UINT64_C(1900019743),	// SUBwwi_lsl12_cmp
    UINT64_C(1363148800),	// SUBwwi_lsl12_s
    UINT64_C(1266679808),	// SUBwww_asr
    UINT64_C(1258291200),	// SUBwww_lsl
    UINT64_C(1262485504),	// SUBwww_lsr
    UINT64_C(1260421120),	// SUBwww_sxtb
    UINT64_C(1260429312),	// SUBwww_sxth
    UINT64_C(1260437504),	// SUBwww_sxtw
    UINT64_C(1260445696),	// SUBwww_sxtx
    UINT64_C(1260388352),	// SUBwww_uxtb
    UINT64_C(1260396544),	// SUBwww_uxth
    UINT64_C(1260404736),	// SUBwww_uxtw
    UINT64_C(1260412928),	// SUBwww_uxtx
    UINT64_C(4043309056),	// SUBxxi_lsl0_S
    UINT64_C(4043309087),	// SUBxxi_lsl0_cmp
    UINT64_C(3506438144),	// SUBxxi_lsl0_s
    UINT64_C(4047503360),	// SUBxxi_lsl12_S
    UINT64_C(4047503391),	// SUBxxi_lsl12_cmp
    UINT64_C(3510632448),	// SUBxxi_lsl12_s
    UINT64_C(3407904768),	// SUBxxw_sxtb
    UINT64_C(3407912960),	// SUBxxw_sxth
    UINT64_C(3407921152),	// SUBxxw_sxtw
    UINT64_C(3407872000),	// SUBxxw_uxtb
    UINT64_C(3407880192),	// SUBxxw_uxth
    UINT64_C(3407888384),	// SUBxxw_uxtw
    UINT64_C(3414163456),	// SUBxxx_asr
    UINT64_C(3405774848),	// SUBxxx_lsl
    UINT64_C(3409969152),	// SUBxxx_lsr
    UINT64_C(3407929344),	// SUBxxx_sxtx
    UINT64_C(3407896576),	// SUBxxx_uxtx
    UINT64_C(1310734336),	// SUQADD16b
    UINT64_C(1323317248),	// SUQADD2d
    UINT64_C(245381120),	// SUQADD2s
    UINT64_C(241186816),	// SUQADD4h
    UINT64_C(1319122944),	// SUQADD4s
    UINT64_C(236992512),	// SUQADD8b
    UINT64_C(1314928640),	// SUQADD8h
    UINT64_C(1579169792),	// SUQADDbb
    UINT64_C(1591752704),	// SUQADDdd
    UINT64_C(1583364096),	// SUQADDhh
    UINT64_C(1587558400),	// SUQADDss
    UINT64_C(3556769793),	// SVCi
    UINT64_C(318774272),	// SXTBww
    UINT64_C(2470452224),	// SXTBxw
    UINT64_C(318782464),	// SXTHww
    UINT64_C(2470460416),	// SXTHxw
    UINT64_C(2470476800),	// SXTWxw
    UINT64_C(3576168448),	// SYSLxicci
    UINT64_C(3574071296),	// SYSiccix
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(1308622848),	// TBL1_16b
    UINT64_C(234881024),	// TBL1_8b
    UINT64_C(1308631040),	// TBL2_16b
    UINT64_C(234889216),	// TBL2_8b
    UINT64_C(1308639232),	// TBL3_16b
    UINT64_C(234897408),	// TBL3_8b
    UINT64_C(1308647424),	// TBL4_16b
    UINT64_C(234905600),	// TBL4_8b
    UINT64_C(922746880),	// TBNZwii
    UINT64_C(922746880),	// TBNZxii
    UINT64_C(1308626944),	// TBX1_16b
    UINT64_C(234885120),	// TBX1_8b
    UINT64_C(1308635136),	// TBX2_16b
    UINT64_C(234893312),	// TBX2_8b
    UINT64_C(1308643328),	// TBX3_16b
    UINT64_C(234901504),	// TBX3_8b
    UINT64_C(1308651520),	// TBX4_16b
    UINT64_C(234909696),	// TBX4_8b
    UINT64_C(905969664),	// TBZwii
    UINT64_C(905969664),	// TBZxii
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(3574071327),	// TLBIi
    UINT64_C(3574071296),	// TLBIix
    UINT64_C(0),
    UINT64_C(0),
    UINT64_C(1308633088),	// TRN1vvv_16b
    UINT64_C(1321216000),	// TRN1vvv_2d
    UINT64_C(243279872),	// TRN1vvv_2s
    UINT64_C(239085568),	// TRN1vvv_4h
    UINT64_C(1317021696),	// TRN1vvv_4s
    UINT64_C(234891264),	// TRN1vvv_8b
    UINT64_C(1312827392),	// TRN1vvv_8h
    UINT64_C(1308649472),	// TRN2vvv_16b
    UINT64_C(1321232384),	// TRN2vvv_2d
    UINT64_C(243296256),	// TRN2vvv_2s
    UINT64_C(239101952),	// TRN2vvv_4h
    UINT64_C(1317038080),	// TRN2vvv_4s
    UINT64_C(234907648),	// TRN2vvv_8b
    UINT64_C(1312843776),	// TRN2vvv_8h
    UINT64_C(1786773535),	// TSTww_asr
    UINT64_C(1778384927),	// TSTww_lsl
    UINT64_C(1782579231),	// TSTww_lsr
    UINT64_C(1790967839),	// TSTww_ror
    UINT64_C(3934257183),	// TSTxx_asr
    UINT64_C(3925868575),	// TSTxx_lsl
    UINT64_C(3930062879),	// TSTxx_lsr
    UINT64_C(3938451487),	// TSTxx_ror
    UINT64_C(1856000000),	// UABAL2vvv_2d2s
    UINT64_C(1851805696),	// UABAL2vvv_4s4h
    UINT64_C(1847611392),	// UABAL2vvv_8h8b
    UINT64_C(782258176),	// UABALvvv_2d2s
    UINT64_C(778063872),	// UABALvvv_4s4h
    UINT64_C(773869568),	// UABALvvv_8h8b
    UINT64_C(1847622656),	// UABAvvv_16B
    UINT64_C(782269440),	// UABAvvv_2S
    UINT64_C(778075136),	// UABAvvv_4H
    UINT64_C(1856011264),	// UABAvvv_4S
    UINT64_C(773880832),	// UABAvvv_8B
    UINT64_C(1851816960),	// UABAvvv_8H
    UINT64_C(1856008192),	// UABDL2vvv_2d2s
    UINT64_C(1851813888),	// UABDL2vvv_4s4h
    UINT64_C(1847619584),	// UABDL2vvv_8h8b
    UINT64_C(782266368),	// UABDLvvv_2d2s
    UINT64_C(778072064),	// UABDLvvv_4s4h
    UINT64_C(773877760),	// UABDLvvv_8h8b
    UINT64_C(1847620608),	// UABDvvv_16B
    UINT64_C(782267392),	// UABDvvv_2S
    UINT64_C(778073088),	// UABDvvv_4H
    UINT64_C(1856009216),	// UABDvvv_4S
    UINT64_C(773878784),	// UABDvvv_8B
    UINT64_C(1851814912),	// UABDvvv_8H
    UINT64_C(1847617536),	// UADALP16b8h
    UINT64_C(782264320),	// UADALP2s1d
    UINT64_C(778070016),	// UADALP4h2s
    UINT64_C(1856006144),	// UADALP4s2d
    UINT64_C(773875712),	// UADALP8b4h
    UINT64_C(1851811840),	// UADALP8h4s
    UINT64_C(1855979520),	// UADDL2vvv_2d4s
    UINT64_C(1851785216),	// UADDL2vvv_4s8h
    UINT64_C(1847590912),	// UADDL2vvv_8h16b
    UINT64_C(1847601152),	// UADDLP16b8h
    UINT64_C(782247936),	// UADDLP2s1d
    UINT64_C(778053632),	// UADDLP4h2s
    UINT64_C(1855989760),	// UADDLP4s2d
    UINT64_C(773859328),	// UADDLP8b4h
    UINT64_C(1851795456),	// UADDLP8h4s
    UINT64_C(1857042432),	// UADDLV_1d4s
    UINT64_C(1848653824),	// UADDLV_1h16b
    UINT64_C(774912000),	// UADDLV_1h8b
    UINT64_C(779106304),	// UADDLV_1s4h
    UINT64_C(1852848128),	// UADDLV_1s8h
    UINT64_C(782237696),	// UADDLvvv_2d2s
    UINT64_C(778043392),	// UADDLvvv_4s4h
    UINT64_C(773849088),	// UADDLvvv_8h8b
    UINT64_C(1855983616),	// UADDW2vvv_2d4s
    UINT64_C(1851789312),	// UADDW2vvv_4s8h
    UINT64_C(1847595008),	// UADDW2vvv_8h16b
    UINT64_C(782241792),	// UADDWvvv_2d2s
    UINT64_C(778047488),	// UADDWvvv_4s4h
    UINT64_C(773853184),	// UADDWvvv_8h8b
    UINT64_C(1392508928),	// UBFIZwwii
    UINT64_C(3544186880),	// UBFIZxxii
    UINT64_C(1392508928),	// UBFMwwii
    UINT64_C(3544186880),	// UBFMxxii
    UINT64_C(1392508928),	// UBFXwwii
    UINT64_C(3544186880),	// UBFXxxii
    UINT64_C(1851906048),	// UCVTF_2d
    UINT64_C(773969920),	// UCVTF_2s
    UINT64_C(1847711744),	// UCVTF_4s
    UINT64_C(2134959104),	// UCVTF_Nddi
    UINT64_C(2132861952),	// UCVTF_Nssi
    UINT64_C(2120341504),	// UCVTFdd
    UINT64_C(509804544),	// UCVTFdw
    UINT64_C(507707392),	// UCVTFdwi
    UINT64_C(2657288192),	// UCVTFdx
    UINT64_C(2655191040),	// UCVTFdxi
    UINT64_C(2116147200),	// UCVTFss
    UINT64_C(505610240),	// UCVTFsw
    UINT64_C(503513088),	// UCVTFswi
    UINT64_C(2653093888),	// UCVTFsx
    UINT64_C(2650996736),	// UCVTFsxi
    UINT64_C(448792576),	// UDIVwww
    UINT64_C(2596276224),	// UDIVxxx
    UINT64_C(1847591936),	// UHADDvvv_16B
    UINT64_C(782238720),	// UHADDvvv_2S
    UINT64_C(778044416),	// UHADDvvv_4H
    UINT64_C(1855980544),	// UHADDvvv_4S
    UINT64_C(773850112),	// UHADDvvv_8B
    UINT64_C(1851786240),	// UHADDvvv_8H
    UINT64_C(1847600128),	// UHSUBvvv_16B
    UINT64_C(782246912),	// UHSUBvvv_2S
    UINT64_C(778052608),	// UHSUBvvv_4H
    UINT64_C(1855988736),	// UHSUBvvv_4S
    UINT64_C(773858304),	// UHSUBvvv_8B
    UINT64_C(1851794432),	// UHSUBvvv_8H
    UINT64_C(2610954240),	// UMADDLxwwx
    UINT64_C(1847632896),	// UMAXPvvv_16B
    UINT64_C(782279680),	// UMAXPvvv_2S
    UINT64_C(778085376),	// UMAXPvvv_4H
    UINT64_C(1856021504),	// UMAXPvvv_4S
    UINT64_C(773891072),	// UMAXPvvv_8B
    UINT64_C(1851827200),	// UMAXPvvv_8H
    UINT64_C(1848682496),	// UMAXV_1b16b
    UINT64_C(774940672),	// UMAXV_1b8b
    UINT64_C(779134976),	// UMAXV_1h4h
    UINT64_C(1852876800),	// UMAXV_1h8h
    UINT64_C(1857071104),	// UMAXV_1s4s
    UINT64_C(1847616512),	// UMAXvvv_16B
    UINT64_C(782263296),	// UMAXvvv_2S
    UINT64_C(778068992),	// UMAXvvv_4H
    UINT64_C(1856005120),	// UMAXvvv_4S
    UINT64_C(773874688),	// UMAXvvv_8B
    UINT64_C(1851810816),	// UMAXvvv_8H
    UINT64_C(1847634944),	// UMINPvvv_16B
    UINT64_C(782281728),	// UMINPvvv_2S
    UINT64_C(778087424),	// UMINPvvv_4H
    UINT64_C(1856023552),	// UMINPvvv_4S
    UINT64_C(773893120),	// UMINPvvv_8B
    UINT64_C(1851829248),	// UMINPvvv_8H
    UINT64_C(1848748032),	// UMINV_1b16b
    UINT64_C(775006208),	// UMINV_1b8b
    UINT64_C(779200512),	// UMINV_1h4h
    UINT64_C(1852942336),	// UMINV_1h8h
    UINT64_C(1857136640),	// UMINV_1s4s
    UINT64_C(1847618560),	// UMINvvv_16B
    UINT64_C(782265344),	// UMINvvv_2S
    UINT64_C(778071040),	// UMINvvv_4H
    UINT64_C(1856007168),	// UMINvvv_4S
    UINT64_C(773876736),	// UMINvvv_8B
    UINT64_C(1851812864),	// UMINvvv_8H
    UINT64_C(1856012288),	// UMLAL2vvv_2d4s
    UINT64_C(1851817984),	// UMLAL2vvv_4s8h
    UINT64_C(1847623680),	// UMLAL2vvv_8h16b
    UINT64_C(796925952),	// UMLALvve_2d2s
    UINT64_C(1870667776),	// UMLALvve_2d4s
    UINT64_C(792731648),	// UMLALvve_4s4h
    UINT64_C(1866473472),	// UMLALvve_4s8h
    UINT64_C(782270464),	// UMLALvvv_2d2s
    UINT64_C(778076160),	// UMLALvvv_4s4h
    UINT64_C(773881856),	// UMLALvvv_8h8b
    UINT64_C(1856020480),	// UMLSL2vvv_2d4s
    UINT64_C(1851826176),	// UMLSL2vvv_4s8h
    UINT64_C(1847631872),	// UMLSL2vvv_8h16b
    UINT64_C(796942336),	// UMLSLvve_2d2s
    UINT64_C(1870684160),	// UMLSLvve_2d4s
    UINT64_C(792748032),	// UMLSLvve_4s4h
    UINT64_C(1866489856),	// UMLSLvve_4s8h
    UINT64_C(782278656),	// UMLSLvvv_2d2s
    UINT64_C(778084352),	// UMLSLvvv_4s4h
    UINT64_C(773890048),	// UMLSLvvv_8h8b
    UINT64_C(234961920),	// UMOVwb
    UINT64_C(235027456),	// UMOVwh
    UINT64_C(235158528),	// UMOVws
    UINT64_C(1309162496),	// UMOVxd
    UINT64_C(2610987008),	// UMSUBLxwwx
    UINT64_C(2613051392),	// UMULHxxx
    UINT64_C(1856028672),	// UMULL2vvv_2d4s
    UINT64_C(1851834368),	// UMULL2vvv_4s8h
    UINT64_C(1847640064),	// UMULL2vvv_8h16b
    UINT64_C(796958720),	// UMULLve_2d2s
    UINT64_C(1870700544),	// UMULLve_2d4s
    UINT64_C(792764416),	// UMULLve_4s4h
    UINT64_C(1866506240),	// UMULLve_4s8h
    UINT64_C(782286848),	// UMULLvvv_2d2s
    UINT64_C(778092544),	// UMULLvvv_4s4h
    UINT64_C(773898240),	// UMULLvvv_8h8b
    UINT64_C(2116029440),	// UQADDbbb
    UINT64_C(2128612352),	// UQADDddd
    UINT64_C(2120223744),	// UQADDhhh
    UINT64_C(2124418048),	// UQADDsss
    UINT64_C(1847593984),	// UQADDvvv_16B
    UINT64_C(1860176896),	// UQADDvvv_2D
    UINT64_C(782240768),	// UQADDvvv_2S
    UINT64_C(778046464),	// UQADDvvv_4H
    UINT64_C(1855982592),	// UQADDvvv_4S
    UINT64_C(773852160),	// UQADDvvv_8B
    UINT64_C(1851788288),	// UQADDvvv_8H
    UINT64_C(2116049920),	// UQRSHLbbb
    UINT64_C(2128632832),	// UQRSHLddd
    UINT64_C(2120244224),	// UQRSHLhhh
    UINT64_C(2124438528),	// UQRSHLsss
    UINT64_C(1847614464),	// UQRSHLvvv_16B
    UINT64_C(1860197376),	// UQRSHLvvv_2D
    UINT64_C(782261248),	// UQRSHLvvv_2S
    UINT64_C(778066944),	// UQRSHLvvv_4H
    UINT64_C(1856003072),	// UQRSHLvvv_4S
    UINT64_C(773872640),	// UQRSHLvvv_8B
    UINT64_C(1851808768),	// UQRSHLvvv_8H
    UINT64_C(2131270656),	// UQRSHRNbhi
    UINT64_C(2131794944),	// UQRSHRNhsi
    UINT64_C(2132843520),	// UQRSHRNsdi
    UINT64_C(1862835200),	// UQRSHRNvvi_16B
    UINT64_C(790666240),	// UQRSHRNvvi_2S
    UINT64_C(789617664),	// UQRSHRNvvi_4H
    UINT64_C(1864408064),	// UQRSHRNvvi_4S
    UINT64_C(789093376),	// UQRSHRNvvi_8B
    UINT64_C(1863359488),	// UQRSHRNvvi_8H
    UINT64_C(2116045824),	// UQSHLbbb
    UINT64_C(2131260416),	// UQSHLbbi
    UINT64_C(2128628736),	// UQSHLddd
    UINT64_C(2134930432),	// UQSHLddi
    UINT64_C(2120240128),	// UQSHLhhh
    UINT64_C(2131784704),	// UQSHLhhi
    UINT64_C(2132833280),	// UQSHLssi
    UINT64_C(2124434432),	// UQSHLsss
    UINT64_C(1862824960),	// UQSHLvvi_16B
    UINT64_C(1866494976),	// UQSHLvvi_2D
    UINT64_C(790656000),	// UQSHLvvi_2S
    UINT64_C(789607424),	// UQSHLvvi_4H
    UINT64_C(1864397824),	// UQSHLvvi_4S
    UINT64_C(789083136),	// UQSHLvvi_8B
    UINT64_C(1863349248),	// UQSHLvvi_8H
    UINT64_C(1847610368),	// UQSHLvvv_16B
    UINT64_C(1860193280),	// UQSHLvvv_2D
    UINT64_C(782257152),	// UQSHLvvv_2S
    UINT64_C(778062848),	// UQSHLvvv_4H
    UINT64_C(1855998976),	// UQSHLvvv_4S
    UINT64_C(773868544),	// UQSHLvvv_8B
    UINT64_C(1851804672),	// UQSHLvvv_8H
    UINT64_C(2131268608),	// UQSHRNbhi
    UINT64_C(2131792896),	// UQSHRNhsi
    UINT64_C(2132841472),	// UQSHRNsdi
    UINT64_C(1862833152),	// UQSHRNvvi_16B
    UINT64_C(790664192),	// UQSHRNvvi_2S
    UINT64_C(789615616),	// UQSHRNvvi_4H
    UINT64_C(1864406016),	// UQSHRNvvi_4S
    UINT64_C(789091328),	// UQSHRNvvi_8B
    UINT64_C(1863357440),	// UQSHRNvvi_8H
    UINT64_C(2116037632),	// UQSUBbbb
    UINT64_C(2128620544),	// UQSUBddd
    UINT64_C(2120231936),	// UQSUBhhh
    UINT64_C(2124426240),	// UQSUBsss
    UINT64_C(1847602176),	// UQSUBvvv_16B
    UINT64_C(1860185088),	// UQSUBvvv_2D
    UINT64_C(782248960),	// UQSUBvvv_2S
    UINT64_C(778054656),	// UQSUBvvv_4H
    UINT64_C(1855990784),	// UQSUBvvv_4S
    UINT64_C(773860352),	// UQSUBvvv_8B
    UINT64_C(1851796480),	// UQSUBvvv_8H
    UINT64_C(782321664),	// UQXTN2d2s
    UINT64_C(1856063488),	// UQXTN2d4s
    UINT64_C(778127360),	// UQXTN4s4h
    UINT64_C(1851869184),	// UQXTN4s8h
    UINT64_C(1847674880),	// UQXTN8h16b
    UINT64_C(773933056),	// UQXTN8h8b
    UINT64_C(2116110336),	// UQXTNbh
    UINT64_C(2120304640),	// UQXTNhs
    UINT64_C(2124498944),	// UQXTNsd
    UINT64_C(245483520),	// URECPE2s
    UINT64_C(1319225344),	// URECPE4s
    UINT64_C(1847596032),	// URHADDvvv_16B
    UINT64_C(782242816),	// URHADDvvv_2S
    UINT64_C(778048512),	// URHADDvvv_4H
    UINT64_C(1855984640),	// URHADDvvv_4S
    UINT64_C(773854208),	// URHADDvvv_8B
    UINT64_C(1851790336),	// URHADDvvv_8H
    UINT64_C(2128630784),	// URSHLddd
    UINT64_C(1847612416),	// URSHLvvv_16B
    UINT64_C(1860195328),	// URSHLvvv_2D
    UINT64_C(782259200),	// URSHLvvv_2S
    UINT64_C(778064896),	// URSHLvvv_4H
    UINT64_C(1856001024),	// URSHLvvv_4S
    UINT64_C(773870592),	// URSHLvvv_8B
    UINT64_C(1851806720),	// URSHLvvv_8H
    UINT64_C(2134909952),	// URSHRddi
    UINT64_C(1862804480),	// URSHRvvi_16B
    UINT64_C(1866474496),	// URSHRvvi_2D
    UINT64_C(790635520),	// URSHRvvi_2S
    UINT64_C(789586944),	// URSHRvvi_4H
    UINT64_C(1864377344),	// URSHRvvi_4S
    UINT64_C(789062656),	// URSHRvvi_8B
    UINT64_C(1863328768),	// URSHRvvi_8H
    UINT64_C(782354432),	// URSQRTE2s
    UINT64_C(1856096256),	// URSQRTE4s
    UINT64_C(2134914048),	// URSRA
    UINT64_C(1862808576),	// URSRAvvi_16B
    UINT64_C(1866478592),	// URSRAvvi_2D
    UINT64_C(790639616),	// URSRAvvi_2S
    UINT64_C(789591040),	// URSRAvvi_4H
    UINT64_C(1864381440),	// URSRAvvi_4S
    UINT64_C(789066752),	// URSRAvvi_8B
    UINT64_C(1863332864),	// URSRAvvi_8H
    UINT64_C(1862837248),	// USHLLvvi_16B
    UINT64_C(790668288),	// USHLLvvi_2S
    UINT64_C(789619712),	// USHLLvvi_4H
    UINT64_C(1864410112),	// USHLLvvi_4S
    UINT64_C(789095424),	// USHLLvvi_8B
    UINT64_C(1863361536),	// USHLLvvi_8H
    UINT64_C(2128626688),	// USHLddd
    UINT64_C(1847608320),	// USHLvvv_16B
    UINT64_C(1860191232),	// USHLvvv_2D
    UINT64_C(782255104),	// USHLvvv_2S
    UINT64_C(778060800),	// USHLvvv_4H
    UINT64_C(1855996928),	// USHLvvv_4S
    UINT64_C(773866496),	// USHLvvv_8B
    UINT64_C(1851802624),	// USHLvvv_8H
    UINT64_C(2134901760),	// USHRddi
    UINT64_C(1862796288),	// USHRvvi_16B
    UINT64_C(1866466304),	// USHRvvi_2D
    UINT64_C(790627328),	// USHRvvi_2S
    UINT64_C(789578752),	// USHRvvi_4H
    UINT64_C(1864369152),	// USHRvvi_4S
    UINT64_C(789054464),	// USHRvvi_8B
    UINT64_C(1863320576),	// USHRvvi_8H
    UINT64_C(1847605248),	// USQADD16b
    UINT64_C(1860188160),	// USQADD2d
    UINT64_C(782252032),	// USQADD2s
    UINT64_C(778057728),	// USQADD4h
    UINT64_C(1855993856),	// USQADD4s
    UINT64_C(773863424),	// USQADD8b
    UINT64_C(1851799552),	// USQADD8h
    UINT64_C(2116040704),	// USQADDbb
    UINT64_C(2128623616),	// USQADDdd
    UINT64_C(2120235008),	// USQADDhh
    UINT64_C(2124429312),	// USQADDss
    UINT64_C(2134905856),	// USRA
    UINT64_C(1862800384),	// USRAvvi_16B
    UINT64_C(1866470400),	// USRAvvi_2D
    UINT64_C(790631424),	// USRAvvi_2S
    UINT64_C(789582848),	// USRAvvi_4H
    UINT64_C(1864373248),	// USRAvvi_4S
    UINT64_C(789058560),	// USRAvvi_8B
    UINT64_C(1863324672),	// USRAvvi_8H
    UINT64_C(1855987712),	// USUBL2vvv_2d4s
    UINT64_C(1851793408),	// USUBL2vvv_4s8h
    UINT64_C(1847599104),	// USUBL2vvv_8h16b
    UINT64_C(782245888),	// USUBLvvv_2d2s
    UINT64_C(778051584),	// USUBLvvv_4s4h
    UINT64_C(773857280),	// USUBLvvv_8h8b
    UINT64_C(1855991808),	// USUBW2vvv_2d4s
    UINT64_C(1851797504),	// USUBW2vvv_4s8h
    UINT64_C(1847603200),	// USUBW2vvv_8h16b
    UINT64_C(782249984),	// USUBWvvv_2d2s
    UINT64_C(778055680),	// USUBWvvv_4s4h
    UINT64_C(773861376),	// USUBWvvv_8h8b
    UINT64_C(1392516096),	// UXTBww
    UINT64_C(1392516096),	// UXTBxw
    UINT64_C(1392524288),	// UXTHww
    UINT64_C(1392524288),	// UXTHxw
    UINT64_C(1308628992),	// UZP1vvv_16b
    UINT64_C(1321211904),	// UZP1vvv_2d
    UINT64_C(243275776),	// UZP1vvv_2s
    UINT64_C(239081472),	// UZP1vvv_4h
    UINT64_C(1317017600),	// UZP1vvv_4s
    UINT64_C(234887168),	// UZP1vvv_8b
    UINT64_C(1312823296),	// UZP1vvv_8h
    UINT64_C(1308645376),	// UZP2vvv_16b
    UINT64_C(1321228288),	// UZP2vvv_2d
    UINT64_C(243292160),	// UZP2vvv_2s
    UINT64_C(239097856),	// UZP2vvv_4h
    UINT64_C(1317033984),	// UZP2vvv_4s
    UINT64_C(234903552),	// UZP2vvv_8b
    UINT64_C(1312839680),	// UZP2vvv_8h
    UINT64_C(1329658880),	// VCVTf2xs_2D
    UINT64_C(253819904),	// VCVTf2xs_2S
    UINT64_C(1327561728),	// VCVTf2xs_4S
    UINT64_C(1866529792),	// VCVTf2xu_2D
    UINT64_C(790690816),	// VCVTf2xu_2S
    UINT64_C(1864432640),	// VCVTf2xu_4S
    UINT64_C(1329652736),	// VCVTxs2f_2D
    UINT64_C(253813760),	// VCVTxs2f_2S
    UINT64_C(1327555584),	// VCVTxs2f_4S
    UINT64_C(1866523648),	// VCVTxu2f_2D
    UINT64_C(790684672),	// VCVTxu2f_2S
    UINT64_C(1864426496),	// VCVTxu2f_4S
    UINT64_C(245442560),	// XTN2d2s
    UINT64_C(1319184384),	// XTN2d4s
    UINT64_C(241248256),	// XTN4s4h
    UINT64_C(1314990080),	// XTN4s8h
    UINT64_C(1310795776),	// XTN8h16b
    UINT64_C(237053952),	// XTN8h8b
    UINT64_C(1308637184),	// ZIP1vvv_16b
    UINT64_C(1321220096),	// ZIP1vvv_2d
    UINT64_C(243283968),	// ZIP1vvv_2s
    UINT64_C(239089664),	// ZIP1vvv_4h
    UINT64_C(1317025792),	// ZIP1vvv_4s
    UINT64_C(234895360),	// ZIP1vvv_8b
    UINT64_C(1312831488),	// ZIP1vvv_8h
    UINT64_C(1308653568),	// ZIP2vvv_16b
    UINT64_C(1321236480),	// ZIP2vvv_2d
    UINT64_C(243300352),	// ZIP2vvv_2s
    UINT64_C(239106048),	// ZIP2vvv_4h
    UINT64_C(1317042176),	// ZIP2vvv_4s
    UINT64_C(234911744),	// ZIP2vvv_8b
    UINT64_C(1312847872),	// ZIP2vvv_8h
    UINT64_C(0)
  };
  const unsigned opcode = MI.getOpcode();
  uint64_t Value = InstBits[opcode];
  uint64_t op = 0;
  (void)op;  // suppress warning
  switch (opcode) {
    case AArch64::DRPS:
    case AArch64::ERET: {
      break;
    }
    case AArch64::CLREXi:
    case AArch64::DMBi:
    case AArch64::DSBi:
    case AArch64::ISBi: {
      // op: CRm
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(15)) << 8;
      break;
    }
    case AArch64::MSRii: {
      // op: CRm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(15)) << 8;
      // op: PState
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(56)) << 13;
      Value |= (op & UINT64_C(7)) << 5;
      break;
    }
    case AArch64::BLimm: {
      // op: Label
      op = getLabelOpValue<AArch64::fixup_a64_call>(MI, 0, Fixups);
      Value |= op & UINT64_C(67108863);
      break;
    }
    case AArch64::Bcc: {
      // op: Label
      op = getLabelOpValue<AArch64::fixup_a64_condbr>(MI, 1, Fixups);
      Value |= (op & UINT64_C(524287)) << 5;
      // op: Cond
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(15);
      break;
    }
    case AArch64::Bimm: {
      // op: Label
      op = getLabelOpValue<AArch64::fixup_a64_uncondbr>(MI, 0, Fixups);
      Value |= op & UINT64_C(67108863);
      break;
    }
    case AArch64::SYSiccix: {
      // op: Op1
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      // op: CRn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(15)) << 12;
      // op: CRm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 8;
      // op: Op2
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(7)) << 5;
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= op & UINT64_C(31);
      break;
    }
    case AArch64::SYSLxicci: {
      // op: Op1
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      // op: CRn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 12;
      // op: CRm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 8;
      // op: Op2
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(7)) << 5;
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      break;
    }
    case AArch64::MOVNwii:
    case AArch64::MOVNxii: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: FullImm
      op = getMoveWideImmOpValue(MI, 1, Fixups);
      Value |= (op & UINT64_C(262143)) << 5;
      break;
    }
    case AArch64::MOVZwii:
    case AArch64::MOVZxii: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: FullImm
      op = getMoveWideImmOpValue(MI, 1, Fixups);
      Value |= (op & UINT64_C(262143)) << 5;
      Value = fixMOVZ(MI, Value);
      break;
    }
    case AArch64::MOVKwii:
    case AArch64::MOVKxii: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: FullImm
      op = getMoveWideImmOpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(262143)) << 5;
      break;
    }
    case AArch64::FMOVvi_2D:
    case AArch64::FMOVvi_2S:
    case AArch64::FMOVvi_4S:
    case AArch64::MOVIdi:
    case AArch64::MOVIvi_16B:
    case AArch64::MOVIvi_2D:
    case AArch64::MOVIvi_8B: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::MOVIvi_msl_2S:
    case AArch64::MOVIvi_msl_4S:
    case AArch64::MVNIvi_msl_2S:
    case AArch64::MVNIvi_msl_4S: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: Simm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case AArch64::MOVIvi_lsl_4H:
    case AArch64::MOVIvi_lsl_8H:
    case AArch64::MVNIvi_lsl_4H:
    case AArch64::MVNIvi_lsl_8H: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: Simm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 13;
      break;
    }
    case AArch64::MOVIvi_lsl_2S:
    case AArch64::MOVIvi_lsl_4S:
    case AArch64::MVNIvi_lsl_2S:
    case AArch64::MVNIvi_lsl_4S: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: Simm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(3)) << 13;
      break;
    }
    case AArch64::BICvi_lsl_4H:
    case AArch64::BICvi_lsl_8H:
    case AArch64::ORRvi_lsl_4H:
    case AArch64::ORRvi_lsl_8H: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: Simm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 13;
      break;
    }
    case AArch64::BICvi_lsl_2S:
    case AArch64::BICvi_lsl_4S:
    case AArch64::ORRvi_lsl_2S:
    case AArch64::ORRvi_lsl_4S: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(224)) << 11;
      Value |= (op & UINT64_C(31)) << 5;
      // op: Simm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(3)) << 13;
      break;
    }
    case AArch64::FMOVdi:
    case AArch64::FMOVsi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Imm8
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(255)) << 13;
      break;
    }
    case AArch64::ADRPxi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Label
      op = getAdrpLabelOpValue(MI, 1, Fixups);
      Value |= (op & UINT64_C(3)) << 29;
      Value |= (op & UINT64_C(2097148)) << 3;
      break;
    }
    case AArch64::ADRxi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Label
      op = getLabelOpValue<AArch64::fixup_a64_adr_prel>(MI, 1, Fixups);
      Value |= (op & UINT64_C(3)) << 29;
      Value |= (op & UINT64_C(2097148)) << 3;
      break;
    }
    case AArch64::MVNww_asr:
    case AArch64::MVNww_lsl:
    case AArch64::MVNww_lsr:
    case AArch64::MVNww_ror:
    case AArch64::MVNxx_asr:
    case AArch64::MVNxx_lsl:
    case AArch64::MVNxx_lsr:
    case AArch64::MVNxx_ror: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Imm6
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AArch64::ABS16b:
    case AArch64::ABS2d:
    case AArch64::ABS2s:
    case AArch64::ABS4h:
    case AArch64::ABS4s:
    case AArch64::ABS8b:
    case AArch64::ABS8h:
    case AArch64::ABSdd:
    case AArch64::ADDPvv_D_2D:
    case AArch64::ADDV_1b16b:
    case AArch64::ADDV_1b8b:
    case AArch64::ADDV_1h4h:
    case AArch64::ADDV_1h8h:
    case AArch64::ADDV_1s4s:
    case AArch64::AESIMC:
    case AArch64::AESMC:
    case AArch64::CLS16b:
    case AArch64::CLS2s:
    case AArch64::CLS4h:
    case AArch64::CLS4s:
    case AArch64::CLS8b:
    case AArch64::CLS8h:
    case AArch64::CLSww:
    case AArch64::CLSxx:
    case AArch64::CLZ16b:
    case AArch64::CLZ2s:
    case AArch64::CLZ4h:
    case AArch64::CLZ4s:
    case AArch64::CLZ8b:
    case AArch64::CLZ8h:
    case AArch64::CLZww:
    case AArch64::CLZxx:
    case AArch64::CMEQddi:
    case AArch64::CMEQvvi_16B:
    case AArch64::CMEQvvi_2D:
    case AArch64::CMEQvvi_2S:
    case AArch64::CMEQvvi_4H:
    case AArch64::CMEQvvi_4S:
    case AArch64::CMEQvvi_8B:
    case AArch64::CMEQvvi_8H:
    case AArch64::CMGEddi:
    case AArch64::CMGEvvi_16B:
    case AArch64::CMGEvvi_2D:
    case AArch64::CMGEvvi_2S:
    case AArch64::CMGEvvi_4H:
    case AArch64::CMGEvvi_4S:
    case AArch64::CMGEvvi_8B:
    case AArch64::CMGEvvi_8H:
    case AArch64::CMGTddi:
    case AArch64::CMGTvvi_16B:
    case AArch64::CMGTvvi_2D:
    case AArch64::CMGTvvi_2S:
    case AArch64::CMGTvvi_4H:
    case AArch64::CMGTvvi_4S:
    case AArch64::CMGTvvi_8B:
    case AArch64::CMGTvvi_8H:
    case AArch64::CMLEddi:
    case AArch64::CMLEvvi_16B:
    case AArch64::CMLEvvi_2D:
    case AArch64::CMLEvvi_2S:
    case AArch64::CMLEvvi_4H:
    case AArch64::CMLEvvi_4S:
    case AArch64::CMLEvvi_8B:
    case AArch64::CMLEvvi_8H:
    case AArch64::CMLTddi:
    case AArch64::CMLTvvi_16B:
    case AArch64::CMLTvvi_2D:
    case AArch64::CMLTvvi_2S:
    case AArch64::CMLTvvi_4H:
    case AArch64::CMLTvvi_4S:
    case AArch64::CMLTvvi_8B:
    case AArch64::CMLTvvi_8H:
    case AArch64::CNT16b:
    case AArch64::CNT8b:
    case AArch64::DUP16b:
    case AArch64::DUP2d:
    case AArch64::DUP2s:
    case AArch64::DUP4h:
    case AArch64::DUP4s:
    case AArch64::DUP8b:
    case AArch64::DUP8h:
    case AArch64::FABS2d:
    case AArch64::FABS2s:
    case AArch64::FABS4s:
    case AArch64::FABSdd:
    case AArch64::FABSss:
    case AArch64::FADDPvv_D_2D:
    case AArch64::FADDPvv_S_2S:
    case AArch64::FCMEQZddi:
    case AArch64::FCMEQZssi:
    case AArch64::FCMEQvvi_2D:
    case AArch64::FCMEQvvi_2S:
    case AArch64::FCMEQvvi_4S:
    case AArch64::FCMGEZddi:
    case AArch64::FCMGEZssi:
    case AArch64::FCMGEvvi_2D:
    case AArch64::FCMGEvvi_2S:
    case AArch64::FCMGEvvi_4S:
    case AArch64::FCMGTZddi:
    case AArch64::FCMGTZssi:
    case AArch64::FCMGTvvi_2D:
    case AArch64::FCMGTvvi_2S:
    case AArch64::FCMGTvvi_4S:
    case AArch64::FCMLEZddi:
    case AArch64::FCMLEZssi:
    case AArch64::FCMLEvvi_2D:
    case AArch64::FCMLEvvi_2S:
    case AArch64::FCMLEvvi_4S:
    case AArch64::FCMLTZddi:
    case AArch64::FCMLTZssi:
    case AArch64::FCMLTvvi_2D:
    case AArch64::FCMLTvvi_2S:
    case AArch64::FCMLTvvi_4S:
    case AArch64::FCVTAS_2d:
    case AArch64::FCVTAS_2s:
    case AArch64::FCVTAS_4s:
    case AArch64::FCVTASdd:
    case AArch64::FCVTASss:
    case AArch64::FCVTASwd:
    case AArch64::FCVTASws:
    case AArch64::FCVTASxd:
    case AArch64::FCVTASxs:
    case AArch64::FCVTAU_2d:
    case AArch64::FCVTAU_2s:
    case AArch64::FCVTAU_4s:
    case AArch64::FCVTAUdd:
    case AArch64::FCVTAUss:
    case AArch64::FCVTAUwd:
    case AArch64::FCVTAUws:
    case AArch64::FCVTAUxd:
    case AArch64::FCVTAUxs:
    case AArch64::FCVTL2s2d:
    case AArch64::FCVTL4h4s:
    case AArch64::FCVTL4s2d:
    case AArch64::FCVTL8h4s:
    case AArch64::FCVTMS_2d:
    case AArch64::FCVTMS_2s:
    case AArch64::FCVTMS_4s:
    case AArch64::FCVTMSdd:
    case AArch64::FCVTMSss:
    case AArch64::FCVTMSwd:
    case AArch64::FCVTMSws:
    case AArch64::FCVTMSxd:
    case AArch64::FCVTMSxs:
    case AArch64::FCVTMU_2d:
    case AArch64::FCVTMU_2s:
    case AArch64::FCVTMU_4s:
    case AArch64::FCVTMUdd:
    case AArch64::FCVTMUss:
    case AArch64::FCVTMUwd:
    case AArch64::FCVTMUws:
    case AArch64::FCVTMUxd:
    case AArch64::FCVTMUxs:
    case AArch64::FCVTN2d2s:
    case AArch64::FCVTN4s4h:
    case AArch64::FCVTNS_2d:
    case AArch64::FCVTNS_2s:
    case AArch64::FCVTNS_4s:
    case AArch64::FCVTNSdd:
    case AArch64::FCVTNSss:
    case AArch64::FCVTNSwd:
    case AArch64::FCVTNSws:
    case AArch64::FCVTNSxd:
    case AArch64::FCVTNSxs:
    case AArch64::FCVTNU_2d:
    case AArch64::FCVTNU_2s:
    case AArch64::FCVTNU_4s:
    case AArch64::FCVTNUdd:
    case AArch64::FCVTNUss:
    case AArch64::FCVTNUwd:
    case AArch64::FCVTNUws:
    case AArch64::FCVTNUxd:
    case AArch64::FCVTNUxs:
    case AArch64::FCVTPS_2d:
    case AArch64::FCVTPS_2s:
    case AArch64::FCVTPS_4s:
    case AArch64::FCVTPSdd:
    case AArch64::FCVTPSss:
    case AArch64::FCVTPSwd:
    case AArch64::FCVTPSws:
    case AArch64::FCVTPSxd:
    case AArch64::FCVTPSxs:
    case AArch64::FCVTPU_2d:
    case AArch64::FCVTPU_2s:
    case AArch64::FCVTPU_4s:
    case AArch64::FCVTPUdd:
    case AArch64::FCVTPUss:
    case AArch64::FCVTPUwd:
    case AArch64::FCVTPUws:
    case AArch64::FCVTPUxd:
    case AArch64::FCVTPUxs:
    case AArch64::FCVTXN:
    case AArch64::FCVTXN2d2s:
    case AArch64::FCVTZS_2d:
    case AArch64::FCVTZS_2s:
    case AArch64::FCVTZS_4s:
    case AArch64::FCVTZSdd:
    case AArch64::FCVTZSss:
    case AArch64::FCVTZSwd:
    case AArch64::FCVTZSws:
    case AArch64::FCVTZSxd:
    case AArch64::FCVTZSxs:
    case AArch64::FCVTZU_2d:
    case AArch64::FCVTZU_2s:
    case AArch64::FCVTZU_4s:
    case AArch64::FCVTZUdd:
    case AArch64::FCVTZUss:
    case AArch64::FCVTZUwd:
    case AArch64::FCVTZUws:
    case AArch64::FCVTZUxd:
    case AArch64::FCVTZUxs:
    case AArch64::FCVTdh:
    case AArch64::FCVTds:
    case AArch64::FCVThd:
    case AArch64::FCVThs:
    case AArch64::FCVTsd:
    case AArch64::FCVTsh:
    case AArch64::FMAXNMPvv_D_2D:
    case AArch64::FMAXNMPvv_S_2S:
    case AArch64::FMAXNMV_1s4s:
    case AArch64::FMAXPvv_D_2D:
    case AArch64::FMAXPvv_S_2S:
    case AArch64::FMAXV_1s4s:
    case AArch64::FMINNMPvv_D_2D:
    case AArch64::FMINNMPvv_S_2S:
    case AArch64::FMINNMV_1s4s:
    case AArch64::FMINPvv_D_2D:
    case AArch64::FMINPvv_S_2S:
    case AArch64::FMINV_1s4s:
    case AArch64::FMOVdd:
    case AArch64::FMOVdx:
    case AArch64::FMOVss:
    case AArch64::FMOVsw:
    case AArch64::FMOVvx:
    case AArch64::FMOVws:
    case AArch64::FMOVxd:
    case AArch64::FMOVxv:
    case AArch64::FNEG2d:
    case AArch64::FNEG2s:
    case AArch64::FNEG4s:
    case AArch64::FNEGdd:
    case AArch64::FNEGss:
    case AArch64::FRECPE_2d:
    case AArch64::FRECPE_2s:
    case AArch64::FRECPE_4s:
    case AArch64::FRECPEdd:
    case AArch64::FRECPEss:
    case AArch64::FRECPXdd:
    case AArch64::FRECPXss:
    case AArch64::FRINTA_2d:
    case AArch64::FRINTA_2s:
    case AArch64::FRINTA_4s:
    case AArch64::FRINTAdd:
    case AArch64::FRINTAss:
    case AArch64::FRINTI_2d:
    case AArch64::FRINTI_2s:
    case AArch64::FRINTI_4s:
    case AArch64::FRINTIdd:
    case AArch64::FRINTIss:
    case AArch64::FRINTM_2d:
    case AArch64::FRINTM_2s:
    case AArch64::FRINTM_4s:
    case AArch64::FRINTMdd:
    case AArch64::FRINTMss:
    case AArch64::FRINTN_2d:
    case AArch64::FRINTN_2s:
    case AArch64::FRINTN_4s:
    case AArch64::FRINTNdd:
    case AArch64::FRINTNss:
    case AArch64::FRINTP_2d:
    case AArch64::FRINTP_2s:
    case AArch64::FRINTP_4s:
    case AArch64::FRINTPdd:
    case AArch64::FRINTPss:
    case AArch64::FRINTX_2d:
    case AArch64::FRINTX_2s:
    case AArch64::FRINTX_4s:
    case AArch64::FRINTXdd:
    case AArch64::FRINTXss:
    case AArch64::FRINTZ_2d:
    case AArch64::FRINTZ_2s:
    case AArch64::FRINTZ_4s:
    case AArch64::FRINTZdd:
    case AArch64::FRINTZss:
    case AArch64::FRSQRTE_2d:
    case AArch64::FRSQRTE_2s:
    case AArch64::FRSQRTE_4s:
    case AArch64::FRSQRTEdd:
    case AArch64::FRSQRTEss:
    case AArch64::FSQRT_2d:
    case AArch64::FSQRT_2s:
    case AArch64::FSQRT_4s:
    case AArch64::FSQRTdd:
    case AArch64::FSQRTss:
    case AArch64::NEG16b:
    case AArch64::NEG2d:
    case AArch64::NEG2s:
    case AArch64::NEG4h:
    case AArch64::NEG4s:
    case AArch64::NEG8b:
    case AArch64::NEG8h:
    case AArch64::NEGdd:
    case AArch64::NOT16b:
    case AArch64::NOT8b:
    case AArch64::RBIT16b:
    case AArch64::RBIT8b:
    case AArch64::RBITww:
    case AArch64::RBITxx:
    case AArch64::REV16_16b:
    case AArch64::REV16_8b:
    case AArch64::REV16ww:
    case AArch64::REV16xx:
    case AArch64::REV32_16b:
    case AArch64::REV32_4h:
    case AArch64::REV32_8b:
    case AArch64::REV32_8h:
    case AArch64::REV32xx:
    case AArch64::REV64_16b:
    case AArch64::REV64_2s:
    case AArch64::REV64_4h:
    case AArch64::REV64_4s:
    case AArch64::REV64_8b:
    case AArch64::REV64_8h:
    case AArch64::REVww:
    case AArch64::REVxx:
    case AArch64::SADDLP16b8h:
    case AArch64::SADDLP2s1d:
    case AArch64::SADDLP4h2s:
    case AArch64::SADDLP4s2d:
    case AArch64::SADDLP8b4h:
    case AArch64::SADDLP8h4s:
    case AArch64::SADDLV_1d4s:
    case AArch64::SADDLV_1h16b:
    case AArch64::SADDLV_1h8b:
    case AArch64::SADDLV_1s4h:
    case AArch64::SADDLV_1s8h:
    case AArch64::SCVTF_2d:
    case AArch64::SCVTF_2s:
    case AArch64::SCVTF_4s:
    case AArch64::SCVTFdd:
    case AArch64::SCVTFdw:
    case AArch64::SCVTFdx:
    case AArch64::SCVTFss:
    case AArch64::SCVTFsw:
    case AArch64::SCVTFsx:
    case AArch64::SHA1H:
    case AArch64::SHLL16b8h:
    case AArch64::SHLL2s2d:
    case AArch64::SHLL4h4s:
    case AArch64::SHLL4s2d:
    case AArch64::SHLL8b8h:
    case AArch64::SHLL8h4s:
    case AArch64::SMAXV_1b16b:
    case AArch64::SMAXV_1b8b:
    case AArch64::SMAXV_1h4h:
    case AArch64::SMAXV_1h8h:
    case AArch64::SMAXV_1s4s:
    case AArch64::SMINV_1b16b:
    case AArch64::SMINV_1b8b:
    case AArch64::SMINV_1h4h:
    case AArch64::SMINV_1h8h:
    case AArch64::SMINV_1s4s:
    case AArch64::SQABS16b:
    case AArch64::SQABS2d:
    case AArch64::SQABS2s:
    case AArch64::SQABS4h:
    case AArch64::SQABS4s:
    case AArch64::SQABS8b:
    case AArch64::SQABS8h:
    case AArch64::SQABSbb:
    case AArch64::SQABSdd:
    case AArch64::SQABShh:
    case AArch64::SQABSss:
    case AArch64::SQNEG16b:
    case AArch64::SQNEG2d:
    case AArch64::SQNEG2s:
    case AArch64::SQNEG4h:
    case AArch64::SQNEG4s:
    case AArch64::SQNEG8b:
    case AArch64::SQNEG8h:
    case AArch64::SQNEGbb:
    case AArch64::SQNEGdd:
    case AArch64::SQNEGhh:
    case AArch64::SQNEGss:
    case AArch64::SQXTN2d2s:
    case AArch64::SQXTN4s4h:
    case AArch64::SQXTN8h8b:
    case AArch64::SQXTNbh:
    case AArch64::SQXTNhs:
    case AArch64::SQXTNsd:
    case AArch64::SQXTUN2d2s:
    case AArch64::SQXTUN4s4h:
    case AArch64::SQXTUN8h8b:
    case AArch64::SQXTUNbh:
    case AArch64::SQXTUNhs:
    case AArch64::SQXTUNsd:
    case AArch64::SXTBww:
    case AArch64::SXTBxw:
    case AArch64::SXTHww:
    case AArch64::SXTHxw:
    case AArch64::SXTWxw:
    case AArch64::UADDLP16b8h:
    case AArch64::UADDLP2s1d:
    case AArch64::UADDLP4h2s:
    case AArch64::UADDLP4s2d:
    case AArch64::UADDLP8b4h:
    case AArch64::UADDLP8h4s:
    case AArch64::UADDLV_1d4s:
    case AArch64::UADDLV_1h16b:
    case AArch64::UADDLV_1h8b:
    case AArch64::UADDLV_1s4h:
    case AArch64::UADDLV_1s8h:
    case AArch64::UCVTF_2d:
    case AArch64::UCVTF_2s:
    case AArch64::UCVTF_4s:
    case AArch64::UCVTFdd:
    case AArch64::UCVTFdw:
    case AArch64::UCVTFdx:
    case AArch64::UCVTFss:
    case AArch64::UCVTFsw:
    case AArch64::UCVTFsx:
    case AArch64::UMAXV_1b16b:
    case AArch64::UMAXV_1b8b:
    case AArch64::UMAXV_1h4h:
    case AArch64::UMAXV_1h8h:
    case AArch64::UMAXV_1s4s:
    case AArch64::UMINV_1b16b:
    case AArch64::UMINV_1b8b:
    case AArch64::UMINV_1h4h:
    case AArch64::UMINV_1h8h:
    case AArch64::UMINV_1s4s:
    case AArch64::UQXTN2d2s:
    case AArch64::UQXTN4s4h:
    case AArch64::UQXTN8h8b:
    case AArch64::UQXTNbh:
    case AArch64::UQXTNhs:
    case AArch64::UQXTNsd:
    case AArch64::URECPE2s:
    case AArch64::URECPE4s:
    case AArch64::URSQRTE2s:
    case AArch64::URSQRTE4s:
    case AArch64::UXTBww:
    case AArch64::UXTBxw:
    case AArch64::UXTHww:
    case AArch64::UXTHxw:
    case AArch64::XTN2d2s:
    case AArch64::XTN4s4h:
    case AArch64::XTN8h8b: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::LSLwwi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: FullImm
      op = getBitfield32LSLOpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      Value |= (op & UINT64_C(4032)) << 4;
      break;
    }
    case AArch64::LSLxxi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: FullImm
      op = getBitfield64LSLOpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      Value |= (op & UINT64_C(4032)) << 4;
      break;
    }
    case AArch64::DUPELT2d:
    case AArch64::DUPdv_D:
    case AArch64::UMOVxd: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 20;
      break;
    }
    case AArch64::DUPELT16b:
    case AArch64::DUPELT8b:
    case AArch64::DUPbv_B:
    case AArch64::SMOVwb:
    case AArch64::SMOVxb:
    case AArch64::UMOVwb: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 17;
      break;
    }
    case AArch64::DUPELT2s:
    case AArch64::DUPELT4s:
    case AArch64::DUPsv_S:
    case AArch64::SMOVxs:
    case AArch64::UMOVws: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(3)) << 19;
      break;
    }
    case AArch64::DUPELT4h:
    case AArch64::DUPELT8h:
    case AArch64::DUPhv_H:
    case AArch64::SMOVwh:
    case AArch64::SMOVxh:
    case AArch64::UMOVwh: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(7)) << 18;
      break;
    }
    case AArch64::ANDSwwi:
    case AArch64::ANDSxxi:
    case AArch64::ANDwwi:
    case AArch64::ANDxxi:
    case AArch64::EORwwi:
    case AArch64::EORxxi:
    case AArch64::ORRwwi:
    case AArch64::ORRxxi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(8191)) << 10;
      break;
    }
    case AArch64::FMULXddv_2D:
    case AArch64::FMULddv_2D: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 11;
      // op: MRm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::SQDMULHssv_2S:
    case AArch64::SQDMULLdsv_2S:
    case AArch64::SQRDMULHssv_2S: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 21;
      // op: MRm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::FMULXssv_4S:
    case AArch64::FMULssv_4S:
    case AArch64::SQDMULHssv_4S:
    case AArch64::SQDMULLdsv_4S:
    case AArch64::SQRDMULHssv_4S: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 21;
      Value |= (op & UINT64_C(2)) << 10;
      // op: MRm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::SQDMULHhhv_4H:
    case AArch64::SQDMULLshv_4H:
    case AArch64::SQRDMULHhhv_4H: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(3)) << 20;
      // op: MRm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::SQDMULHhhv_8H:
    case AArch64::SQDMULLshv_8H:
    case AArch64::SQRDMULHhhv_8H: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(3)) << 20;
      Value |= (op & UINT64_C(4)) << 9;
      // op: MRm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::SHLvvi_4H:
    case AArch64::SHLvvi_8H:
    case AArch64::SQSHLUhhi:
    case AArch64::SQSHLUvvi_4H:
    case AArch64::SQSHLUvvi_8H:
    case AArch64::SQSHLhhi:
    case AArch64::SQSHLvvi_4H:
    case AArch64::SQSHLvvi_8H:
    case AArch64::SSHLLvvi_4H:
    case AArch64::SSHLLvvi_8H:
    case AArch64::UQSHLhhi:
    case AArch64::UQSHLvvi_4H:
    case AArch64::UQSHLvvi_8H:
    case AArch64::USHLLvvi_4H:
    case AArch64::USHLLvvi_8H: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftLeftImm16(MI, 2, Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::SHLvvi_2S:
    case AArch64::SHLvvi_4S:
    case AArch64::SQSHLUssi:
    case AArch64::SQSHLUvvi_2S:
    case AArch64::SQSHLUvvi_4S:
    case AArch64::SQSHLssi:
    case AArch64::SQSHLvvi_2S:
    case AArch64::SQSHLvvi_4S:
    case AArch64::SSHLLvvi_2S:
    case AArch64::SSHLLvvi_4S:
    case AArch64::UQSHLssi:
    case AArch64::UQSHLvvi_2S:
    case AArch64::UQSHLvvi_4S:
    case AArch64::USHLLvvi_2S:
    case AArch64::USHLLvvi_4S: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftLeftImm32(MI, 2, Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::SHLddi:
    case AArch64::SHLvvi_2D:
    case AArch64::SQSHLUddi:
    case AArch64::SQSHLUvvi_2D:
    case AArch64::SQSHLddi:
    case AArch64::SQSHLvvi_2D:
    case AArch64::UQSHLddi:
    case AArch64::UQSHLvvi_2D: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftLeftImm64(MI, 2, Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      break;
    }
    case AArch64::SHLvvi_16B:
    case AArch64::SHLvvi_8B:
    case AArch64::SQSHLUbbi:
    case AArch64::SQSHLUvvi_16B:
    case AArch64::SQSHLUvvi_8B:
    case AArch64::SQSHLbbi:
    case AArch64::SQSHLvvi_16B:
    case AArch64::SQSHLvvi_8B:
    case AArch64::SSHLLvvi_16B:
    case AArch64::SSHLLvvi_8B:
    case AArch64::UQSHLbbi:
    case AArch64::UQSHLvvi_16B:
    case AArch64::UQSHLvvi_8B:
    case AArch64::USHLLvvi_16B:
    case AArch64::USHLLvvi_8B: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftLeftImm8(MI, 2, Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case AArch64::QRSHRUNvvi_4H:
    case AArch64::QSHRUNvvi_4H:
    case AArch64::RSHRNvvi_4H:
    case AArch64::SHRNvvi_4H:
    case AArch64::SQRSHRNhsi:
    case AArch64::SQRSHRNvvi_4H:
    case AArch64::SQRSHRUNhsi:
    case AArch64::SQSHRNhsi:
    case AArch64::SQSHRNvvi_4H:
    case AArch64::SQSHRUNhsi:
    case AArch64::SRSHRvvi_4H:
    case AArch64::SRSHRvvi_8H:
    case AArch64::SSHRvvi_4H:
    case AArch64::SSHRvvi_8H:
    case AArch64::UQRSHRNhsi:
    case AArch64::UQRSHRNvvi_4H:
    case AArch64::UQSHRNhsi:
    case AArch64::UQSHRNvvi_4H:
    case AArch64::URSHRvvi_4H:
    case AArch64::URSHRvvi_8H:
    case AArch64::USHRvvi_4H:
    case AArch64::USHRvvi_8H: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftRightImm16(MI, 2, Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::FCVTZS_Nssi:
    case AArch64::FCVTZU_Nssi:
    case AArch64::QRSHRUNvvi_2S:
    case AArch64::QSHRUNvvi_2S:
    case AArch64::RSHRNvvi_2S:
    case AArch64::SCVTF_Nssi:
    case AArch64::SHRNvvi_2S:
    case AArch64::SQRSHRNsdi:
    case AArch64::SQRSHRNvvi_2S:
    case AArch64::SQRSHRUNsdi:
    case AArch64::SQSHRNsdi:
    case AArch64::SQSHRNvvi_2S:
    case AArch64::SQSHRUNsdi:
    case AArch64::SRSHRvvi_2S:
    case AArch64::SRSHRvvi_4S:
    case AArch64::SSHRvvi_2S:
    case AArch64::SSHRvvi_4S:
    case AArch64::UCVTF_Nssi:
    case AArch64::UQRSHRNsdi:
    case AArch64::UQRSHRNvvi_2S:
    case AArch64::UQSHRNsdi:
    case AArch64::UQSHRNvvi_2S:
    case AArch64::URSHRvvi_2S:
    case AArch64::URSHRvvi_4S:
    case AArch64::USHRvvi_2S:
    case AArch64::USHRvvi_4S:
    case AArch64::VCVTf2xs_2S:
    case AArch64::VCVTf2xs_4S:
    case AArch64::VCVTf2xu_2S:
    case AArch64::VCVTf2xu_4S:
    case AArch64::VCVTxs2f_2S:
    case AArch64::VCVTxs2f_4S:
    case AArch64::VCVTxu2f_2S:
    case AArch64::VCVTxu2f_4S: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftRightImm32(MI, 2, Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::FCVTZS_Nddi:
    case AArch64::FCVTZU_Nddi:
    case AArch64::SCVTF_Nddi:
    case AArch64::SRSHRddi:
    case AArch64::SRSHRvvi_2D:
    case AArch64::SSHRddi:
    case AArch64::SSHRvvi_2D:
    case AArch64::UCVTF_Nddi:
    case AArch64::URSHRddi:
    case AArch64::URSHRvvi_2D:
    case AArch64::USHRddi:
    case AArch64::USHRvvi_2D:
    case AArch64::VCVTf2xs_2D:
    case AArch64::VCVTf2xu_2D:
    case AArch64::VCVTxs2f_2D:
    case AArch64::VCVTxu2f_2D: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftRightImm64(MI, 2, Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      break;
    }
    case AArch64::QRSHRUNvvi_8B:
    case AArch64::QSHRUNvvi_8B:
    case AArch64::RSHRNvvi_8B:
    case AArch64::SHRNvvi_8B:
    case AArch64::SQRSHRNbhi:
    case AArch64::SQRSHRNvvi_8B:
    case AArch64::SQRSHRUNbhi:
    case AArch64::SQSHRNbhi:
    case AArch64::SQSHRNvvi_8B:
    case AArch64::SQSHRUNbhi:
    case AArch64::SRSHRvvi_16B:
    case AArch64::SRSHRvvi_8B:
    case AArch64::SSHRvvi_16B:
    case AArch64::SSHRvvi_8B:
    case AArch64::UQRSHRNbhi:
    case AArch64::UQRSHRNvvi_8B:
    case AArch64::UQSHRNbhi:
    case AArch64::UQSHRNvvi_8B:
    case AArch64::URSHRvvi_16B:
    case AArch64::URSHRvvi_8B:
    case AArch64::USHRvvi_16B:
    case AArch64::USHRvvi_8B: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftRightImm8(MI, 2, Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case AArch64::ADDwwi_lsl0_S:
    case AArch64::ADDwwi_lsl0_s:
    case AArch64::ADDwwi_lsl12_S:
    case AArch64::ADDwwi_lsl12_s:
    case AArch64::ADDxxi_lsl0_S:
    case AArch64::ADDxxi_lsl0_s:
    case AArch64::ADDxxi_lsl12_S:
    case AArch64::ADDxxi_lsl12_s:
    case AArch64::SUBwwi_lsl0_S:
    case AArch64::SUBwwi_lsl0_s:
    case AArch64::SUBwwi_lsl12_S:
    case AArch64::SUBwwi_lsl12_s:
    case AArch64::SUBxxi_lsl0_S:
    case AArch64::SUBxxi_lsl0_s:
    case AArch64::SUBxxi_lsl12_S:
    case AArch64::SUBxxi_lsl12_s: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm12
      op = getAddSubImmOpValue(MI, 2, Fixups);
      Value |= (op & UINT64_C(4095)) << 10;
      break;
    }
    case AArch64::ASRwwi:
    case AArch64::ASRxxi:
    case AArch64::LSRwwi:
    case AArch64::LSRxxi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: ImmR
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      break;
    }
    case AArch64::SBFIZwwii:
    case AArch64::SBFIZxxii:
    case AArch64::SBFMwwii:
    case AArch64::SBFMxxii:
    case AArch64::SBFXwwii:
    case AArch64::SBFXxxii:
    case AArch64::UBFIZwwii:
    case AArch64::UBFIZxxii:
    case AArch64::UBFMwwii:
    case AArch64::UBFMxxii:
    case AArch64::UBFXwwii:
    case AArch64::UBFXxxii: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: ImmR
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      // op: ImmS
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AArch64::FMULXve_2d2d:
    case AArch64::FMULve_2d2d: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Index
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 11;
      // op: Re
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::FMULXve_2s4s:
    case AArch64::FMULXve_4s4s:
    case AArch64::FMULve_2s4s:
    case AArch64::FMULve_4s4s:
    case AArch64::MULve_2s4s:
    case AArch64::MULve_4s4s:
    case AArch64::SMULLve_2d2s:
    case AArch64::SMULLve_2d4s:
    case AArch64::SQDMULHve_2s4s:
    case AArch64::SQDMULHve_4s4s:
    case AArch64::SQDMULLve_2d2s:
    case AArch64::SQDMULLve_2d4s:
    case AArch64::SQRDMULHve_2s4s:
    case AArch64::SQRDMULHve_4s4s:
    case AArch64::UMULLve_2d2s:
    case AArch64::UMULLve_2d4s: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Index
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 21;
      Value |= (op & UINT64_C(2)) << 10;
      // op: Re
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::MULve_4h8h:
    case AArch64::MULve_8h8h:
    case AArch64::SMULLve_4s4h:
    case AArch64::SMULLve_4s8h:
    case AArch64::SQDMULHve_4h8h:
    case AArch64::SQDMULHve_8h8h:
    case AArch64::SQDMULLve_4s4h:
    case AArch64::SQDMULLve_4s8h:
    case AArch64::SQRDMULHve_4h8h:
    case AArch64::SQRDMULHve_8h8h:
    case AArch64::UMULLve_4s4h:
    case AArch64::UMULLve_4s8h: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Index
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(3)) << 20;
      Value |= (op & UINT64_C(4)) << 9;
      // op: Re
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::ADCSwww:
    case AArch64::ADCSxxx:
    case AArch64::ADCwww:
    case AArch64::ADCxxx:
    case AArch64::ADDHNvvv_2s2d:
    case AArch64::ADDHNvvv_4h4s:
    case AArch64::ADDHNvvv_8b8h:
    case AArch64::ADDP_16B:
    case AArch64::ADDP_2D:
    case AArch64::ADDP_2S:
    case AArch64::ADDP_4H:
    case AArch64::ADDP_4S:
    case AArch64::ADDP_8B:
    case AArch64::ADDP_8H:
    case AArch64::ADDddd:
    case AArch64::ADDvvv_16B:
    case AArch64::ADDvvv_2D:
    case AArch64::ADDvvv_2S:
    case AArch64::ADDvvv_4H:
    case AArch64::ADDvvv_4S:
    case AArch64::ADDvvv_8B:
    case AArch64::ADDvvv_8H:
    case AArch64::ANDvvv_16B:
    case AArch64::ANDvvv_8B:
    case AArch64::ASRVwww:
    case AArch64::ASRVxxx:
    case AArch64::BICvvv_16B:
    case AArch64::BICvvv_8B:
    case AArch64::CMEQddd:
    case AArch64::CMEQvvv_16B:
    case AArch64::CMEQvvv_2D:
    case AArch64::CMEQvvv_2S:
    case AArch64::CMEQvvv_4H:
    case AArch64::CMEQvvv_4S:
    case AArch64::CMEQvvv_8B:
    case AArch64::CMEQvvv_8H:
    case AArch64::CMGEddd:
    case AArch64::CMGEvvv_16B:
    case AArch64::CMGEvvv_2D:
    case AArch64::CMGEvvv_2S:
    case AArch64::CMGEvvv_4H:
    case AArch64::CMGEvvv_4S:
    case AArch64::CMGEvvv_8B:
    case AArch64::CMGEvvv_8H:
    case AArch64::CMGTddd:
    case AArch64::CMGTvvv_16B:
    case AArch64::CMGTvvv_2D:
    case AArch64::CMGTvvv_2S:
    case AArch64::CMGTvvv_4H:
    case AArch64::CMGTvvv_4S:
    case AArch64::CMGTvvv_8B:
    case AArch64::CMGTvvv_8H:
    case AArch64::CMHIddd:
    case AArch64::CMHIvvv_16B:
    case AArch64::CMHIvvv_2D:
    case AArch64::CMHIvvv_2S:
    case AArch64::CMHIvvv_4H:
    case AArch64::CMHIvvv_4S:
    case AArch64::CMHIvvv_8B:
    case AArch64::CMHIvvv_8H:
    case AArch64::CMHSddd:
    case AArch64::CMHSvvv_16B:
    case AArch64::CMHSvvv_2D:
    case AArch64::CMHSvvv_2S:
    case AArch64::CMHSvvv_4H:
    case AArch64::CMHSvvv_4S:
    case AArch64::CMHSvvv_8B:
    case AArch64::CMHSvvv_8H:
    case AArch64::CMTSTddd:
    case AArch64::CMTSTvvv_16B:
    case AArch64::CMTSTvvv_2D:
    case AArch64::CMTSTvvv_2S:
    case AArch64::CMTSTvvv_4H:
    case AArch64::CMTSTvvv_4S:
    case AArch64::CMTSTvvv_8B:
    case AArch64::CMTSTvvv_8H:
    case AArch64::CRC32B_www:
    case AArch64::CRC32CB_www:
    case AArch64::CRC32CH_www:
    case AArch64::CRC32CW_www:
    case AArch64::CRC32CX_wwx:
    case AArch64::CRC32H_www:
    case AArch64::CRC32W_www:
    case AArch64::CRC32X_wwx:
    case AArch64::EORvvv_16B:
    case AArch64::EORvvv_8B:
    case AArch64::FABDddd:
    case AArch64::FABDsss:
    case AArch64::FABDvvv_2D:
    case AArch64::FABDvvv_2S:
    case AArch64::FABDvvv_4S:
    case AArch64::FACGEddd:
    case AArch64::FACGEsss:
    case AArch64::FACGEvvv_2D:
    case AArch64::FACGEvvv_2S:
    case AArch64::FACGEvvv_4S:
    case AArch64::FACGTddd:
    case AArch64::FACGTsss:
    case AArch64::FACGTvvv_2D:
    case AArch64::FACGTvvv_2S:
    case AArch64::FACGTvvv_4S:
    case AArch64::FADDP_2D:
    case AArch64::FADDP_2S:
    case AArch64::FADDP_4S:
    case AArch64::FADDddd:
    case AArch64::FADDsss:
    case AArch64::FADDvvv_2D:
    case AArch64::FADDvvv_2S:
    case AArch64::FADDvvv_4S:
    case AArch64::FCMEQddd:
    case AArch64::FCMEQsss:
    case AArch64::FCMEQvvv_2D:
    case AArch64::FCMEQvvv_2S:
    case AArch64::FCMEQvvv_4S:
    case AArch64::FCMGEddd:
    case AArch64::FCMGEsss:
    case AArch64::FCMGEvvv_2D:
    case AArch64::FCMGEvvv_2S:
    case AArch64::FCMGEvvv_4S:
    case AArch64::FCMGTddd:
    case AArch64::FCMGTsss:
    case AArch64::FCMGTvvv_2D:
    case AArch64::FCMGTvvv_2S:
    case AArch64::FCMGTvvv_4S:
    case AArch64::FDIVddd:
    case AArch64::FDIVsss:
    case AArch64::FDIVvvv_2D:
    case AArch64::FDIVvvv_2S:
    case AArch64::FDIVvvv_4S:
    case AArch64::FMAXNMPvvv_2D:
    case AArch64::FMAXNMPvvv_2S:
    case AArch64::FMAXNMPvvv_4S:
    case AArch64::FMAXNMddd:
    case AArch64::FMAXNMsss:
    case AArch64::FMAXNMvvv_2D:
    case AArch64::FMAXNMvvv_2S:
    case AArch64::FMAXNMvvv_4S:
    case AArch64::FMAXPvvv_2D:
    case AArch64::FMAXPvvv_2S:
    case AArch64::FMAXPvvv_4S:
    case AArch64::FMAXddd:
    case AArch64::FMAXsss:
    case AArch64::FMAXvvv_2D:
    case AArch64::FMAXvvv_2S:
    case AArch64::FMAXvvv_4S:
    case AArch64::FMINNMPvvv_2D:
    case AArch64::FMINNMPvvv_2S:
    case AArch64::FMINNMPvvv_4S:
    case AArch64::FMINNMddd:
    case AArch64::FMINNMsss:
    case AArch64::FMINNMvvv_2D:
    case AArch64::FMINNMvvv_2S:
    case AArch64::FMINNMvvv_4S:
    case AArch64::FMINPvvv_2D:
    case AArch64::FMINPvvv_2S:
    case AArch64::FMINPvvv_4S:
    case AArch64::FMINddd:
    case AArch64::FMINsss:
    case AArch64::FMINvvv_2D:
    case AArch64::FMINvvv_2S:
    case AArch64::FMINvvv_4S:
    case AArch64::FMULXddd:
    case AArch64::FMULXsss:
    case AArch64::FMULXvvv_2D:
    case AArch64::FMULXvvv_2S:
    case AArch64::FMULXvvv_4S:
    case AArch64::FMULddd:
    case AArch64::FMULsss:
    case AArch64::FMULvvv_2D:
    case AArch64::FMULvvv_2S:
    case AArch64::FMULvvv_4S:
    case AArch64::FNMULddd:
    case AArch64::FNMULsss:
    case AArch64::FRECPSddd:
    case AArch64::FRECPSsss:
    case AArch64::FRECPSvvv_2D:
    case AArch64::FRECPSvvv_2S:
    case AArch64::FRECPSvvv_4S:
    case AArch64::FRSQRTSddd:
    case AArch64::FRSQRTSsss:
    case AArch64::FRSQRTSvvv_2D:
    case AArch64::FRSQRTSvvv_2S:
    case AArch64::FRSQRTSvvv_4S:
    case AArch64::FSUBddd:
    case AArch64::FSUBsss:
    case AArch64::FSUBvvv_2D:
    case AArch64::FSUBvvv_2S:
    case AArch64::FSUBvvv_4S:
    case AArch64::LSLVwww:
    case AArch64::LSLVxxx:
    case AArch64::LSRVwww:
    case AArch64::LSRVxxx:
    case AArch64::MULvvv_16B:
    case AArch64::MULvvv_2S:
    case AArch64::MULvvv_4H:
    case AArch64::MULvvv_4S:
    case AArch64::MULvvv_8B:
    case AArch64::MULvvv_8H:
    case AArch64::ORNvvv_16B:
    case AArch64::ORNvvv_8B:
    case AArch64::ORRvvv_16B:
    case AArch64::ORRvvv_8B:
    case AArch64::PMULL2vvv_1q2d:
    case AArch64::PMULL2vvv_8h16b:
    case AArch64::PMULLvvv_1q1d:
    case AArch64::PMULLvvv_8h8b:
    case AArch64::PMULvvv_16B:
    case AArch64::PMULvvv_8B:
    case AArch64::RADDHNvvv_2s2d:
    case AArch64::RADDHNvvv_4h4s:
    case AArch64::RADDHNvvv_8b8h:
    case AArch64::RORVwww:
    case AArch64::RORVxxx:
    case AArch64::RSUBHNvvv_2s2d:
    case AArch64::RSUBHNvvv_4h4s:
    case AArch64::RSUBHNvvv_8b8h:
    case AArch64::SABDL2vvv_2d2s:
    case AArch64::SABDL2vvv_4s4h:
    case AArch64::SABDL2vvv_8h8b:
    case AArch64::SABDLvvv_2d2s:
    case AArch64::SABDLvvv_4s4h:
    case AArch64::SABDLvvv_8h8b:
    case AArch64::SABDvvv_16B:
    case AArch64::SABDvvv_2S:
    case AArch64::SABDvvv_4H:
    case AArch64::SABDvvv_4S:
    case AArch64::SABDvvv_8B:
    case AArch64::SABDvvv_8H:
    case AArch64::SADDL2vvv_2d4s:
    case AArch64::SADDL2vvv_4s8h:
    case AArch64::SADDL2vvv_8h16b:
    case AArch64::SADDLvvv_2d2s:
    case AArch64::SADDLvvv_4s4h:
    case AArch64::SADDLvvv_8h8b:
    case AArch64::SADDW2vvv_2d4s:
    case AArch64::SADDW2vvv_4s8h:
    case AArch64::SADDW2vvv_8h16b:
    case AArch64::SADDWvvv_2d2s:
    case AArch64::SADDWvvv_4s4h:
    case AArch64::SADDWvvv_8h8b:
    case AArch64::SBCSwww:
    case AArch64::SBCSxxx:
    case AArch64::SBCwww:
    case AArch64::SBCxxx:
    case AArch64::SDIVwww:
    case AArch64::SDIVxxx:
    case AArch64::SHADDvvv_16B:
    case AArch64::SHADDvvv_2S:
    case AArch64::SHADDvvv_4H:
    case AArch64::SHADDvvv_4S:
    case AArch64::SHADDvvv_8B:
    case AArch64::SHADDvvv_8H:
    case AArch64::SHSUBvvv_16B:
    case AArch64::SHSUBvvv_2S:
    case AArch64::SHSUBvvv_4H:
    case AArch64::SHSUBvvv_4S:
    case AArch64::SHSUBvvv_8B:
    case AArch64::SHSUBvvv_8H:
    case AArch64::SMAXPvvv_16B:
    case AArch64::SMAXPvvv_2S:
    case AArch64::SMAXPvvv_4H:
    case AArch64::SMAXPvvv_4S:
    case AArch64::SMAXPvvv_8B:
    case AArch64::SMAXPvvv_8H:
    case AArch64::SMAXvvv_16B:
    case AArch64::SMAXvvv_2S:
    case AArch64::SMAXvvv_4H:
    case AArch64::SMAXvvv_4S:
    case AArch64::SMAXvvv_8B:
    case AArch64::SMAXvvv_8H:
    case AArch64::SMINPvvv_16B:
    case AArch64::SMINPvvv_2S:
    case AArch64::SMINPvvv_4H:
    case AArch64::SMINPvvv_4S:
    case AArch64::SMINPvvv_8B:
    case AArch64::SMINPvvv_8H:
    case AArch64::SMINvvv_16B:
    case AArch64::SMINvvv_2S:
    case AArch64::SMINvvv_4H:
    case AArch64::SMINvvv_4S:
    case AArch64::SMINvvv_8B:
    case AArch64::SMINvvv_8H:
    case AArch64::SMULL2vvv_2d4s:
    case AArch64::SMULL2vvv_4s8h:
    case AArch64::SMULL2vvv_8h16b:
    case AArch64::SMULLvvv_2d2s:
    case AArch64::SMULLvvv_4s4h:
    case AArch64::SMULLvvv_8h8b:
    case AArch64::SQADDbbb:
    case AArch64::SQADDddd:
    case AArch64::SQADDhhh:
    case AArch64::SQADDsss:
    case AArch64::SQADDvvv_16B:
    case AArch64::SQADDvvv_2D:
    case AArch64::SQADDvvv_2S:
    case AArch64::SQADDvvv_4H:
    case AArch64::SQADDvvv_4S:
    case AArch64::SQADDvvv_8B:
    case AArch64::SQADDvvv_8H:
    case AArch64::SQDMULHhhh:
    case AArch64::SQDMULHsss:
    case AArch64::SQDMULHvvv_2S:
    case AArch64::SQDMULHvvv_4H:
    case AArch64::SQDMULHvvv_4S:
    case AArch64::SQDMULHvvv_8H:
    case AArch64::SQDMULL2vvv_2d4s:
    case AArch64::SQDMULL2vvv_4s8h:
    case AArch64::SQDMULLdss:
    case AArch64::SQDMULLshh:
    case AArch64::SQDMULLvvv_2d2s:
    case AArch64::SQDMULLvvv_4s4h:
    case AArch64::SQRDMULHhhh:
    case AArch64::SQRDMULHsss:
    case AArch64::SQRDMULHvvv_2S:
    case AArch64::SQRDMULHvvv_4H:
    case AArch64::SQRDMULHvvv_4S:
    case AArch64::SQRDMULHvvv_8H:
    case AArch64::SQRSHLbbb:
    case AArch64::SQRSHLddd:
    case AArch64::SQRSHLhhh:
    case AArch64::SQRSHLsss:
    case AArch64::SQRSHLvvv_16B:
    case AArch64::SQRSHLvvv_2D:
    case AArch64::SQRSHLvvv_2S:
    case AArch64::SQRSHLvvv_4H:
    case AArch64::SQRSHLvvv_4S:
    case AArch64::SQRSHLvvv_8B:
    case AArch64::SQRSHLvvv_8H:
    case AArch64::SQSHLbbb:
    case AArch64::SQSHLddd:
    case AArch64::SQSHLhhh:
    case AArch64::SQSHLsss:
    case AArch64::SQSHLvvv_16B:
    case AArch64::SQSHLvvv_2D:
    case AArch64::SQSHLvvv_2S:
    case AArch64::SQSHLvvv_4H:
    case AArch64::SQSHLvvv_4S:
    case AArch64::SQSHLvvv_8B:
    case AArch64::SQSHLvvv_8H:
    case AArch64::SQSUBbbb:
    case AArch64::SQSUBddd:
    case AArch64::SQSUBhhh:
    case AArch64::SQSUBsss:
    case AArch64::SQSUBvvv_16B:
    case AArch64::SQSUBvvv_2D:
    case AArch64::SQSUBvvv_2S:
    case AArch64::SQSUBvvv_4H:
    case AArch64::SQSUBvvv_4S:
    case AArch64::SQSUBvvv_8B:
    case AArch64::SQSUBvvv_8H:
    case AArch64::SRHADDvvv_16B:
    case AArch64::SRHADDvvv_2S:
    case AArch64::SRHADDvvv_4H:
    case AArch64::SRHADDvvv_4S:
    case AArch64::SRHADDvvv_8B:
    case AArch64::SRHADDvvv_8H:
    case AArch64::SRSHLddd:
    case AArch64::SRSHLvvv_16B:
    case AArch64::SRSHLvvv_2D:
    case AArch64::SRSHLvvv_2S:
    case AArch64::SRSHLvvv_4H:
    case AArch64::SRSHLvvv_4S:
    case AArch64::SRSHLvvv_8B:
    case AArch64::SRSHLvvv_8H:
    case AArch64::SSHLddd:
    case AArch64::SSHLvvv_16B:
    case AArch64::SSHLvvv_2D:
    case AArch64::SSHLvvv_2S:
    case AArch64::SSHLvvv_4H:
    case AArch64::SSHLvvv_4S:
    case AArch64::SSHLvvv_8B:
    case AArch64::SSHLvvv_8H:
    case AArch64::SSUBL2vvv_2d4s:
    case AArch64::SSUBL2vvv_4s8h:
    case AArch64::SSUBL2vvv_8h16b:
    case AArch64::SSUBLvvv_2d2s:
    case AArch64::SSUBLvvv_4s4h:
    case AArch64::SSUBLvvv_8h8b:
    case AArch64::SSUBW2vvv_2d4s:
    case AArch64::SSUBW2vvv_4s8h:
    case AArch64::SSUBW2vvv_8h16b:
    case AArch64::SSUBWvvv_2d2s:
    case AArch64::SSUBWvvv_4s4h:
    case AArch64::SSUBWvvv_8h8b:
    case AArch64::SUBHNvvv_2s2d:
    case AArch64::SUBHNvvv_4h4s:
    case AArch64::SUBHNvvv_8b8h:
    case AArch64::SUBddd:
    case AArch64::SUBvvv_16B:
    case AArch64::SUBvvv_2D:
    case AArch64::SUBvvv_2S:
    case AArch64::SUBvvv_4H:
    case AArch64::SUBvvv_4S:
    case AArch64::SUBvvv_8B:
    case AArch64::SUBvvv_8H:
    case AArch64::TBL1_16b:
    case AArch64::TBL1_8b:
    case AArch64::TBL2_16b:
    case AArch64::TBL2_8b:
    case AArch64::TBL3_16b:
    case AArch64::TBL3_8b:
    case AArch64::TBL4_16b:
    case AArch64::TBL4_8b:
    case AArch64::TRN1vvv_16b:
    case AArch64::TRN1vvv_2d:
    case AArch64::TRN1vvv_2s:
    case AArch64::TRN1vvv_4h:
    case AArch64::TRN1vvv_4s:
    case AArch64::TRN1vvv_8b:
    case AArch64::TRN1vvv_8h:
    case AArch64::TRN2vvv_16b:
    case AArch64::TRN2vvv_2d:
    case AArch64::TRN2vvv_2s:
    case AArch64::TRN2vvv_4h:
    case AArch64::TRN2vvv_4s:
    case AArch64::TRN2vvv_8b:
    case AArch64::TRN2vvv_8h:
    case AArch64::UABDL2vvv_2d2s:
    case AArch64::UABDL2vvv_4s4h:
    case AArch64::UABDL2vvv_8h8b:
    case AArch64::UABDLvvv_2d2s:
    case AArch64::UABDLvvv_4s4h:
    case AArch64::UABDLvvv_8h8b:
    case AArch64::UABDvvv_16B:
    case AArch64::UABDvvv_2S:
    case AArch64::UABDvvv_4H:
    case AArch64::UABDvvv_4S:
    case AArch64::UABDvvv_8B:
    case AArch64::UABDvvv_8H:
    case AArch64::UADDL2vvv_2d4s:
    case AArch64::UADDL2vvv_4s8h:
    case AArch64::UADDL2vvv_8h16b:
    case AArch64::UADDLvvv_2d2s:
    case AArch64::UADDLvvv_4s4h:
    case AArch64::UADDLvvv_8h8b:
    case AArch64::UADDW2vvv_2d4s:
    case AArch64::UADDW2vvv_4s8h:
    case AArch64::UADDW2vvv_8h16b:
    case AArch64::UADDWvvv_2d2s:
    case AArch64::UADDWvvv_4s4h:
    case AArch64::UADDWvvv_8h8b:
    case AArch64::UDIVwww:
    case AArch64::UDIVxxx:
    case AArch64::UHADDvvv_16B:
    case AArch64::UHADDvvv_2S:
    case AArch64::UHADDvvv_4H:
    case AArch64::UHADDvvv_4S:
    case AArch64::UHADDvvv_8B:
    case AArch64::UHADDvvv_8H:
    case AArch64::UHSUBvvv_16B:
    case AArch64::UHSUBvvv_2S:
    case AArch64::UHSUBvvv_4H:
    case AArch64::UHSUBvvv_4S:
    case AArch64::UHSUBvvv_8B:
    case AArch64::UHSUBvvv_8H:
    case AArch64::UMAXPvvv_16B:
    case AArch64::UMAXPvvv_2S:
    case AArch64::UMAXPvvv_4H:
    case AArch64::UMAXPvvv_4S:
    case AArch64::UMAXPvvv_8B:
    case AArch64::UMAXPvvv_8H:
    case AArch64::UMAXvvv_16B:
    case AArch64::UMAXvvv_2S:
    case AArch64::UMAXvvv_4H:
    case AArch64::UMAXvvv_4S:
    case AArch64::UMAXvvv_8B:
    case AArch64::UMAXvvv_8H:
    case AArch64::UMINPvvv_16B:
    case AArch64::UMINPvvv_2S:
    case AArch64::UMINPvvv_4H:
    case AArch64::UMINPvvv_4S:
    case AArch64::UMINPvvv_8B:
    case AArch64::UMINPvvv_8H:
    case AArch64::UMINvvv_16B:
    case AArch64::UMINvvv_2S:
    case AArch64::UMINvvv_4H:
    case AArch64::UMINvvv_4S:
    case AArch64::UMINvvv_8B:
    case AArch64::UMINvvv_8H:
    case AArch64::UMULL2vvv_2d4s:
    case AArch64::UMULL2vvv_4s8h:
    case AArch64::UMULL2vvv_8h16b:
    case AArch64::UMULLvvv_2d2s:
    case AArch64::UMULLvvv_4s4h:
    case AArch64::UMULLvvv_8h8b:
    case AArch64::UQADDbbb:
    case AArch64::UQADDddd:
    case AArch64::UQADDhhh:
    case AArch64::UQADDsss:
    case AArch64::UQADDvvv_16B:
    case AArch64::UQADDvvv_2D:
    case AArch64::UQADDvvv_2S:
    case AArch64::UQADDvvv_4H:
    case AArch64::UQADDvvv_4S:
    case AArch64::UQADDvvv_8B:
    case AArch64::UQADDvvv_8H:
    case AArch64::UQRSHLbbb:
    case AArch64::UQRSHLddd:
    case AArch64::UQRSHLhhh:
    case AArch64::UQRSHLsss:
    case AArch64::UQRSHLvvv_16B:
    case AArch64::UQRSHLvvv_2D:
    case AArch64::UQRSHLvvv_2S:
    case AArch64::UQRSHLvvv_4H:
    case AArch64::UQRSHLvvv_4S:
    case AArch64::UQRSHLvvv_8B:
    case AArch64::UQRSHLvvv_8H:
    case AArch64::UQSHLbbb:
    case AArch64::UQSHLddd:
    case AArch64::UQSHLhhh:
    case AArch64::UQSHLsss:
    case AArch64::UQSHLvvv_16B:
    case AArch64::UQSHLvvv_2D:
    case AArch64::UQSHLvvv_2S:
    case AArch64::UQSHLvvv_4H:
    case AArch64::UQSHLvvv_4S:
    case AArch64::UQSHLvvv_8B:
    case AArch64::UQSHLvvv_8H:
    case AArch64::UQSUBbbb:
    case AArch64::UQSUBddd:
    case AArch64::UQSUBhhh:
    case AArch64::UQSUBsss:
    case AArch64::UQSUBvvv_16B:
    case AArch64::UQSUBvvv_2D:
    case AArch64::UQSUBvvv_2S:
    case AArch64::UQSUBvvv_4H:
    case AArch64::UQSUBvvv_4S:
    case AArch64::UQSUBvvv_8B:
    case AArch64::UQSUBvvv_8H:
    case AArch64::URHADDvvv_16B:
    case AArch64::URHADDvvv_2S:
    case AArch64::URHADDvvv_4H:
    case AArch64::URHADDvvv_4S:
    case AArch64::URHADDvvv_8B:
    case AArch64::URHADDvvv_8H:
    case AArch64::URSHLddd:
    case AArch64::URSHLvvv_16B:
    case AArch64::URSHLvvv_2D:
    case AArch64::URSHLvvv_2S:
    case AArch64::URSHLvvv_4H:
    case AArch64::URSHLvvv_4S:
    case AArch64::URSHLvvv_8B:
    case AArch64::URSHLvvv_8H:
    case AArch64::USHLddd:
    case AArch64::USHLvvv_16B:
    case AArch64::USHLvvv_2D:
    case AArch64::USHLvvv_2S:
    case AArch64::USHLvvv_4H:
    case AArch64::USHLvvv_4S:
    case AArch64::USHLvvv_8B:
    case AArch64::USHLvvv_8H:
    case AArch64::USUBL2vvv_2d4s:
    case AArch64::USUBL2vvv_4s8h:
    case AArch64::USUBL2vvv_8h16b:
    case AArch64::USUBLvvv_2d2s:
    case AArch64::USUBLvvv_4s4h:
    case AArch64::USUBLvvv_8h8b:
    case AArch64::USUBW2vvv_2d4s:
    case AArch64::USUBW2vvv_4s8h:
    case AArch64::USUBW2vvv_8h16b:
    case AArch64::USUBWvvv_2d2s:
    case AArch64::USUBWvvv_4s4h:
    case AArch64::USUBWvvv_8h8b:
    case AArch64::UZP1vvv_16b:
    case AArch64::UZP1vvv_2d:
    case AArch64::UZP1vvv_2s:
    case AArch64::UZP1vvv_4h:
    case AArch64::UZP1vvv_4s:
    case AArch64::UZP1vvv_8b:
    case AArch64::UZP1vvv_8h:
    case AArch64::UZP2vvv_16b:
    case AArch64::UZP2vvv_2d:
    case AArch64::UZP2vvv_2s:
    case AArch64::UZP2vvv_4h:
    case AArch64::UZP2vvv_4s:
    case AArch64::UZP2vvv_8b:
    case AArch64::UZP2vvv_8h:
    case AArch64::ZIP1vvv_16b:
    case AArch64::ZIP1vvv_2d:
    case AArch64::ZIP1vvv_2s:
    case AArch64::ZIP1vvv_4h:
    case AArch64::ZIP1vvv_4s:
    case AArch64::ZIP1vvv_8b:
    case AArch64::ZIP1vvv_8h:
    case AArch64::ZIP2vvv_16b:
    case AArch64::ZIP2vvv_2d:
    case AArch64::ZIP2vvv_2s:
    case AArch64::ZIP2vvv_4h:
    case AArch64::ZIP2vvv_4s:
    case AArch64::ZIP2vvv_8b:
    case AArch64::ZIP2vvv_8h: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::CSELwwwc:
    case AArch64::CSELxxxc:
    case AArch64::CSINCwwwc:
    case AArch64::CSINCxxxc:
    case AArch64::CSINVwwwc:
    case AArch64::CSINVxxxc:
    case AArch64::CSNEGwwwc:
    case AArch64::CSNEGxxxc:
    case AArch64::FCSELdddc:
    case AArch64::FCSELsssc: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Cond
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case AArch64::ADDSwww_sxtb:
    case AArch64::ADDSwww_sxth:
    case AArch64::ADDSwww_sxtw:
    case AArch64::ADDSwww_sxtx:
    case AArch64::ADDSwww_uxtb:
    case AArch64::ADDSwww_uxth:
    case AArch64::ADDSwww_uxtw:
    case AArch64::ADDSwww_uxtx:
    case AArch64::ADDSxxw_sxtb:
    case AArch64::ADDSxxw_sxth:
    case AArch64::ADDSxxw_sxtw:
    case AArch64::ADDSxxw_uxtb:
    case AArch64::ADDSxxw_uxth:
    case AArch64::ADDSxxw_uxtw:
    case AArch64::ADDSxxx_sxtx:
    case AArch64::ADDSxxx_uxtx:
    case AArch64::ADDwww_sxtb:
    case AArch64::ADDwww_sxth:
    case AArch64::ADDwww_sxtw:
    case AArch64::ADDwww_sxtx:
    case AArch64::ADDwww_uxtb:
    case AArch64::ADDwww_uxth:
    case AArch64::ADDwww_uxtw:
    case AArch64::ADDwww_uxtx:
    case AArch64::ADDxxw_sxtb:
    case AArch64::ADDxxw_sxth:
    case AArch64::ADDxxw_sxtw:
    case AArch64::ADDxxw_uxtb:
    case AArch64::ADDxxw_uxth:
    case AArch64::ADDxxw_uxtw:
    case AArch64::ADDxxx_sxtx:
    case AArch64::ADDxxx_uxtx:
    case AArch64::SUBSwww_sxtb:
    case AArch64::SUBSwww_sxth:
    case AArch64::SUBSwww_sxtw:
    case AArch64::SUBSwww_sxtx:
    case AArch64::SUBSwww_uxtb:
    case AArch64::SUBSwww_uxth:
    case AArch64::SUBSwww_uxtw:
    case AArch64::SUBSwww_uxtx:
    case AArch64::SUBSxxw_sxtb:
    case AArch64::SUBSxxw_sxth:
    case AArch64::SUBSxxw_sxtw:
    case AArch64::SUBSxxw_uxtb:
    case AArch64::SUBSxxw_uxth:
    case AArch64::SUBSxxw_uxtw:
    case AArch64::SUBSxxx_sxtx:
    case AArch64::SUBSxxx_uxtx:
    case AArch64::SUBwww_sxtb:
    case AArch64::SUBwww_sxth:
    case AArch64::SUBwww_sxtw:
    case AArch64::SUBwww_sxtx:
    case AArch64::SUBwww_uxtb:
    case AArch64::SUBwww_uxth:
    case AArch64::SUBwww_uxtw:
    case AArch64::SUBwww_uxtx:
    case AArch64::SUBxxw_sxtb:
    case AArch64::SUBxxw_sxth:
    case AArch64::SUBxxw_sxtw:
    case AArch64::SUBxxw_uxtb:
    case AArch64::SUBxxw_uxth:
    case AArch64::SUBxxw_uxtw:
    case AArch64::SUBxxx_sxtx:
    case AArch64::SUBxxx_uxtx: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Imm3
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(7)) << 10;
      break;
    }
    case AArch64::ADDSwww_asr:
    case AArch64::ADDSwww_lsl:
    case AArch64::ADDSwww_lsr:
    case AArch64::ADDSxxx_asr:
    case AArch64::ADDSxxx_lsl:
    case AArch64::ADDSxxx_lsr:
    case AArch64::ADDwww_asr:
    case AArch64::ADDwww_lsl:
    case AArch64::ADDwww_lsr:
    case AArch64::ADDxxx_asr:
    case AArch64::ADDxxx_lsl:
    case AArch64::ADDxxx_lsr:
    case AArch64::ANDSwww_asr:
    case AArch64::ANDSwww_lsl:
    case AArch64::ANDSwww_lsr:
    case AArch64::ANDSwww_ror:
    case AArch64::ANDSxxx_asr:
    case AArch64::ANDSxxx_lsl:
    case AArch64::ANDSxxx_lsr:
    case AArch64::ANDSxxx_ror:
    case AArch64::ANDwww_asr:
    case AArch64::ANDwww_lsl:
    case AArch64::ANDwww_lsr:
    case AArch64::ANDwww_ror:
    case AArch64::ANDxxx_asr:
    case AArch64::ANDxxx_lsl:
    case AArch64::ANDxxx_lsr:
    case AArch64::ANDxxx_ror:
    case AArch64::BICSwww_asr:
    case AArch64::BICSwww_lsl:
    case AArch64::BICSwww_lsr:
    case AArch64::BICSwww_ror:
    case AArch64::BICSxxx_asr:
    case AArch64::BICSxxx_lsl:
    case AArch64::BICSxxx_lsr:
    case AArch64::BICSxxx_ror:
    case AArch64::BICwww_asr:
    case AArch64::BICwww_lsl:
    case AArch64::BICwww_lsr:
    case AArch64::BICwww_ror:
    case AArch64::BICxxx_asr:
    case AArch64::BICxxx_lsl:
    case AArch64::BICxxx_lsr:
    case AArch64::BICxxx_ror:
    case AArch64::EONwww_asr:
    case AArch64::EONwww_lsl:
    case AArch64::EONwww_lsr:
    case AArch64::EONwww_ror:
    case AArch64::EONxxx_asr:
    case AArch64::EONxxx_lsl:
    case AArch64::EONxxx_lsr:
    case AArch64::EONxxx_ror:
    case AArch64::EORwww_asr:
    case AArch64::EORwww_lsl:
    case AArch64::EORwww_lsr:
    case AArch64::EORwww_ror:
    case AArch64::EORxxx_asr:
    case AArch64::EORxxx_lsl:
    case AArch64::EORxxx_lsr:
    case AArch64::EORxxx_ror:
    case AArch64::ORNwww_asr:
    case AArch64::ORNwww_lsl:
    case AArch64::ORNwww_lsr:
    case AArch64::ORNwww_ror:
    case AArch64::ORNxxx_asr:
    case AArch64::ORNxxx_lsl:
    case AArch64::ORNxxx_lsr:
    case AArch64::ORNxxx_ror:
    case AArch64::ORRwww_asr:
    case AArch64::ORRwww_lsl:
    case AArch64::ORRwww_lsr:
    case AArch64::ORRwww_ror:
    case AArch64::ORRxxx_asr:
    case AArch64::ORRxxx_lsl:
    case AArch64::ORRxxx_lsr:
    case AArch64::ORRxxx_ror:
    case AArch64::SUBSwww_asr:
    case AArch64::SUBSwww_lsl:
    case AArch64::SUBSwww_lsr:
    case AArch64::SUBSxxx_asr:
    case AArch64::SUBSxxx_lsl:
    case AArch64::SUBSxxx_lsr:
    case AArch64::SUBwww_asr:
    case AArch64::SUBwww_lsl:
    case AArch64::SUBwww_lsr:
    case AArch64::SUBxxx_asr:
    case AArch64::SUBxxx_lsl:
    case AArch64::SUBxxx_lsr: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Imm6
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AArch64::EXTvvvi_16b: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Index
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 11;
      break;
    }
    case AArch64::EXTvvvi_8b: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Index
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(7)) << 11;
      break;
    }
    case AArch64::EXTRwwwi:
    case AArch64::EXTRxxxi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: LSB
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AArch64::SMULHxxx:
    case AArch64::UMULHxxx: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Ra
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 10;
      Value = fixMulHigh(MI, Value);
      break;
    }
    case AArch64::FMADDdddd:
    case AArch64::FMADDssss:
    case AArch64::FMSUBdddd:
    case AArch64::FMSUBssss:
    case AArch64::FNMADDdddd:
    case AArch64::FNMADDssss:
    case AArch64::FNMSUBdddd:
    case AArch64::FNMSUBssss:
    case AArch64::MADDwwww:
    case AArch64::MADDxxxx:
    case AArch64::MSUBwwww:
    case AArch64::MSUBxxxx:
    case AArch64::SMADDLxwwx:
    case AArch64::SMSUBLxwwx:
    case AArch64::UMADDLxwwx:
    case AArch64::UMSUBLxwwx: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Ra
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 10;
      break;
    }
    case AArch64::FCVTZSwdi:
    case AArch64::FCVTZSwsi:
    case AArch64::FCVTZSxdi:
    case AArch64::FCVTZSxsi:
    case AArch64::FCVTZUwdi:
    case AArch64::FCVTZUwsi:
    case AArch64::FCVTZUxdi:
    case AArch64::FCVTZUxsi:
    case AArch64::SCVTFdwi:
    case AArch64::SCVTFdxi:
    case AArch64::SCVTFswi:
    case AArch64::SCVTFsxi:
    case AArch64::UCVTFdwi:
    case AArch64::UCVTFdxi:
    case AArch64::UCVTFswi:
    case AArch64::UCVTFsxi: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Scale
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AArch64::AESD:
    case AArch64::AESE:
    case AArch64::FCVTN2d4s:
    case AArch64::FCVTN4s8h:
    case AArch64::FCVTXN2d4s:
    case AArch64::SADALP16b8h:
    case AArch64::SADALP2s1d:
    case AArch64::SADALP4h2s:
    case AArch64::SADALP4s2d:
    case AArch64::SADALP8b4h:
    case AArch64::SADALP8h4s:
    case AArch64::SHA1SU1:
    case AArch64::SHA256SU0:
    case AArch64::SQXTN2d4s:
    case AArch64::SQXTN4s8h:
    case AArch64::SQXTN8h16b:
    case AArch64::SQXTUN2d4s:
    case AArch64::SQXTUN4s8h:
    case AArch64::SQXTUN8h16b:
    case AArch64::SUQADD16b:
    case AArch64::SUQADD2d:
    case AArch64::SUQADD2s:
    case AArch64::SUQADD4h:
    case AArch64::SUQADD4s:
    case AArch64::SUQADD8b:
    case AArch64::SUQADD8h:
    case AArch64::SUQADDbb:
    case AArch64::SUQADDdd:
    case AArch64::SUQADDhh:
    case AArch64::SUQADDss:
    case AArch64::UADALP16b8h:
    case AArch64::UADALP2s1d:
    case AArch64::UADALP4h2s:
    case AArch64::UADALP4s2d:
    case AArch64::UADALP8b4h:
    case AArch64::UADALP8h4s:
    case AArch64::UQXTN2d4s:
    case AArch64::UQXTN4s8h:
    case AArch64::UQXTN8h16b:
    case AArch64::USQADD16b:
    case AArch64::USQADD2d:
    case AArch64::USQADD2s:
    case AArch64::USQADD4h:
    case AArch64::USQADD4s:
    case AArch64::USQADD8b:
    case AArch64::USQADD8h:
    case AArch64::USQADDbb:
    case AArch64::USQADDdd:
    case AArch64::USQADDhh:
    case AArch64::USQADDss:
    case AArch64::XTN2d4s:
    case AArch64::XTN4s8h:
    case AArch64::XTN8h16b: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::INSdx: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 20;
      break;
    }
    case AArch64::INSbw: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 17;
      break;
    }
    case AArch64::INSsw: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(3)) << 19;
      break;
    }
    case AArch64::INShw: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(7)) << 18;
      break;
    }
    case AArch64::FMLAddv_2D:
    case AArch64::FMLSddv_2D: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 11;
      // op: MRm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::SQDMLALdsv_2S:
    case AArch64::SQDMLSLdsv_2S: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 21;
      // op: MRm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::FMLAssv_4S:
    case AArch64::FMLSssv_4S:
    case AArch64::SQDMLALdsv_4S:
    case AArch64::SQDMLSLdsv_4S: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 21;
      Value |= (op & UINT64_C(2)) << 10;
      // op: MRm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::SQDMLALshv_4H:
    case AArch64::SQDMLSLshv_4H: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(3)) << 20;
      // op: MRm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::SQDMLALshv_8H:
    case AArch64::SQDMLSLshv_8H: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(3)) << 20;
      Value |= (op & UINT64_C(4)) << 9;
      // op: MRm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::SLIvvi_4H:
    case AArch64::SLIvvi_8H: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftLeftImm16(MI, 3, Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::SLIvvi_2S:
    case AArch64::SLIvvi_4S: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftLeftImm32(MI, 3, Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::SLI:
    case AArch64::SLIvvi_2D: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftLeftImm64(MI, 3, Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      break;
    }
    case AArch64::SLIvvi_16B:
    case AArch64::SLIvvi_8B: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftLeftImm8(MI, 3, Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case AArch64::QRSHRUNvvi_8H:
    case AArch64::QSHRUNvvi_8H:
    case AArch64::RSHRNvvi_8H:
    case AArch64::SHRNvvi_8H:
    case AArch64::SQRSHRNvvi_8H:
    case AArch64::SQSHRNvvi_8H:
    case AArch64::SRIvvi_4H:
    case AArch64::SRIvvi_8H:
    case AArch64::SRSRAvvi_4H:
    case AArch64::SRSRAvvi_8H:
    case AArch64::SSRAvvi_4H:
    case AArch64::SSRAvvi_8H:
    case AArch64::UQRSHRNvvi_8H:
    case AArch64::UQSHRNvvi_8H:
    case AArch64::URSRAvvi_4H:
    case AArch64::URSRAvvi_8H:
    case AArch64::USRAvvi_4H:
    case AArch64::USRAvvi_8H: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftRightImm16(MI, 3, Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::QRSHRUNvvi_4S:
    case AArch64::QSHRUNvvi_4S:
    case AArch64::RSHRNvvi_4S:
    case AArch64::SHRNvvi_4S:
    case AArch64::SQRSHRNvvi_4S:
    case AArch64::SQSHRNvvi_4S:
    case AArch64::SRIvvi_2S:
    case AArch64::SRIvvi_4S:
    case AArch64::SRSRAvvi_2S:
    case AArch64::SRSRAvvi_4S:
    case AArch64::SSRAvvi_2S:
    case AArch64::SSRAvvi_4S:
    case AArch64::UQRSHRNvvi_4S:
    case AArch64::UQSHRNvvi_4S:
    case AArch64::URSRAvvi_2S:
    case AArch64::URSRAvvi_4S:
    case AArch64::USRAvvi_2S:
    case AArch64::USRAvvi_4S: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftRightImm32(MI, 3, Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::SRI:
    case AArch64::SRIvvi_2D:
    case AArch64::SRSRA:
    case AArch64::SRSRAvvi_2D:
    case AArch64::SSRA:
    case AArch64::SSRAvvi_2D:
    case AArch64::URSRA:
    case AArch64::URSRAvvi_2D:
    case AArch64::USRA:
    case AArch64::USRAvvi_2D: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftRightImm64(MI, 3, Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      break;
    }
    case AArch64::QRSHRUNvvi_16B:
    case AArch64::QSHRUNvvi_16B:
    case AArch64::RSHRNvvi_16B:
    case AArch64::SHRNvvi_16B:
    case AArch64::SQRSHRNvvi_16B:
    case AArch64::SQSHRNvvi_16B:
    case AArch64::SRIvvi_16B:
    case AArch64::SRIvvi_8B:
    case AArch64::SRSRAvvi_16B:
    case AArch64::SRSRAvvi_8B:
    case AArch64::SSRAvvi_16B:
    case AArch64::SSRAvvi_8B:
    case AArch64::UQRSHRNvvi_16B:
    case AArch64::UQSHRNvvi_16B:
    case AArch64::URSRAvvi_16B:
    case AArch64::URSRAvvi_8B:
    case AArch64::USRAvvi_16B:
    case AArch64::USRAvvi_8B: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm
      op = getShiftRightImm8(MI, 3, Fixups);
      Value |= (op & UINT64_C(7)) << 16;
      break;
    }
    case AArch64::BFIwwii:
    case AArch64::BFIxxii:
    case AArch64::BFMwwii:
    case AArch64::BFMxxii:
    case AArch64::BFXILwwii:
    case AArch64::BFXILxxii: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: ImmR
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(63)) << 16;
      // op: ImmS
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AArch64::INSELd: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Immd
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 20;
      // op: Immn
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 14;
      break;
    }
    case AArch64::INSELb: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Immd
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 17;
      // op: Immn
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(15)) << 11;
      break;
    }
    case AArch64::INSELs: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Immd
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(3)) << 19;
      // op: Immn
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(3)) << 13;
      break;
    }
    case AArch64::INSELh: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Immd
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(7)) << 18;
      // op: Immn
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(7)) << 12;
      break;
    }
    case AArch64::FMLAvve_2d2d:
    case AArch64::FMLSvve_2d2d: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Index
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 11;
      // op: Re
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::FMLAvve_2s4s:
    case AArch64::FMLAvve_4s4s:
    case AArch64::FMLSvve_2s4s:
    case AArch64::FMLSvve_4s4s:
    case AArch64::MLAvve_2s4s:
    case AArch64::MLAvve_4s4s:
    case AArch64::MLSvve_2s4s:
    case AArch64::MLSvve_4s4s:
    case AArch64::SMLALvve_2d2s:
    case AArch64::SMLALvve_2d4s:
    case AArch64::SMLSLvve_2d2s:
    case AArch64::SMLSLvve_2d4s:
    case AArch64::SQDMLALvve_2d2s:
    case AArch64::SQDMLALvve_2d4s:
    case AArch64::SQDMLSLvve_2d2s:
    case AArch64::SQDMLSLvve_2d4s:
    case AArch64::UMLALvve_2d2s:
    case AArch64::UMLALvve_2d4s:
    case AArch64::UMLSLvve_2d2s:
    case AArch64::UMLSLvve_2d4s: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Index
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 21;
      Value |= (op & UINT64_C(2)) << 10;
      // op: Re
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::MLAvve_4h8h:
    case AArch64::MLAvve_8h8h:
    case AArch64::MLSvve_4h8h:
    case AArch64::MLSvve_8h8h:
    case AArch64::SMLALvve_4s4h:
    case AArch64::SMLALvve_4s8h:
    case AArch64::SMLSLvve_4s4h:
    case AArch64::SMLSLvve_4s8h:
    case AArch64::SQDMLALvve_4s4h:
    case AArch64::SQDMLALvve_4s8h:
    case AArch64::SQDMLSLvve_4s4h:
    case AArch64::SQDMLSLvve_4s8h:
    case AArch64::UMLALvve_4s4h:
    case AArch64::UMLALvve_4s8h:
    case AArch64::UMLSLvve_4s4h:
    case AArch64::UMLSLvve_4s8h: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Index
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(3)) << 20;
      Value |= (op & UINT64_C(4)) << 9;
      // op: Re
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 16;
      break;
    }
    case AArch64::ADDHN2vvv_16b8h:
    case AArch64::ADDHN2vvv_4s2d:
    case AArch64::ADDHN2vvv_8h4s:
    case AArch64::BIFvvv_16B:
    case AArch64::BIFvvv_8B:
    case AArch64::BITvvv_16B:
    case AArch64::BITvvv_8B:
    case AArch64::BSLvvv_16B:
    case AArch64::BSLvvv_8B:
    case AArch64::FMLAvvv_2D:
    case AArch64::FMLAvvv_2S:
    case AArch64::FMLAvvv_4S:
    case AArch64::FMLSvvv_2D:
    case AArch64::FMLSvvv_2S:
    case AArch64::FMLSvvv_4S:
    case AArch64::MLAvvv_16B:
    case AArch64::MLAvvv_2S:
    case AArch64::MLAvvv_4H:
    case AArch64::MLAvvv_4S:
    case AArch64::MLAvvv_8B:
    case AArch64::MLAvvv_8H:
    case AArch64::MLSvvv_16B:
    case AArch64::MLSvvv_2S:
    case AArch64::MLSvvv_4H:
    case AArch64::MLSvvv_4S:
    case AArch64::MLSvvv_8B:
    case AArch64::MLSvvv_8H:
    case AArch64::RADDHN2vvv_16b8h:
    case AArch64::RADDHN2vvv_4s2d:
    case AArch64::RADDHN2vvv_8h4s:
    case AArch64::RSUBHN2vvv_16b8h:
    case AArch64::RSUBHN2vvv_4s2d:
    case AArch64::RSUBHN2vvv_8h4s:
    case AArch64::SABAL2vvv_2d2s:
    case AArch64::SABAL2vvv_4s4h:
    case AArch64::SABAL2vvv_8h8b:
    case AArch64::SABALvvv_2d2s:
    case AArch64::SABALvvv_4s4h:
    case AArch64::SABALvvv_8h8b:
    case AArch64::SABAvvv_16B:
    case AArch64::SABAvvv_2S:
    case AArch64::SABAvvv_4H:
    case AArch64::SABAvvv_4S:
    case AArch64::SABAvvv_8B:
    case AArch64::SABAvvv_8H:
    case AArch64::SHA1C:
    case AArch64::SHA1M:
    case AArch64::SHA1P:
    case AArch64::SHA1SU0:
    case AArch64::SHA256H:
    case AArch64::SHA256H2:
    case AArch64::SHA256SU1:
    case AArch64::SMLAL2vvv_2d4s:
    case AArch64::SMLAL2vvv_4s8h:
    case AArch64::SMLAL2vvv_8h16b:
    case AArch64::SMLALvvv_2d2s:
    case AArch64::SMLALvvv_4s4h:
    case AArch64::SMLALvvv_8h8b:
    case AArch64::SMLSL2vvv_2d4s:
    case AArch64::SMLSL2vvv_4s8h:
    case AArch64::SMLSL2vvv_8h16b:
    case AArch64::SMLSLvvv_2d2s:
    case AArch64::SMLSLvvv_4s4h:
    case AArch64::SMLSLvvv_8h8b:
    case AArch64::SQDMLAL2vvv_2d4s:
    case AArch64::SQDMLAL2vvv_4s8h:
    case AArch64::SQDMLALdss:
    case AArch64::SQDMLALshh:
    case AArch64::SQDMLALvvv_2d2s:
    case AArch64::SQDMLALvvv_4s4h:
    case AArch64::SQDMLSL2vvv_2d4s:
    case AArch64::SQDMLSL2vvv_4s8h:
    case AArch64::SQDMLSLdss:
    case AArch64::SQDMLSLshh:
    case AArch64::SQDMLSLvvv_2d2s:
    case AArch64::SQDMLSLvvv_4s4h:
    case AArch64::SUBHN2vvv_16b8h:
    case AArch64::SUBHN2vvv_4s2d:
    case AArch64::SUBHN2vvv_8h4s:
    case AArch64::TBX1_16b:
    case AArch64::TBX1_8b:
    case AArch64::TBX2_16b:
    case AArch64::TBX2_8b:
    case AArch64::TBX3_16b:
    case AArch64::TBX3_8b:
    case AArch64::TBX4_16b:
    case AArch64::TBX4_8b:
    case AArch64::UABAL2vvv_2d2s:
    case AArch64::UABAL2vvv_4s4h:
    case AArch64::UABAL2vvv_8h8b:
    case AArch64::UABALvvv_2d2s:
    case AArch64::UABALvvv_4s4h:
    case AArch64::UABALvvv_8h8b:
    case AArch64::UABAvvv_16B:
    case AArch64::UABAvvv_2S:
    case AArch64::UABAvvv_4H:
    case AArch64::UABAvvv_4S:
    case AArch64::UABAvvv_8B:
    case AArch64::UABAvvv_8H:
    case AArch64::UMLAL2vvv_2d4s:
    case AArch64::UMLAL2vvv_4s8h:
    case AArch64::UMLAL2vvv_8h16b:
    case AArch64::UMLALvvv_2d2s:
    case AArch64::UMLALvvv_4s4h:
    case AArch64::UMLALvvv_8h8b:
    case AArch64::UMLSL2vvv_2d4s:
    case AArch64::UMLSL2vvv_4s8h:
    case AArch64::UMLSL2vvv_8h16b:
    case AArch64::UMLSLvvv_2d2s:
    case AArch64::UMLSLvvv_4s4h:
    case AArch64::UMLSLvvv_8h8b: {
      // op: Rd
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::BLRx:
    case AArch64::BRx:
    case AArch64::RETx: {
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::ADDwwi_lsl0_cmp:
    case AArch64::ADDwwi_lsl12_cmp:
    case AArch64::ADDxxi_lsl0_cmp:
    case AArch64::ADDxxi_lsl12_cmp:
    case AArch64::SUBwwi_lsl0_cmp:
    case AArch64::SUBwwi_lsl12_cmp:
    case AArch64::SUBxxi_lsl0_cmp:
    case AArch64::SUBxxi_lsl12_cmp: {
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Imm12
      op = getAddSubImmOpValue(MI, 1, Fixups);
      Value |= (op & UINT64_C(4095)) << 10;
      break;
    }
    case AArch64::FCMPdd_quiet:
    case AArch64::FCMPdd_sig:
    case AArch64::FCMPdi_quiet:
    case AArch64::FCMPdi_sig:
    case AArch64::FCMPsi_quiet:
    case AArch64::FCMPsi_sig:
    case AArch64::FCMPss_quiet:
    case AArch64::FCMPss_sig: {
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::CMNww_sxtb:
    case AArch64::CMNww_sxth:
    case AArch64::CMNww_sxtw:
    case AArch64::CMNww_sxtx:
    case AArch64::CMNww_uxtb:
    case AArch64::CMNww_uxth:
    case AArch64::CMNww_uxtw:
    case AArch64::CMNww_uxtx:
    case AArch64::CMNxw_sxtb:
    case AArch64::CMNxw_sxth:
    case AArch64::CMNxw_sxtw:
    case AArch64::CMNxw_uxtb:
    case AArch64::CMNxw_uxth:
    case AArch64::CMNxw_uxtw:
    case AArch64::CMNxx_sxtx:
    case AArch64::CMNxx_uxtx:
    case AArch64::CMPww_sxtb:
    case AArch64::CMPww_sxth:
    case AArch64::CMPww_sxtw:
    case AArch64::CMPww_sxtx:
    case AArch64::CMPww_uxtb:
    case AArch64::CMPww_uxth:
    case AArch64::CMPww_uxtw:
    case AArch64::CMPww_uxtx:
    case AArch64::CMPxw_sxtb:
    case AArch64::CMPxw_sxth:
    case AArch64::CMPxw_sxtw:
    case AArch64::CMPxw_uxtb:
    case AArch64::CMPxw_uxth:
    case AArch64::CMPxw_uxtw:
    case AArch64::CMPxx_sxtx:
    case AArch64::CMPxx_uxtx: {
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Imm3
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(7)) << 10;
      break;
    }
    case AArch64::CMNww_asr:
    case AArch64::CMNww_lsl:
    case AArch64::CMNww_lsr:
    case AArch64::CMNxx_asr:
    case AArch64::CMNxx_lsl:
    case AArch64::CMNxx_lsr:
    case AArch64::CMPww_asr:
    case AArch64::CMPww_lsl:
    case AArch64::CMPww_lsr:
    case AArch64::CMPxx_asr:
    case AArch64::CMPxx_lsl:
    case AArch64::CMPxx_lsr:
    case AArch64::TSTww_asr:
    case AArch64::TSTww_lsl:
    case AArch64::TSTww_lsr:
    case AArch64::TSTww_ror:
    case AArch64::TSTxx_asr:
    case AArch64::TSTxx_lsl:
    case AArch64::TSTxx_lsr:
    case AArch64::TSTxx_ror: {
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Imm6
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(63)) << 10;
      break;
    }
    case AArch64::CCMNww:
    case AArch64::CCMNxx:
    case AArch64::CCMPww:
    case AArch64::CCMPxx:
    case AArch64::FCCMPEdd:
    case AArch64::FCCMPEss:
    case AArch64::FCCMPdd:
    case AArch64::FCCMPss: {
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: NZCVImm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= op & UINT64_C(15);
      // op: Cond
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case AArch64::CCMNwi:
    case AArch64::CCMNxi:
    case AArch64::CCMPwi:
    case AArch64::CCMPxi: {
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: UImm5
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: NZCVImm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= op & UINT64_C(15);
      // op: Cond
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(15)) << 12;
      break;
    }
    case AArch64::TBNZwii:
    case AArch64::TBZwii: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 19;
      // op: Label
      op = getLabelOpValue<AArch64::fixup_a64_tstbr>(MI, 2, Fixups);
      Value |= (op & UINT64_C(16383)) << 5;
      break;
    }
    case AArch64::TBNZxii:
    case AArch64::TBZxii: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Imm
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(32)) << 26;
      Value |= (op & UINT64_C(31)) << 19;
      // op: Label
      op = getLabelOpValue<AArch64::fixup_a64_tstbr>(MI, 2, Fixups);
      Value |= (op & UINT64_C(16383)) << 5;
      break;
    }
    case AArch64::LDRSWx_lit:
    case AArch64::LDRd_lit:
    case AArch64::LDRq_lit:
    case AArch64::LDRs_lit:
    case AArch64::LDRw_lit:
    case AArch64::LDRx_lit:
    case AArch64::PRFM_lit: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Imm19
      op = getLoadLitLabelOpValue(MI, 1, Fixups);
      Value |= (op & UINT64_C(524287)) << 5;
      break;
    }
    case AArch64::CBNZw:
    case AArch64::CBNZx:
    case AArch64::CBZw:
    case AArch64::CBZx: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Label
      op = getLabelOpValue<AArch64::fixup_a64_condbr>(MI, 1, Fixups);
      Value |= (op & UINT64_C(524287)) << 5;
      break;
    }
    case AArch64::LD1R_16B:
    case AArch64::LD1R_1D:
    case AArch64::LD1R_2D:
    case AArch64::LD1R_2S:
    case AArch64::LD1R_4H:
    case AArch64::LD1R_4S:
    case AArch64::LD1R_8B:
    case AArch64::LD1R_8H:
    case AArch64::LD1_16B:
    case AArch64::LD1_1D:
    case AArch64::LD1_2D:
    case AArch64::LD1_2S:
    case AArch64::LD1_4H:
    case AArch64::LD1_4S:
    case AArch64::LD1_8B:
    case AArch64::LD1_8H:
    case AArch64::LD1x2_16B:
    case AArch64::LD1x2_1D:
    case AArch64::LD1x2_2D:
    case AArch64::LD1x2_2S:
    case AArch64::LD1x2_4H:
    case AArch64::LD1x2_4S:
    case AArch64::LD1x2_8B:
    case AArch64::LD1x2_8H:
    case AArch64::LD1x3_16B:
    case AArch64::LD1x3_1D:
    case AArch64::LD1x3_2D:
    case AArch64::LD1x3_2S:
    case AArch64::LD1x3_4H:
    case AArch64::LD1x3_4S:
    case AArch64::LD1x3_8B:
    case AArch64::LD1x3_8H:
    case AArch64::LD1x4_16B:
    case AArch64::LD1x4_1D:
    case AArch64::LD1x4_2D:
    case AArch64::LD1x4_2S:
    case AArch64::LD1x4_4H:
    case AArch64::LD1x4_4S:
    case AArch64::LD1x4_8B:
    case AArch64::LD1x4_8H:
    case AArch64::LD2R_16B:
    case AArch64::LD2R_1D:
    case AArch64::LD2R_2D:
    case AArch64::LD2R_2S:
    case AArch64::LD2R_4H:
    case AArch64::LD2R_4S:
    case AArch64::LD2R_8B:
    case AArch64::LD2R_8H:
    case AArch64::LD2_16B:
    case AArch64::LD2_2D:
    case AArch64::LD2_2S:
    case AArch64::LD2_4H:
    case AArch64::LD2_4S:
    case AArch64::LD2_8B:
    case AArch64::LD2_8H:
    case AArch64::LD3R_16B:
    case AArch64::LD3R_1D:
    case AArch64::LD3R_2D:
    case AArch64::LD3R_2S:
    case AArch64::LD3R_4H:
    case AArch64::LD3R_4S:
    case AArch64::LD3R_8B:
    case AArch64::LD3R_8H:
    case AArch64::LD3_16B:
    case AArch64::LD3_2D:
    case AArch64::LD3_2S:
    case AArch64::LD3_4H:
    case AArch64::LD3_4S:
    case AArch64::LD3_8B:
    case AArch64::LD3_8H:
    case AArch64::LD4R_16B:
    case AArch64::LD4R_1D:
    case AArch64::LD4R_2D:
    case AArch64::LD4R_2S:
    case AArch64::LD4R_4H:
    case AArch64::LD4R_4S:
    case AArch64::LD4R_8B:
    case AArch64::LD4R_8H:
    case AArch64::LD4_16B:
    case AArch64::LD4_2D:
    case AArch64::LD4_2S:
    case AArch64::LD4_4H:
    case AArch64::LD4_4S:
    case AArch64::LD4_8B:
    case AArch64::LD4_8H: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::LDRSBw_Wm_RegOffset:
    case AArch64::LDRSBw_Xm_RegOffset:
    case AArch64::LDRSBx_Wm_RegOffset:
    case AArch64::LDRSBx_Xm_RegOffset:
    case AArch64::LDRSHw_Wm_RegOffset:
    case AArch64::LDRSHw_Xm_RegOffset:
    case AArch64::LDRSHx_Wm_RegOffset:
    case AArch64::LDRSHx_Xm_RegOffset:
    case AArch64::LDRSWx_Wm_RegOffset:
    case AArch64::LDRSWx_Xm_RegOffset:
    case AArch64::LS16_Wm_RegOffset_LDR:
    case AArch64::LS16_Wm_RegOffset_STR:
    case AArch64::LS16_Xm_RegOffset_LDR:
    case AArch64::LS16_Xm_RegOffset_STR:
    case AArch64::LS32_Wm_RegOffset_LDR:
    case AArch64::LS32_Wm_RegOffset_STR:
    case AArch64::LS32_Xm_RegOffset_LDR:
    case AArch64::LS32_Xm_RegOffset_STR:
    case AArch64::LS64_Wm_RegOffset_LDR:
    case AArch64::LS64_Wm_RegOffset_STR:
    case AArch64::LS64_Xm_RegOffset_LDR:
    case AArch64::LS64_Xm_RegOffset_STR:
    case AArch64::LS8_Wm_RegOffset_LDR:
    case AArch64::LS8_Wm_RegOffset_STR:
    case AArch64::LS8_Xm_RegOffset_LDR:
    case AArch64::LS8_Xm_RegOffset_STR:
    case AArch64::LSFP128_Wm_RegOffset_LDR:
    case AArch64::LSFP128_Wm_RegOffset_STR:
    case AArch64::LSFP128_Xm_RegOffset_LDR:
    case AArch64::LSFP128_Xm_RegOffset_STR:
    case AArch64::LSFP16_Wm_RegOffset_LDR:
    case AArch64::LSFP16_Wm_RegOffset_STR:
    case AArch64::LSFP16_Xm_RegOffset_LDR:
    case AArch64::LSFP16_Xm_RegOffset_STR:
    case AArch64::LSFP32_Wm_RegOffset_LDR:
    case AArch64::LSFP32_Wm_RegOffset_STR:
    case AArch64::LSFP32_Xm_RegOffset_LDR:
    case AArch64::LSFP32_Xm_RegOffset_STR:
    case AArch64::LSFP64_Wm_RegOffset_LDR:
    case AArch64::LSFP64_Wm_RegOffset_STR:
    case AArch64::LSFP64_Xm_RegOffset_LDR:
    case AArch64::LSFP64_Xm_RegOffset_STR:
    case AArch64::LSFP8_Wm_RegOffset_LDR:
    case AArch64::LSFP8_Wm_RegOffset_STR:
    case AArch64::LSFP8_Xm_RegOffset_LDR:
    case AArch64::LSFP8_Xm_RegOffset_STR:
    case AArch64::PRFM_Wm_RegOffset:
    case AArch64::PRFM_Xm_RegOffset: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Ext
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(6)) << 13;
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case AArch64::LDRSBw_U:
    case AArch64::LDRSBx_U:
    case AArch64::LDRSHw_U:
    case AArch64::LDRSHx_U:
    case AArch64::LDTRSBw:
    case AArch64::LDTRSBx:
    case AArch64::LDTRSHw:
    case AArch64::LDTRSHx:
    case AArch64::LDTRSWx:
    case AArch64::LDURSWx:
    case AArch64::LS16_LDUR:
    case AArch64::LS16_STUR:
    case AArch64::LS16_UnPriv_LDR:
    case AArch64::LS16_UnPriv_STR:
    case AArch64::LS32_LDUR:
    case AArch64::LS32_STUR:
    case AArch64::LS32_UnPriv_LDR:
    case AArch64::LS32_UnPriv_STR:
    case AArch64::LS64_LDUR:
    case AArch64::LS64_STUR:
    case AArch64::LS64_UnPriv_LDR:
    case AArch64::LS64_UnPriv_STR:
    case AArch64::LS8_LDUR:
    case AArch64::LS8_STUR:
    case AArch64::LS8_UnPriv_LDR:
    case AArch64::LS8_UnPriv_STR:
    case AArch64::LSFP128_LDUR:
    case AArch64::LSFP128_STUR:
    case AArch64::LSFP16_LDUR:
    case AArch64::LSFP16_STUR:
    case AArch64::LSFP32_LDUR:
    case AArch64::LSFP32_STUR:
    case AArch64::LSFP64_LDUR:
    case AArch64::LSFP64_STUR:
    case AArch64::LSFP8_LDUR:
    case AArch64::LSFP8_STUR:
    case AArch64::PRFUM: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: SImm9
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(511)) << 12;
      break;
    }
    case AArch64::LSFP128_LDR:
    case AArch64::LSFP128_STR: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: UImm12
      op = getOffsetUImm12OpValue<16>(MI, 2, Fixups);
      Value |= (op & UINT64_C(4095)) << 10;
      break;
    }
    case AArch64::LDRSBw:
    case AArch64::LDRSBx:
    case AArch64::LS8_LDR:
    case AArch64::LS8_STR:
    case AArch64::LSFP8_LDR:
    case AArch64::LSFP8_STR: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: UImm12
      op = getOffsetUImm12OpValue<1>(MI, 2, Fixups);
      Value |= (op & UINT64_C(4095)) << 10;
      break;
    }
    case AArch64::LDRSHw:
    case AArch64::LDRSHx:
    case AArch64::LS16_LDR:
    case AArch64::LS16_STR:
    case AArch64::LSFP16_LDR:
    case AArch64::LSFP16_STR: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: UImm12
      op = getOffsetUImm12OpValue<2>(MI, 2, Fixups);
      Value |= (op & UINT64_C(4095)) << 10;
      break;
    }
    case AArch64::LDRSWx:
    case AArch64::LS32_LDR:
    case AArch64::LS32_STR:
    case AArch64::LSFP32_LDR:
    case AArch64::LSFP32_STR: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: UImm12
      op = getOffsetUImm12OpValue<4>(MI, 2, Fixups);
      Value |= (op & UINT64_C(4095)) << 10;
      break;
    }
    case AArch64::LS64_LDR:
    case AArch64::LS64_STR:
    case AArch64::LSFP64_LDR:
    case AArch64::LSFP64_STR:
    case AArch64::PRFM: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: UImm12
      op = getOffsetUImm12OpValue<8>(MI, 2, Fixups);
      Value |= (op & UINT64_C(4095)) << 10;
      break;
    }
    case AArch64::LD1LN_D:
    case AArch64::LD2LN_D:
    case AArch64::LD3LN_D:
    case AArch64::LD4LN_D: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(1)) << 30;
      break;
    }
    case AArch64::LD1LN_S:
    case AArch64::LD2LN_S:
    case AArch64::LD3LN_S:
    case AArch64::LD4LN_S: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(2)) << 29;
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case AArch64::LD1LN_H:
    case AArch64::LD2LN_H:
    case AArch64::LD3LN_H:
    case AArch64::LD4LN_H: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(4)) << 28;
      Value |= (op & UINT64_C(3)) << 11;
      break;
    }
    case AArch64::LD1LN_B:
    case AArch64::LD2LN_B:
    case AArch64::LD3LN_B:
    case AArch64::LD4LN_B: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(8)) << 27;
      Value |= (op & UINT64_C(7)) << 10;
      break;
    }
    case AArch64::LDAR_byte:
    case AArch64::LDAR_dword:
    case AArch64::LDAR_hword:
    case AArch64::LDAR_word:
    case AArch64::LDAXR_byte:
    case AArch64::LDAXR_dword:
    case AArch64::LDAXR_hword:
    case AArch64::LDAXR_word:
    case AArch64::LDXR_byte:
    case AArch64::LDXR_dword:
    case AArch64::LDXR_hword:
    case AArch64::LDXR_word:
    case AArch64::STLR_byte:
    case AArch64::STLR_dword:
    case AArch64::STLR_hword:
    case AArch64::STLR_word: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      Value = fixLoadStoreExclusive<0,0>(MI, Value);
      break;
    }
    case AArch64::LD1R_WB_16B_fixed:
    case AArch64::LD1R_WB_1D_fixed:
    case AArch64::LD1R_WB_2D_fixed:
    case AArch64::LD1R_WB_2S_fixed:
    case AArch64::LD1R_WB_4H_fixed:
    case AArch64::LD1R_WB_4S_fixed:
    case AArch64::LD1R_WB_8B_fixed:
    case AArch64::LD1R_WB_8H_fixed:
    case AArch64::LD1WB_16B_fixed:
    case AArch64::LD1WB_1D_fixed:
    case AArch64::LD1WB_2D_fixed:
    case AArch64::LD1WB_2S_fixed:
    case AArch64::LD1WB_4H_fixed:
    case AArch64::LD1WB_4S_fixed:
    case AArch64::LD1WB_8B_fixed:
    case AArch64::LD1WB_8H_fixed:
    case AArch64::LD1x2WB_16B_fixed:
    case AArch64::LD1x2WB_1D_fixed:
    case AArch64::LD1x2WB_2D_fixed:
    case AArch64::LD1x2WB_2S_fixed:
    case AArch64::LD1x2WB_4H_fixed:
    case AArch64::LD1x2WB_4S_fixed:
    case AArch64::LD1x2WB_8B_fixed:
    case AArch64::LD1x2WB_8H_fixed:
    case AArch64::LD1x3WB_16B_fixed:
    case AArch64::LD1x3WB_1D_fixed:
    case AArch64::LD1x3WB_2D_fixed:
    case AArch64::LD1x3WB_2S_fixed:
    case AArch64::LD1x3WB_4H_fixed:
    case AArch64::LD1x3WB_4S_fixed:
    case AArch64::LD1x3WB_8B_fixed:
    case AArch64::LD1x3WB_8H_fixed:
    case AArch64::LD1x4WB_16B_fixed:
    case AArch64::LD1x4WB_1D_fixed:
    case AArch64::LD1x4WB_2D_fixed:
    case AArch64::LD1x4WB_2S_fixed:
    case AArch64::LD1x4WB_4H_fixed:
    case AArch64::LD1x4WB_4S_fixed:
    case AArch64::LD1x4WB_8B_fixed:
    case AArch64::LD1x4WB_8H_fixed:
    case AArch64::LD2R_WB_16B_fixed:
    case AArch64::LD2R_WB_1D_fixed:
    case AArch64::LD2R_WB_2D_fixed:
    case AArch64::LD2R_WB_2S_fixed:
    case AArch64::LD2R_WB_4H_fixed:
    case AArch64::LD2R_WB_4S_fixed:
    case AArch64::LD2R_WB_8B_fixed:
    case AArch64::LD2R_WB_8H_fixed:
    case AArch64::LD2WB_16B_fixed:
    case AArch64::LD2WB_2D_fixed:
    case AArch64::LD2WB_2S_fixed:
    case AArch64::LD2WB_4H_fixed:
    case AArch64::LD2WB_4S_fixed:
    case AArch64::LD2WB_8B_fixed:
    case AArch64::LD2WB_8H_fixed:
    case AArch64::LD3R_WB_16B_fixed:
    case AArch64::LD3R_WB_1D_fixed:
    case AArch64::LD3R_WB_2D_fixed:
    case AArch64::LD3R_WB_2S_fixed:
    case AArch64::LD3R_WB_4H_fixed:
    case AArch64::LD3R_WB_4S_fixed:
    case AArch64::LD3R_WB_8B_fixed:
    case AArch64::LD3R_WB_8H_fixed:
    case AArch64::LD3WB_16B_fixed:
    case AArch64::LD3WB_2D_fixed:
    case AArch64::LD3WB_2S_fixed:
    case AArch64::LD3WB_4H_fixed:
    case AArch64::LD3WB_4S_fixed:
    case AArch64::LD3WB_8B_fixed:
    case AArch64::LD3WB_8H_fixed:
    case AArch64::LD4R_WB_16B_fixed:
    case AArch64::LD4R_WB_1D_fixed:
    case AArch64::LD4R_WB_2D_fixed:
    case AArch64::LD4R_WB_2S_fixed:
    case AArch64::LD4R_WB_4H_fixed:
    case AArch64::LD4R_WB_4S_fixed:
    case AArch64::LD4R_WB_8B_fixed:
    case AArch64::LD4R_WB_8H_fixed:
    case AArch64::LD4WB_16B_fixed:
    case AArch64::LD4WB_2D_fixed:
    case AArch64::LD4WB_2S_fixed:
    case AArch64::LD4WB_4H_fixed:
    case AArch64::LD4WB_4S_fixed:
    case AArch64::LD4WB_8B_fixed:
    case AArch64::LD4WB_8H_fixed: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::LD1R_WB_16B_register:
    case AArch64::LD1R_WB_1D_register:
    case AArch64::LD1R_WB_2D_register:
    case AArch64::LD1R_WB_2S_register:
    case AArch64::LD1R_WB_4H_register:
    case AArch64::LD1R_WB_4S_register:
    case AArch64::LD1R_WB_8B_register:
    case AArch64::LD1R_WB_8H_register:
    case AArch64::LD1WB_16B_register:
    case AArch64::LD1WB_1D_register:
    case AArch64::LD1WB_2D_register:
    case AArch64::LD1WB_2S_register:
    case AArch64::LD1WB_4H_register:
    case AArch64::LD1WB_4S_register:
    case AArch64::LD1WB_8B_register:
    case AArch64::LD1WB_8H_register:
    case AArch64::LD1x2WB_16B_register:
    case AArch64::LD1x2WB_1D_register:
    case AArch64::LD1x2WB_2D_register:
    case AArch64::LD1x2WB_2S_register:
    case AArch64::LD1x2WB_4H_register:
    case AArch64::LD1x2WB_4S_register:
    case AArch64::LD1x2WB_8B_register:
    case AArch64::LD1x2WB_8H_register:
    case AArch64::LD1x3WB_16B_register:
    case AArch64::LD1x3WB_1D_register:
    case AArch64::LD1x3WB_2D_register:
    case AArch64::LD1x3WB_2S_register:
    case AArch64::LD1x3WB_4H_register:
    case AArch64::LD1x3WB_4S_register:
    case AArch64::LD1x3WB_8B_register:
    case AArch64::LD1x3WB_8H_register:
    case AArch64::LD1x4WB_16B_register:
    case AArch64::LD1x4WB_1D_register:
    case AArch64::LD1x4WB_2D_register:
    case AArch64::LD1x4WB_2S_register:
    case AArch64::LD1x4WB_4H_register:
    case AArch64::LD1x4WB_4S_register:
    case AArch64::LD1x4WB_8B_register:
    case AArch64::LD1x4WB_8H_register:
    case AArch64::LD2R_WB_16B_register:
    case AArch64::LD2R_WB_1D_register:
    case AArch64::LD2R_WB_2D_register:
    case AArch64::LD2R_WB_2S_register:
    case AArch64::LD2R_WB_4H_register:
    case AArch64::LD2R_WB_4S_register:
    case AArch64::LD2R_WB_8B_register:
    case AArch64::LD2R_WB_8H_register:
    case AArch64::LD2WB_16B_register:
    case AArch64::LD2WB_2D_register:
    case AArch64::LD2WB_2S_register:
    case AArch64::LD2WB_4H_register:
    case AArch64::LD2WB_4S_register:
    case AArch64::LD2WB_8B_register:
    case AArch64::LD2WB_8H_register:
    case AArch64::LD3R_WB_16B_register:
    case AArch64::LD3R_WB_1D_register:
    case AArch64::LD3R_WB_2D_register:
    case AArch64::LD3R_WB_2S_register:
    case AArch64::LD3R_WB_4H_register:
    case AArch64::LD3R_WB_4S_register:
    case AArch64::LD3R_WB_8B_register:
    case AArch64::LD3R_WB_8H_register:
    case AArch64::LD3WB_16B_register:
    case AArch64::LD3WB_2D_register:
    case AArch64::LD3WB_2S_register:
    case AArch64::LD3WB_4H_register:
    case AArch64::LD3WB_4S_register:
    case AArch64::LD3WB_8B_register:
    case AArch64::LD3WB_8H_register:
    case AArch64::LD4R_WB_16B_register:
    case AArch64::LD4R_WB_1D_register:
    case AArch64::LD4R_WB_2D_register:
    case AArch64::LD4R_WB_2S_register:
    case AArch64::LD4R_WB_4H_register:
    case AArch64::LD4R_WB_4S_register:
    case AArch64::LD4R_WB_8B_register:
    case AArch64::LD4R_WB_8H_register:
    case AArch64::LD4WB_16B_register:
    case AArch64::LD4WB_2D_register:
    case AArch64::LD4WB_2S_register:
    case AArch64::LD4WB_4H_register:
    case AArch64::LD4WB_4S_register:
    case AArch64::LD4WB_8B_register:
    case AArch64::LD4WB_8H_register: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::LD1LN_WB_D_register:
    case AArch64::LD2LN_WB_D_register:
    case AArch64::LD3LN_WB_D_register:
    case AArch64::LD4LN_WB_D_register: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(1)) << 30;
      break;
    }
    case AArch64::LD1LN_WB_S_register:
    case AArch64::LD2LN_WB_S_register:
    case AArch64::LD3LN_WB_S_register:
    case AArch64::LD4LN_WB_S_register: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(2)) << 29;
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case AArch64::LD1LN_WB_H_register:
    case AArch64::LD2LN_WB_H_register:
    case AArch64::LD3LN_WB_H_register:
    case AArch64::LD4LN_WB_H_register: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(4)) << 28;
      Value |= (op & UINT64_C(3)) << 11;
      break;
    }
    case AArch64::LD1LN_WB_B_register:
    case AArch64::LD2LN_WB_B_register:
    case AArch64::LD3LN_WB_B_register:
    case AArch64::LD4LN_WB_B_register: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(8)) << 27;
      Value |= (op & UINT64_C(7)) << 10;
      break;
    }
    case AArch64::LDPSWx:
    case AArch64::LSFPPair128_LDR:
    case AArch64::LSFPPair128_NonTemp_LDR:
    case AArch64::LSFPPair128_NonTemp_STR:
    case AArch64::LSFPPair128_STR:
    case AArch64::LSFPPair32_LDR:
    case AArch64::LSFPPair32_NonTemp_LDR:
    case AArch64::LSFPPair32_NonTemp_STR:
    case AArch64::LSFPPair32_STR:
    case AArch64::LSFPPair64_LDR:
    case AArch64::LSFPPair64_NonTemp_LDR:
    case AArch64::LSFPPair64_NonTemp_STR:
    case AArch64::LSFPPair64_STR:
    case AArch64::LSPair32_LDR:
    case AArch64::LSPair32_NonTemp_LDR:
    case AArch64::LSPair32_NonTemp_STR:
    case AArch64::LSPair32_STR:
    case AArch64::LSPair64_LDR:
    case AArch64::LSPair64_NonTemp_LDR:
    case AArch64::LSPair64_NonTemp_STR:
    case AArch64::LSPair64_STR: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rt2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 10;
      // op: SImm7
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(127)) << 15;
      break;
    }
    case AArch64::LDAXP_dword:
    case AArch64::LDAXP_word:
    case AArch64::LDXP_dword:
    case AArch64::LDXP_word: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rt2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 10;
      Value = fixLoadStoreExclusive<0,1>(MI, Value);
      break;
    }
    case AArch64::LDRSBw_PostInd:
    case AArch64::LDRSBw_PreInd:
    case AArch64::LDRSBx_PostInd:
    case AArch64::LDRSBx_PreInd:
    case AArch64::LDRSHw_PostInd:
    case AArch64::LDRSHw_PreInd:
    case AArch64::LDRSHx_PostInd:
    case AArch64::LDRSHx_PreInd:
    case AArch64::LDRSWx_PostInd:
    case AArch64::LDRSWx_PreInd:
    case AArch64::LS16_PostInd_LDR:
    case AArch64::LS16_PreInd_LDR:
    case AArch64::LS32_PostInd_LDR:
    case AArch64::LS32_PreInd_LDR:
    case AArch64::LS64_PostInd_LDR:
    case AArch64::LS64_PreInd_LDR:
    case AArch64::LS8_PostInd_LDR:
    case AArch64::LS8_PreInd_LDR:
    case AArch64::LSFP128_PostInd_LDR:
    case AArch64::LSFP128_PreInd_LDR:
    case AArch64::LSFP16_PostInd_LDR:
    case AArch64::LSFP16_PreInd_LDR:
    case AArch64::LSFP32_PostInd_LDR:
    case AArch64::LSFP32_PreInd_LDR:
    case AArch64::LSFP64_PostInd_LDR:
    case AArch64::LSFP64_PreInd_LDR:
    case AArch64::LSFP8_PostInd_LDR:
    case AArch64::LSFP8_PreInd_LDR: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: SImm9
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(511)) << 12;
      break;
    }
    case AArch64::LD1LN_WB_D_fixed:
    case AArch64::LD2LN_WB_D_fixed:
    case AArch64::LD3LN_WB_D_fixed:
    case AArch64::LD4LN_WB_D_fixed: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(1)) << 30;
      break;
    }
    case AArch64::LD1LN_WB_S_fixed:
    case AArch64::LD2LN_WB_S_fixed:
    case AArch64::LD3LN_WB_S_fixed:
    case AArch64::LD4LN_WB_S_fixed: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(2)) << 29;
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case AArch64::LD1LN_WB_H_fixed:
    case AArch64::LD2LN_WB_H_fixed:
    case AArch64::LD3LN_WB_H_fixed:
    case AArch64::LD4LN_WB_H_fixed: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(4)) << 28;
      Value |= (op & UINT64_C(3)) << 11;
      break;
    }
    case AArch64::LD1LN_WB_B_fixed:
    case AArch64::LD2LN_WB_B_fixed:
    case AArch64::LD3LN_WB_B_fixed:
    case AArch64::LD4LN_WB_B_fixed: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(5), Fixups);
      Value |= (op & UINT64_C(8)) << 27;
      Value |= (op & UINT64_C(7)) << 10;
      break;
    }
    case AArch64::LDPSWx_PostInd:
    case AArch64::LDPSWx_PreInd:
    case AArch64::LSFPPair128_PostInd_LDR:
    case AArch64::LSFPPair128_PreInd_LDR:
    case AArch64::LSFPPair32_PostInd_LDR:
    case AArch64::LSFPPair32_PreInd_LDR:
    case AArch64::LSFPPair64_PostInd_LDR:
    case AArch64::LSFPPair64_PreInd_LDR:
    case AArch64::LSPair32_PostInd_LDR:
    case AArch64::LSPair32_PreInd_LDR:
    case AArch64::LSPair64_PostInd_LDR:
    case AArch64::LSPair64_PreInd_LDR: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rt2
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 10;
      // op: SImm7
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(127)) << 15;
      break;
    }
    case AArch64::MRSxi: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= op & UINT64_C(31);
      // op: SysReg
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(65535)) << 5;
      break;
    }
    case AArch64::ST1_16B:
    case AArch64::ST1_1D:
    case AArch64::ST1_2D:
    case AArch64::ST1_2S:
    case AArch64::ST1_4H:
    case AArch64::ST1_4S:
    case AArch64::ST1_8B:
    case AArch64::ST1_8H:
    case AArch64::ST1x2_16B:
    case AArch64::ST1x2_1D:
    case AArch64::ST1x2_2D:
    case AArch64::ST1x2_2S:
    case AArch64::ST1x2_4H:
    case AArch64::ST1x2_4S:
    case AArch64::ST1x2_8B:
    case AArch64::ST1x2_8H:
    case AArch64::ST1x3_16B:
    case AArch64::ST1x3_1D:
    case AArch64::ST1x3_2D:
    case AArch64::ST1x3_2S:
    case AArch64::ST1x3_4H:
    case AArch64::ST1x3_4S:
    case AArch64::ST1x3_8B:
    case AArch64::ST1x3_8H:
    case AArch64::ST1x4_16B:
    case AArch64::ST1x4_1D:
    case AArch64::ST1x4_2D:
    case AArch64::ST1x4_2S:
    case AArch64::ST1x4_4H:
    case AArch64::ST1x4_4S:
    case AArch64::ST1x4_8B:
    case AArch64::ST1x4_8H:
    case AArch64::ST2_16B:
    case AArch64::ST2_2D:
    case AArch64::ST2_2S:
    case AArch64::ST2_4H:
    case AArch64::ST2_4S:
    case AArch64::ST2_8B:
    case AArch64::ST2_8H:
    case AArch64::ST3_16B:
    case AArch64::ST3_2D:
    case AArch64::ST3_2S:
    case AArch64::ST3_4H:
    case AArch64::ST3_4S:
    case AArch64::ST3_8B:
    case AArch64::ST3_8H:
    case AArch64::ST4_16B:
    case AArch64::ST4_2D:
    case AArch64::ST4_2S:
    case AArch64::ST4_4H:
    case AArch64::ST4_4S:
    case AArch64::ST4_8B:
    case AArch64::ST4_8H: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::ST1LN_D:
    case AArch64::ST2LN_D:
    case AArch64::ST3LN_D:
    case AArch64::ST4LN_D: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(1)) << 30;
      break;
    }
    case AArch64::ST1LN_S:
    case AArch64::ST2LN_S:
    case AArch64::ST3LN_S:
    case AArch64::ST4LN_S: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(2)) << 29;
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case AArch64::ST1LN_H:
    case AArch64::ST2LN_H:
    case AArch64::ST3LN_H:
    case AArch64::ST4LN_H: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(4)) << 28;
      Value |= (op & UINT64_C(3)) << 11;
      break;
    }
    case AArch64::ST1LN_B:
    case AArch64::ST2LN_B:
    case AArch64::ST3LN_B:
    case AArch64::ST4LN_B: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(8)) << 27;
      Value |= (op & UINT64_C(7)) << 10;
      break;
    }
    case AArch64::STLXR_byte:
    case AArch64::STLXR_dword:
    case AArch64::STLXR_hword:
    case AArch64::STLXR_word:
    case AArch64::STXR_byte:
    case AArch64::STXR_dword:
    case AArch64::STXR_hword:
    case AArch64::STXR_word: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rs
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      Value = fixLoadStoreExclusive<1,0>(MI, Value);
      break;
    }
    case AArch64::LS16_PostInd_STR:
    case AArch64::LS16_PreInd_STR:
    case AArch64::LS32_PostInd_STR:
    case AArch64::LS32_PreInd_STR:
    case AArch64::LS64_PostInd_STR:
    case AArch64::LS64_PreInd_STR:
    case AArch64::LS8_PostInd_STR:
    case AArch64::LS8_PreInd_STR:
    case AArch64::LSFP128_PostInd_STR:
    case AArch64::LSFP128_PreInd_STR:
    case AArch64::LSFP16_PostInd_STR:
    case AArch64::LSFP16_PreInd_STR:
    case AArch64::LSFP32_PostInd_STR:
    case AArch64::LSFP32_PreInd_STR:
    case AArch64::LSFP64_PostInd_STR:
    case AArch64::LSFP64_PreInd_STR:
    case AArch64::LSFP8_PostInd_STR:
    case AArch64::LSFP8_PreInd_STR: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: SImm9
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(511)) << 12;
      break;
    }
    case AArch64::STLXP_dword:
    case AArch64::STLXP_word:
    case AArch64::STXP_dword:
    case AArch64::STXP_word: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rs
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: Rt2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 10;
      break;
    }
    case AArch64::LSFPPair128_PostInd_STR:
    case AArch64::LSFPPair128_PreInd_STR:
    case AArch64::LSFPPair32_PostInd_STR:
    case AArch64::LSFPPair32_PreInd_STR:
    case AArch64::LSFPPair64_PostInd_STR:
    case AArch64::LSFPPair64_PreInd_STR:
    case AArch64::LSPair32_PostInd_STR:
    case AArch64::LSPair32_PreInd_STR:
    case AArch64::LSPair64_PostInd_STR:
    case AArch64::LSPair64_PreInd_STR: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rt2
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 10;
      // op: SImm7
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(127)) << 15;
      break;
    }
    case AArch64::ATix:
    case AArch64::DCix:
    case AArch64::ICix:
    case AArch64::TLBIix: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: SysOp
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(16383)) << 5;
      break;
    }
    case AArch64::MSRix: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= op & UINT64_C(31);
      // op: SysReg
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(65535)) << 5;
      break;
    }
    case AArch64::ST1WB_16B_fixed:
    case AArch64::ST1WB_1D_fixed:
    case AArch64::ST1WB_2D_fixed:
    case AArch64::ST1WB_2S_fixed:
    case AArch64::ST1WB_4H_fixed:
    case AArch64::ST1WB_4S_fixed:
    case AArch64::ST1WB_8B_fixed:
    case AArch64::ST1WB_8H_fixed:
    case AArch64::ST1x2WB_16B_fixed:
    case AArch64::ST1x2WB_1D_fixed:
    case AArch64::ST1x2WB_2D_fixed:
    case AArch64::ST1x2WB_2S_fixed:
    case AArch64::ST1x2WB_4H_fixed:
    case AArch64::ST1x2WB_4S_fixed:
    case AArch64::ST1x2WB_8B_fixed:
    case AArch64::ST1x2WB_8H_fixed:
    case AArch64::ST1x3WB_16B_fixed:
    case AArch64::ST1x3WB_1D_fixed:
    case AArch64::ST1x3WB_2D_fixed:
    case AArch64::ST1x3WB_2S_fixed:
    case AArch64::ST1x3WB_4H_fixed:
    case AArch64::ST1x3WB_4S_fixed:
    case AArch64::ST1x3WB_8B_fixed:
    case AArch64::ST1x3WB_8H_fixed:
    case AArch64::ST1x4WB_16B_fixed:
    case AArch64::ST1x4WB_1D_fixed:
    case AArch64::ST1x4WB_2D_fixed:
    case AArch64::ST1x4WB_2S_fixed:
    case AArch64::ST1x4WB_4H_fixed:
    case AArch64::ST1x4WB_4S_fixed:
    case AArch64::ST1x4WB_8B_fixed:
    case AArch64::ST1x4WB_8H_fixed:
    case AArch64::ST2WB_16B_fixed:
    case AArch64::ST2WB_2D_fixed:
    case AArch64::ST2WB_2S_fixed:
    case AArch64::ST2WB_4H_fixed:
    case AArch64::ST2WB_4S_fixed:
    case AArch64::ST2WB_8B_fixed:
    case AArch64::ST2WB_8H_fixed:
    case AArch64::ST3WB_16B_fixed:
    case AArch64::ST3WB_2D_fixed:
    case AArch64::ST3WB_2S_fixed:
    case AArch64::ST3WB_4H_fixed:
    case AArch64::ST3WB_4S_fixed:
    case AArch64::ST3WB_8B_fixed:
    case AArch64::ST3WB_8H_fixed:
    case AArch64::ST4WB_16B_fixed:
    case AArch64::ST4WB_2D_fixed:
    case AArch64::ST4WB_2S_fixed:
    case AArch64::ST4WB_4H_fixed:
    case AArch64::ST4WB_4S_fixed:
    case AArch64::ST4WB_8B_fixed:
    case AArch64::ST4WB_8H_fixed: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      break;
    }
    case AArch64::ST1WB_16B_register:
    case AArch64::ST1WB_1D_register:
    case AArch64::ST1WB_2D_register:
    case AArch64::ST1WB_2S_register:
    case AArch64::ST1WB_4H_register:
    case AArch64::ST1WB_4S_register:
    case AArch64::ST1WB_8B_register:
    case AArch64::ST1WB_8H_register:
    case AArch64::ST1x2WB_16B_register:
    case AArch64::ST1x2WB_1D_register:
    case AArch64::ST1x2WB_2D_register:
    case AArch64::ST1x2WB_2S_register:
    case AArch64::ST1x2WB_4H_register:
    case AArch64::ST1x2WB_4S_register:
    case AArch64::ST1x2WB_8B_register:
    case AArch64::ST1x2WB_8H_register:
    case AArch64::ST1x3WB_16B_register:
    case AArch64::ST1x3WB_1D_register:
    case AArch64::ST1x3WB_2D_register:
    case AArch64::ST1x3WB_2S_register:
    case AArch64::ST1x3WB_4H_register:
    case AArch64::ST1x3WB_4S_register:
    case AArch64::ST1x3WB_8B_register:
    case AArch64::ST1x3WB_8H_register:
    case AArch64::ST1x4WB_16B_register:
    case AArch64::ST1x4WB_1D_register:
    case AArch64::ST1x4WB_2D_register:
    case AArch64::ST1x4WB_2S_register:
    case AArch64::ST1x4WB_4H_register:
    case AArch64::ST1x4WB_4S_register:
    case AArch64::ST1x4WB_8B_register:
    case AArch64::ST1x4WB_8H_register:
    case AArch64::ST2WB_16B_register:
    case AArch64::ST2WB_2D_register:
    case AArch64::ST2WB_2S_register:
    case AArch64::ST2WB_4H_register:
    case AArch64::ST2WB_4S_register:
    case AArch64::ST2WB_8B_register:
    case AArch64::ST2WB_8H_register:
    case AArch64::ST3WB_16B_register:
    case AArch64::ST3WB_2D_register:
    case AArch64::ST3WB_2S_register:
    case AArch64::ST3WB_4H_register:
    case AArch64::ST3WB_4S_register:
    case AArch64::ST3WB_8B_register:
    case AArch64::ST3WB_8H_register:
    case AArch64::ST4WB_16B_register:
    case AArch64::ST4WB_2D_register:
    case AArch64::ST4WB_2S_register:
    case AArch64::ST4WB_4H_register:
    case AArch64::ST4WB_4S_register:
    case AArch64::ST4WB_8B_register:
    case AArch64::ST4WB_8H_register: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      break;
    }
    case AArch64::ST1LN_WB_D_register:
    case AArch64::ST2LN_WB_D_register:
    case AArch64::ST3LN_WB_D_register:
    case AArch64::ST4LN_WB_D_register: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 30;
      break;
    }
    case AArch64::ST1LN_WB_S_register:
    case AArch64::ST2LN_WB_S_register:
    case AArch64::ST3LN_WB_S_register:
    case AArch64::ST4LN_WB_S_register: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(2)) << 29;
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case AArch64::ST1LN_WB_H_register:
    case AArch64::ST2LN_WB_H_register:
    case AArch64::ST3LN_WB_H_register:
    case AArch64::ST4LN_WB_H_register: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(4)) << 28;
      Value |= (op & UINT64_C(3)) << 11;
      break;
    }
    case AArch64::ST1LN_WB_B_register:
    case AArch64::ST2LN_WB_B_register:
    case AArch64::ST3LN_WB_B_register:
    case AArch64::ST4LN_WB_B_register: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: Rm
      op = getMachineOpValue(MI, MI.getOperand(2), Fixups);
      Value |= (op & UINT64_C(31)) << 16;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(8)) << 27;
      Value |= (op & UINT64_C(7)) << 10;
      break;
    }
    case AArch64::ST1LN_WB_D_fixed:
    case AArch64::ST2LN_WB_D_fixed:
    case AArch64::ST3LN_WB_D_fixed:
    case AArch64::ST4LN_WB_D_fixed: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(1)) << 30;
      break;
    }
    case AArch64::ST1LN_WB_S_fixed:
    case AArch64::ST2LN_WB_S_fixed:
    case AArch64::ST3LN_WB_S_fixed:
    case AArch64::ST4LN_WB_S_fixed: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(2)) << 29;
      Value |= (op & UINT64_C(1)) << 12;
      break;
    }
    case AArch64::ST1LN_WB_H_fixed:
    case AArch64::ST2LN_WB_H_fixed:
    case AArch64::ST3LN_WB_H_fixed:
    case AArch64::ST4LN_WB_H_fixed: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(4)) << 28;
      Value |= (op & UINT64_C(3)) << 11;
      break;
    }
    case AArch64::ST1LN_WB_B_fixed:
    case AArch64::ST2LN_WB_B_fixed:
    case AArch64::ST3LN_WB_B_fixed:
    case AArch64::ST4LN_WB_B_fixed: {
      // op: Rt
      op = getMachineOpValue(MI, MI.getOperand(3), Fixups);
      Value |= op & UINT64_C(31);
      // op: Rn
      op = getMachineOpValue(MI, MI.getOperand(1), Fixups);
      Value |= (op & UINT64_C(31)) << 5;
      // op: lane
      op = getMachineOpValue(MI, MI.getOperand(4), Fixups);
      Value |= (op & UINT64_C(8)) << 27;
      Value |= (op & UINT64_C(7)) << 10;
      break;
    }
    case AArch64::ICi:
    case AArch64::TLBIi: {
      // op: SysOp
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(16383)) << 5;
      break;
    }
    case AArch64::BRKi:
    case AArch64::DCPS1i:
    case AArch64::DCPS2i:
    case AArch64::DCPS3i:
    case AArch64::HLTi:
    case AArch64::HVCi:
    case AArch64::SMCi:
    case AArch64::SVCi: {
      // op: UImm16
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(65535)) << 5;
      break;
    }
    case AArch64::HINTi: {
      // op: UImm7
      op = getMachineOpValue(MI, MI.getOperand(0), Fixups);
      Value |= (op & UINT64_C(127)) << 5;
      break;
    }
  default:
    std::string msg;
    raw_string_ostream Msg(msg);
    Msg << "Not supported instr: " << MI;
    report_fatal_error(Msg.str());
  }
  return Value;
}

