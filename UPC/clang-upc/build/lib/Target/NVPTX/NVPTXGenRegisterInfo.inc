/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register Enum Values                                                 *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_ENUM
#undef GET_REGINFO_ENUM
namespace llvm {

class MCRegisterClass;
extern const MCRegisterClass NVPTXMCRegisterClasses[];

namespace NVPTX {
enum {
  NoRegister,
  VRDepot = 1,
  VRFrame = 2,
  VRFrameLocal = 3,
  F0 = 4,
  F1 = 5,
  F2 = 6,
  F3 = 7,
  F4 = 8,
  FL0 = 9,
  FL1 = 10,
  FL2 = 11,
  FL3 = 12,
  FL4 = 13,
  P0 = 14,
  P1 = 15,
  P2 = 16,
  P3 = 17,
  P4 = 18,
  R0 = 19,
  R1 = 20,
  R2 = 21,
  R3 = 22,
  R4 = 23,
  RL0 = 24,
  RL1 = 25,
  RL2 = 26,
  RL3 = 27,
  RL4 = 28,
  RS0 = 29,
  RS1 = 30,
  RS2 = 31,
  RS3 = 32,
  RS4 = 33,
  da0 = 34,
  da1 = 35,
  da2 = 36,
  da3 = 37,
  da4 = 38,
  fa0 = 39,
  fa1 = 40,
  fa2 = 41,
  fa3 = 42,
  fa4 = 43,
  ia0 = 44,
  ia1 = 45,
  ia2 = 46,
  ia3 = 47,
  ia4 = 48,
  la0 = 49,
  la1 = 50,
  la2 = 51,
  la3 = 52,
  la4 = 53,
  NUM_TARGET_REGS 	// 54
};
}

// Register classes
namespace NVPTX {
enum {
  Int1RegsRegClassID = 0,
  Int16RegsRegClassID = 1,
  Float32ArgRegsRegClassID = 2,
  Float32RegsRegClassID = 3,
  Int32ArgRegsRegClassID = 4,
  Int32RegsRegClassID = 5,
  SpecialRegsRegClassID = 6,
  Float64ArgRegsRegClassID = 7,
  Float64RegsRegClassID = 8,
  Int64ArgRegsRegClassID = 9,
  Int64RegsRegClassID = 10
  };
}
} // End llvm namespace 
#endif // GET_REGINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*MC Register Information                                                     *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_MC_DESC
#undef GET_REGINFO_MC_DESC
namespace llvm {

extern const MCPhysReg NVPTXRegDiffLists[] = {
  /* 0 */ 65535, 0,
};

extern const uint16_t NVPTXSubRegIdxLists[] = {
  /* 0 */ 0,
};

extern const MCRegisterInfo::SubRegCoveredBits NVPTXSubRegIdxRanges[] = {
  { 65535, 65535 },
};

extern const char NVPTXRegStrings[] = {
  /* 0 */ 'F', '0', 0,
  /* 3 */ 'F', 'L', '0', 0,
  /* 7 */ 'R', 'L', '0', 0,
  /* 11 */ 'P', '0', 0,
  /* 14 */ 'R', '0', 0,
  /* 17 */ 'R', 'S', '0', 0,
  /* 21 */ 'd', 'a', '0', 0,
  /* 25 */ 'f', 'a', '0', 0,
  /* 29 */ 'i', 'a', '0', 0,
  /* 33 */ 'l', 'a', '0', 0,
  /* 37 */ 'F', '1', 0,
  /* 40 */ 'F', 'L', '1', 0,
  /* 44 */ 'R', 'L', '1', 0,
  /* 48 */ 'P', '1', 0,
  /* 51 */ 'R', '1', 0,
  /* 54 */ 'R', 'S', '1', 0,
  /* 58 */ 'd', 'a', '1', 0,
  /* 62 */ 'f', 'a', '1', 0,
  /* 66 */ 'i', 'a', '1', 0,
  /* 70 */ 'l', 'a', '1', 0,
  /* 74 */ 'F', '2', 0,
  /* 77 */ 'F', 'L', '2', 0,
  /* 81 */ 'R', 'L', '2', 0,
  /* 85 */ 'P', '2', 0,
  /* 88 */ 'R', '2', 0,
  /* 91 */ 'R', 'S', '2', 0,
  /* 95 */ 'd', 'a', '2', 0,
  /* 99 */ 'f', 'a', '2', 0,
  /* 103 */ 'i', 'a', '2', 0,
  /* 107 */ 'l', 'a', '2', 0,
  /* 111 */ 'F', '3', 0,
  /* 114 */ 'F', 'L', '3', 0,
  /* 118 */ 'R', 'L', '3', 0,
  /* 122 */ 'P', '3', 0,
  /* 125 */ 'R', '3', 0,
  /* 128 */ 'R', 'S', '3', 0,
  /* 132 */ 'd', 'a', '3', 0,
  /* 136 */ 'f', 'a', '3', 0,
  /* 140 */ 'i', 'a', '3', 0,
  /* 144 */ 'l', 'a', '3', 0,
  /* 148 */ 'F', '4', 0,
  /* 151 */ 'F', 'L', '4', 0,
  /* 155 */ 'R', 'L', '4', 0,
  /* 159 */ 'P', '4', 0,
  /* 162 */ 'R', '4', 0,
  /* 165 */ 'R', 'S', '4', 0,
  /* 169 */ 'd', 'a', '4', 0,
  /* 173 */ 'f', 'a', '4', 0,
  /* 177 */ 'i', 'a', '4', 0,
  /* 181 */ 'l', 'a', '4', 0,
  /* 185 */ 'V', 'R', 'F', 'r', 'a', 'm', 'e', 0,
  /* 193 */ 'V', 'R', 'F', 'r', 'a', 'm', 'e', 'L', 'o', 'c', 'a', 'l', 0,
  /* 206 */ 'V', 'R', 'D', 'e', 'p', 'o', 't', 0,
};

extern const MCRegisterDesc NVPTXRegDesc[] = { // Descriptors
  { 2, 0, 0, 0, 0 },
  { 206, 1, 1, 0, 1 },
  { 185, 1, 1, 0, 1 },
  { 193, 1, 1, 0, 1 },
  { 0, 1, 1, 0, 1 },
  { 37, 1, 1, 0, 1 },
  { 74, 1, 1, 0, 1 },
  { 111, 1, 1, 0, 1 },
  { 148, 1, 1, 0, 1 },
  { 3, 1, 1, 0, 1 },
  { 40, 1, 1, 0, 1 },
  { 77, 1, 1, 0, 1 },
  { 114, 1, 1, 0, 1 },
  { 151, 1, 1, 0, 1 },
  { 11, 1, 1, 0, 1 },
  { 48, 1, 1, 0, 1 },
  { 85, 1, 1, 0, 1 },
  { 122, 1, 1, 0, 1 },
  { 159, 1, 1, 0, 1 },
  { 14, 1, 1, 0, 1 },
  { 51, 1, 1, 0, 1 },
  { 88, 1, 1, 0, 1 },
  { 125, 1, 1, 0, 1 },
  { 162, 1, 1, 0, 1 },
  { 7, 1, 1, 0, 1 },
  { 44, 1, 1, 0, 1 },
  { 81, 1, 1, 0, 1 },
  { 118, 1, 1, 0, 1 },
  { 155, 1, 1, 0, 1 },
  { 17, 1, 1, 0, 1 },
  { 54, 1, 1, 0, 1 },
  { 91, 1, 1, 0, 1 },
  { 128, 1, 1, 0, 1 },
  { 165, 1, 1, 0, 1 },
  { 21, 1, 1, 0, 1 },
  { 58, 1, 1, 0, 1 },
  { 95, 1, 1, 0, 1 },
  { 132, 1, 1, 0, 1 },
  { 169, 1, 1, 0, 1 },
  { 25, 1, 1, 0, 1 },
  { 62, 1, 1, 0, 1 },
  { 99, 1, 1, 0, 1 },
  { 136, 1, 1, 0, 1 },
  { 173, 1, 1, 0, 1 },
  { 29, 1, 1, 0, 1 },
  { 66, 1, 1, 0, 1 },
  { 103, 1, 1, 0, 1 },
  { 140, 1, 1, 0, 1 },
  { 177, 1, 1, 0, 1 },
  { 33, 1, 1, 0, 1 },
  { 70, 1, 1, 0, 1 },
  { 107, 1, 1, 0, 1 },
  { 144, 1, 1, 0, 1 },
  { 181, 1, 1, 0, 1 },
};

extern const uint16_t NVPTXRegUnitRoots[][2] = {
  { NVPTX::VRDepot },
  { NVPTX::VRFrame },
  { NVPTX::VRFrameLocal },
  { NVPTX::F0 },
  { NVPTX::F1 },
  { NVPTX::F2 },
  { NVPTX::F3 },
  { NVPTX::F4 },
  { NVPTX::FL0 },
  { NVPTX::FL1 },
  { NVPTX::FL2 },
  { NVPTX::FL3 },
  { NVPTX::FL4 },
  { NVPTX::P0 },
  { NVPTX::P1 },
  { NVPTX::P2 },
  { NVPTX::P3 },
  { NVPTX::P4 },
  { NVPTX::R0 },
  { NVPTX::R1 },
  { NVPTX::R2 },
  { NVPTX::R3 },
  { NVPTX::R4 },
  { NVPTX::RL0 },
  { NVPTX::RL1 },
  { NVPTX::RL2 },
  { NVPTX::RL3 },
  { NVPTX::RL4 },
  { NVPTX::RS0 },
  { NVPTX::RS1 },
  { NVPTX::RS2 },
  { NVPTX::RS3 },
  { NVPTX::RS4 },
  { NVPTX::da0 },
  { NVPTX::da1 },
  { NVPTX::da2 },
  { NVPTX::da3 },
  { NVPTX::da4 },
  { NVPTX::fa0 },
  { NVPTX::fa1 },
  { NVPTX::fa2 },
  { NVPTX::fa3 },
  { NVPTX::fa4 },
  { NVPTX::ia0 },
  { NVPTX::ia1 },
  { NVPTX::ia2 },
  { NVPTX::ia3 },
  { NVPTX::ia4 },
  { NVPTX::la0 },
  { NVPTX::la1 },
  { NVPTX::la2 },
  { NVPTX::la3 },
  { NVPTX::la4 },
};

namespace {     // Register classes...
  // Int1Regs Register Class...
  const uint16_t Int1Regs[] = {
    NVPTX::P0, NVPTX::P1, NVPTX::P2, NVPTX::P3, NVPTX::P4, 
  };

  // Int1Regs Bit set.
  const uint8_t Int1RegsBits[] = {
    0x00, 0xc0, 0x07, 
  };

  // Int16Regs Register Class...
  const uint16_t Int16Regs[] = {
    NVPTX::RS0, NVPTX::RS1, NVPTX::RS2, NVPTX::RS3, NVPTX::RS4, 
  };

  // Int16Regs Bit set.
  const uint8_t Int16RegsBits[] = {
    0x00, 0x00, 0x00, 0xe0, 0x03, 
  };

  // Float32ArgRegs Register Class...
  const uint16_t Float32ArgRegs[] = {
    NVPTX::fa0, NVPTX::fa1, NVPTX::fa2, NVPTX::fa3, NVPTX::fa4, 
  };

  // Float32ArgRegs Bit set.
  const uint8_t Float32ArgRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x80, 0x0f, 
  };

  // Float32Regs Register Class...
  const uint16_t Float32Regs[] = {
    NVPTX::F0, NVPTX::F1, NVPTX::F2, NVPTX::F3, NVPTX::F4, 
  };

  // Float32Regs Bit set.
  const uint8_t Float32RegsBits[] = {
    0xf0, 0x01, 
  };

  // Int32ArgRegs Register Class...
  const uint16_t Int32ArgRegs[] = {
    NVPTX::ia0, NVPTX::ia1, NVPTX::ia2, NVPTX::ia3, NVPTX::ia4, 
  };

  // Int32ArgRegs Bit set.
  const uint8_t Int32ArgRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 
  };

  // Int32Regs Register Class...
  const uint16_t Int32Regs[] = {
    NVPTX::R0, NVPTX::R1, NVPTX::R2, NVPTX::R3, NVPTX::R4, 
  };

  // Int32Regs Bit set.
  const uint8_t Int32RegsBits[] = {
    0x00, 0x00, 0xf8, 
  };

  // SpecialRegs Register Class...
  const uint16_t SpecialRegs[] = {
    NVPTX::VRFrame, NVPTX::VRDepot, 
  };

  // SpecialRegs Bit set.
  const uint8_t SpecialRegsBits[] = {
    0x06, 
  };

  // Float64ArgRegs Register Class...
  const uint16_t Float64ArgRegs[] = {
    NVPTX::da0, NVPTX::da1, NVPTX::da2, NVPTX::da3, NVPTX::da4, 
  };

  // Float64ArgRegs Bit set.
  const uint8_t Float64ArgRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x7c, 
  };

  // Float64Regs Register Class...
  const uint16_t Float64Regs[] = {
    NVPTX::FL0, NVPTX::FL1, NVPTX::FL2, NVPTX::FL3, NVPTX::FL4, 
  };

  // Float64Regs Bit set.
  const uint8_t Float64RegsBits[] = {
    0x00, 0x3e, 
  };

  // Int64ArgRegs Register Class...
  const uint16_t Int64ArgRegs[] = {
    NVPTX::la0, NVPTX::la1, NVPTX::la2, NVPTX::la3, NVPTX::la4, 
  };

  // Int64ArgRegs Bit set.
  const uint8_t Int64ArgRegsBits[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 
  };

  // Int64Regs Register Class...
  const uint16_t Int64Regs[] = {
    NVPTX::RL0, NVPTX::RL1, NVPTX::RL2, NVPTX::RL3, NVPTX::RL4, 
  };

  // Int64Regs Bit set.
  const uint8_t Int64RegsBits[] = {
    0x00, 0x00, 0x00, 0x1f, 
  };

}

extern const MCRegisterClass NVPTXMCRegisterClasses[] = {
  { "Int1Regs", Int1Regs, Int1RegsBits, 5, sizeof(Int1RegsBits), NVPTX::Int1RegsRegClassID, 0, 1, 1, 1 },
  { "Int16Regs", Int16Regs, Int16RegsBits, 5, sizeof(Int16RegsBits), NVPTX::Int16RegsRegClassID, 2, 2, 1, 1 },
  { "Float32ArgRegs", Float32ArgRegs, Float32ArgRegsBits, 5, sizeof(Float32ArgRegsBits), NVPTX::Float32ArgRegsRegClassID, 4, 4, 1, 1 },
  { "Float32Regs", Float32Regs, Float32RegsBits, 5, sizeof(Float32RegsBits), NVPTX::Float32RegsRegClassID, 4, 4, 1, 1 },
  { "Int32ArgRegs", Int32ArgRegs, Int32ArgRegsBits, 5, sizeof(Int32ArgRegsBits), NVPTX::Int32ArgRegsRegClassID, 4, 4, 1, 1 },
  { "Int32Regs", Int32Regs, Int32RegsBits, 5, sizeof(Int32RegsBits), NVPTX::Int32RegsRegClassID, 4, 4, 1, 1 },
  { "SpecialRegs", SpecialRegs, SpecialRegsBits, 2, sizeof(SpecialRegsBits), NVPTX::SpecialRegsRegClassID, 4, 4, 1, 1 },
  { "Float64ArgRegs", Float64ArgRegs, Float64ArgRegsBits, 5, sizeof(Float64ArgRegsBits), NVPTX::Float64ArgRegsRegClassID, 8, 8, 1, 1 },
  { "Float64Regs", Float64Regs, Float64RegsBits, 5, sizeof(Float64RegsBits), NVPTX::Float64RegsRegClassID, 8, 8, 1, 1 },
  { "Int64ArgRegs", Int64ArgRegs, Int64ArgRegsBits, 5, sizeof(Int64ArgRegsBits), NVPTX::Int64ArgRegsRegClassID, 8, 8, 1, 1 },
  { "Int64Regs", Int64Regs, Int64RegsBits, 5, sizeof(Int64RegsBits), NVPTX::Int64RegsRegClassID, 8, 8, 1, 1 },
};

extern const uint16_t NVPTXRegEncodingTable[] = {
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
};
static inline void InitNVPTXMCRegisterInfo(MCRegisterInfo *RI, unsigned RA, unsigned DwarfFlavour = 0, unsigned EHFlavour = 0, unsigned PC = 0) {
  RI->InitMCRegisterInfo(NVPTXRegDesc, 54, RA, PC, NVPTXMCRegisterClasses, 11, NVPTXRegUnitRoots, 53, NVPTXRegDiffLists, NVPTXRegStrings, NVPTXSubRegIdxLists, 1,
NVPTXSubRegIdxRanges,   NVPTXRegEncodingTable);

}

} // End llvm namespace 
#endif // GET_REGINFO_MC_DESC

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Register Information Header Fragment                                        *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_HEADER
#undef GET_REGINFO_HEADER
#include "llvm/Target/TargetRegisterInfo.h"

namespace llvm {

struct NVPTXGenRegisterInfo : public TargetRegisterInfo {
  explicit NVPTXGenRegisterInfo(unsigned RA, unsigned D = 0, unsigned E = 0, unsigned PC = 0);
  virtual bool needsStackRealignment(const MachineFunction &) const
     { return false; }
  virtual const RegClassWeight &getRegClassWeight(const TargetRegisterClass *RC) const;
  virtual unsigned getRegUnitWeight(unsigned RegUnit) const;
  virtual unsigned getNumRegPressureSets() const;
  virtual const char *getRegPressureSetName(unsigned Idx) const;
  virtual unsigned getRegPressureSetLimit(unsigned Idx) const;
  virtual const int *getRegClassPressureSets(const TargetRegisterClass *RC) const;
  virtual const int *getRegUnitPressureSets(unsigned RegUnit) const;
};

namespace NVPTX { // Register classes
  extern const TargetRegisterClass Int1RegsRegClass;
  extern const TargetRegisterClass Int16RegsRegClass;
  extern const TargetRegisterClass Float32ArgRegsRegClass;
  extern const TargetRegisterClass Float32RegsRegClass;
  extern const TargetRegisterClass Int32ArgRegsRegClass;
  extern const TargetRegisterClass Int32RegsRegClass;
  extern const TargetRegisterClass SpecialRegsRegClass;
  extern const TargetRegisterClass Float64ArgRegsRegClass;
  extern const TargetRegisterClass Float64RegsRegClass;
  extern const TargetRegisterClass Int64ArgRegsRegClass;
  extern const TargetRegisterClass Int64RegsRegClass;
} // end of namespace NVPTX

} // End llvm namespace 
#endif // GET_REGINFO_HEADER

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Register and Register Classes Information                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_REGINFO_TARGET_DESC
#undef GET_REGINFO_TARGET_DESC
namespace llvm {

extern const MCRegisterClass NVPTXMCRegisterClasses[];

static const MVT::SimpleValueType VTLists[] = {
  /* 0 */ MVT::i1, MVT::Other,
  /* 2 */ MVT::i16, MVT::Other,
  /* 4 */ MVT::i32, MVT::Other,
  /* 6 */ MVT::i64, MVT::Other,
  /* 8 */ MVT::f32, MVT::Other,
  /* 10 */ MVT::f64, MVT::Other,
};

static const char *const SubRegIndexNameTable[] = { "" };


static const unsigned SubRegIndexLaneMaskTable[] = {
  ~0u,
 };



static const TargetRegisterClass *const NullRegClasses[] = { NULL };

static const uint32_t Int1RegsSubClassMask[] = {
  0x00000001, 
};

static const uint32_t Int16RegsSubClassMask[] = {
  0x00000002, 
};

static const uint32_t Float32ArgRegsSubClassMask[] = {
  0x00000004, 
};

static const uint32_t Float32RegsSubClassMask[] = {
  0x00000008, 
};

static const uint32_t Int32ArgRegsSubClassMask[] = {
  0x00000010, 
};

static const uint32_t Int32RegsSubClassMask[] = {
  0x00000020, 
};

static const uint32_t SpecialRegsSubClassMask[] = {
  0x00000040, 
};

static const uint32_t Float64ArgRegsSubClassMask[] = {
  0x00000080, 
};

static const uint32_t Float64RegsSubClassMask[] = {
  0x00000100, 
};

static const uint32_t Int64ArgRegsSubClassMask[] = {
  0x00000200, 
};

static const uint32_t Int64RegsSubClassMask[] = {
  0x00000400, 
};

static const uint16_t SuperRegIdxSeqs[] = {
  /* 0 */ 0,
};

namespace NVPTX {   // Register class instances
  extern const TargetRegisterClass Int1RegsRegClass = {
    &NVPTXMCRegisterClasses[Int1RegsRegClassID],
    VTLists + 0,
    Int1RegsSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass Int16RegsRegClass = {
    &NVPTXMCRegisterClasses[Int16RegsRegClassID],
    VTLists + 2,
    Int16RegsSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass Float32ArgRegsRegClass = {
    &NVPTXMCRegisterClasses[Float32ArgRegsRegClassID],
    VTLists + 8,
    Float32ArgRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass Float32RegsRegClass = {
    &NVPTXMCRegisterClasses[Float32RegsRegClassID],
    VTLists + 8,
    Float32RegsSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass Int32ArgRegsRegClass = {
    &NVPTXMCRegisterClasses[Int32ArgRegsRegClassID],
    VTLists + 4,
    Int32ArgRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass Int32RegsRegClass = {
    &NVPTXMCRegisterClasses[Int32RegsRegClassID],
    VTLists + 4,
    Int32RegsSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass SpecialRegsRegClass = {
    &NVPTXMCRegisterClasses[SpecialRegsRegClassID],
    VTLists + 4,
    SpecialRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass Float64ArgRegsRegClass = {
    &NVPTXMCRegisterClasses[Float64ArgRegsRegClassID],
    VTLists + 10,
    Float64ArgRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass Float64RegsRegClass = {
    &NVPTXMCRegisterClasses[Float64RegsRegClassID],
    VTLists + 10,
    Float64RegsSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass Int64ArgRegsRegClass = {
    &NVPTXMCRegisterClasses[Int64ArgRegsRegClassID],
    VTLists + 6,
    Int64ArgRegsSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

  extern const TargetRegisterClass Int64RegsRegClass = {
    &NVPTXMCRegisterClasses[Int64RegsRegClassID],
    VTLists + 6,
    Int64RegsSubClassMask,
    SuperRegIdxSeqs + 0,
    NullRegClasses,
    0
  };

}

namespace {
  const TargetRegisterClass* const RegisterClasses[] = {
    &NVPTX::Int1RegsRegClass,
    &NVPTX::Int16RegsRegClass,
    &NVPTX::Float32ArgRegsRegClass,
    &NVPTX::Float32RegsRegClass,
    &NVPTX::Int32ArgRegsRegClass,
    &NVPTX::Int32RegsRegClass,
    &NVPTX::SpecialRegsRegClass,
    &NVPTX::Float64ArgRegsRegClass,
    &NVPTX::Float64RegsRegClass,
    &NVPTX::Int64ArgRegsRegClass,
    &NVPTX::Int64RegsRegClass,
  };
}

static const TargetRegisterInfoDesc NVPTXRegInfoDesc[] = { // Extra Descriptors
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 0 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
  { 0, 1 },
};
/// Get the weight in units of pressure for this register class.
const RegClassWeight &NVPTXGenRegisterInfo::
getRegClassWeight(const TargetRegisterClass *RC) const {
  static const RegClassWeight RCWeightTable[] = {
    {1, 5},  	// Int1Regs
    {1, 5},  	// Int16Regs
    {1, 5},  	// Float32ArgRegs
    {1, 5},  	// Float32Regs
    {1, 5},  	// Int32ArgRegs
    {1, 5},  	// Int32Regs
    {1, 2},  	// SpecialRegs
    {1, 5},  	// Float64ArgRegs
    {1, 5},  	// Float64Regs
    {1, 5},  	// Int64ArgRegs
    {1, 5},  	// Int64Regs
    {0, 0} };
  return RCWeightTable[RC->getID()];
}

/// Get the weight in units of pressure for this register unit.
unsigned NVPTXGenRegisterInfo::
getRegUnitWeight(unsigned RegUnit) const {
  assert(RegUnit < 53 && "invalid register unit");
  // All register units have unit weight.
  return 1;
}


// Get the number of dimensions of register pressure.
unsigned NVPTXGenRegisterInfo::getNumRegPressureSets() const {
  return 11;
}

// Get the name of this register unit pressure set.
const char *NVPTXGenRegisterInfo::
getRegPressureSetName(unsigned Idx) const {
  static const char *PressureNameTable[] = {
    "SpecialRegs",
    "Int1Regs",
    "Int16Regs",
    "Float32ArgRegs",
    "Float32Regs",
    "Int32ArgRegs",
    "Int32Regs",
    "Float64ArgRegs",
    "Float64Regs",
    "Int64ArgRegs",
    "Int64Regs",
    0 };
  return PressureNameTable[Idx];
}

// Get the register unit pressure limit for this dimension.
// This limit must be adjusted dynamically for reserved registers.
unsigned NVPTXGenRegisterInfo::
getRegPressureSetLimit(unsigned Idx) const {
  static const unsigned PressureLimitTable[] = {
    2,  	// 0: SpecialRegs
    5,  	// 1: Int1Regs
    5,  	// 2: Int16Regs
    5,  	// 3: Float32ArgRegs
    5,  	// 4: Float32Regs
    5,  	// 5: Int32ArgRegs
    5,  	// 6: Int32Regs
    5,  	// 7: Float64ArgRegs
    5,  	// 8: Float64Regs
    5,  	// 9: Int64ArgRegs
    5,  	// 10: Int64Regs
    0 };
  return PressureLimitTable[Idx];
}

/// Table of pressure sets per register class or unit.
static const int RCSetsTable[] = {
    1,  -1,  	// #0 Int1Regs
    2,  -1,  	// #2 Int16Regs
    3,  -1,  	// #4 Float32ArgRegs
    4,  -1,  	// #6 Float32Regs
    5,  -1,  	// #8 Int32ArgRegs
    6,  -1,  	// #10 Int32Regs
    0,  -1,  	// #12 SpecialRegs
    7,  -1,  	// #14 Float64ArgRegs
    8,  -1,  	// #16 Float64Regs
    9,  -1,  	// #18 Int64ArgRegs
    10,  -1,  	// #20 Int64Regs
    -1,  	// #22 inferred
    -1 };

/// Get the dimensions of register pressure impacted by this register class.
/// Returns a -1 terminated array of pressure set IDs
const int* NVPTXGenRegisterInfo::
getRegClassPressureSets(const TargetRegisterClass *RC) const {
  static const unsigned RCSetStartTable[] = {
    0,2,4,6,8,10,12,14,16,18,20,0 };
  unsigned SetListStart = RCSetStartTable[RC->getID()];
  return &RCSetsTable[SetListStart];
}

/// Get the dimensions of register pressure impacted by this register unit.
/// Returns a -1 terminated array of pressure set IDs
const int* NVPTXGenRegisterInfo::
getRegUnitPressureSets(unsigned RegUnit) const {
  assert(RegUnit < 53 && "invalid register unit");
  static const unsigned RUSetStartTable[] = {
    12,12,22,6,6,6,6,6,16,16,16,16,16,0,0,0,0,0,10,10,10,10,10,20,20,20,20,20,2,2,2,2,2,14,14,14,14,14,4,4,4,4,4,8,8,8,8,8,18,18,18,18,18,0 };
  unsigned SetListStart = RUSetStartTable[RegUnit];
  return &RCSetsTable[SetListStart];
}

extern const MCRegisterDesc NVPTXRegDesc[];
extern const MCPhysReg NVPTXRegDiffLists[];
extern const char NVPTXRegStrings[];
extern const uint16_t NVPTXRegUnitRoots[][2];
extern const uint16_t NVPTXSubRegIdxLists[];
extern const MCRegisterInfo::SubRegCoveredBits NVPTXSubRegIdxRanges[];
extern const uint16_t NVPTXRegEncodingTable[];
NVPTXGenRegisterInfo::
NVPTXGenRegisterInfo(unsigned RA, unsigned DwarfFlavour, unsigned EHFlavour, unsigned PC)
  : TargetRegisterInfo(NVPTXRegInfoDesc, RegisterClasses, RegisterClasses+11,
             SubRegIndexNameTable, SubRegIndexLaneMaskTable, 0xffffffff) {
  InitMCRegisterInfo(NVPTXRegDesc, 54, RA, PC,
                     NVPTXMCRegisterClasses, 11,
                     NVPTXRegUnitRoots,
                     53,
                     NVPTXRegDiffLists,
                     NVPTXRegStrings,
                     NVPTXSubRegIdxLists,
                     1,
                     NVPTXSubRegIdxRanges,
                     NVPTXRegEncodingTable);

}



} // End llvm namespace 
#endif // GET_REGINFO_TARGET_DESC

