BEGIN_DEFAULT_CONFIG
MakeFlags:      
Flags:          
Files:          $TESTNAME$.c
DynamicThreads: $DEFAULT$
StaticThreads:  0
CompileResult:  pass
PassExpr:       0
FailExpr:       ERROR
ExitCode:       0
BuildCmd:       make,notrans
AppArgs:        
TimeLimit:      1.5 * $DEFAULT$
RequireFeature: gasnet
ProcPerNode:    1
# When using distcc+clang we lose suppression of warnings
# for the expansions of macros declared in system headers:
# + glibc's inline strcmp when one string is < 3 chars
WarningFilter: (cc_clang && distcc) && nodebug ; .*? warning: array index 3 is past the end of the array .*?
END_DEFAULT_CONFIG

# ------------------------------------------
# Tests to compile, but not run

# complicated calling convention, known to hang in several cases
TestName:       testexit-seq
TimeLimit:      0
#Fixed in SS12.2+#KnownFailure:   compile-failure ; cc_sun && cpu_i386 && nodebug ; bug 2938 - suncc crash building testexit
WarningFilter:  cc_xlc; '.*? 1500-010: .*?' # Infinite loop in main()

TestName:	check-exports
TimeLimit:      0
RequireFeature: gasnet,cc_gnu # Other compilers have too many odd symbol manglings
KnownFailure:   compile-failure ; os_bgq ; BG/Q headers leak UCI parse/encode/decode symbols

TestName:	check-tools-exports
TimeLimit:      0
RequireFeature: gasnet,cc_gnu # Other compilers have too many odd symbol manglings
KnownFailure:   compile-failure ; os_bgq ; BG/Q headers leak UCI parse/encode/decode symbols

TestName:	check-libupcr-exports
RequireFeature: gasnet,cc_gnu # Other compilers have too many odd symbol manglings
TimeLimit:      0

# ------------------------------------------
# General SEQ tests 

TestName:       testgasnet-seq
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel
#KnownFailure: run-all ; cpu_i386 && cc_sun && nodebug ; bug2154 (testgasnet failures on cloon_cc_pthreads-opt)
#Fixed in SS12.2+#KnownFailure: compile-failure ; cc_sun && (cpu_i386 || cpu_x86_64) && nodebug ; bug 2710 (Sun CC crash compiling testgasnet)
## May fail user backtrace test if $TMPDIR is not valid on compute node(s)

TestName:       testinternal-seq
TimeLimit:      2 * $DEFAULT$
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel

TestName:       testenv-seq
AppArgs:	GASNet is "Global Address Space Networking"
AppEnv: 	GASNET_DUMMY="GASNet dummy value"
#KnownFailure: run-all ; os_aix && (network_mpi || network_lapi) ; bug1039 (poe mishandles quoted program arguments)
# clang warns on glibc's inline strcmp when one string is < 3 chars
WarningFilter: cc_clang && nodebug ; .*? warning: array index 3 is past the end of the array .*?

TestName:       testsmall-seq
FileLimit: 2000 + 7100 * $THREADS$
BenchmarkResult: -\s+8 byte :\s+\S+ iters, latency\s+\S+ us total,\s+(\S+) (us ave. \(put latency\))

TestName:       testlarge-seq
AppArgs: 100 2097152
FileLimit: 2000 + 5300 * $THREADS$
BenchmarkResult: 2097152 byte :\s+\S+ iters, throughput\s+(\S+) (KB/sec \(put_nb_bulk throughput\))

TestName:       testval-seq
BenchmarkResult: 8 byte :\s+\S+ iters, throughput\s+(\S+) (KB/sec \(put_val throughput\))

TestName:       testmemset-seq
AppArgs: 100 2097152
FileLimit: 1500 + 3300 * $THREADS$
BenchmarkResult: 2097152 byte :\s+\S+ iters, throughput\s+(\S+) (KB/sec \(memset throughput\))

TestName:       testam-seq
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel
FileLimit: 16000 + 15500 * $THREADS$
BenchmarkResult: AMShort ping-pong, roundtrip latency\s+:\s+\S+ sec\s+(\S+) (us)
#KnownFailure: run-all ; cpu_x86_64 && network_elan ; bug1444 (elan exceptions on elan4/Opteron mu & hive) 
WarningFilter: cc_clang ; .*? warning: self-comparison always evaluates to false .*?

TestName:       testcore1-seq
AppArgs: 1000

TestName:       testcore2-seq
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel

TestName:       testcore3-seq
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel

TestName:       testcore4-seq
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel
#KnownFailure: compile-failure ; cc_pgi ; bug2796 (testcore4 compilation failure w/ PGI compiler)
TimeLimit: 2 * $DEFAULT$

TestName:       testcore5-seq
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel
TimeLimit: 2 * $DEFAULT$

TestName:       testbarrier-seq
BenchmarkResult: Avg Anon. Barrier latency:\s+(\S+) (us)

TestName:       testlogGP-seq
AppArgs: 1000 0 8 65536
BenchmarkResult: -\s+8 byte :\s+\S+ iters,\s+\S+ us difference =\s+(\S+) (us/msg \(put: o_i - put_nb_bulk\))

TestName:       testvis-seq
AppArgs: 50

TestName:       testvisperf-seq
AppArgs: -maxdata 131072 -maxcontig 512 10
FileLimit: 2900 + 5500 * $THREADS$

TestName:       testmisc-seq
BenchmarkResult: Do-nothing gasnet_AMPoll\(\)\s+:\s+\S+ sec\s+(\S+) (us/iter)
DynamicThreads: 1
#KnownFailure: run-all ; cc_sun && cpu_sparc ; bug 1417 (Solaris 2.10/SunC 5.8 fails testmisc-par with -g)
KnownFailure: run-crash ; cc_gnu && os_darwin && nodebug ; Bug 3080 - testmisc failures w/ Apple XCode

TestName:       testalign-seq
AppArgs: 100
FileLimit: 1400 + 5950 * $THREADS$
BenchmarkResult: byte\s+4 byte aligned :\s+\S+ iters, throughput\s+(\S+) (KB/sec \(put_nb_bulk throughput\))

TestName:       testrand-seq
BenchmarkResult: Timer granularity: .. (\S+) (us), overhead: . \S+ us
AppArgs: 1024

TestName:       testbarrierconf-seq
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel

TestName:       testbarrierconf_t-seq
AppArgs:        -t
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel

TestName:       testbarrierlate-seq
BenchmarkResult: Late notify\(\) Anon. Barrier net latency, average:\s+(\S+) (us)

TestName:       testcoll-seq
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel

TestName:       testnbr-seq
TimeLimit:      3 * $DEFAULT$

TestName:       testqueue-seq
DynamicThreads: $DEFAULT$
FileLimit: 3400 + 12100 * $THREADS$
AppArgs: 1 256 262144

TestName:       testhsl-seq
AppArgs: 0
WarningFilter:  cc_xlc; '.*? 1500-010: .*?' # Infinite loop in main()

TestName:       testtools-seq
DynamicThreads: 1  # avoid false negatives when num_pthreads < num_threads
SaveOutput:     1
KnownFailure:	run-limit ; os_bgq && cc_xlc && nodebug ; word-tearing w/ xlc on BG/Q
# The nightly irun_cross_compiler tester avoids bugs 3019 and 1712
#KnownFailure:	run-exit ; rosetta ; Bug 3019 - testtools is faked as mpi-conduit, which is not available
#KnownFailure:	run-match ; rosetta ; Bug 1712 - timer and atomics inaccuracy with PPC binaries on MacIntel 
# Filter away two known warnings under AIX due to bug 2554
WarningFilter:	os_aix; ld: 0711-224 WARNING: Duplicate symbol: gasnett_backtrace_user.*?
WarningFilter:	os_aix; ld: 0711-341 WARNING: Replaced XTY_CM symbol gasnett_backtrace_user.*?

TestName:       testslice-seq
DynamicThreads: 2 # test only works w/ 2 threads

TestName:       testcollperf-seq
AppArgs: 32768 2 50 0
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel

TestName:       testteam-seq

TestName:       testteambarrier-seq

# ------------------------------------------
# BEGIN PTHREADED TESTS

BEGIN_DEFAULT_CONFIG
MakeFlags:      
Flags:          
Files:          $TESTNAME$.c
DynamicThreads: $DEFAULT$
StaticThreads:  0
CompileResult:  pass
PassExpr:       0
FailExpr:       ERROR
ExitCode:       0
BuildCmd:       make,notrans
AppArgs:        
TimeLimit:      2 * $DEFAULT$
RequireFeature: gasnet,pthread_support
ProhibitFeature: network_shmem
ProcPerNode:    1
# When using distcc+clang we lose suppression of warnings
# for the expansions of macros declared in system headers:
# + glibc's inline strcmp when one string is < 3 chars
WarningFilter: (cc_clang && distcc) && nodebug ; .*? warning: array index 3 is past the end of the array .*?
END_DEFAULT_CONFIG

# ------------------------------------------
# General PAR tests 

TestName:       testgasnet-par
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel
#KnownFailure: run-all ; cpu_x86_64 && network_elan ; bug1445 (gasnett_set_affinity broken on hive)
#KnownFailure: run-crash ; os_irix && cpu_32 ; bug2482 (32-bit testgasnet-par exhausts memory)
#Fixed in SS12.2+#KnownFailure: compile-failure ; cc_sun && (cpu_i386 || cpu_x86_64) && nodebug ; bug 2710 (Sun CC crash compiling testgasnet)
## May fail user backtrace test if $TMPDIR is not valid on compute node(s)

TestName:       testinternal-par
TimeLimit:      2 * $DEFAULT$
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel
# Should NOT see these 2 in nightly testing becasue we --enable-force-generic-atomicops
#KnownFailure:	run-match ; rosetta ; Bug 1712 - timer and atomics inaccuracy with PPC binaries on MacIntel 
#KnownFailure:	run-crash ; rosetta ; Bug 1712 - timer and atomics inaccuracy with PPC binaries on MacIntel 

TestName:       testenv-par
AppArgs:	GASNet is "Global Address Space Networking"
AppEnv: 	GASNET_DUMMY="GASNet dummy value"
#KnownFailure: run-all ; os_aix && (network_mpi || network_lapi) ; bug1039 (poe mishandles quoted program arguments)

TestName:       testsmall-par
FileLimit: 2000 + 7100 * $THREADS$
BenchmarkResult: -\s+8 byte :\s+\S+ iters, latency\s+\S+ us total,\s+(\S+) (us ave. \(get latency\))

TestName:       testlarge-par
AppArgs: 100 2097152
FileLimit: 2000 + 5300 * $THREADS$
BenchmarkResult: 2097152 byte :\s+\S+ iters, throughput\s+(\S+) (KB/sec \(get_nb_bulk throughput\))

TestName:       testval-par
BenchmarkResult: 8 byte :\s+\S+ iters, throughput\s+(\S+) (KB/sec \(put_val throughput\))

TestName:       testmemset-par
AppArgs: 100 2097152
FileLimit: 1500 + 3300 * $THREADS$
BenchmarkResult: 2097152 byte :\s+\S+ iters, throughput\s+(\S+) (KB/sec \(memset throughput\))

TestName:       testam-par
AppArgs:        -p 1
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel
FileLimit: 16000 + 15500 * $THREADS$
BenchmarkResult: AMShort ping-pong, roundtrip latency\s+:\s+\S+ sec\s+(\S+) (us)
#KnownFailure: run-all ; cpu_x86_64 && network_elan ; bug1444 (elan exceptions on elan4/Opteron mu & hive) 
WarningFilter: cc_clang ; .*? warning: self-comparison always evaluates to false .*?

TestName:       testcore1-par
AppArgs: 1000

TestName:       testcore2-par
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel

TestName:       testcore3-par
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel

TestName:       testcore4-par
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel
#KnownFailure: compile-failure ; cc_pgi ; bug2796 (testcore4 compilation failure w/ PGI compiler)

TestName:       testcore5-par
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel

TestName:       testbarrier-par
AppArgs:        -p 1
BenchmarkResult: Avg Named Barrier latency:\s+(\S+) (us)

TestName:       testlogGP-par
AppArgs: 1000 8 65536
BenchmarkResult: -\s+8 byte :\s+\S+ iters,\s+\S+ us difference =\s+(\S+) (us/msg \(get: o_i - get_nb_bulk\))

TestName:       testvis-par
AppArgs: 50

TestName:       testvisperf-par
AppArgs: -maxdata 131072 -maxcontig 512 10
FileLimit: 2900 + 5500 * $THREADS$

TestName:       testmisc-par
BenchmarkResult: Do-nothing gasnet_AMPoll\(\)\s+:\s+\S+ sec\s+(\S+) (us/iter)
DynamicThreads: 1
#KnownFailure: run-all ; cc_sun && cpu_sparc ; bug 1417 (Solaris 2.10/SunC 5.8 fails testmisc-par with -g)
KnownFailure: run-crash ; cc_gnu && os_darwin && nodebug ; Bug 3080 - testmisc failures w/ Apple XCode

TestName:       testalign-par
AppArgs: 100
FileLimit: 1400 + 5950 * $THREADS$
BenchmarkResult: byte\s+4 byte aligned :\s+\S+ iters, throughput\s+(\S+) (KB/sec \(get_nb_bulk throughput\))

TestName:       testrand-par
BenchmarkResult: Timer granularity: .. \S+ us, overhead: . (\S+) (us)
AppArgs: 1024

TestName:       testbarrierconf-par
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel

TestName:       testbarrierconf_t-par
AppArgs:        -t
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel

TestName:       testbarrierconf_p-par
AppArgs:        -p 1
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel

TestName:       testbarrierconf_tp-par
AppArgs:        -t -p 1
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel

TestName:       testbarrierlate-par
BenchmarkResult: Late wait\(\) Anon. Barrier net latency, average:\s+(\S+) (us)

# Typically overcommits CPUs by a factor of 2, so reduce iters
TestName:       testcoll-par
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel
AppArgs: 200

TestName:       testnbr-par
TimeLimit:      3 * $DEFAULT$

TestName:       testqueue-par
DynamicThreads: $DEFAULT$
FileLimit: 3400 + 12100 * $THREADS$
AppArgs: 1 256 262144

TestName:       testhsl-par
AppArgs: 0
WarningFilter:  cc_xlc; '.*? 1500-010: .*?' # Infinite loop in main()

TestName:       testtools-par
DynamicThreads: 1  # avoid false negatives when num_pthreads < num_threads
SaveOutput:     1
KnownFailure:	run-limit ; os_bgq && cc_xlc && nodebug ; word-tearing w/ xlc on BG/Q
# The nightly irun_cross_compiler tester avoids bugs 3019 and 1712
#KnownFailure:	run-exit ; rosetta ; Bug 3019 - testtools is faked as mpi-conduit, which is not available
#KnownFailure:	run-match ; rosetta ; Bug 1712 - timer and atomics inaccuracy with PPC binaries on MacIntel 
# Filter away two known warnings under AIX due to bug 2554
WarningFilter:	os_aix; ld: 0711-224 WARNING: Duplicate symbol: gasnett_backtrace_user.*?
WarningFilter:	os_aix; ld: 0711-341 WARNING: Replaced XTY_CM symbol gasnett_backtrace_user.*?

TestName:       testslice-par
DynamicThreads: 2 # test only works w/ 2 threads

TestName:       testcollperf-par
AppArgs: 32768 2 50 0
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel
TimeLimit: 8 * $DEFAULT$

TestName:       testteam-par

TestName:       testteambarrier-par

# ------------------------------------------
# PAR-only tests

TestName:       testthreads-par
DynamicThreads: 1,$DEFAULT$ # test loopback and parallel
AppArgs:  2

TestName:       testcontend-par
AppEnv:    GASNET_TEST_POLITE_SYNC=0
TimeLimit: 3 * $DEFAULT$

# ------------------------------------------
# PARSYNC tests

# Build parysync lib, fitering all known warnings
# We don't zero TimeLimit so that this test will match the "runnable" 
# filter, and thus continue to function to hide any parsync warnings
# in those harness runs that --include=runnable to reduce running time.
# When run we expect a non-zero exitcode and a known error message.
TestName:	parsync
ExitCode:	non-zero
PassExpr:	'is not a Berkeley UPC executable'
CompileTimeLimit: 2 * $DEFAULT$
#KnownFailure:   compile-warning ; ; bug 2148 (parsync gasnet tests cause harness failures)
# Filter away harmless inliner warnings (gcc 4.7+)
WarningFilter:	cc_gnu; .*?-Winline.*?
# Filter away apparent bug in gcc-llvm
WarningFilter:	cc_gnu; .*?gasnet_bootstrap_ssh.*? warning: missing sentinel in function call.*?
# Filter away warning on bad code from OFED
WarningFilter:	cc_intel; '.*?/verbs\.h.*?: warning \04361: .*?'
# These next two are from gcc-2.96 and therefore not enabled
#WarningFilter:	cc_gnu; .*? warning: can't inline call to .*?
#WarningFilter:	cc_gnu; .*? warning: function using alloca cannot be inline

TestName:       testgasnet-parsync
#Fixed in SS12.2+#KnownFailure: compile-failure ; cc_sun && (cpu_i386 || cpu_x86_64) && nodebug ; bug 2710 (Sun CC crash compiling testgasnet)
## May fail user backtrace test if $TMPDIR is not valid on compute node(s)

# ------------------------------------------
# Conduit-specific test
TestName:	testconduitspecific
DynamicThreads: 2    # limit threads to prevent output overflow
#KnownFailure: run-all ; cpu_x86_64 && network_elan ; bug1444 (elan exceptions on elan4/Opteron mu & hive) 
# Only if testconduitspecific == testam:
WarningFilter: cc_clang ; .*?/tests/test(.h|am.c):[0-9:]* warning: self-comparison always evaluates to false .*?
# Open MPI contains an old portable_platform.h (w/ a defn that differs only in whitespace):
WarningFilter: network_mpi ; .*warning: .__PLATFORM_COMPILER_GNU_VERSION_STR. redefined.*?
WarningFilter: network_mpi ; .*warning: this is the location of the previous definition.*?
