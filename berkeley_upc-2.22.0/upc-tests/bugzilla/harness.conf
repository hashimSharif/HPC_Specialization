# Test harness configuration file

# Initial config file assumes all compilations are positive
# and that we should compile for both static and dynamic 
# threads, but not to run the resulting code.

BEGIN_DEFAULT_CONFIG
Flags:                               # no special compilation flags
Files:          $TESTNAME$.upc       # filename derived from testname
DynamicThreads: $DEFAULT$            # compile for dynamic threads
StaticThreads:  $DEFAULT$            # compile for static threads
CompileResult:  pass                 # expect compilation to succeed
TimeLimit:      0                    # dont run the test
PassExpr:       0                    # No pass expression
FailExpr:       0                    # No fail expression
ExitCode:       ignore               # ignore exit code
BuildCmd:       upcc                 # use upcc to build code
AppArgs:                             # no args to run app
END_DEFAULT_CONFIG

# ------------------------------------------------------------

TestName: 	barriertest
PassExpr:	^Barrier test SUCCESS
FailExpr:	^Barrier test FAILED
TimeLimit:      $DEFAULT$
# Can't declare gasnett_sched_yield, nor can we include gasnet_tools.h:
WarningFilter:  trans_cupc2c; .*? warning: implicit declaration of function 'gasnett_sched_yield' .*?

TestName: 	testenv
AppArgs:	UPC is "Unified Parallel C"
AppEnv:		UPC_DUMMY="UPC dummy value"
TimeLimit:      $DEFAULT$
# clang warns on glibc's inline strcmp when one string is < 3 chars
WarningFilter: (cc_clang || trans_cupc) && nodebug ; .*? warning: array index 3 is past the end of the array .*?

TestName: 	locktest
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:      $DEFAULT$
# Can't declare gasnett_sched_yield, nor can we include gasnet_tools.h:
WarningFilter:  trans_cupc2c; .*? warning: implicit declaration of function 'gasnett_sched_yield' .*?

TestName: 	staticinit
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:      $DEFAULT$

TestName: 	clocktest
Flags:		-lm
RequireFeature: upc_tick
PassExpr:	^done.
FailExpr:	ERROR
DynamicThreads: 1  # avoid CPU overload issues
StaticThreads:  0
TimeLimit:      $DEFAULT$
KnownFailure:	run-match ; trans_tv ; TotalView progress thread can ruin clocktest result
KnownFailure:	run-match ; network_portals4 ; Portals4 progress thread can ruin clocktest result

TestName:       checktypes
PassExpr: ^done.
TimeLimit:      $DEFAULT$

TestName:       no-main-return
ExitCode:       0            # we're testing for a zero exit here 
PassExpr: ^done.
TimeLimit:      $DEFAULT$

TestName: 	exittest
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:      $DEFAULT$

TestName:       checkforall
PassExpr: ^done.
FailExpr: ERROR
TimeLimit:      $DEFAULT$
#KnownFailure: bug766 (bad codegen on bugzilla/checkforall)

TestName:       fpe
PassExpr: ^done.
TimeLimit:      $DEFAULT$
# NOTE: would be better if we could filter the known warnings to preserve unknown ones
KnownFailure: compile-warning ; cc_sun ; bug2382 (Sun cc warnings on bug547.upc and fpe.upc)
KnownFailure: compile-warning ; cc_pgi ; bug2384 (pgi-7.2 warnings on bug547.upc and fpe.upc)
KnownFailure: compile-warning ; cc_cray ; bug2803 (Cray C warnings on fpe.upc)
KnownFailure: compile-failure ; cc_compaq ; bug2552 (compile failure on fpe.upc w/ Compaq C)
KnownFailure: compile-warning ; cc_mips ; bug2494 (fpe.upc warnings with SGI/MIPSPro compiler)

TestName:       intarg
PassExpr: ^Success
FailExpr: ^Fail
TimeLimit:      $DEFAULT$
#KnownFailure:   bug383 (problems with argument to function with no formal argument prototype)

TestName:	bzero
PassExpr: ^done.
FailExpr: ERROR
TimeLimit:	$DEFAULT$

TestName:	barrier_coll_race
PassExpr:	^done.
TimeLimit:	$DEFAULT$
RequireFeature: upc_collective

TestName:	tricky_sizeof1
PassExpr:	^10
TimeLimit:	$DEFAULT$
# performs upc_blocksize(incomplete type) 
# Berkeley UPC currently allows this, although perhaps it should not
RequireFeature: trans_bupc

TestName:	tricky_sizeof2
CompileResult:	fail	

TestName:	tricky_sizeof3
CompileResult:	fail	

TestName:	tricky_sizeof4
CompileResult:	fail	
#KnownFailure: bug842 (Translator should reject *sizeof(void))

TestName:	tricky_sizeof5
PassExpr:	^done.
TimeLimit:	$DEFAULT$
# new-enough clang may warn about the translated comparison
WarningFilter:  cc_clang ; .*?-Wtautological-compare.*?

TestName:	tricky_sizeof7
CompileResult:	fail	
#KnownFailure: bug842 (Translator should reject *sizeof(void))

TestName:	tricky_sizeof6-static
Files:          tricky_sizeof6.upc
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
DynamicThreads: 0
StaticThreads:  $DEFAULT$            # compile for static threads

TestName:	tricky_sizeof6-dynamic
Files:          tricky_sizeof6.upc
CompileResult:	fail	
DynamicThreads: $DEFAULT$            # compile for dynamic threads
StaticThreads:  0

# test our tracing facilities are functional
TestName:	testtrace
Flags: 		-g -lines -trace
RunCmdArgs: 	-tracefile=upctrace-$TESTNAME$.dump.%
DynamicThreads: $DEFAULT$ 
StaticThreads: 	$DEFAULT$ 
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
RequireFeature: runtime_upcr,gasnet,trace,upc_trace_printf,upc_trace_mask
ProhibitFeature: trans_gupc,trans_cupc
#KnownFailure:   compile-failure ; trans_tv ; bug2498 (confusing result when passing both -g and -tv)

TestName:	upctrace-testtrace
MakeFlags:	-f upctrace-testtrace.mak CC='$HOST_CC$' CFLAGS='$HOST_CFLAGS$' LDFLAGS='$HOST_LDFLAGS$' LIBS='$HOST_LIBS$'
DynamicThreads: $DEFAULT$  # currently static/dynamic tracefiles overwrite each other
StaticThreads: 	0
BuildCmd:       make,notrans
AppArgs:	$TOP_BUILDDIR$/upc_trace -f -t $TESTNAME$.dump.%
RunCmd:		%P %A
PassExpr:	^done.
# fail if any table empty, or a filename includes a upcr or gasnet library filename
FailExpr:	(ERROR|^NONE|/upcr_|/gasnet_)
TimeLimit:	$DEFAULT$
SaveOutput:	1
RequireFeature: runtime_upcr,gasnet,trace,upc_trace_printf,upc_trace_mask
## Note that this is a *host* executable and will fail to run from
## the test harness in many/most cross-compilation environments.
ProhibitFeature: os_bgp,trans_gupc,trans_cupc

TestName:       upc_cast
TimeLimit:      $DEFAULT$
Flags:          driver_upcc ; -allow-deprecated # for bupc_cast extensions
RequireFeature: upc_thread_distance,runtime_upcr # runtime -> bupc_cast
FailExpr:       ERROR

TestName:       buganon1
BuildCmd:       nolink,upcc
#KnownFailure: compile-all ;; bug1008 (assigning to an element of shared a array of structs)

TestName:       buganon2
BuildCmd:       nolink,upcc

TestName:       bug3
BuildCmd:       nolink,upcc

TestName:       bug6
PassExpr:       done.		# test valid block sizes
TimeLimit:      $DEFAULT$
#KnownFailure:   compile-failure ; statci && cpu_32 && structsptr ; bug247 (overflow at or near UPC_MAX_BLOCK_SIZE)
# W/ UPC_MAX_BLOCK_SIZE=2GB-1 on struct ptr builds, this test can't run:
#KnownFailure:   run-mem ; cpu_32 && structsptr ; Test requires over 2GB per thread
#KnownFailure:   run-match ; static ; bug 6 (Translator problems with UPC_MAX_BLOCK_SIZE)

TestName:       bug6a
CompileResult:	fail		# test UPC_MAX_BLOCK_SIZE + 1

TestName:       bug6b
CompileResult:	fail		# test UPC_MAX_BLOCK_SIZE + 1 and [*]
#KnownFailure:   compile-warning ; cpu_32 && structsptr ; bug247 (overflow at or near UPC_MAX_BLOCK_SIZE)

TestName:       bug7

TestName:       bug7b

TestName:       bug31

TestName:       bug32

TestName:       bug33

TestName:       bug36_1d
StaticThreads:  1,2,3,$DEFAULT$
DynamicThreads: 0 # Test only valid for Static Threads
PassExpr:	^PASS
FailExpr:	^FAIL
TimeLimit:	$DEFAULT$
RequireFeature: trans_bupc # shared array initializers NOT supported in UPC 1.3 spec draft

TestName:       bug39
#KnownFailure:   bug349 ( bad codegen for spointer -> int cast, on struct ptrs only )
#KnownFailure: bug39 (Translator generates code that directly assigns a pointer to an int variable without a cast)
#KnownFailure: bug827 (codegen regression on 64-bit regarding pointer-int casts)
PassExpr: ^1
FailExpr: ^Error
StaticThreads: 2
DynamicThreads: 2
TimeLimit:      $DEFAULT$

TestName:       bug40
PassExpr: ^done
FailExpr: ERROR
TimeLimit:      $DEFAULT$
#KnownFailure: compile-all ;; bug409 (types in translator-generated function prototypes mismatch reincluded headers)
WarningFilter:  cc_sun; .*?E_INIT_DOES_NOT_FIT.*? # warning is just wrong

TestName:       bug41
Flags:		-I.
BuildCmd:       nolink,upcc

TestName:       bug41x
PassExpr: ^done
FailExpr: ERROR
TimeLimit:      $DEFAULT$
#KnownFailure:   bug114 (Seaborg compilation: bug41b.h and bug41b.h not included in translated code)
#KnownFailure: bug639 (translator emitting mid-block declarations for shared data init)
#KnownFailure: compile-failure ; cc_mips ; bug2486 (Compilation failure on SGI system headers)

TestName:       bug46

TestName:       bug53
PassExpr: Passed
FailExpr: Error
TimeLimit:      $DEFAULT$

TestName:       bug57
WarningFilter:  cc_clang; .*? warning: indirection of non-volatile null pointer will be deleted.*?

TestName:       bug58
FailExpr: ^Error
TimeLimit:      $DEFAULT$
#KnownFailure: bug826 (codegen regression on bug58)

TestName:       bug61

TestName:       bug63

TestName:       bug87
Flags:          !BUPC_STRICT_PROTO_FLAGS!
PassExpr: ^done.
TimeLimit:      $DEFAULT$
# Clang's builtin setjmp conflicts w/ FreeBSD's system header:
WarningFilter: cc_clang && os_freebsd; /usr/include/setjmp.h:.*? warning: incompatible redeclaration of library function.*?
# Clang (and xlc s/ clang's front-end) may complain due to re-include via full path:
WarningFilter: cc_clang || cc_xlc; .*? warning: declaration of built-in function .__sigsetjmp. requires inclusion .*?
#KnownFailure: compile-warning ;  ; bug1325 (__deprecated__ attribute directive ignored warning)
#KnownFailure: compile-failure ; cc_intel ; bug1006 (translator crash on wchar.h with Intel C)
KnownFailure: compile-warning ; cc_pgi ; bogus PGI warnings about wctype.h

TestName:       bug88
PassExpr: ^done.
FailExpr: ERROR
StaticThreads: 2
DynamicThreads: 2
TimeLimit:      $DEFAULT$
# Note: "cpu_i386 && cpu_64" is correct id for x86-64 on Solaris:
#Fixed in SS12.2+# KnownFailure: compile-failure ; cc_sun && os_solaris && cpu_i386 && cpu_64 && nodebug ; bug2733 (Sun cc crash compiling bug88)

TestName:       bug89
PassExpr: ^done
FailExpr: ERROR
TimeLimit:      $DEFAULT$
#KnownFailure: bug89 (translator incorrectly resets phase in some cases)

TestName:	bug90a
StaticThreads:	2
DynamicThreads:	0
PassExpr:	^1: done.
FailExpr:	ERROR
TimeLimit:      $DEFAULT$

TestName:	bug90b
StaticThreads:	2
DynamicThreads:	0
PassExpr:	^1: done.
FailExpr:	ERROR
TimeLimit:      $DEFAULT$

TestName:       bug91
Flags:		-I.
#KnownFailure:   bug339 (Translator deletes empty main)
#KnownFailure: compile-all ; ; bug1319 (Translator should ignore asm stmts in c-mode headers)

TestName:       bug105

TestName:       bug109

TestName:       bug115

TestName:       bug116
WarningFilter:  cc_xlc || cc_clang || trans_cupc || trans_cupc2c; .*? warning: format string is not a string literal.*?

TestName:       bug116b
PassExpr: ^done
FailExpr: ERROR
TimeLimit:      $DEFAULT$
WarningFilter:  cc_xlc || cc_clang || trans_cupc || trans_cupc2c; .*? warning: format string is not a string literal.*?
#KnownFailure:   bug116 (Translator truncates string literals with embedded nulls)

TestName:       bug133
PassExpr: 4 8 5\s*1.400000 2.700000 7\s*4\s*10\s*1.400000\s*2.700000\s*2\s*done.
StaticThreads: 1
DynamicThreads:	1
TimeLimit:      $DEFAULT$

TestName:       bug137

TestName:       bug137b
#KnownFailure:   compile-all ;; bug137 (varargs and alloca builtins are broken)

TestName:       bug137c
StaticThreads: 1
DynamicThreads:	1
PassExpr: SUCCESS
FailExpr: FAILED
TimeLimit:      $DEFAULT$
#KnownFailure: compile-failure ; cc_mips ; bug2486 (Compilation failure on SGI system headers)
#KnownFailure: compile-crash ; trans_opt && trans_os_darwin && trans_cpu_64 ; bug2695 (osx/64-bit translator crash)

TestName:       bug137d
StaticThreads: 1
DynamicThreads:	1
PassExpr: SUCCESS
FailExpr: FAIL
TimeLimit:      $DEFAULT$

TestName:       bug137e
StaticThreads: 1
DynamicThreads:	1
PassExpr: SUCCESS
FailExpr: FAIL
TimeLimit:      $DEFAULT$
#KnownFailure: compile-failure ; cc_mips ; bug2486 (Compilation failure on SGI system headers)
#KnownFailure: compile-crash ; trans_opt && trans_os_darwin && trans_cpu_64 ; bug2695 (osx/64-bit translator crash)

TestName:       bug138
PassExpr: ^done
TimeLimit:      $DEFAULT$

TestName:       bug139
PassExpr: ^done
FailExpr: ERROR
TimeLimit:      $DEFAULT$

TestName:       bug140 # fails under gcc as well

TestName:       bug142
PassExpr: ^done
TimeLimit:      $DEFAULT$

TestName:       bug145
PassExpr: ^done.
FailExpr: ERROR
TimeLimit:      $DEFAULT$

TestName:       bug147
Flags:		-I.
PassExpr:	PASS
FailExpr:	FAIL
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ;; bug147 (sizeof(long double) is incorrect)

TestName:       bug148

TestName:       bug149

TestName:       bug154

TestName:       bug156
PassExpr: ^0\s*0\s*done
StaticThreads: 1
DynamicThreads:	1
TimeLimit:      $DEFAULT$
#KnownFailure: compile-warning ; symmetricsptr ; bug2500 (incorrect (phased) type for pointer to FIRST field of shared struct)
#KnownFailure: run-crash ; symmetricsptr ; bug2500 (incorrect (phased) type for pointer to FIRST field of shared struct)

TestName:       bug159
PassExpr: ^done
FailExpr: ERROR
TimeLimit:      $DEFAULT$

TestName:       bug164

TestName:       bug170
#KnownFailure: bug456 (Can't parse Linux sys/stat.h)

TestName:       bug170b
#KnownFailure: bug456 (Can't parse Linux sys/stat.h)

TestName:       bug171

TestName:       bug174
PassExpr: ^1
TimeLimit:      $DEFAULT$

TestName:       bug175
StaticThreads:	2	
DynamicThreads:	0
PassExpr: ^done.
FailExpr: ERROR
TimeLimit:      $DEFAULT$

TestName:       bug175a
StaticThreads:	2	
DynamicThreads:	2	
PassExpr: ^done.
FailExpr: ERROR
TimeLimit:      $DEFAULT$

TestName:       bug176
RequireFeature: trans_bupc # bupc_assert_type
FailExpr: ERROR
PassExpr: ^done.
TimeLimit:      $DEFAULT$

TestName:       bug176a
RequireFeature: trans_bupc # bupc_assert_type
CompileResult:  pass
PassExpr:	SUCCESS
#KnownFailure:	bug176 (upc_assert_type should be bupc_assert_type)

TestName:       bug176b
RequireFeature: trans_bupc # bupc_assert_type
CompileResult:  fail
#KnownFailure:	bug176 (upc_assert_type should be bupc_assert_type)

TestName:	bug176c
RequireFeature: trans_bupc # bupc_assert_type
CompileResult:  warn
PassExpr:	^done.
FailExpr:	ERROR
DynamicThreads:	0
StaticThreads:	1
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ;; bug 176 (Fix bupc_assert_type())

TestName:       bug179

TestName:       bug192

TestName:       bug201

TestName:       bug206
DynamicThreads:	0	# Can't be compiled with dynamic threads

TestName:       bug207
PassExpr:	^done.
StaticThreads: 1
DynamicThreads:	0	# static threads only
TimeLimit:      $DEFAULT$

TestName:       bug208
#KnownFailure: compile-all ;; bug409 (types in translator-generated function prototypes mismatch reincluded headers)

TestName:       bug209

TestName:       bug214

TestName:       bug223a

TestName:       bug223

TestName:       bug225
BuildCmd:       nolink,upcc

TestName:       bug232
#KnownFailure:   bug114 (Seaborg Compilation: bug232.h not included in translated code)

TestName:       bug233

TestName:       bug234
#KnownFailure:   bug387 (Bad codegen on bug234 w struct ptrs on 64-bit)
PassExpr:       ^FOO\sGOOD
FailExpr:       ^FOO\sBAD
TimeLimit:      $DEFAULT$
#KnownFailure: compile-failure ; os_darwin && cc_gnu ; offsetof broken on OSX 10.4

TestName:       bug235

TestName:       bug236
PassExpr:       ^SUCCESS

TestName:       bug237
#KnownFailure: bug237 (translator incorrectly compiles code for structure containing structure)

TestName:       bug237b
PassExpr:       ^SUCCESS
FailExpr:       FAILURE
TimeLimit:      $DEFAULT$
#KnownFailure: compile-warning ; cc_intel ; bug271 (ecc bounds check warnings for generated addr arith.)
#KnownFailure: compile-failure ; ; bug2373 (Translator assertion failure: Size of ASM struct opnd must be equal to register size)

TestName:       bug237c
PassExpr:       ^done.
TimeLimit:      $DEFAULT$
#KnownFailure: bug523 (duplicate struct def output)
#KnownFailure: bug237 (missing braces in nested initializers)
# clang warns on glibc's inline strcmp when one string is < 3 chars
WarningFilter: (cc_clang || trans_cupc) && nodebug ; .*? warning: array index 3 is past the end of the array .*?

TestName:       bug238
BuildCmd:       nolink,upcc
KnownFailure:	compile-crash ; thrille ; Bug 3245 - Whirl2C crash with -Wb,-run-thrille

TestName:	bug238b
BuildCmd:	nolink,upcc

TestName:       bug242

TestName:       bug243
#KnownFailure:	bug672 (Bad code gen for bug669.upc and bug243.upc)

TestName:       bug244
CompileResult:	fail	# a typo in test case
#KnownFailure:	bug244 (use of incomplete types lead to bad codegen, poor errors or translator crash)

TestName:       bug244b
CompileResult:	fail	# use of incomplete type
#KnownFailure:	bug244 (use of incomplete types lead to bad codegen, poor errors or translator crash)

TestName:       bug244c
CompileResult:	fail	# use of incomplete type upc_lock_t
#KnownFailure:	bug244 (use of incomplete types lead to bad codegen, poor errors or translator crash)

TestName:       bug246
BuildCmd:       nolink,upcc

# Allocation is too big for 32-bit addressing.
# Not clear what desired result should be, but current is a warning
# at complie time and TRUNCATED allocation at runtime - not cool!!
TestName:       bug247
StaticThreads:  1024
DynamicThreads:	0	# static threads only
KnownFailure:	compile-warning ; cpu_32 ; bug247 (huge pointer offsets in 32-bit mode)

TestName:       bug271
PassExpr:       ^Success:
FailExpr:       ^Failure:
TimeLimit:      $DEFAULT$
#KnownFailure: compile-warning ; cc_intel ; bug271 (ecc bounds check warnings for generated addr arith.)
#KnownFailure: compile-failure ; ; bug2373 (Translator assertion failure: Size of ASM struct opnd must be equal to register size)

TestName:       bug275
#KnownFailure: compile-warning ; cc_cray ; bug2804 (Codegen for array-of-struct accesses causes warnings from Cray C)

TestName:       bug275a

TestName:       bug276
PassExpr: ^done
FailExpr: ERROR
TimeLimit:      $DEFAULT$

TestName:       bug279
#KnownFailure:   bug387 (Bad codegen on bug234 w struct ptrs on 64-bit)
#KnownFailure:	bug1027 (translator regression on bug279)
TimeLimit:      $DEFAULT$
ExitCode:       0

TestName:	bug296
BuildCmd:       nolink,upcc

TestName:       bug299a
PassExpr: ^1
TimeLimit:      $DEFAULT$

TestName:       bug299b
PassExpr: ^1
TimeLimit:      $DEFAULT$

TestName:       bug301

TestName:       bug305
PassExpr: ^done.
FailExpr: ERROR
TimeLimit:      $DEFAULT$

TestName:       bug306
FailExpr: ERROR
TimeLimit:      $DEFAULT$

TestName:       bug311
PassExpr: ^done.
FailExpr: ^Runtime
TimeLimit:      $DEFAULT$

TestName:       bug312

TestName:       bug317a
#KnownFailure:   compile-warning ; cpu_64 ; bug349 (bad codegen for spointer -> int cast)

TestName:       bug319
PassExpr: ^SUCCESS
FailExpr: FAILED
TimeLimit:      $DEFAULT$

TestName: 	bug339
#KnownFailure:   bug339 (Translator deletes empty main)

TestName:       bug342
BuildCmd:       nolink,upcc

# bug349: see bug317a.upc

TestName: 	bug354
#KnownFailure:	Bug 648 (Assertion failure in whirl2c: Expected non-null types in WN2C_based_lvalue())

TestName: 	bug367

TestName:       bug370

TestName:	bug382
StaticThreads: 0 
DynamicThreads:	1	# dyn threads only
CompileResult:  fail

TestName:       bug383
PassExpr: ^done.
FailExpr: ERROR
TimeLimit:      $DEFAULT$
# Test REQUIRES that foo() lack a prototype.  So, filter the associated warnings:
WarningFilter:	cc_intel; .*?warning \043266: function "foo" declared implicitly.*?
WarningFilter:	cc_sun; .*?warning: implicit function declaration: foo.*?
WarningFilter:	cc_cray; CC-223 craycc: WARNING .*?
# Following matche multiple backend compilers, plus trans_cupc and trans_cupc2c:
WarningFilter:	.*?warning: nested extern declaration of .foo.*?
WarningFilter:	.*?warning: implicit declaration of function .foo.*?

TestName:	bug389
BuildCmd:	nolink,upcc

TestName:	bug404
BuildCmd:	nolink,upcc
StaticThreads:	0 # bug unrelated to threads
#KnownFailure:	compile-failure ;; bug404 (extern decl causing conflicting types error)

TestName:       bug411
PassExpr:       ^Success
FailExpr:       ^Failure
TimeLimit:      $DEFAULT$
#KnownFailure: bug411 (bad struct copy codegen)

TestName:       bug434
PassExpr:       0
FailExpr:       ERROR
TimeLimit:      $DEFAULT$
#KnownFailure: bug434 (runtime incorrectly handles casts of null shared to local)

TestName:       bug438
Files:          bug438.upc bug438_aux.c
PassExpr:       ^SUCCESS
FailExpr:       FAILURE
TimeLimit:      $DEFAULT$

TestName:       bug438a
PassExpr:       ^SUCCESS
FailExpr:       FAILURE
TimeLimit:      $DEFAULT$

TestName:       bug441
PassExpr:       ^done.
FailExpr:       ERROR
TimeLimit:      $DEFAULT$
#KnownFailure: bug441 (for loop incorrectly translated into forall)

TestName:       bug446
PassExpr:       ^done.
FailExpr:       ERROR
TimeLimit:      $DEFAULT$
#KnownFailure: compile-failure ;; bug446 (Translator needs a naming convention for temporaries)

TestName:	bug449
PassExpr:       ^done.
TimeLimit:      $DEFAULT$

TestName:	bug467
#KnownFailure:   bug339 (Translator deletes empty main)

TestName:	bug476
#KnownFailure:   bug339 (Translator deletes empty main)

TestName:       bug500
PassExpr:       ^SUCCESS
FailExpr:       FAILED
TimeLimit:      $DEFAULT$
WarningFilter:  cc_gnu;   .*? warning: format .*? argument (8|10) .*?
WarningFilter:  cc_clang; .*? warning: conversion specifies type .*?
WarningFilter:  cc_clang; .*? warning: format specifies type .*?
#KnownFailure: bug500 (problem with cast of shared pointer to local)

TestName:       bug508
PassExpr:       ^SUCCESS
FailExpr:       FAILED
TimeLimit:      $DEFAULT$

TestName:       bug509
PassExpr:       ^SUCCESS
FailExpr:       FAILED
TimeLimit:      $DEFAULT$
WarningFilter:  cc_gnu;   .*? warning: format .*? argument (8|10) .*?
WarningFilter:  cc_clang; .*? warning: conversion specifies type .*?
WarningFilter:  cc_clang; .*? warning: format specifies type .*?
#KnownFailure: bug827 (codegen regression on 64-bit regarding pointer-int casts)
#KnownFailure: bug509 (bad addr calculation for field of shared array of structrues containing shared arrays)
#KnownFailure: bug602 (incorrect code for shared pointer casts)
#KnownFailure: bug871 (bug509 crashing translator)
#KnownFailure:   run-all ; trans_opt ; bug1505 (--opt-specific runtime failures on stable translator)

TestName:       bug513
PassExpr:       ^done.
FailExpr:       ERROR
TimeLimit:      $DEFAULT$
#KnownFailure: bug513 (Translator rejects C99 mid-block declarations)

TestName:       bug515
PassExpr:       ^done.
FailExpr:       ERROR
TimeLimit:      $DEFAULT$
#KnownFailure: bug515 (setting shared ptrs to null)
#KnownFailure: bug570 (upcr_put_shared should have a const src)
#KnownFailure: run-all ; network_gm ; bug1036 (runtime regression on pcp-i_gm-pthreads: bug515, bug874, test19)
#KnownFailure: all ; ; bug1141 (Translator regression on PTS null check)

TestName:       bug518
PassExpr:       ^SUCCESS
FailExpr:       FAILURE
TimeLimit:      $DEFAULT$
WarningFilter:  cc_gnu;   .*? warning: format .*? argument 5 .*?
WarningFilter:  cc_clang; .*? warning: conversion specifies type .*?
WarningFilter:  cc_clang; .*? warning: format specifies type .*?
#KnownFailure: bug518 (Translator generating invalid offsets when accessing array elements)
#KnownFailure:   run-match ; ; bug 2371 (bug518 failure w/ trans_head only)

TestName:	bug521
Flags:		-I.
Files:		$TESTNAME$.c	# A .c test case
BuildCmd:	nolink,upcc

TestName:	bug521b
Flags:		-I.
Files:		$TESTNAME$.c	# A .c test case
BuildCmd:	nolink,upcc
#KnownFailure: bug521 (Double-include scheme corner case)

TestName:	bug530
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$

TestName:	bug535
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: bug535 (Multiple shared declarations on same line broken)

TestName:       bug544
PassExpr:       OK
FailExpr:       ERROR
TimeLimit:      $DEFAULT$
KnownFailure: compile-failure ;; bug544 (translator rejecting legal hard TLD initializers)

TestName:	bug547
PassExpr:	^SUCCESS
FailExpr:	FAILED
TimeLimit:	$DEFAULT$
FileLimit:	4500 + 4500 * $THREADS$
# Filter at least some warning cases we have enough info for:
WarningFilter:  cc_sun; .*?E_CONV_TO_FLOAT_OUT_OF_RANGE.*?
WarningFilter:  cc_sun; .*?E_FP_INVALID.*? # division by zero
WarningFilter:  cc_cray; CC-1219 craycc: WARNING .*? # result is NaN
WarningFilter:  cc_cray; CC-1227 craycc: WARNING .*? # constant expression overflow
WarningFilter:  cc_cray; CC-7227 craycc: WARNING .*? # constant out of range
WarningFilter:  cc_intel; .*?warning \043239.*? # floating point underflow (\043 == '#')
WarningFilter:  cc_intel; .*?warning \043264.*? # out of range (\043 == '#')
WarningFilter:  cc_xlc; .*? line [0-9.]+: 1506-232 .*? # division by zero
#KnownFailure: bug547 (translator breaks float constants)
# NOTE: would be better if we could filter the known warnings to preserve unknown ones
KnownFailure: compile-warning ; cc_xlc && !os_aix ; bug1504 (xlc's math.h constants are broken)
KnownFailure: compile-warning ; cc_intel ; bug992 (Intel C has no infinity constants)
KnownFailure: compile-crash ; os_osf ; bug1342 (tru64 translator crash on bug547)
KnownFailure: compile-warning ; cc_pgi ; bug2384 (pgi-7.2 warnings on bug547.upc and fpe.upc)
KnownFailure: compile-warning ; cc_mips ; bug2494 (bug547.upc warnings with SGI/MIPSPro compiler)
#KnownFailure: compile-time ; trans_os_darwin && trans_cpu_powerpc && trans_opt ; bug 1748 (OSX translator hangs on bug547 w/ -opt)
#KnownFailure: compile-crash ; ; bug2403 (translator crash on bug547)

TestName:	bug548
PassExpr:	^SUCCESS
FailExpr:	FAILED
TimeLimit:	$DEFAULT$

TestName:	bug549
PassExpr:	^Success
FailExpr:	^Failure
TimeLimit:	$DEFAULT$

TestName:       bug550
PassExpr:       ^done.
FailExpr:       ERROR
TimeLimit:      $DEFAULT$

TestName:	bug557
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: bug557 (upc_forall should allow C99-style for loop header declarations)

TestName:	bug563
PassExpr:	^SUCCESS
FailExpr:	ERROR
TimeLimit:	$DEFAULT$

TestName:	bug566
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: bug566 (C99 declarations in for loop header have incorrect scoping)

TestName:	bug567
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: bug567 (struct initializers broken)
#KnownFailure:   run-match ; ; bug949 (Regression on bug853, bug567)
#KnownFailure:   run-match ; cpu_64 && structsptr ; bug1400 (bad struct init codegen with 64-bit struct ptrs)
#KnownFailure: compile-crash ; trans_opt && trans_os_darwin && trans_cpu_64 ; bug2695 (osx/64-bit translator crash)

TestName:	bug568
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: bug568 (Bad codegen for arrays of structs)

TestName:	bug574
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: bug574 (Nested C99 for loop declarations crash translator)

TestName:	bug575
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: bug575 (Bad codegen for initializing private arrays of pointer-to-shared)

TestName:	bug576
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$

TestName:	bug577
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: bug577 (Translator incorrectly calculates indexes into multi-dim arrays)

TestName:	bug579
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: bug579 (Translator breaks nested typedefed local structs)
#KnownFailure:   bug339 (Translator deletes user_main from bug579 w/ Compaq C)
#KnownFailure:  run-crash; trans_os_darwin && trans_cpu_i686 ;Bug 2400 (irun bug579.upc runtime failure w/ local dev translator)
#KnownFailure: run-match ; trans_os_darwin ; bug1442 (OS X built translators' DSE delete live statements)

TestName:       bug581
PassExpr:       ^SUCCESS
FailExpr:       FAILED
TimeLimit:      $DEFAULT$

TestName:       bug582
PassExpr:       ^SUCCESS
FailExpr:       FAILURE
TimeLimit:	$DEFAULT$
WarningFilter:  cc_gnu;   .*? warning: format .*? argument 5 .*?
WarningFilter:  cc_clang; .*? warning: conversion specifies type .*?
WarningFilter:  cc_clang; .*? warning: format specifies type .*?
#KnownFailure: bug582 (incorrect size arg in UPCR_GET_NB_PSHARED)
#KnownFailure: bug518 (Translator generating invalid offsets when accessing array elements)
#KnownFailure:   compile-failure ; ; bug2374 (trans head regression on bug582: Could not find field at the given offset 24)

TestName:       bug591
BuildCmd:       nolink,upcc
DynamicThreads:	0	# static threads only
#KnownFailure: bug591 (translator crash on Rice's NAS BT)

TestName:       bug591b
#KnownFailure: bug591 (translator crash on Rice's NAS BT)

TestName:	bug594
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: bug594 (Bad codegen for arrays of structs using constant indexing)

TestName:	bug595
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: compile-failure ; trans_opt ; bug1317 (--opt regression HEAD trans: bug595)
KnownFailure: run-match ;; bug595 (Translator botches struct sizes on all platforms)
#KnownFailure:   compile-failure ; cpu_32 ; bug972 (bad struct codegen on seaborg/32)
#KnownFailure: bug650 (awk breaks upcc on flyer)
#KnownFailure: compile-all ; trans_os_openbsd && trans_cpu_64 ; bug2703 (OpenBSD translator crashes)

TestName:	bug602
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: bug827 (codegen regression on 64-bit regarding pointer-int casts)
KnownFailure: compile-warning ; cpu_64 && (cc_intel || cc_cray) ; bug2379 (ptr arith warning on bug602.upc w/ ecc and craycc)

TestName:	bug604
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$

TestName:	bug606
BuildCmd:       nolink,upcc

TestName:	bug608
BuildCmd:       nolink,upcc

TestName:	bug612
BuildCmd:       nolink,upcc
# VLA is now supported by translator (provided system has working alloca)
# -- NO, it's turned off again for now
CompileResult:	fail	# Want VLA to fail at compile time, before linking
#KnownFailure: bug612 (C99 VLA support broken in confusing way)
RequireFeature: trans_bupc # no VLA

TestName:	bug614
PassExpr:	^SUCCESS
TimeLimit:	$DEFAULT$

TestName:	bug639
PassExpr:	^done.
TimeLimit:	$DEFAULT$
#KnownFailure: bug639 (translator emitting mid-block declarations for shared data init)

TestName:	bug640
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
StaticThreads:	4	# Error only appears for 4 static threads!!!
DynamicThreads: 0
#KnownFailure: bug640 (mg runtime crash due to translator bug)

TestName:	bug642
PassExpr:	^done.
TimeLimit:	$DEFAULT$

TestName:	bug644
PassExpr:	^SUCCESS
TimeLimit:	$DEFAULT$
#KnownFailure: bug644 (Error in compilation of code involving global allocation of a shared pointer to shared integers in a structure)

TestName:	bug645
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: compile-all ;; bug645 (aggregate type casts)

TestName:	bug649
PassExpr:	^done.
TimeLimit:	$DEFAULT$
#KnownFailure: bug649 (Bogus address arithmetic for private 2-D arrays)

TestName:	bug669
BuildCmd:	nolink,upcc
#KnownFailure:	bug672 (Bad code gen for bug669.upc and bug243.upc)
#KnownFailure:	bug669 (Translator is deleting struct fields)

TestName:       bug670
PassExpr:       ^FOO GOOD
TimeLimit:      $DEFAULT$
#KnownFailure:	compile-warning ;; bug670 (Translator dropping explicit cast to const)

TestName:       bug673
PassExpr:       ^SUCCESS
TimeLimit:      $DEFAULT$
#KnownFailure:	bug673 (Incrementing/decrementing struct fields)

TestName:	bug686
PassExpr:	^done.
FailExpr:	ERROR
StaticThreads:  0  # this test is only VLA under dynamic threads
TimeLimit:	$DEFAULT$
CompileResult:  fail # supposed to fail with a "VLA not supported" error
#KnownFailure:	bug686 (bad codegen for VLA accesses)
RequireFeature: trans_bupc # no VLA

# this test is VLA under static or dynamic threads
TestName:	bug686b
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
CompileResult:  fail # supposed to fail with a "VLA not supported" error
RequireFeature: trans_bupc # no VLA

TestName:	bug707
PassExpr:	^done.
TimeLimit:	$DEFAULT$

TestName:	bug722
PassExpr:	^12.0
TimeLimit:	$DEFAULT$
#KnownFailure: run-match ; cc_xlc && nodebug ; bug999 (xlc ansialiasing causes incorrect optimization of packed pointers)

TestName:	bug730
PassExpr:	^done.
TimeLimit:	$DEFAULT$
#KnownFailure: all ; ; bug1141 (Translator regression on PTS null check)

TestName:	bug738
PassExpr:	^SUCCESS
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure:	bug738 (Translator makes bad call to UPCR_ISNULL_SHARED)

TestName:	bug743
PassExpr:	^SUCCESS
FailExpr:	FAILURE
TimeLimit:	$DEFAULT$
#KnownFailure:	bug743 (incorrect cast of long to int on AIX 64-bit)

TestName:	bug784
BuildCmd:       nolink,upcc
#KnownFailure:	bug784 (Translator fails to propagate shared qualifier across typedef of incomplete struct type)
#KnownFailure: compile-all ; cc_pgi ; bug1306 (Bad empty declaration for pointer to typedef of incomplete type)

TestName:	bug791
BuildCmd:       nolink,upcc
#KnownFailure:	bug791 (Translator fails to handle restrict keyword)

TestName:	bug791b
BuildCmd:       nolink,upcc

TestName:	bug796
BuildCmd:       nolink,upcc
DynamicThreads: 0
#KnownFailure:	bug796 (Translator crash regarding FP return value)

TestName:	bug804
RequireFeature: upc_dump_shared
PassExpr:	^done.
TimeLimit:	$DEFAULT$
#KnownFailure:	bug804 (Translator corrupting pointer-to-shared in struct)
#KnownFailure: compile-warning ; cc_cray ; bug2804 (Codegen for array-of-struct accesses causes warnings from Cray C)

TestName:	bug813
PassExpr:	^done.
TimeLimit:	$DEFAULT$
#KnownFailure:	bug813 (internal errors and bad codegen for returning NULL pointer-to-shared)

TestName:	bug814
PassExpr:	^done.
TimeLimit:	$DEFAULT$
#KnownFailure:	bug814 (codegen performs arithmetic on void *)

TestName:	bug818
BuildCmd:       nolink,upcc
#KnownFailure:	bug818 (bogus translator warnings on upc_io_test)

TestName:	bug819
BuildCmd:	nolink,upcc
#KnownFailure:	compile-warning ; cpu_64 ; bug819 (bogus warnings on upc_io_test/64)

TestName:	bug834
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure:	bug834 (Bad codegen for memory accesses with casts)
#KnownFailure: run-match ; trans_os_darwin ; bug1442 (OS X built translators' DSE delete live statements)

TestName:	bug846
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
DynamicThreads: 0
#KnownFailure:	run-match ; cpu_64 && trans_cpu_32 ; bug846 (32-bit translator overflows when calculating sizeof() for large arrays)

TestName:	bug851
CompileResult:  warnfail 
#KnownFailure: bug851 (Translator fails to reject void return in function with non-void return type)

TestName:	bug853
PassExpr:	^SUCCESS
FailExpr:	FAIL
TimeLimit:	$DEFAULT$
#KnownFailure:	bug853 (generation of invalid struct initializer on 64-bit)
#KnownFailure:   compile-failure,compile-warning ; cpu_64 ; bug949 (Regression on bug853, 64-bit)
#KnownFailure: compile-failure ; ; bug2373 (Translator assertion failure: Size of ASM struct opnd must be equal to register size)

TestName:	bug854
#KnownFailure:	bug854 (Bad codegen for prototypes with shared pointer formals)

TestName:	bug856
PassExpr:	^done.
FailExpr:	^ERROR:
DynamicThreads: 0
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ; ; bug856 (Bad upc_blocksize computations with typedefs)

TestName:	bug856b
PassExpr:	^done.
FailExpr:	^ERROR:
DynamicThreads: 0
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ; ; bug856 (Bad upc_blocksize computations with typedefs)

TestName:       bug857
BuildCmd:       nolink,upcc
DynamicThreads: 0
#KnownFailure:   compile-failure ;; bug857 (Extra shared to local cast in declaration section of function)
#KnownFailure:   compile-warning ; ; bug1046 (Translator regression on bug857, bug972 on 32-bit)

TestName:	bug858
PassExpr:	^done.
TimeLimit:	$DEFAULT$
DynamicThreads: 1
StaticThreads:  0
KnownFailure:	compile-failure ;; bug858 (failures on some C99 array/struct designators)

TestName:	bug858a
Files:		bug858a.c
PassExpr:	^done.
TimeLimit:	$DEFAULT$
DynamicThreads: 1
StaticThreads:  0

TestName:	bug866-1
Files:          bug866.upc
Flags:		-DTEST=1
CompileResult:	fail	

TestName:	bug866-2
Files:          bug866.upc
Flags:		-DTEST=2
CompileResult:	fail	

TestName:	bug866-3
Files:          bug866.upc
Flags:		-DTEST=3
CompileResult:	fail	
#KnownFailure: bug866 (Translator should reject upc_blocksizeof on non-shared types)

TestName:	bug866-4
Files:          bug866.upc
Flags:		-DTEST=4
CompileResult:	fail	
#KnownFailure: bug866 (Translator should reject upc_blocksizeof on non-shared types)

TestName:	bug866-5
Files:          bug866.upc
Flags:		-DTEST=5
PassExpr:	^done.
TimeLimit:	$DEFAULT$

TestName:	bug873a
CompileResult:	fail	

TestName:	bug873b
CompileResult:	fail	

## NOTE: this is a slightly out-of-date clone of intepid/test19.upc
#TestName:	bug874
#PassExpr:	passed
#FailExpr:       rror
#TimeLimit:	$DEFAULT$
##KnownFailure:   bug515 (Bad codegen for setting shared ptrs to null)
##KnownFailure:	bug874 (umalloc malfunctions under heavy load)
##KnownFailure: run-all ; network_gm ; bug1036 (runtime regression on pcp-i_gm-pthreads: bug515, bug874, test19)
#WarningFilter: .*?warning: explicitly assigning a variable of type .*? to itself .*?

TestName:	bug880
PassExpr:	pass
TimeLimit:	$DEFAULT$
#KnownFailure:   bug880 (Bad codegen for accessing char arrays in structs)

TestName:	bug883
PassExpr:	done.
TimeLimit:	$DEFAULT$
#KnownFailure:   bug883 (incorrect translation of multi-dim array parm)

TestName:	bug892
#KnownFailure:   bug892 (incorrect translation of multi-dim array with constant indices)

TestName:	bug896
#KnownFailure:   compile-warning ; cpu_32 && trans_cpu_64 ; bug896 (Bogus translator warning on correct assignment)

TestName:	bug899
Files:	        bug899.c
RequireFeature: pragma_upc_code # for explicit use of "#pragma upc {c,upc}_code"

TestName:	bug899b
Files:	        bug899b.c
RequireFeature: pragma_upc_code # for explicit use of "#pragma upc {c,upc}_code"
KnownFailure:   compile-failure ; static ; bug899 (translator cannot handle UPC keywords as identifiers in C mode)

TestName:	bug899c
Files:		bug899c.upc bug899c_c.c bug899c_aux.c
RequireFeature: pragma_upc_code # for explicit use of "#pragma upc {c,upc}_code"
BuildCmd:	make,notrans
StaticThreads:  0 # No rule in Makefile for static case
#KnownFailure:   compile-failure ;; bug899 (translator cannot handle UPC keywords as identifiers in C mode)

TestName:	bug905

TestName:	bug907
#KnownFailure:   compile-failure ;; bug907 (Array declaration followed by array definition is rejected)

TestName:	bug909
#KnownFailure:   compile-failure ;; bug909 (struct keyword incorrectly used when typedef is involved)

TestName:	bug910
#KnownFailure:   compile-failure ;; bug910 (Translator crash during UPC Lowering phase)

TestName:	bug912
#KnownFailure:   compile-failure ;; bug912 (whirl2c confused by array of structs containing an array)

TestName:	bug914
PassExpr:	done.
TimeLimit:	$DEFAULT$
#KnownFailure:   bug914 (Array initializer problem in MT19937)

TestName:	bug916
Flags:		-I.
Files:	        bug916.c
StaticThreads:	0 # time-saver since this is a C99 test case

TestName:	bug922
Files:	        bug922.c
RequireFeature: pragma_upc_code # for explicit use of "#pragma upc {c,upc}_code"

TestName:	bug925
KnownFailure:   compile-warning ; (os_darwin || os_aix || os_openbsd) && (cc_gnu || cc_clang) ; bug925 (gcc printf argument conversion warning for upc_addfield)

TestName:	bug927
DynamicThreads: 0
#KnownFailure:   compile-failure ;; bug927 (Whirl2c crashes accessing 2-d array of structs)

TestName:	bug927b
DynamicThreads: 0
#KnownFailure:   compile-failure ;; bug927 (Whirl2c crashes accessing 2-d array of structs)

TestName:	bug932
#KnownFailure:   compile-failure ;; bug932 (Constant indexing into array of structs crashes translator)

TestName:	bug941
#KnownFailure:   compile-failure ;; bug941 (Global pointer to array of unspecified size leads to parse error)

TestName:	bug943
#KnownFailure:   compile-failure ;; bug943 (Compiler error on nested struct assignment)

TestName:	bug944
#KnownFailure:   compile-failure ;; bug944 (Translator crash on union: can't find the corresponding field id)

TestName:	bug945
#KnownFailure:   compile-failure ;; bug945 (Bad codegen for arrays in nested structs)

TestName:	bug946
PassExpr:	done.
FailExpr:       rror
TimeLimit:	$DEFAULT$
#KnownFailure:   compile-failure ;; bug946 (Translator crash for arrays in nested structs)
KnownFailure:	run-match ; cc_pathscale && nodebug ; bug2062 (Pathcc misoptimizes bug946.upc)
KnownFailure:   run-match ; nodebug && cc_intel && pthreads ; Bug 3232 - icc/pthreads/-O failures on bug946 and bug1087

TestName:	bug953
#KnownFailure:   compile-failure ;; bug953 (Incorrect code for union field assignment)

TestName:	bug956
BuildCmd:       nolink,upcc
# Test REQUIRES a "nested extern" declaration.  So, filter the associated warnings:
WarningFilter:	cc_gnu || cc_open64; .*?warning: nested extern declaration of .n.*?

TestName:	bug959
#KnownFailure:   compile-failure ;; bug959 (Bad codegen for pointer-to-shared in conditional expression)

TestName:	bug959b
#KnownFailure:   compile-warning ;; bug959 (Bad codegen for pointer-to-shared in conditional expression)

TestName:	bug966
#KnownFailure:   compile-failure ;; bug966 (Typecheck bug for array field in shared struct)

TestName:	bug966b
#KnownFailure:   compile-failure ;; bug966 (Typecheck bug for array field in shared struct)

TestName:	bug966c
#KnownFailure:   compile-failure ;; bug966 (Typecheck bug for array field in shared struct)

TestName:	bug967
#KnownFailure:   compile-warning ;; bug967 (Bad codegen for volatile qualifiers)

TestName:	bug972
#KnownFailure:   compile-failure ; cpu_32 ; bug972 (bad struct codegen on seaborg/32)
#KnownFailure:   compile-all ; ; bug1046 (Translator regression on bug857, bug972 on 32-bit)

TestName:	bug975

TestName:	bug979
#KnownFailure: compile-all ;; bug979 (Incorrect code generation for s->p++)

TestName:	bug984
#KnownFailure:   compile-all ;; bug984 (bad codegen for assigning shared ptr-to-local to private ptr-to-local)

TestName:	bug1008
BuildCmd:       nolink,upcc
#KnownFailure:   compile-all ;; bug1008 (assigning to an element of shared a array of structs)

TestName:	bug1009
BuildCmd:       nolink,upcc

TestName:	bug1010
PassExpr:	done.
TimeLimit:	$DEFAULT$
#KnownFailure:   bug1010 (infinite while loops for I/O style code)

TestName:	bug1020
CompileResult:  fail
#KnownFailure:   compile-warning ;; bug1020 (typechecker accepts erroneous comparison of ptr to local and ptr to shared)

TestName:	bug1022
KnownFailure: compile-warning ; cc_pathscale ; bug1199 (pointer from integer warnings)

TestName:	bug1023
#KnownFailure: compile-all ;; bug1023 (Bad codegen for typedef'd shared struct type)

TestName:	bug1033
Flags:		-lm

TestName:	bug1036
PassExpr:	done.
TimeLimit:	$DEFAULT$
RequireFeature: upc_dump_shared
#KnownFailure: run-all ; network_gm ; bug1036 (runtime regression on pcp-i_gm-pthreads: bug515, bug874, test19)

TestName:	bug1040
#KnownFailure: compile-all ;; bug1040 (Type error on array in a shared struct)

TestName:	bug1080
#KnownFailure: compile-all ;; bug1080 (Major regression - Lowering offset bug in sgiupc)

TestName:	bug1087
FailExpr:	ERROR
PassExpr:	done.
TimeLimit:	$DEFAULT$
#KnownFailure:   compile-all ;; bug1087 (block-scope static variables seriously broken)
KnownFailure:   run-match ; nodebug && cc_intel && pthreads ; Bug 3232 - icc/pthreads/-O failures on bug946 and bug1087

TestName:	bug1094
FailExpr:	ERROR
PassExpr:	done.
TimeLimit:	$DEFAULT$
#KnownFailure:   bug1094 (Bad codegen for sptr subtraction)

TestName:	bug1113
#KnownFailure: compile-crash ;; bug1113 (Translator crash on simple C code)

TestName:	bug1118
PassExpr:	done.
TimeLimit:	$DEFAULT$

TestName:	bug1126
FailExpr:	ERROR
PassExpr:	done.
TimeLimit:	$DEFAULT$
DynamicThreads: 0
StaticThreads:  $DEFAULT$            # compile for static threads
#KnownFailure: compile-warning ; trans_g ; bug1160 (-tv causes lots of bad codegen)
#KnownFailure: run-all ; trans_g ; bug1126 (bad codegen for -g: shared pointer assignment from shared array element)

TestName:	bug1141
FailExpr:	ERROR
PassExpr:	done.
TimeLimit:	$DEFAULT$
#KnownFailure:   bug1141 (Translator regression on PTS null check)

TestName:	bug1146

TestName:	bug1221
FailExpr:	ERROR
PassExpr:	done.
TimeLimit:	$DEFAULT$
#KnownFailure:   run-all ; symmetricsptr ; bug1221 (NULL symmetic pointers completely broken)

TestName:	bug1222
#KnownFailure:   compile-all ;; bug1222 (bad codegen on upc_threadof(NULL))

TestName:	bug1222b
#KnownFailure:   compile-all ;; bug1222 (bad codegen on upc_threadof(NULL))

TestName:	bug1223
RequireFeature: trans_bupc # Test translator-specifc behavior
WarningFilter:	.*? warning: unnamed struct/union that defines no instances
#KnownFailure: compile-warning ;; bug 1223 (Translator warning causing most cygwin tests to fail)

TestName:	bug1223a
Files:		bug1223a.c
BuildCmd:	upcc,notrans
StaticThreads:	0 # time-saver since this is a C99 test case

TestName:	bug1228
PassExpr:	done.
TimeLimit:	$DEFAULT$
AppEnv:		runtime_upcr; UPC_BARRIER_MISMATCH_WARNS=no
#KnownFailure: run-all ;; bug 1228 (Ambiguity in barrier matching semantics)

TestName:	bug1228-1
Files:		bug1228.upc
RequireFeature: runtime_upcr
AppEnv:		UPC_BARRIER_MISMATCH_WARNS=yes
AppArgs:        100 1
PassExpr:	barrier mismatch detected
TimeLimit:	$DEFAULT$

TestName:	bug1228-2
Files:		bug1228.upc
RequireFeature: runtime_upcr
AppEnv:		UPC_BARRIER_MISMATCH_WARNS=yes
AppArgs:        100 2
PassExpr:	barrier mismatch detected
TimeLimit:	$DEFAULT$

TestName:	bug1228-3
Files:		bug1228.upc
RequireFeature: runtime_upcr
AppEnv:		UPC_BARRIER_MISMATCH_WARNS=yes
AppArgs:        100 3
PassExpr:	barrier mismatch detected
TimeLimit:	$DEFAULT$
#KnownFailure:   run-all ; pthreads ; bug 3114 - Barrier non-conformance with pthreads

TestName:	bug1228-4
Files:		bug1228.upc
RequireFeature: runtime_upcr
AppEnv:		UPC_BARRIER_MISMATCH_WARNS=yes
AppArgs:        100 4
PassExpr:	barrier mismatch detected
TimeLimit:	$DEFAULT$

TestName:	bug1228-5
Files:		bug1228.upc
RequireFeature: runtime_upcr
AppEnv:		UPC_BARRIER_MISMATCH_WARNS=yes
AppArgs:        100 5
PassExpr:	barrier mismatch detected
TimeLimit:	$DEFAULT$

TestName:       bug1229
BuildCmd:       nolink,upcc
#KnownFailure: compile-all ; cc_compaq ; bug 1229 (Translator botching reincludes for Compaq C)

TestName:	bug1230
FailExpr:	ERROR
PassExpr:	done.
TimeLimit:	$DEFAULT$
WarningFilter:	cc_gnu; .*? warning: array subscript has type .char.
#KnownFailure: run-all ; os_osf ; bug 1230 (Tru64 translator breaks toupper)

# Test for bugs that break w/ various (p)thread layouts.
# We try several counts, not knowing the config we'll run on (or the bug we'll trigger).
# StaticThreads ensures runtime notices if wrong number spawned (eg bug1263)
TestName:	thread_count
DynamicThreads: 1,2,3,4,5,6,7,8
StaticThreads:  1,2,3,4,5,6,7,8
PassExpr:	done.
TimeLimit:      $DEFAULT$
#KnownFailure: run-all ;; bug1262 (upc_all_alloc broken for some pthread layouts)
#KnownFailure: run-all ;; bug1263 (UPC_PTHREAD_MAP incorrect)

TestName:	bug1262b
PassExpr:	done.
TimeLimit:	$DEFAULT$

TestName:	bug1262c
PassExpr:	done.
TimeLimit:	$DEFAULT$

TestName:	bug1270
PassExpr:	done.
TimeLimit:	$DEFAULT$
#KnownFailure: run-all ;; bug1270 (limited number of globals supported)
KnownFailure: compile-all ; cc_pathscale ; bug1340 (pathcc optimizer crash on bug1270)

TestName:	bug1275
KnownFailure: compile-warning ;; bug 1275 (bad codegen for &a[.][.] as TLD initializer)

TestName:	bug1275a
KnownFailure: compile-failure ;; bug544 (translator rejecting legal hard TLD initializers)

TestName:	bug1287
RequireFeature: upc_io
PassExpr:	done.
FailExpr:	ERROR
DynamicThreads: 0
TimeLimit:	$DEFAULT$
#KnownFailure: compile-all ; cc_pgi ; bug1306 (Bad empty declaration for pointer to typedef of incomplete type)

TestName:	bug1297
PassExpr:	done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$

TestName:	bug1303
PassExpr:	done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: run-match ; ; bug1303 (stdout/stderr broken on Solaris, bad struct size for bitfields)


TestName:	bug1315b
PassExpr:	done.
FailExpr:	ERROR
#KnownFailure: all ;; bug 1315 (invalid dereference on struct array indirection)

TestName:	bug1323
#KnownFailure: compile-all ;; bug 1323 (bad codegen for incomplete struct types)

TestName:	bug1338
BuildCmd:       nolink,upcc
#KnownFailure: compile-all ;; bug 1338 (extern causes type mismatch on ptr-to-shared type)

TestName:	bug1352
PassExpr:	done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: run-all ;; bug 1352 (Bad codegen on conditional with shared array access)

TestName:	bug1354
PassExpr:	done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: compile-all ;; bug 1354 (backend crash for postfix ops on fields of 2D arrays of structs)

TestName:	bug1360
PassExpr:	PASS
FailExpr:	FAIL
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ;; bug 1360 (incorrect ptr arithmetic for C style expressions (char*)var+offset)

TestName:	bug1382
BuildCmd:	nolink,upcc
#KnownFailure:	compile-all ;; bug 1382 (limited size of static char arrays)

TestName:	bug1386
BuildCmd:	nolink,upcc
#KnownFailure:	compile-all ;; bug 1386 (Problem with static structs)

TestName:	bug1435
BuildCmd:	nolink,upcc
#KnownFailure:	compile-all ;; bug 1435 (suspicious codegen: duplicate volatile qualifiers on array elements)

TestName:	bug1451
PassExpr:	done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: compile-warning ; cc_sun ; bug 1451 (warning caused by codegen of negative initializer for global unsigned int)

TestName:	bug1464
Files:		bug1464.c
BuildCmd:	nolink,upcc
StaticThreads:	0 # time-saver since this is a C99 test case
#KnownFailure:	compile-crash ; cpu_32 && trans_cpu_powerpc && trans_cpu_64 ; bug1464 (ppc64 translator crash on benchmarks/memcpy for 32bit targets)

TestName:	bug1472
PassExpr:	done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$

TestName:	bug1522
PassExpr:	done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: run-all ; trans_g && pthreads ; bug1522 (totalview support breaks pthread TLD)

TestName:	bug1531
PassExpr:	done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$

TestName:	bug1557
PassExpr:	done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$

TestName:	bug1559
BuildCmd:	nolink,upcc
#KnownFailure:	compile-all ;; bug 1559 (Attempt to cast predef_I4 to pointer-to-shared)

TestName:	bug1565
PassExpr:	done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure:	run-match ;; bug 1565 (incorrect iteration of integer in a structure containing PTS)

TestName:	bug1578
BuildCmd:	nolink,upcc
#KnownFailure:	compile-all ;; bug 1578 (translator crash)

TestName:	bug1583
BuildCmd:	nolink,upcc
#KnownFailure:	compile-all ;; bug 1583 (translator crash on forward reference to enum)

TestName:	bug1639
BuildCmd:	nolink,upcc
CompileResult:  fail
#KnownFailure:	compile-pass ;; bug 1639 (translator fails to diagnose incompatible prototypes)

TestName:	bug1647
BuildCmd:	nolink,upcc
#KnownFailure:	compile-crash ;; bug 1647 (bogus translator errors and crash on simple test program)
#KnownFailure:	compile-crash ;; bug 1113 (bogus translator errors and crash on simple test program)

TestName:	bug1657
BuildCmd:	nolink,upcc

TestName:	bug1663
BuildCmd:	nolink,upcc
StaticThreads:  0
CompileResult:  fail
KnownFailure:	compile-pass ;; bug 1290 (bad error message for illegal static array declaration)

TestName:	bug1664
BuildCmd:	nolink,upcc
#KnownFailure:	compile-warning ;; bug 1664 (front end complains about differing blocksizes on assignment to shared structure component)

TestName:	bug1665
BuildCmd:	nolink,upcc
CompileResult:  warnfail
#KnownFailure:	compile-pass ;; bug 1665 (address of pointer-to-shared field does not have indefinite blocksize)

TestName:	bug1665a
BuildCmd:	nolink,upcc

TestName:	bug1667
#KnownFailure:	all ;; bug 1667 (a.x[i][j] expressions for double array incorrectly codegens as char type)

TestName:	bug1668
BuildCmd:	nolink,upcc
CompileResult:  warnfail
#KnownFailure:	compile-pass ;; bug 1668 (poor error message for arithmetic on shared void *)
#KnownFailure:	compile-crash ;; bug 1668 (poor error message for arithmetic on shared void *)

TestName:	bug1709
PassExpr:	^SUCCESS
TimeLimit:	$DEFAULT$
Flags:          driver_upcc ; -allow-deprecated # for bupc_atomic*_private()
CompileTimeLimit: 3 * $DEFAULT$
RequireFeature: runtime_upcr # for bupc_ atomics
WarningFilter:  cc_cray; CC-68 craycc: WARNING .*? # conversion results in change of sign

TestName:	bug1732
PassExpr:	^castbug\spassed
TimeLimit:	$DEFAULT$
#KnownFailure:	run-all ;; bug 1732 (bad codegen for shared arithmetic expressions that change blocksize with casts)

TestName:	bug1769
PassExpr:	done.

TestName:	bug1926
#KnownFailure:	compile-failure ;; bug 1926 (typedef generates conflicting definition)

TestName:	bug1926a
#KnownFailure:	compile-failure ;; bug 1926 (typedef generates conflicting definition)

TestName:	bug1930
PassExpr:	done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure:	run-all ;; bug 1930 (-opt bug with arrays of PTS)

TestName:	bug1965
Files:		bug1965.c
StaticThreads:	0 # time-saver since this is a C99 test case
#KnownFailure:	compile-failure ;; bug 1965 (problems with #include when not at file-scope)

TestName:	bug1965a
Files:		bug1965a.c
StaticThreads:	0 # time-saver since this is a C99 test case
#KnownFailure:	compile-failure ;; bug 1965 (problems with #include when not at file-scope)

TestName:	bug1965b
Files:		bug1965b.c
StaticThreads:	0 # time-saver since this is a C99 test case
#KnownFailure:	compile-failure ;; bug 1965 (problems with #include when not at file-scope)

TestName:	bug1983
BuildCmd:	nolink,upcc
CompileResult:  fail
#KnownFailure:	compile-all ;; bug 1983 (erroneous shared stack variable accepted)

TestName:	bug1997
BuildCmd:	nolink,upcc
CompileResult:  warnfail
#KnownFailure:	compile-pass ;; bug 1997 (translator silently accepts type-mismatched blocksizes on argument passing)

TestName:	bug1997OK

TestName:	bug1997a
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug1997b
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug1997c
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug1997d
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug1997e
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug1997f
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug2044
Files:          bug2044.upc
CompileResult:	fail	
#KnownFailure:   compile-all ;; bug 2044 (Translator should reject upc_blocksizeof on non-shared types)

TestName:       bug2061
BuildCmd:	nolink,upcc
CompileResult:  fail
#KnownFailure:   compile-pass ;; bug 2061 (pointer arith on shared PTS incorrectly yields a shared value)

TestName:	bug2112
BuildCmd:	nolink,upcc
KnownFailure:   compile-crash ; ; bug 2112 (translator crash on bitfield access)

TestName:	bug2112a
BuildCmd:	nolink,upcc
KnownFailure:   compile-crash ; ; bug 2112 (translator crash on bitfield access)

TestName:	bug2112b
BuildCmd:	nolink,upcc
KnownFailure:   compile-crash ; ; bug 2112 (translator crash on bitfield access)

TestName:	bug2280
PassExpr:	done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
#KnownFailure: run-match ; ; bug2280 (Bad codegen for phased PTS comparison)

# With UPC 1.3 shared array initializers become implementation-dependent
#TestName:	bug2296
#Files:		bug2296.c
#StaticThreads:	0 # time-saver since this is a C99 test case
#KnownFailure:	compile-failure ; ; bug2296 (incorrect translation of multi-dimensional array initializers)
#KnownFailure:	compile-warning ; ; bug2296 (incorrect translation of multi-dimensional array initializers)

TestName:	bug2306
PassExpr:	Done.
FailExpr:	Error:
StaticThreads:	0 # Bug appears only for Dynamic threads
TimeLimit:	$DEFAULT$
#KnownFailure:	run-match ; ; bug2306 (sizeof(A[0]) miscomputed as sizeof(A))

TestName:	bug2396
PassExpr:	Thread
TimeLimit:	$DEFAULT$
DynamicThreads: 0
#KnownFailure: run-all ; ; bug2396 (bad codegen for complex upc_forall affinity expression)

TestName:	bug2403
BuildCmd:	nolink,upcc
#KnownFailure:	compile-crash ; ; bug2403 (translator crash on bug547)
# The following is to filter away the "compilation completed with warnings" text
# IFF PGC-W-0129 is the *only* warning, by expecting upcc on the line before it:
WarningFilter:	cc_pgi; .*?upcc.*?\n+PGC-W-0129.*?\nPGC.*?completed with warnings.*?
WarningFilter:  cc_cray; CC-1227 craycc: WARNING .*?
WarningFilter:  cc_cray; CC-7227 craycc: WARNING .*?
WarningFilter:  cc_sun; .*?E_CONV_TO_FLOAT_OUT_OF_RANGE.*?
WarningFilter:  cc_intel; .*?warning \043264.*? # \043 sneaks a '#' past harness

TestName:	bug2451
PassExpr:	done.
TimeLimit:	$DEFAULT$
#KnownFailure: run-match ; ; bug2451 (bad codegen for all blocked pointer-to-shared inequality comparisons)

TestName:       bug2504
PassExpr:	done.
FailExpr:	FAILURE
TimeLimit:	$DEFAULT$
#KnownFailure:   run-all ; !trans_opt ; bug2504 (Odd behavior with shared array of struct with member 1x1 array)
#KnownFailure:   compile-failure ; structsptr ; bug2504 (Odd behavior with shared array of struct with member 1x1 array)
#KnownFailure:   compile-warning ; symmetricsptr ; bug2504 (Odd behavior with shared array of struct with member 1x1 array)
#KnownFailure:   compile-crash ; trans_opt ; bug2504 (Odd behavior with shared array of struct with member 1x1 array)
#KnownFailure:   run-all ; trans_opt ; bug2504 (Odd behavior with shared array of struct with member 1x1 array)
#KnownFailure:   compile-crash ; ; bug2907 - Open64 and AIX translators crash (and others)

TestName:       bug2510
BuildCmd:       nolink,upcc
DynamicThreads: 0
CompileResult:	fail	
#KnownFailure:   compile-crash ; ; bug2510 (Assertion failure in compiler after syntax check: rhs should be a COMMA node)
#KnownFailure:   compile-warning ; ; bug2510 (Assertion failure in compiler after syntax check: rhs should be a COMMA node)

TestName:       bug2511
BuildCmd:       nolink,upcc
DynamicThreads: 0
RequireFeature: os_osf  # Waste of time otherwise
KnownFailure:   compile-failure ; os_osf && nopthreads ; bug2511 (Bad codegen on OSF/1's putchar())

TestName:	bug2522

TestName:       bug2611
Files:          bug2611.c
StaticThreads:	0 # time-saver since this is a C99 test case
BuildCmd:       nolink,upcc
KnownFailure:   compile-crash ; ; bug2611 (C99 compound literal initialization unsupported)
WarningFilter:  cc_xlc; '.*? 1506-196 .*?' # Apparent XLC bug: thinks "(int []){5}" is incompatible with int*

TestName:	bug2642
PassExpr:	done.
FailExpr: Error
TimeLimit:	$DEFAULT$
KnownFailure:	compile-failure ; thrille ; Bug 3244 - Invalid output with -Wb,-run-thrille
#KnownFailure: compile-warning ; cc_cray && trans_opt ; bug2804 (Codegen for array-of-struct accesses causes warnings from Cray C)

TestName:       bug2662
PassExpr:	done.
TimeLimit:	$DEFAULT$
#KnownFailure:   run-crash ; trans_opt ; bug2662 (split-phase optimization mishandles multiple conditionals)
#KnownFailure:   run-match ; trans_opt ; bug2662 (split-phase optimization mishandles multiple conditionals)

TestName:	bug2672
DynamicThreads: 0
#KnownFailure: compile-warning ; symmetricsptr ; bug2500 (incorrect (phased) type for pointer to FIRST field of shared struct)
#KnownFailure: run-crash ; symmetricsptr ; bug2500 (incorrect (phased) type for pointer to FIRST field of shared struct)

TestName:       bug2679
PassExpr:	done.
TimeLimit:	$DEFAULT$
#KnownFailure:   run-crash ; trans_opt && trans_os_darwin ; bug 2679 (MacOS-build translator dropping function-scoped initializers)

TestName:       bug2679a
PassExpr:	done.
FailExpr:	Error
TimeLimit:	$DEFAULT$
#KnownFailure:   run-match ; trans_opt && trans_os_darwin ; bug 2679 (MacOS-build translator dropping function-scoped initializers)
#KnownFailure:	compile-crash ; cpu_32 && trans_cpu_powerpc && trans_cpu_64 ; bug1464 (ppc64 translator crash on benchmarks/memcpy for 32bit targets)

TestName:       bug2690
PassExpr:	done.
FailExpr:	FAIL
TimeLimit:	$DEFAULT$
#KnownFailure:   compile-crash ; ;  bug 2690 (translator crash on EXAMPLE2 from p31 of UPC spec 1.2)
## Bug 3021: fails on (gcc-3.3.3 && ia64 && nodebug), but we can't filter on gcc version

TestName:	bug2693
DynamicThreads: 1
StaticThreads:  0
PassExpr:	PASS
FailExpr:	FAIL
TimeLimit:	$DEFAULT$
#KnownFailure:	run-match ; pthreads ; bug 2693 (TLD not applied accessing array field of a structure at file-scope)

TestName:	bug2695
BuildCmd:       nolink,upcc
DynamicThreads: 0
#KnownFailure: compile-crash ; trans_opt && trans_os_darwin && trans_cpu_64 ; bug2695 (osx/64-bit translator crash)

TestName:       bug2702
BuildCmd:       nolink,upcc
DynamicThreads: 0
#KnownFailure:   compile-crash ; ; bug2702 (Segfault in writing WHIRL for upc file with array of structures with a string)

TestName:       bug2723
Files:          bug2723.c
StaticThreads:	0 # time-saver since this is a C99 test case
#KnownFailure:   compile-failure ; ; bug2723 (Regression in 2.10.0 translator accessing union)
#KnownFailure:   compile-warning ; cc_sun ; bug2723 (Regression in 2.10.0 translator accessing union)

TestName:       bug2740
BuildCmd:       nolink,upcc
DynamicThreads: 0 # doesn't matter so just pick one
RequireFeature: pragma_upc_code,runtime_upcr # test of detect-upc which uses upcr-specifc #pragma unconditionally 
# Several compilers may warn about the pragma used for this test
# Note: \043 sneaks a '#' past harness
WarningFilter:  cc_clang; '.*? warning: unknown pragma ignored .*?'
WarningFilter:  cc_gnu;   '.*? warning: ignoring \043pragma .*?'
WarningFilter:  cc_open64;'.*? warning: ignoring \043pragma .*?'
WarningFilter:  cc_intel; '.*? warning \043161: unrecognized \043pragma'

TestName:       bug2741
BuildCmd:       nolink,upcc
DynamicThreads: 0 # doesn't matter so just pick one
RequireFeature: pragma_upc_code,runtime_upcr # test of detect-upc which uses upcr-specifc #pragma unconditionally 
# Several compilers may warn about the pragmas used for this test
# Note: \043 sneaks a '#' past harness
WarningFilter:  cc_clang; '.*? warning: unknown pragma ignored .*?'
WarningFilter:  cc_gnu;   '.*? warning: ignoring \043pragma .*?'
WarningFilter:  cc_open64;'.*? warning: ignoring \043pragma .*?'
WarningFilter:  cc_intel; '.*? warning \043161: unrecognized \043pragma'

TestName:       bug2742
CompileResult:	fail	
BuildCmd:       nolink,upcc
DynamicThreads: 0 # doesn't matter so just pick one
RequireFeature: pragma_upc_code,runtime_upcr # test of detect-upc which uses upcr-specifc #pragma unconditionally 

TestName:       bug2743
BuildCmd:       nolink,upcc
DynamicThreads: 0 # only valid w/ static threads

TestName:       bug2778
PassExpr:       ^PASS
FailExpr:       ^FAIL
TimeLimit:      $DEFAULT$
#KnownFailure:   run-match ; ; bug2778 (Bad addressing for 2-D array with automatic block size)

TestName:       bug2781
PassExpr:       ^PASS
TimeLimit:      $DEFAULT$

TestName:       bug2791a
PassExpr:       ^PASS
TimeLimit:      $DEFAULT$

TestName:       bug2791b
PassExpr:       ^PASS
TimeLimit:      $DEFAULT$

# With UPC 1.3 shared array initializers become implementation-dependent
#TestName:       bug2854
#Files:          bug2854.c
#StaticThreads:	0 # time-saver since this is a C99 test case
#PassExpr:       done\.
#FailExpr:       FAIL
#TimeLimit:      $DEFAULT$
#KnownFailure:   compile-warning ; ; Bug 2854 - Bad translation of multi-dimensional partial array initializers
#KnownFailure:   compile-failure ; ; Bug 2854 - Bad translation of multi-dimensional partial array initializers
#KnownFailure:   run-match ; ; Bug 2854 - Bad translation of multi-dimensional partial array initializers

TestName:       bug2857
BuildCmd:       nolink,upcc
Files:          bug2857.c
StaticThreads:	0 # time-saver since this is a C99 test case
KnownFailure:   compile-failure ; ; Bug 2857 - Bug with extern const declarations

TestName:       bug2867a
#KnownFailure:	compile-crash ; ; bug2867 (Compiler assertion failure on comparison of function pointers in shared struct)

TestName:	bug2890
#KnownFailure:	compile-crash ; ; bug2890 (Translator error on accessing a struct member of an union)

TestName:       bug2895
PassExpr:       PASS\.
FailExpr:       FAIL\.
TimeLimit:      $DEFAULT$
WarningFilter:  cc_gnu;   '.*? warning: format .*? argument [0-9] .*?'
WarningFilter:  cc_clang; '.*? warning: conversion specifies type .*?'
WarningFilter:  cc_clang; '.*? warning: format specifies type .*?'

#KnownFailure:	run-match ; symmetricsptr && nodebug ; bug2900 (Initializer failure w/ symmetric pointers)
#KnownFailure:	run-crash ; symmetricsptr && debug   ; bug2900 (Initializer failure w/ symmetric pointers)

TestName:       bug2899
BuildCmd:       nolink,upcc

TestName:       bug2902
Files:		bug2902.c # Test is "plain" C code
CompileResult:	warnfail  # Or perhaps just "fail"?
StaticThreads:	0 # time-saver since this is a C99 test case
PassExpr:	PASSED
FailExpr:	^FAIL
# NOT yet run because there isn't agreement on the correct behavior
KnownFailure:	compile-pass ;; bug 2902 (BUPC doesn't diagnose sizeof() applied to incomplete types as an error)

TestName:	bug2947init
PassExpr:	^PASS
TimeLimit:      $DEFAULT$

TestName:	bug2949
BuildCmd:	nolink,upcc
StaticThreads:	0 # Fails only w/ dynamic threads
#KnownFailure:	compile-failure ; cpu_64 ; bug2949 (translation failing on arrA[1UL * THREADS])

TestName:	bug2956
PassExpr:	^PASS
FailExpr:	^FAIL
TimeLimit:      $DEFAULT$
#KnownFailure:	run-match ; ; bug2956 - side effects of upc_forall() affinity expression are lost

TestName:	bug2958
PassExpr:	^PASS
FailExpr:	^FAIL
TimeLimit:      $DEFAULT$

TestName:	bug2959
# Clang dislikes a code transformation BUPC performs:
WarningFilter:  cc_clang; .*? warning: explicitly assigning a variable of type .*? to itself .*?

TestName:	bug2959a
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug2959b
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug2959c
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug2959d
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug2959e
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug2959f
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug2959g
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug2959h
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug2959i
BuildCmd:	nolink,upcc
CompileResult:	warnfail

TestName:	bug2960
StaticThreads:	1,$DEFAULT$
DynamicThreads:	1,$DEFAULT$
PassExpr:	^PASS
FailExpr:	^FAIL
TimeLimit:      $DEFAULT$

TestName:	bug2962
BuildCmd:	nolink,upcc
#KnownFailure:	compile-crash ;; bug 2962 (Translator crash on addr of shared pointer-to-shared as nested struct field)

TestName:	bug2963
BuildCmd:	nolink,upcc
#KnownFailure:	compile-warning ;; bug 2963 (PTS in shared struct always treated as indefinite)

TestName:	bug2963neg
BuildCmd:	nolink,upcc
CompileResult:	warnfail
#KnownFailure:	compile-pass ;; bug 2963 (PTS in shared struct always treated as indefinite)

TestName:	bug2964
PassExpr:	^PASS
FailExpr:	^FAIL
TimeLimit:	$DEFAULT$
KnownFailure:	compile-failure ; trans_opt ; bug 2964 (opt-specific bad codegen for deref of shared pointer to private pointer to int)
KnownFailure:	compile-warning ; trans_opt && cc_xlc ; bug 2964 (opt-specific bad codegen for deref of shared pointer to private pointer to int)

TestName:	bug2965
RequireFeature:	trans_bupc,trans_opt
Files:		bug2956.upc
Flags:		--opt-enable=forall-opt
PassExpr:	^PASS
FailExpr:	^FAIL
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ; trans_opt ; bug 2965 (forall-opt removes affinity tests w/ side effects)

TestName:	bug2967
#KnownFailure:	compile-failure ; ; bug 2967 (Missing struct definition in translated output)

TestName:	bug2968
RequireFeature: trans_bupc # bupc_assert_type
PassExpr:	^PASS
FailExpr:	^FAIL
TimeLimit:	$DEFAULT$

TestName:	bug2971

TestName:	bug2972
PassExpr:	^PASS
FailExpr:	^FAIL
TimeLimit:	$DEFAULT$
#KnownFailure:	compile-failure ; pthreads ; bug 2972 (Address of extern function translated as TLD when initializing file scope var)

TestName:	bug2973
RequireFeature: trans_bupc # failure expectation is bupc specific - spec is silent on this
CompileResult:	fail	
#KnownFailure:	compile-crash ; ; bug 2973 (crash on initialized shared pointer-to-private)

TestName:	bug2975
PassExpr:	passed\.
FailExpr:	Error:
DynamicThreads: 0
StaticThreads:  $DEFAULT$            # compile for static threads
TimeLimit:      $DEFAULT$

TestName:	bug2979
#KnownFailure: compile-warning ; structsptr && debug ; Bug 2979 - warning on NULL initializer for PTS in struct with struct-PTS

TestName:	bug2981a
CompileResult:	fail	

TestName:	bug2981b
CompileResult:	fail	

TestName:	bug2981c
CompileResult:	fail	

TestName:	bug2981d
CompileResult:	fail	

TestName:	bug2981e
CompileResult:	fail	

TestName:	bug2981f
CompileResult:	fail	

TestName:	bug2986
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:      $DEFAULT$
AppEnv:		runtime_upcr; UPC_SHARED_HEAP_SIZE=10MB UPC_REQUIRE_SHARED_SIZE=yes
# Thrille needs extra memory
AppEnv:                    (_threads <= 4 ) && runtime_upcr && thrille ; UPC_SHARED_HEAP_SIZE=12MB
AppEnv: (_threads >  4) && (_threads <= 8 ) && runtime_upcr && thrille ; UPC_SHARED_HEAP_SIZE=14MB
AppEnv: (_threads >  8) && (_threads <= 12) && runtime_upcr && thrille ; UPC_SHARED_HEAP_SIZE=16MB
AppEnv: (_threads > 12) && (_threads <= 16) && runtime_upcr && thrille ; UPC_SHARED_HEAP_SIZE=18MB
AppEnv: (_threads > 16)                     && runtime_upcr && thrille ; UPC_SHARED_HEAP_SIZE=32MB

TestName:	bug2988
KnownFailure:	compile-failure ; ; Bug 2988 - Invalid codegen accessing member in array of structs

TestName:	bug2992
Files:		bug2992.c
StaticThreads:	0 # time-saver since this is a C99 test case
PassExpr:	^PASS
FailExpr:	^FAIL
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ; cpu_rs6000 || cpu_powerpc || cpu_powerpc64 || cpu_sparc || cpu_mips || cpu_mips64 ; Bug 2992 - Bad translation of narrowing reference to struct member

TestName:	bug2993a
CompileResult:	fail	

TestName:	bug2993b
CompileResult:	fail	

TestName:	bug2993c
CompileResult:	fail	

TestName:	bug2993d
CompileResult:	fail	

TestName:	bug2993e
CompileResult:	fail	

TestName:	bug3009
BuildCmd:	nolink,upcc

TestName:	bug3010
BuildCmd:	nolink,upcc
KnownFailure:	compile-crash ; ; Bug 3010 - W2c assertion failure on multiple assignment involving complex shared array deref
KnownFailure:	compile-warning ; ; Bug 3010 - W2c assertion failure on multiple assignment involving complex shared array deref
KnownFailure:	compile-failure ; structsptr ; Bug 3010 - W2c assertion failure on multiple assignment involving complex shared array deref

TestName:	bug3014
BuildCmd:	nolink,upcc
KnownFailure:	compile-failure ; ; Bug 3014 - Erroneous translator behavior on upc_blocksizeof(shared struct member)

TestName:	bug3015
PassExpr:	^PASS
FailExpr:	^FAIL
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ; cpu_32 || structsptr ; Bug 3015 - offset computation error involving PTS in struct

TestName:	bug3017
BuildCmd:	nolink,upcc
#KnownFailure:	compile-warning ; ; Bug 3017 - Erroneous Conflicting types error involving shared[1] int and shared int

TestName:	bug3036
Files:		bug3036.c
StaticThreads:	0 # time-saver since this is a C99 test case
KnownFailure:	compile-failure ; cc_sun || cc_xlc || cc_mips ; Bug 3036 - translator loses enum types for TLD

TestName:	bug3036a
Files:		bug3036a.c
StaticThreads:	0 # time-saver since this is a C99 test case
KnownFailure:	compile-failure ; cc_sun || cc_xlc || cc_mips ; Bug 3036 - translator loses enum types for TLD

TestName:	bug3036b
Files:		bug3036b.c
StaticThreads:	0 # time-saver since this is a C99 test case
KnownFailure:	compile-failure ; cc_sun || cc_xlc || cc_mips ; Bug 3036 - translator loses enum types for TLD

TestName:	bug3037
Files:          bug3037.c
BuildCmd:	nolink,upcc
StaticThreads:	0 # time-saver since this is a C99 test case
#KnownFailure:	compile-warning ; cc_gnu && debug ; Bug 3037 - wrong spill for conditional operator with string literal

TestName:	bug3038
Files:		bug3038_main.c bug3038_aux.c
PassExpr:	^PASS
FailExpr:	^FAIL
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ; pthreads ; Bug 3038 - TLD failure for variable declared in C-mode header

TestName:	bug3038a
Files:		bug3038a_main.c bug3038a_aux.c
PassExpr:	^PASS
FailExpr:	^FAIL
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ; pthreads ; Bug 3038 - TLD failure for variable declared in C-mode header

TestName:	bug3045
PassExpr:	^done.
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
KnownFailure:	run-all ; trans_opt ; Bug 3046

TestName:	bug3048
DynamicThreads: 0
StaticThreads:  2
PassExpr:	PASS
FailExpr:	FAIL
TimeLimit:	$DEFAULT$
#KnownFailure:	run-match ; ; Bug 3048 - invalid data layout

TestName:	bug3051
PassExpr:	PASS
FailExpr:	FAIL
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ; ; Bug 3051 - Zero sizeof(*p) for pointer to shared VLA

TestName:	bug3052-1
Files:		bug3052.upc
Flags:		-DTEST=1
BuildCmd:	nolink,upcc
CompileResult:	fail	

TestName:	bug3052-2
Files:		bug3052.upc
Flags:		-DTEST=2
BuildCmd:	nolink,upcc
CompileResult:	fail	

TestName:	bug3052-3
Files:		bug3052.upc
Flags:		-DTEST=3
BuildCmd:	nolink,upcc
CompileResult:	fail	

TestName:	bug3052-4
Files:		bug3052.upc
Flags:		-DTEST=4
BuildCmd:	nolink,upcc
CompileResult:	fail	

TestName:	bug3053
DynamicThreads: 0  # Code is only valid for static threads
StaticThreads:  $DEFAULT$
PassExpr:	PASS
TimeLimit:	$DEFAULT$

TestName:	bug3054
BuildCmd:	nolink,upcc
KnownFailure:	compile-warning ; ; Bug 3054 - LD reductions fail to compile when function is passed
KnownFailure:	compile-failure ; ; Bug 3054 - LD reductions fail to compile when function is passed

TestName:	bug3056
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ; ; Bug 3051 - Zero sizeof(*p) for pointer to shared VLA

TestName:	bug3057
DynamicThreads: $DEFAULT$
StaticThreads:  0  # Code is only erroneous for dynamic threads
BuildCmd:	nolink,upcc
CompileResult:	fail	
KnownFailure:	compile-pass ; ; Bug 3057 - failure to diagnose THREADS multiple times w/ dynamic threads

TestName:	bug3058
DynamicThreads: 0  # Code is only valid for static threads
StaticThreads:  $DEFAULT$
PassExpr:	PASS
FailExpr:	FAIL
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ; ; Bug 3058 - zero sizeof(shared VLA typedef)

TestName:	bug3059
PassExpr:	PASS
FailExpr:	FAIL
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ; ; Bug 3059 - zero sizeof(VLA typedef)

# bug3060 requests this support
TestName:       all_free_test
RequireFeature: upc_all_free
PassExpr:       PASS
FailExpr:       FAIL
TimeLimit:      $DEFAULT$

# test of bupc_inverse_cast()
TestName:	bug3079
PassExpr:	^done.
FailExpr:	FAIL
TimeLimit:	$DEFAULT$
RequireFeature: upc_castable,runtime_upcr # Want bupc_inverse_cast as feature?

TestName:	bug3101
Files:		bug3101.c
StaticThreads:	0 # time-saver since this is a C99 test case
BuildCmd:	nolink,upcc
#KnownFailure:	compile-failure ; ; bug3101 (translator crash on extern decl after defn)

TestName:	bug3101a
Files:		bug3101a.c
StaticThreads:	0 # time-saver since this is a C99 test case
BuildCmd:	nolink,upcc
#KnownFailure:	compile-failure ; ; bug3101 (translator crash on extern decl after defn)

TestName:	bug3105
Files:		bug3105.c
StaticThreads:	0 # time-saver since this is a C99 test case
BuildCmd:	nolink,upcc

TestName:	test6_4_2p6
KnownFailure:   compile-warning ; (os_darwin || os_aix || os_openbsd) && (cc_gnu || cc_clang) ; bug925 (gcc printf argument conversion warning for upc_addfield)
DynamicThreads: $DEFAULT$
StaticThreads:  $DEFAULT$
PassExpr:       PASS
FailExpr:       FAIL
TimeLimit:      $DEFAULT$

TestName:	bug3112
PassExpr:	PASS
FailExpr:	FAIL
TimeLimit:	$DEFAULT$
KnownFailure:	compile-failure ; ; bug3112 (2D array of structs containing array incorrectly flattened)

TestName:	upc_tick
RequireFeature:	upc_tick
PassExpr:	done
FailExpr:	ERROR
TimeLimit:	$DEFAULT$

TestName:	bug3124
BuildCmd:	nolink,upcc
CompileResult:	fail	# code is erroneous, but should not crash the compiler
#KnownFailure:	compile-crash ; ; bug3124 (Compiler crash on shared decl using an incomplete typedef)

TestName:	bug3124_u
BuildCmd:	nolink,upcc
CompileResult:	fail	# code is erroneous, but should not crash the compiler
#KnownFailure:	compile-crash ; ; bug3124 (Compiler crash on shared decl using an incomplete typedef)

TestName:	bug3124_e
BuildCmd:	nolink,upcc
CompileResult:	fail	# code is erroneous, but should not crash the compiler
#KnownFailure:	compile-crash ; ; bug3124 (Compiler crash on shared decl using an incomplete typedef)

TestName:	bug3124a
BuildCmd:	nolink,upcc
CompileResult:	fail	# code is erroneous, but should not crash the compiler
#KnownFailure:	compile-crash ; static ; bug3124 (Compiler crash on shared decl using an incomplete typedef)

TestName:	bug3124a_u
BuildCmd:	nolink,upcc
CompileResult:	fail	# code is erroneous, but should not crash the compiler
#KnownFailure:	compile-crash ; static ; bug3124 (Compiler crash on shared decl using an incomplete typedef)

TestName:	bug3124a_e
BuildCmd:	nolink,upcc
CompileResult:	fail	# code is erroneous, but should not crash the compiler
#KnownFailure:	compile-crash ; static ; bug3124 (Compiler crash on shared decl using an incomplete typedef)

TestName:	bug3124_good
BuildCmd:	nolink,upcc

TestName:	bug3126
Files:		bug3126.c
BuildCmd:	nolink,upcc
StaticThreads:	0 # time-saver since this is a C99 test case
CompileResult:	fail	# code is erroneous, but should not crash the compiler
#KnownFailure:	compile-crash ; static ; bug3126 (Compiler crash on TLD decl using an incomplete typedef)

TestName:	bug3126_good
Files:		bug3126_good.c
BuildCmd:	nolink,upcc
StaticThreads:	0 # time-saver since this is a C99 test case

TestName:	dup_quals
BuildCmd:	nolink,upcc

TestName:	bug3149
Files:		bug3149.c
StaticThreads:	0 # time-saver since this is a C89 test case
KnownFailure:	compile-failure ; ; bug 3149 (translator confused by "nested extern" declaration)
# Test REQUIRES a "nested extern" declaration.  So, filter the associated warnings:
WarningFilter:	cc_gnu || cc_open64; .*?warning: nested extern declaration of .value.*?

TestName:	bug3152
PassExpr:	^PASS
FailExpr:	^FAIL
TimeLimit:	$DEFAULT$
KnownFailure:	compile-warning ; static && !structsptr; bug 3152 (wrong layout with [*] and 2D array)
KnownFailure:	compile-failure ; static && structsptr; bug 3152 (wrong layout with [*] and 2D array)
KnownFailure:	run-match ; ; bug 3152 (wrong layout with [*] and 2D array)

TestName:	bug3172

TestName:	bug3192
Files:		bug3192.c
StaticThreads:	0 # time-saver since this is a C99 test case

TestName:	bug3198
StaticThreads:	1 # address arith validation assumes 1 thread
DynamicThreads: 1 # address arith validation assumes 1 thread
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ; ; bug 3198 (bad offset for address of PTS in shared struct)
KnownFailure:	run-crash ; debug ; bug 3198 (bad offset for address of PTS in shared struct)
KnownFailure:	compile-warning ; !structsptr ; bug 3198 (bad offset for address of PTS in shared struct)
KnownFailure:	compile-failure ; structsptr ; bug 3198 (bad offset for address of PTS in shared struct)
WarningFilter:  os_netbsd || os_netbsdelf; .*? warning: [a-z]*() is [a-z ]* misused, please use .*?

TestName:	bug3202
Flags:		-lm
# backend may incorrectly warn due to safe/correct code motion:
WarningFilter:  cc_gnu; .*? warning: ._bupc_mi[89]. might be used uninitialized in this function.*?
#KnownFailure: compile-failure ; ; bug3202 - Incompatible function redeclaration depending on placement

TestName:	bug3203
KnownFailure:	compile-failure ; ; bug3203 - improper "assignment makes pointer-to-shared from pointer-to-private"

TestName:	bug3205
PassExpr:	^done
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
KnownFailure:	run-crash ; debug ; bug3205 - Translator assumes cast-to-local is free of side-effects...

TestName:	bug3210
Files:		bug3210.c
StaticThreads:	0 # time-saver since this is a C99 test case
PassExpr:	^done
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
# This is just until bug 3219 is resolved:
WarningFilter:  cc_gnu; .*? warning: function might be possible candidate for .*?
# clang warns on glibc's inline strcmp when one string is < 3 chars
WarningFilter: (cc_clang || trans_cupc) && nodebug ; .*? warning: array index 3 is past the end of the array .*?

TestName:	bug3230
PassExpr:	^SUCCESS
FailExpr:	ERROR
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ; cc_sun && nodebug ; SunC optimizer oddness on bug3230

TestName:	bug3231
RequireFeature: runtime_upcr, packedsptr
DynamicThreads:	1
StaticThreads:	1
PassExpr:	^PASS
FailExpr:	^FAIL
TimeLimit:	$DEFAULT$
KnownFailure:	run-match ; cpu_32 && (os_cygwin || cpu_powerpc || cpu_sparc || cpu_mips); Bug 3231 - offsetof(.,PTS) incorrect on some ILP32 ABIs
